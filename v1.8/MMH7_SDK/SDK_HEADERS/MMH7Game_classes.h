#pragma once 

/*
#############################################################################################
# Might and Magic Heroes 7 (1.0.8364.0) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51 x64
# ========================================================================================= #
# File: MMH7Game_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_INSTANT_COMMAND_MAX_INT_PARAMS                     8
#define CONST_MAX_PRIVILEGES_COUNT                               20
#define CONST_NORMAL_COMMAND_MAX_INT_PARAMS                      15
#define CONST_MP_MAX_PATH_LENGTH                                 25
#define CONST_MP_MAX_EXT_PATH_LENGTH                             100
#define CONST_MP_MAX_TARGET_UNITS                                16
#define CONST_MP_MAX_ARMY_UNITS                                  15
#define CONST_CELL_SIZE                                          192.0f
#define CONST_MAX_ARMY_SIZE                                      7
#define CONST_HERO_FLAG_OFFSET                                   550.0f
#define CONST_CREATURE_FLAG_OFFSET                               550.0f
#define CONST_NEUTRAL_ARMY_KEY                                   "TT_NEUTRAL_ARMY"
#define CONST_NEUTRAL_ARMY_SECTION                               "H7GFxActorTooltip"
#define CONST_ADVENTURE_ARMY_NAME_KEY                            "mName"
#define CONST_CELL_CHECK_INTERVAL                                100
#define CONST_OBSTACLES_HIGHT_TRESHHOLD                          50
#define CONST_RETREAT_TIMER                                      20
#define CONST_DEFAULT_INITIATIVE                                 1
#define CONST_MANA_MULTIPLIER                                    10
#define CONST_ATTACK_CURSOR_OFFSET_X                             -16
#define CONST_ATTACK_CURSOR_OFFSET_Y                             -32
#define CONST_TACTICS_CURSOR_OFFSET_X                            -16
#define CONST_TACTICS_CURSOR_OFFSET_Y                            -16
#define CONST_INFINITE                                           1000000.0f
#define CONST_DECAL_OFFSET                                       200.0f
#define CONST_WAYPOINT_ICON_WIDTH                                192
#define CONST_WAYPOINT_ICON_HEIGHT                               192
#define CONST_TURN_ICON_WIDTH                                    72
#define CONST_TURN_ICON_HEIGHT                                   72
#define CONST_PATH_ICON_WIDTH                                    68
#define CONST_PATH_ICON_HEIGHT                                   68
#define CONST_SPOT_MATERIAL_NAME                                 "FX_Units.Adventure.M_PathSpot"
#define CONST_TARGET_MATERIAL_NAME                               "FX_Units.Adventure.M_PathTarget"
#define CONST_WAYPOINT_MATERIAL_NAME                             "FX_Units.Adventure.M_PathWaypoint"
#define CONST_TURN_MATERIAL_NAME                                 "FX_Units.Adventure.M_PathWaypointTurn"
#define CONST_TURN_TEXTURE_NAME                                  "FX_Units.Adventure.T_PathWaypointTurn"
#define CONST_HOVER_MATERIAL_NAME                                "FX_Units.Adventure.M_Hover"
#define CONST_MAX_ELAPSED_TIME_FOR_CALCULATION_PER_FRAME         18.0f
#define CONST_SCROLL_MAGIC_POWER                                 30
#define CONST_CAMERA_GROUND_CLIPPING_TRESHHOLD                   500.f
#define CONST_CHEAT_STAT_INCREASE                                5
#define CONST_TACTICS_PHASE_TIMER                                60
#define CONST_WEST_ANGLE                                         0
#define CONST_NORTH_WEST_ANGLE                                   8192
#define CONST_NORTH_ANGLE                                        16384
#define CONST_NORTH_EAST_ANGLE                                   24576
#define CONST_EAST_ANGLE                                         32768
#define CONST_SOUTH_EAST_ANGLE                                   40960
#define CONST_SOUTH_ANGLE                                        49152
#define CONST_SOUTH_WEST_ANGLE                                   57344
#define CONST_WARFARE_UNIT_GRID_BUFFER_SIZE                      4
#define CONST_NUM_COMBAT_PLAYERS                                 2
#define CONST_MAX_RESULTS                                        42
#define CONST_POWER_ATTACK_MOD                                   1
#define CONST_POWER_MAGIC_DEFENSE_MOD                            1
#define CONST_POWER_MIGHT_DEFENSE_MOD                            1
#define CONST_POWER_DESTINY_MOD                                  1
#define CONST_POWER_LEADERSHIP_MOD                               1
#define CONST_POWER_HEALTH_MOD                                   0.3f
#define CONST_WAIT_TIME_TO_TRIGGER_SPECIAL_ANIM                  60.f
#define CONST_HEIGHT_TO_TIME_MULT                                0.002f
#define CONST_MIN_FLY_HEIGHT                                     50.0f
#define CONST_FLY_HEIGHT_OVER_OBSTACLE                           100.0f
#define CONST_HEIGHT_TO_TIME_MULT01                              2.0f
#define CONST_MIN_JUMP_HEIGHT                                    500.0f
#define CONST_JUMP_HEIGHT_OVER_OBSTACLE                          350.0f
#define CONST_MAX_DIST_1X1_FLYUNITS_WALK                         1
#define CONST_MAX_DIST_2X2_FLYUNITS_WALK                         2
#define CONST_MAX_DIST_1X1_TELEPORTUNITS_WALK                    2
#define CONST_MAX_DIST_2X2_TELEPORTUNITS_WALK                    3
#define CONST_MOVE_SPEED_DILATION                                2
#define CONST_DEFAULT_MAP_HEIGHT                                 10
#define CONST_DefaultCreatureSize                                210.0f
#define CONST_GROW_SIZE                                          2.5f
#define CONST_GROW_SIZE_PERM                                     1.7f
#define CONST_SPEED_MOD_PERM                                     0.3f
#define CONST_FIELD_OF_VIEW                                      50.0f
#define CONST_MAT_PARAMNAME                                      'DecalRotation'
#define CONST_DEFAULT_HEIGHT                                     32
#define CONST_DEFAULT_WIDTH                                      32
#define CONST_DEFAULT_FARPLANE                                   600
#define CONST_PLAYERPROFILE_REVISION                             5
#define CONST_MAX_BIG_CREATURE_STACKS                            4
#define CONST_TARGETABLE_ARRAY_PAGE_SIZE                         1000
#define CONST_SPRING_CONST                                       1.0f
#define CONST_MIN_EPSILON                                        0.01f
#define CONST_MIN_BORDER                                         0.1
#define CONST_MAX_PASSES                                         5000
#define CONST_AREA_SIZE                                          1000
#define CONST_CLUSTER_SIZE                                       3
#define CONST_SMALL_ZONE_VAL                                     0.401f
#define CONST_SLOT_PROFILE                                       960
#define CONST_SLOT_QUICKSAVE                                     970
#define CONST_SLOT_OFFICIALCAMPAIGNTRANSITION                    975
#define CONST_SLOT_AUTOSAVE_AREA_START                           980
#define CONST_SLOT_AUTOSAVE_COUNT                                8
#define CONST_SLOT_FREE_AREA_START                               1000
#define CONST_CONTENT_KEY                                        "_Content"
#define CONST_STAGE_MAX                                          9
#define CONST_SHIP_OFFSET_ROT                                    Rot( 0, -32768, 0 )
#define CONST_SYNCHRNG_REFILL_SIZE                               8192
#define CONST_SYNCHRNG_MIN_POOL_SIZE                             4096
#define CONST_MaxSpellsRankUnskilled                             7
#define CONST_MaxSpellsRankNovice                                6
#define CONST_MaxSpellsRankExpert                                4
#define CONST_MaxSpellsRankMaster                                2
#define CONST_SAVEGAMESTATE_REVISION                             1

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECreatureTier
/*enum ECreatureTier
{
	CTIER_CORE                                         = 0,
	CTIER_ELITE                                        = 1,
	CTIER_CHAMPION                                     = 2,
	CTIER_MAX                                          = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAbilitySchool
/*enum EAbilitySchool
{
	MIGHT                                              = 0,
	AIR_MAGIC                                          = 1,
	DARK_MAGIC                                         = 2,
	EARTH_MAGIC                                        = 3,
	FIRE_MAGIC                                         = 4,
	LIGHT_MAGIC                                        = 5,
	PRIME_MAGIC                                        = 6,
	WATER_MAGIC                                        = 7,
	ALL_MAGIC                                          = 8,
	All                                                = 9,
	ABILITY_SCHOOL_NONE                                = 10,
	EAbilitySchool_MAX                                 = 11
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ERandomSiteFaction
/*enum ERandomSiteFaction
{
	E_H7_RSF_PLAYER                                    = 0,
	E_H7_RSF_RANDOM                                    = 1,
	E_H7_RSF_AS_ANOTHER_TOWN                           = 2,
	E_H7_RSF_DIFFERENT_FROM_ANOTHER_TOWN               = 3,
	E_H7_RSF_MAX                                       = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EVictoryCondition
/*enum EVictoryCondition
{
	E_H7_VC_DEFAULT                                    = 0,
	E_H7_VC_STANDARD                                   = 1,
	E_H7_VC_ASHA                                       = 2,
	E_H7_VC_FORTS                                      = 3,
	E_H7_VC_MAX                                        = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECreatureLevel
/*enum ECreatureLevel
{
	E_H7_CL_Level1                                     = 0,
	E_H7_CL_Level2                                     = 1,
	E_H7_CL_Level3                                     = 2,
	E_H7_CL_Level4                                     = 3,
	E_H7_CL_Level5                                     = 4,
	E_H7_CL_MAX                                        = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EConditionTimeUnit
/*enum EConditionTimeUnit
{
	CTU_DAYS                                           = 0,
	CTU_WEEKS                                          = 1,
	CTU_MAX                                            = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EArmyCompositionType
/*enum EArmyCompositionType
{
	EACT_ANY                                           = 0,
	EACT_BASIC                                         = 1,
	EACT_UPGRADED                                      = 2,
	EACT_MAX                                           = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerStatus
/*enum EPlayerStatus
{
	PLAYERSTATUS_UNUSED                                = 0,
	PLAYERSTATUS_ACTIVE                                = 1,
	PLAYERSTATUS_INACTIVE                              = 2,
	PLAYERSTATUS_QUIT                                  = 3,
	PLAYERSTATUS_MAX                                   = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EChatChannel
/*enum EChatChannel
{
	CHAT_ALL                                           = 0,
	CHAT_TEAM                                          = 1,
	CHAT_WHISPER                                       = 2,
	CHAT_WHISPER_P1                                    = 3,
	CHAT_WHISPER_P2                                    = 4,
	CHAT_WHISPER_P3                                    = 5,
	CHAT_WHISPER_P4                                    = 6,
	CHAT_WHISPER_P5                                    = 7,
	CHAT_WHISPER_P6                                    = 8,
	CHAT_WHISPER_P7                                    = 9,
	CHAT_WHISPER_P8                                    = 10,
	CHAT_MAX                                           = 11
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EEditorObjectEditOperation
/*enum EEditorObjectEditOperation
{
	E_H7_EOO_STARTUP                                   = 0,
	E_H7_EOO_MOVED                                     = 1,
	E_H7_EOO_DELETED                                   = 2,
	E_H7_EOO_ENTRANCECHANGED                           = 3,
	E_H7_EOO_MAX                                       = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAdventureMapFinishedCondition
/*enum EAdventureMapFinishedCondition
{
	E_H7_AMFC_WIN                                      = 0,
	E_H7_AMFC_LOSE                                     = 1,
	E_H7_AMFC_ALWAYS                                   = 2,
	E_H7_AMFC_MAX                                      = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ELogTextOptions
/*enum ELogTextOptions
{
	LTO_AS_DISPLAYED                                   = 0,
	LTO_SUPPRESS                                       = 1,
	LTO_ALWAYS                                         = 2,
	LTO_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EFloatingTextOptions
/*enum EFloatingTextOptions
{
	FTO_AS_DISPLAYED                                   = 0,
	FTO_SUPPRESS                                       = 1,
	FTO_ALWAYS                                         = 2,
	FTO_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EOperationType
/*enum EOperationType
{
	OP_TYPE_MULTIPLY                                   = 0,
	OP_TYPE_ADD                                        = 1,
	OP_TYPE_ADDPERCENT                                 = 2,
	OP_TYPE_SET                                        = 3,
	OP_TYPE_CHOOSE_ADD                                 = 4,
	OP_TYPE_BUY_ADD                                    = 5,
	OP_TYPE_MAX                                        = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAchievementType
/*enum EAchievementType
{
	ACHT_Combat                                        = 0,
	ACHT_Adventure                                     = 1,
	ACHT_Map                                           = 2,
	ACHT_Misc                                          = 3,
	ACHT_MAX                                           = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.MapState
/*enum MapState
{
	MST_NotStarted                                     = 0,
	MST_InProgress                                     = 1,
	MST_Completed                                      = 2,
	MST_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EWindowMode
/*enum EWindowMode
{
	WM_WINDOW                                          = 0,
	WM_FULLSCREEN                                      = 1,
	WM_BORDERLESS_WINDOW                               = 2,
	WM_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDifficultyStartResources
/*enum EDifficultyStartResources
{
	DSR_ABUNDANCE                                      = 0,
	DSR_AVERAGE                                        = 1,
	DSR_LIMITED                                        = 2,
	DSR_SHORTAGE                                       = 3,
	DSR_MAX                                            = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDifficulty
/*enum EDifficulty
{
	DIFFICULTY_EASY                                    = 0,
	DIFFICULTY_NORMAL                                  = 1,
	DIFFICULTY_HARD                                    = 2,
	DIFFICULTY_HEROIC                                  = 3,
	DIFFICULTY_CUSTOM                                  = 4,
	DIFFICULTY_MAX                                     = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDifficultyCritterStartSize
/*enum EDifficultyCritterStartSize
{
	DCSS_FEW                                           = 0,
	DCSS_AVERAGE                                       = 1,
	DCSS_MANY                                          = 2,
	DCSS_HORDES                                        = 3,
	DCSS_MAX                                           = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDifficultyCritterGrowthRate
/*enum EDifficultyCritterGrowthRate
{
	DCGR_SLOW                                          = 0,
	DCGR_AVERAGE                                       = 1,
	DCGR_FAST                                          = 2,
	DCGR_PROLIFIC                                      = 3,
	DCGR_MAX                                           = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDifficultyAIEcoStrength
/*enum EDifficultyAIEcoStrength
{
	DAIES_POOR                                         = 0,
	DAIES_AVERAGE                                      = 1,
	DAIES_PROSPEROUS                                   = 2,
	DAIES_RICH                                         = 3,
	DAIES_MAX                                          = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EStat
enum EStat
{
	STAT_ATTACK                                        = 0,
	STAT_DEFENSE                                       = 1,
	STAT_LUCK_DESTINY                                  = 2,
	STAT_MORALE_LEADERSHIP                             = 3,
	STAT_MAX_MOVEMENT                                  = 4,
	STAT_CURRENT_MOVEMENT                              = 5,
	STAT_MIN_DAMAGE                                    = 6,
	STAT_MAX_DAMAGE                                    = 7,
	STAT_HERO_MIN_DAMAGE_PER_LEVEL                     = 8,
	STAT_HERO_MAX_DAMAGE_PER_LEVEL                     = 9,
	STAT_HEALTH                                        = 10,
	STAT_RANGE                                         = 11,
	STAT_PICKUP_COST                                   = 12,
	STAT_SIGHT_RADIUS                                  = 13,
	STAT_INITIATIVE                                    = 14,
	STAT_MANA_COST                                     = 15,
	STAT_MANA                                          = 16,
	STAT_CURRENT_MANA                                  = 17,
	STAT_MANA_REGEN                                    = 18,
	STAT_TRADE_RATE_BONUS                              = 19,
	STAT_XP_RATE                                       = 20,
	STAT_CURRENT_XP                                    = 21,
	STAT_SPIRIT                                        = 22,
	STAT_MAGIC                                         = 23,
	STAT_BATTLERAGE                                    = 24,
	STAT_MAX_DEPLOY_NUM                                = 25,
	STAT_MAX_DEPLOY_ROW                                = 26,
	STAT_PRODUCTION                                    = 27,
	STAT_PLUNDER_GAIN_MOD                              = 28,
	STAT_MERCHANT_BUY                                  = 29,
	STAT_MERCHANT_SELL                                 = 30,
	STAT_TERRAIN_COST                                  = 31,
	STAT_ATTACK_COUNT                                  = 32,
	STAT_MOVE_COUNT                                    = 33,
	STAT_FLANKING_MULTIPLIER_BONUS                     = 34,
	STAT_GOLDGAIN_CHEST                                = 35,
	STAT_NEGOTIATION                                   = 36,
	STAT_SURRENDER_COST_MODIFIER                       = 37,
	STAT_FOREIGN_MORALE_PENALTY_MODIFIER               = 38,
	STAT_CORE_PRODUCTION                               = 39,
	STAT_ELITE_PRODUCTION                              = 40,
	STAT_CHAMPION_PRODUCTION                           = 41,
	STAT_MORAL_CAP                                     = 42,
	STAT_NECROMANCY                                    = 43,
	STAT_LOCAL_GUARD_CORE_MAX_CAPACITY                 = 44,
	STAT_LOCAL_GUARD_ELITE_MAX_CAPACITY                = 45,
	STAT_LUCK_CAP                                      = 46,
	STAT_LAND_MOVEMENT                                 = 47,
	STAT_WATER_MOVEMENT                                = 48,
	STAT_BASE_MOVEMENT                                 = 49,
	STAT_GROWTH_BONUS_PRODUCTION                       = 50,
	STAT_SPY_INFILTRATION_TARGETS                      = 51,
	STAT_NEUTRAL_CREATURE_COST                         = 52,
	STAT_LUCK_MIN                                      = 53,
	STAT_MORALE_MIN                                    = 54,
	STAT_METAMAGIC                                     = 55,
	STAT_METAMAGIC_CAP                                 = 56,
	STAT_MAGIC_ABS                                     = 57,
	STAT_ARCANE_KNOWLEDGE                              = 58,
	STAT_BUILDING_COSTS                                = 59,
	STAT_DIPLOMACY_MOD                                 = 60,
	STAT_MAX                                           = 61
};

// Enum MMH7Game.H7StructsAndEnumsNative.EResourceRank
/*enum EResourceRank
{
	RRANK_COMMON                                       = 0,
	RRANK_RARE                                         = 1,
	RRANK_MAX                                          = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EFlankingType
/*enum EFlankingType
{
	NO_FLANKING                                        = 0,
	FLANKING                                           = 1,
	FULL_FLANKING                                      = 2,
	EFlankingType_MAX                                  = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerNumber
/*enum EPlayerNumber
{
	PN_NEUTRAL_PLAYER                                  = 0,
	PN_PLAYER                                          = 1,
	PN_PLAYER01                                        = 2,
	PN_PLAYER02                                        = 3,
	PN_PLAYER03                                        = 4,
	PN_PLAYER04                                        = 5,
	PN_PLAYER05                                        = 6,
	PN_PLAYER06                                        = 7,
	PN_PLAYER07                                        = 8,
	PN_PLAYER_NONE                                     = 9,
	PN_MAX                                             = 10
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EModQuantityOper
/*enum EModQuantityOper
{
	EMQO_ADD                                           = 0,
	EMQO_SUB                                           = 1,
	EMQO_SET                                           = 2,
	EMQO_MAX                                           = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ETier
/*enum ETier
{
	ITIER_MINOR                                        = 0,
	ITIER_MAJOR                                        = 1,
	ITIER_RELIC                                        = 2,
	ITIER_CONSUMABLE                                   = 3,
	ITIER_MINOR_MAJOR                                  = 4,
	ITIER_ALL                                          = 5,
	ITIER_MAX                                          = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECartographerType
/*enum ECartographerType
{
	CARTYPE_LAND                                       = 0,
	CARTYPE_SEA                                        = 1,
	CARTYPE_MAX                                        = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EItemType
/*enum EItemType
{
	ITYPE_HELMET                                       = 0,
	ITYPE_WEAPON                                       = 1,
	ITYPE_CHEST_ARMOR                                  = 2,
	ITYPE_GLOVES                                       = 3,
	ITYPE_SHOES                                        = 4,
	ITYPE_NECKLACE                                     = 5,
	ITYPE_RING                                         = 6,
	ITYPE_CAPE                                         = 7,
	ITYPE_SCROLL                                       = 8,
	ITYPE_CONSUMABLE                                   = 9,
	ITYPE_INVENTORY_ONLY                               = 10,
	ITYPE_ALL                                          = 11,
	ITYPE_MAX                                          = 12
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.H7MultiplierType
/*enum H7MultiplierType
{
	MT_RES_VUL_IMM                                     = 0,
	MT_RESIST                                          = 1,
	MT_VUL                                             = 2,
	MT_IMMUNE                                          = 3,
	MT_ATT_DEF_POINT_DIFF                              = 4,
	MT_SHIELDED                                        = 5,
	MT_MORAL                                           = 6,
	MT_MELEE                                           = 7,
	MT_RANGE                                           = 8,
	MT_COVER                                           = 9,
	MT_SHIELDER                                        = 10,
	MT_FLANK_FULL                                      = 11,
	MT_FLANK_HALF                                      = 12,
	MT_DISTANCE_MOD                                    = 13,
	MT_CHAIN                                           = 14,
	MT_COLLAPSE                                        = 15,
	MT_GENERAL_ATTACK                                  = 16,
	MT_GENERAL_DEFENSE                                 = 17,
	MT_MAX                                             = 18
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHeroAiAggressiveness
/*enum EHeroAiAggressiveness
{
	HAG_SHEEP                                          = 0,
	HAG_CONTAINED                                      = 1,
	HAG_BALANCED                                       = 2,
	HAG_HOSTILE                                        = 3,
	HAG_NEFARIOUS                                      = 4,
	HAG_MAX                                            = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAIDifficulty
/*enum EAIDifficulty
{
	AI_DIFFICULTY_EASY                                 = 0,
	AI_DIFFICULTY_NORMAL                               = 1,
	AI_DIFFICULTY_HARD                                 = 2,
	AI_DIFFICULTY_HEROIC                               = 3,
	AI_DIFFICULTY_MAX                                  = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EScriptedBehaviour
/*enum EScriptedBehaviour
{
	ESB_None                                           = 0,
	ESB_Scripted                                       = 1,
	ESB_ScriptedUseResources                           = 2,
	ESB_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EOnlineSettingsProperties
/*enum EOnlineSettingsProperties
{
	OSP_NUM_PUBLIC_CONNECTIONS                         = 0,
	OSP_SERVERNAME                                     = 1,
	OSP_MAPINFONUMBER                                  = 2,
	OSP_MAPFILENAME                                    = 3,
	OSP_TURNTYPE                                       = 4,
	OSP_SKILLTYPE                                      = 5,
	OSP_NUMCLOSEDSLOTS                                 = 6,
	OSP_NUMAISLOTS                                     = 7,
	OSP_GAMETYPE                                       = 8,
	OSP_ISGAMESTARTED                                  = 9,
	OSP_SESSION_ID                                     = 10,
	OSP_ISSAVEDGAME                                    = 11,
	OSP_VICTORYCONDITION                               = 12,
	OSP_USERANDOMPOSITION                              = 13,
	OSP_GAMESPEEDADVENTURE                             = 14,
	OSP_GAMESPEEDADVENTUREAI                           = 15,
	OSP_GAMESPEEDCOMBAT                                = 16,
	OSP_TIMERCOMBAT                                    = 17,
	OSP_TIMERADV                                       = 18,
	OSP_FORCEQUICKCOMBAT                               = 19,
	OSP_TEAMSCANTRADE                                  = 20,
	OSP_DIFFICULTY                                     = 21,
	OSP_TEAMSETUP                                      = 22,
	OSP_NAT_TYPE                                       = 23,
	OSP_MAX                                            = 24
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHeroAiControlType
/*enum EHeroAiControlType
{
	HCT_STANDARD                                       = 0,
	HCT_SCRIPT_OVERRIDE                                = 1,
	HCT_EXPLORER                                       = 2,
	HCT_GATHERER                                       = 3,
	HCT_HOMEGUARD                                      = 4,
	HCT_GENERAL                                        = 5,
	HCT_MAX                                            = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EQuestOrObjectiveStatus
/*enum EQuestOrObjectiveStatus
{
	QOS_ONGOING                                        = 0,
	QOS_COMPLETED                                      = 1,
	QOS_FAILED                                         = 2,
	QOS_ACTIVATED                                      = 3,
	QOS_MAX                                            = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHeroAiRole
/*enum EHeroAiRole
{
	HRL_GENERAL                                        = 0,
	HRL_MAIN                                           = 1,
	HRL_SECONDARY                                      = 2,
	HRL_SCOUT                                          = 3,
	HRL_SUPPORT                                        = 4,
	HRL_MULE                                           = 5,
	HRL_MAX                                            = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESkillRank
/*enum ESkillRank
{
	SR_ALL_RANKS                                       = 0,
	SR_UNSKILLED                                       = 1,
	SR_NOVICE                                          = 2,
	SR_EXPERT                                          = 3,
	SR_MASTER                                          = 4,
	SR_MAX                                             = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerTargetType
/*enum EPlayerTargetType
{
	PLAYER_TYPE_ALL                                    = 0,
	PLAYER_TYPE_ONE                                    = 1,
	PLAYER_TYPE_ALL_ENEMIES                            = 2,
	PLAYER_TYPE_ALL_ALLIES                             = 3,
	PLAYER_TYPE_MAX                                    = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESpyInfoState
/*enum ESpyInfoState
{
	ESIS_locked                                        = 0,
	ESIS_spying                                        = 1,
	ESIS_new                                           = 2,
	ESIS_unlocked                                      = 3,
	ESIS_dead                                          = 4,
	ESIS_Plundering                                    = 5,
	ESIS_Sabotaging                                    = 6,
	ESIS_MAX                                           = 7
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ETeamSetup
/*enum ETeamSetup
{
	TEAM_CUSTOM                                        = 0,
	TEAM_MAP_DEFAULT                                   = 1,
	TEAM_NO_TEAMS                                      = 2,
	TEAM_MAX                                           = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ETeamNumber
/*enum ETeamNumber
{
	TN_NO_TEAM                                         = 0,
	TN_TEAM                                            = 1,
	TN_TEAM01                                          = 2,
	TN_TEAM02                                          = 3,
	TN_TEAM03                                          = 4,
	TN_TEAM04                                          = 5,
	TN_TEAM05                                          = 6,
	TN_TEAM06                                          = 7,
	TN_TEAM07                                          = 8,
	TN_MAX                                             = 9
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ETimerCombat
/*enum ETimerCombat
{
	TIMER_COMBAT_NONE                                  = 0,
	TIMER_COMBAT_10_SECONDS                            = 1,
	TIMER_COMBAT_15_SECONDS                            = 2,
	TIMER_COMBAT_20_SECONDS                            = 3,
	TIMER_COMBAT_30_SECONDS                            = 4,
	TIMER_COMBAT_60_SECONDS                            = 5,
	TIMER_COMBAT_MAX                                   = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ETimerAdv
/*enum ETimerAdv
{
	TIMER_ADV_NONE                                     = 0,
	TIMER_ADV_2_MINUTES                                = 1,
	TIMER_ADV_3_MINUTES                                = 2,
	TIMER_ADV_5_MINUTES                                = 3,
	TIMER_ADV_10_MINUTES                               = 4,
	TIMER_ADV_15_MINUTES                               = 5,
	TIMER_ADV_MAX                                      = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EForceQuickCombat
/*enum EForceQuickCombat
{
	FQC_NEVER                                          = 0,
	FQC_AGAINST_AI                                     = 1,
	FQC_ALWAYS                                         = 2,
	FQC_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESaveType
/*enum ESaveType
{
	SAVETYPE_NONE                                      = 0,
	SAVETYPE_MANUAL                                    = 1,
	SAVETYPE_QUICK                                     = 2,
	SAVETYPE_AUTO                                      = 3,
	SAVETYPE_MAX                                       = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EGameSpeed
/*enum EGameSpeed
{
	GS_NORMAL                                          = 0,
	GS_FAST                                            = 1,
	GS_VERY_FAST                                       = 2,
	GS_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerNumberWithoutNeutral
/*enum EPlayerNumberWithoutNeutral
{
	PNWE_PLAYER                                        = 0,
	PNWE_PLAYER01                                      = 1,
	PNWE_PLAYER02                                      = 2,
	PNWE_PLAYER03                                      = 3,
	PNWE_PLAYER04                                      = 4,
	PNWE_PLAYER05                                      = 5,
	PNWE_PLAYER06                                      = 6,
	PNWE_PLAYER07                                      = 7,
	PNWE_PLAYER_MAX                                    = 8
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EGameLoseConditionType
/*enum EGameLoseConditionType
{
	EGameLoseConditionType_Standard                    = 0,
	EGameLoseConditionType_LoseTown                    = 1,
	EGameLoseConditionType_LoseHero                    = 2,
	EGameLoseConditionType_TimeLimit                   = 3,
	EGameLoseConditionType_Disabled                    = 4,
	EGameLoseConditionType_MAX                         = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerSlotState
/*enum EPlayerSlotState
{
	EPlayerSlotState_Undefined                         = 0,
	EPlayerSlotState_Closed                            = 1,
	EPlayerSlotState_Open                              = 2,
	EPlayerSlotState_Occupied                          = 3,
	EPlayerSlotState_AI                                = 4,
	EPlayerSlotState_MAX                               = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerSlot
/*enum EPlayerSlot
{
	EPlayerSlot_Closed                                 = 0,
	EPlayerSlot_UserDefine                             = 1,
	EPlayerSlot_Human                                  = 2,
	EPlayerSlot_AI                                     = 3,
	EPlayerSlot_MAX                                    = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerColor
/*enum EPlayerColor
{
	PCOLOR_BLUE                                        = 0,
	PCOLOR_CYAN                                        = 1,
	PCOLOR_TURQUOISE                                   = 2,
	PCOLOR_GOLD                                        = 3,
	PCOLOR_GREEN                                       = 4,
	PCOLOR_NEUTRAL                                     = 5,
	PCOLOR_SILVER                                      = 6,
	PCOLOR_ORANGE                                      = 7,
	PCOLOR_PURPLE                                      = 8,
	PCOLOR_RED                                         = 9,
	PCOLOR_SIENA                                       = 10,
	PCOLOR_TEAL                                        = 11,
	PCOLOR_ULTRAMARINE                                 = 12,
	PCOLOR_AMETHYST                                    = 13,
	PCOLOR_EMERALD                                     = 14,
	PCOLOR_MAX                                         = 15
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EStartPosition
/*enum EStartPosition
{
	START_POSITION_RANDOM                              = 0,
	START_POSITION                                     = 1,
	START_POSITION01                                   = 2,
	START_POSITION02                                   = 3,
	START_POSITION03                                   = 4,
	START_POSITION04                                   = 5,
	START_POSITION05                                   = 6,
	START_POSITION06                                   = 7,
	START_POSITION07                                   = 8,
	START_POSITION_MAX                                 = 9
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EGameWinConditionType
/*enum EGameWinConditionType
{
	EGameWinConditionType_Standard                     = 0,
	EGameWinConditionType_AcquireArtifact              = 1,
	EGameWinConditionType_AccumulateCreatures          = 2,
	EGameWinConditionType_AccumulateResources          = 3,
	EGameWinConditionType_TearOfAsha                   = 4,
	EGameWinConditionType_DefeatHero                   = 5,
	EGameWinConditionType_CaptureTown                  = 6,
	EGameWinConditionType_DefeatArmy                   = 7,
	EGameWinConditionType_ControlAllForts              = 8,
	EGameWinConditionType_ControlAllMines              = 9,
	EGameWinConditionType_TransportArtifact            = 10,
	EGameWinConditionType_UserDefined                  = 11,
	EGameWinConditionType_Disabled                     = 12,
	EGameWinConditionType_MAX                          = 13
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPlayerType
/*enum EPlayerType
{
	PLAYER_HUMAN                                       = 0,
	PLAYER_AI                                          = 1,
	PLAYER_MAX                                         = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EH7MapSize
/*enum EH7MapSize
{
	E_H7_MS_SMALL                                      = 0,
	E_H7_MS_SMALL_BROAD                                = 1,
	E_H7_MS_NORMAL                                     = 2,
	E_H7_MS_NORMAL_BROAD                               = 3,
	E_H7_MS_BIG                                        = 4,
	E_H7_MS_BIG_BROAD                                  = 5,
	E_H7_MS_HUGE                                       = 6,
	E_H7_MS_MAX                                        = 7
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EH7ProgressUnit
/*enum EH7ProgressUnit
{
	E_H7_PU_COUNTER                                    = 0,
	E_H7_PU_DAYS                                       = 1,
	E_H7_PU_WEEKS                                      = 2,
	E_H7_PU_MAX                                        = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EQuickCombatSubstitute
/*enum EQuickCombatSubstitute
{
	QC_HITPOINTS                                       = 0,
	QC_DEFENSE                                         = 1,
	QC_ATTACK                                          = 2,
	QC_INITIATIVE                                      = 3,
	QC_MORALE                                          = 4,
	QC_LUCK                                            = 5,
	QC_DAMAGE                                          = 6,
	QC_MAGIC                                           = 7,
	QC_MAX                                             = 8
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAttackRange
/*enum EAttackRange
{
	CATTACKRANGE_ZERO                                  = 0,
	CATTACKRANGE_HALF                                  = 1,
	CATTACKRANGE_FULL                                  = 2,
	CATTACKRANGE_MAX                                   = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EQuickCombatStackType
/*enum EQuickCombatStackType
{
	QCST_CREATURE                                      = 0,
	QCST_WARFARE                                       = 1,
	QCST_TOWER                                         = 2,
	QCST_MAX                                           = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESkillTier
/*enum ESkillTier
{
	SKTIER_MINOR                                       = 0,
	SKTIER_MASTER                                      = 1,
	SKTIER_GARNDMASTER                                 = 2,
	SKTIER_MAX                                         = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EMovementType
/*enum EMovementType
{
	CMOVEMENT_WALK                                     = 0,
	CMOVEMENT_FLY                                      = 1,
	CMOVEMENT_TELEPORT                                 = 2,
	CMOVEMENT_GHOSTWALK                                = 3,
	CMOVEMENT_STATIC                                   = 4,
	CMOVEMENT_JUMP                                     = 5,
	CMOVEMENT_SHROUD                                   = 6,
	CMOVEMENT_MAX                                      = 7
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EUnitType
/*enum EUnitType
{
	UNIT_HERO                                          = 0,
	UNIT_CREATURESTACK                                 = 1,
	UNIT_WARUNIT                                       = 2,
	UNIT_TOWER                                         = 3,
	ENTITY_TYPE_ADV_BUILDING                           = 4,
	ENTITY_TYPE_CELL                                   = 5,
	ENTITY_TYPE_OBSTACLE                               = 6,
	ENTITY_TYPE_ADV_GRID                               = 7,
	ENTITY_TYPE_COMBAT_GRID                            = 8,
	ENTITY_TYPE_PLAYER                                 = 9,
	ENTITY_TYPE_TOWN                                   = 10,
	ENTITY_TYPE_FORT                                   = 11,
	ENTITY_TYPE_DWELLING                               = 12,
	ENTITY_TYPE_MINE                                   = 13,
	ENTITY_TYPE_MERCHANT                               = 14,
	ENTITY_TYPE_ADVENTURE_OBJECT                       = 15,
	ENTITY_TYPE_TOWN_BUILDING                          = 16,
	EUnitType_MAX                                      = 17
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECameraMode
/*enum ECameraMode
{
	CAM_COMBAT                                         = 0,
	CAM_COMBAT_DEPLOYMENT                              = 1,
	CAM_COMBAT_START                                   = 2,
	CAM_ADVENTURE                                      = 3,
	CAM_TOWN                                           = 4,
	CAM_COUNCIL                                        = 5,
	CAM_COUNCIL_MAP                                    = 6,
	CAM_MAX                                            = 7
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESpellTag
/*enum ESpellTag
{
	TAG_                                               = 0,
	TAG_SINGLE_TARGET                                  = 1,
	TAG_MASS_TARGET                                    = 2,
	TAG__                                              = 3,
	TAG_NEGATIVE_EFFECT                                = 4,
	TAG_POSITIVE_EFFECT                                = 5,
	TAG___                                             = 6,
	TAG_SPELL                                          = 7,
	TAG_DAMAGE_DIRECT                                  = 8,
	TAG____                                            = 9,
	TAG_HEAL                                           = 10,
	TAG_REPAIR                                         = 11,
	TAG_RESURRECT                                      = 12,
	TAG_MOVEMENT_REDUCTION                             = 13,
	TAG_POISON                                         = 14,
	TAG_MORAL                                          = 15,
	TAG_BLINDING                                       = 16,
	TAG_INCAPACITATED                                  = 17,
	TAG_____                                           = 18,
	TAG_FILTER_DAMAGE                                  = 19,
	TAG_FILTER_UTILITY                                 = 20,
	TAG_MAX                                            = 21
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ETrigger
/*enum ETrigger
{
	PERSISTENT                                         = 0,
	ON_SELF_ABILITY_ACTIVATE                           = 1,
	ON_INIT                                            = 2,
	ON_FINISH                                          = 3,
	ON_IMPACT                                          = 4,
	ON_ABILITY_PREPARE                                 = 5,
	ON_ABILITY_UNPREPARE                               = 6,
	ON_ANY_ABILITY_ACTIVATE                            = 7,
	ON_AFTER_ANY_ABILITY_ACTIVATE                      = 8,
	ON_GET_IMPACT                                      = 9,
	ON_WAVE_IMPACT                                     = 10,
	ON_GET_ATTACKED                                    = 11,
	ON_DO_ATTACK                                       = 12,
	ON_DO_CRITICAL_HIT                                 = 13,
	ON_UNIT_TURN_START                                 = 14,
	ON_UNIT_TURN_END                                   = 15,
	ON_GET_DAMAGE                                      = 16,
	ON_DO_DAMAGE                                       = 17,
	ON_POST_DO_DAMAGE                                  = 18,
	ON_GET_BUFFED                                      = 19,
	ON_ADD_BUFF                                        = 20,
	ON_GOOD_MORAL                                      = 21,
	ON_BAD_MORAL                                       = 22,
	ON_GOOD_LUCK                                       = 23,
	ON_BAD_LUCK                                        = 24,
	ON_MORAL_TURN_START                                = 25,
	ON_MORAL_TURN_END                                  = 26,
	ON_CREATURE_DIE                                    = 27,
	ON_KILL_CREATURE                                   = 28,
	ON_PRE_RETALIATION                                 = 29,
	ON_POST_RETALIATION                                = 30,
	ON_MOVE_ATTACK_START                               = 31,
	ON_MOVE                                            = 32,
	ON_JUMP_PITCH                                      = 33,
	ON_DO_CRITICAL_DAMAGE                              = 34,
	ON_RECEIVE_ITEM                                    = 35,
	ON_LOSE_ITEM                                       = 36,
	ON_CONSUME_ITEM                                    = 37,
	ON_EQUIP_ITEM                                      = 38,
	ON_UNEQUIP_ITEM                                    = 39,
	ON_GET_TARGETED                                    = 40,
	ON_TARGET_ABILITY_ACTIVATED                        = 41,
	ON_ABILITY_ACTIVATE                                = 42,
	ON_ANY_CREATURE_MOVE                               = 43,
	ON_ANY_GOOD_MORAL                                  = 44,
	ON_ANY_CREATURE_DIE                                = 45,
	ON_ANY_GET_ATTACKED                                = 46,
	ON_COMBAT_TURN_START                               = 47,
	ON_COMBAT_START                                    = 48,
	ON_COMBAT_TURN_END                                 = 49,
	ON_COMBAT_END                                      = 50,
	ON_END_OF_EVERY_CREATURES_TURN                     = 51,
	ON_BEGIN_OF_EVERY_UNITS_TURN                       = 52,
	ON_QUICKCOMBAT_END                                 = 53,
	ON_BEGIN_OF_DAY                                    = 54,
	ON_POST_BUILDING_PRODUCTION                        = 55,
	ON_END_OF_DAY                                      = 56,
	ON_BEGIN_OF_WEEK                                   = 57,
	ON_END_OF_WEEK                                     = 58,
	ON_BATTLE_WON                                      = 59,
	ON_VISIT                                           = 60,
	ON_POST_VISIT                                      = 61,
	ON_LEAVE                                           = 62,
	ON_LORD_CONQUERED                                  = 63,
	ON_ANY_BUILDING_CONQUERED                          = 64,
	ON_PRE_NEXT_COMMAND                                = 65,
	ON_PRE_COMMAND                                     = 66,
	ON_POST_COMMAND                                    = 67,
	ON_PRE_POST_COMMAND                                = 68,
	ON_BUFF_EXPIRE                                     = 69,
	ON_AFTER_BUFF_ADD                                  = 70,
	ON_AURA_INIT                                       = 71,
	ON_AURA_DESTROY                                    = 72,
	ON_APPLY_AURA                                      = 73,
	ON_REMOVE_AURA                                     = 74,
	ON_ENTER_CELL                                      = 75,
	ON_LEAVE_CELL                                      = 76,
	ON_BUILDING_BUILT                                  = 77,
	ON_OTHER_BUILDING_BUILT                            = 78,
	ON_BUILDING_DESTROY                                = 79,
	ON_BUILDING_CHANGEOWNER                            = 80,
	ON_GOVERNOR_ASSIGN                                 = 81,
	ON_GOVERNOR_UNASSIGN                               = 82,
	ON_HERO_DIE                                        = 83,
	ON_MEET                                            = 84,
	ON_MAGIC_SYNERGY_TRIGGERED                         = 85,
	ON_BATTLE_XP_GAIN                                  = 86,
	ON_AFTER_XP_GAIN                                   = 87,
	ON_OPEN_CHEST                                      = 88,
	ON_CLOSE_CHEST                                     = 89,
	ON_GRID_POSITION_CHANGED                           = 90,
	ON_SKILL_LEVEL_UP                                  = 91,
	ON_TRIGGER_RETALIATION                             = 92,
	ON_EMBARK                                          = 93,
	ON_DISEMBARK                                       = 94,
	ON_SUMMON_ENTER_COMBAT                             = 95,
	ON_HERO_RECRUIT                                    = 96,
	ON_PASS_THROUGH                                    = 97,
	ON_CARAVAN_CREATED                                 = 98,
	ON_NEVER                                           = 99,
	ETrigger_MAX                                       = 100
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EEffectTarget
/*enum EEffectTarget
{
	TARGET_DEFAULT                                     = 0,
	TARGET_SELF                                        = 1,
	TARGET_CASTER                                      = 2,
	TARGET_OWNER                                       = 3,
	TARGET_TARGET                                      = 4,
	TARGET_ATTACKER                                    = 5,
	TARGET_ATTACKER_COMBAT                             = 6,
	TARGET_DEFENDER                                    = 7,
	TARGET_AREA_AROUND_CASTER                          = 8,
	TARGET_AREA_AROUND_TARGET                          = 9,
	TARGET_ALL                                         = 10,
	TARGET_FROM_ABILITY                                = 11,
	TARGET_RANDOM_ADJACENT                             = 12,
	TARGET_FROM_CONTAINER                              = 13,
	TARGET_MAX                                         = 14
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAbilityTarget
/*enum EAbilityTarget
{
	NO_TARGET                                          = 0,
	TARGET_SINGLE                                      = 1,
	TARGET_AREA                                        = 2,
	TARGET_LINE                                        = 3,
	TARGET_SWEEP                                       = 4,
	TARGET_CONE                                        = 5,
	TARGET_CUSTOM_SHAPE                                = 6,
	TARGET_AOC                                         = 7,
	TARGET_ELLIPSE                                     = 8,
	TARGET_SUNBURST                                    = 9,
	TARGET_TSUNAMI                                     = 10,
	TARGET_DOUBLE_LINE                                 = 11,
	EAbilityTarget_MAX                                 = 12
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAlignmentType
/*enum EAlignmentType
{
	AT_FRIENDLY                                        = 0,
	AT_HOSTILE                                         = 1,
	AT_NEUTRAL                                         = 2,
	AT_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EOperationBool
/*enum EOperationBool
{
	OP_TYPE_BOOL_EQUAL                                 = 0,
	OP_TYPE_BOOL_NOTEQUAL                              = 1,
	OP_TYPE_BOOL_LESSEQUAL                             = 2,
	OP_TYPE_BOOL_LESS                                  = 3,
	OP_TYPE_BOOL_MOREEQUAL                             = 4,
	OP_TYPE_BOOL_MORE                                  = 5,
	OP_TYPE_BOOL_MAX                                   = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAttackType
/*enum EAttackType
{
	CATTACK_MIGHT                                      = 0,
	CATTACK_MAGIC                                      = 1,
	CATTACK_MAX                                        = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECellSize
/*enum ECellSize
{
	CELLSIZE_1x1                                       = 0,
	CELLSIZE_2x2                                       = 1,
	CELLSIZE_1x2                                       = 2,
	CELLSIZE_1x4                                       = 3,
	CELLSIZE_MAX                                       = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EOperationLogic
/*enum EOperationLogic
{
	OP_TYPE_LOGIC_AND                                  = 0,
	OP_TYPE_LOGIC_OR                                   = 1,
	OP_TYPE_LOGIC_MAX                                  = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESkillType
/*enum ESkillType
{
	SKT_NONE                                           = 0,
	SKT_ASSAILANT                                      = 1,
	SKT_DEFENDER                                       = 2,
	SKT_EXPLORER                                       = 3,
	SKT_LEADERSHIP                                     = 4,
	SKT_WARCRIES                                       = 5,
	SKT_FIRE_MAGIC                                     = 6,
	SKT_WATER_MAGIC                                    = 7,
	SKT_LIGHT_MAGIC                                    = 8,
	SKT_DARK_MAGIC                                     = 9,
	SKT_EARTH_MAGIC                                    = 10,
	SKT_AIR_MAGIC                                      = 11,
	SKT_PRIME_MAGIC                                    = 12,
	SKT_SOLIDARITY                                     = 13,
	SKT_NECROMANCY                                     = 14,
	SKT_METAMAGIC                                      = 15,
	SKT_BATTLERAGE                                     = 16,
	SKT_RUNEMAGIC                                      = 17,
	SKT_SHROUD                                         = 18,
	SKT_GATING                                         = 19,
	SKT_AVENGER                                        = 20,
	SKT_ENLIGHTENMENT                                  = 21,
	SKT_DESTINYS_CHOSEN                                = 22,
	SKT_ECONOMIST                                      = 23,
	SKT_DIPLOMACY                                      = 24,
	SKT_WARFARE                                        = 25,
	SKT_NATURES_MARK                                   = 26,
	SKT_FURTIVENESS                                    = 27,
	SKT_MAX                                            = 28
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EProjectileType
/*enum EProjectileType
{
	PT_BULLET                                          = 0,
	PT_BOMBARD                                         = 1,
	PT_AIRDROP                                         = 2,
	PT_BEAM                                            = 3,
	PT_MAX                                             = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDirection
/*enum EDirection
{
	WEST                                               = 0,
	NORTH_WEST                                         = 1,
	NORTH                                              = 2,
	NORTH_EAST                                         = 3,
	EAST                                               = 4,
	SOUTH_EAST                                         = 5,
	SOUTH                                              = 6,
	SOUTH_WEST                                         = 7,
	EDirection_MAX                                     = 8
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECommandTag
/*enum ECommandTag
{
	ACTION_MELEE_ATTACK                                = 0,
	ACTION_RANGE_ATTACK                                = 1,
	ACTION_RETALIATE                                   = 2,
	ACTION_RANGED_RETALIATE                            = 3,
	ACTION_ABILITY                                     = 4,
	ACTION_DOUBLE_MELEE_ATTACK                         = 5,
	ACTION_DOUBLE_RANGED_ATTACK                        = 6,
	ACTION_LIGHTNING_REFLEXES_STRIKE                   = 7,
	ACTION_MOVE                                        = 8,
	ACTION_MOVE_ATTACK                                 = 9,
	ACTION_INTERRUPT                                   = 10,
	ACTION_REPEAT                                      = 11,
	ACTION_MOVE_MEET                                   = 12,
	ACTION_MOVE_VISIT                                  = 13,
	ACTION_MOVE_NO_FOLLOW                              = 14,
	ACTION_MOVE_PATROL                                 = 15,
	ACTION_MOVE_ROTATE                                 = 16,
	ACTION_MAX                                         = 17
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EWarUnitClass
/*enum EWarUnitClass
{
	WCLASS_SIEGE                                       = 0,
	WCLASS_ATTACK                                      = 1,
	WCLASS_SUPPORT                                     = 2,
	WCLASS_HYBRID                                      = 3,
	WCLASS_MAX                                         = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EFXPosition
/*enum EFXPosition
{
	FXP_TARGET_POSITION                                = 0,
	FXP_ABOVE_TARGET                                   = 1,
	FXP_SOCKET                                         = 2,
	FXP_BELOW_TARGET                                   = 3,
	FXP_HIT_POSITION                                   = 4,
	FXP_MAX                                            = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECreatureAnimation
/*enum ECreatureAnimation
{
	CAN_IDLE                                           = 0,
	CAN_IDLE_SPECIAL                                   = 1,
	CAN_MOVE                                           = 2,
	CAN_TURNLEFT                                       = 3,
	CAN_TURNRIGHT                                      = 4,
	CAN_DIE                                            = 5,
	CAN_ABILITY                                        = 6,
	CAN_ABILITY2                                       = 7,
	CAN_ATTACK                                         = 8,
	CAN_CRITICAL_ATTACK                                = 9,
	CAN_RANGE_ATTACK                                   = 10,
	CAN_GET_HIT                                        = 11,
	CAN_VICTORY                                        = 12,
	CAN_DEFEND                                         = 13,
	CAN_START_FLY                                      = 14,
	CAN_LOOP_FLY                                       = 15,
	CAN_END_FLY                                        = 16,
	CAN_START_JUMP                                     = 17,
	CAN_LOOP_JUMP                                      = 18,
	CAN_END_JUMP                                       = 19,
	CAN_FLY_IN                                         = 20,
	CAN_FLY_OUT                                        = 21,
	CAN_DIVING_LOOP                                    = 22,
	CAN_MOVE_START                                     = 23,
	CAN_MOVE_END                                       = 24,
	CAN_NONE                                           = 25,
	CAN_MAX                                            = 26
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EMaterialParam
/*enum EMaterialParam
{
	EMP_Emissive                                       = 0,
	EMP_Opacity                                        = 1,
	EMP_Diffuse                                        = 2,
	EMP_Spec                                           = 3,
	EMP_SpecPow                                        = 4,
	EMP_MAX                                            = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESelectionType
/*enum ESelectionType
{
	Normal                                             = 0,
	Selected                                           = 1,
	SELECTED_ALLY                                      = 2,
	SELECTED_DEAD_ALLY                                 = 3,
	SELECTED_ENEMY                                     = 4,
	OBSTACLE                                           = 5,
	FORESHADOW                                         = 6,
	FORESHADOW_ALT                                     = 7,
	FORESHADOW_BOTH                                    = 8,
	CREATURE_TACTICS                                   = 9,
	MOUSE_OVER                                         = 10,
	SIEGEWALL_COVER                                    = 11,
	FORESHADOW_ABILITY                                 = 12,
	ESelectionType_MAX                                 = 13
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EConeType
/*enum EConeType
{
	CONE_BOTH                                          = 0,
	CONE_LEFT                                          = 1,
	CONE_RIGHT                                         = 2,
	CONE_MAX                                           = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAPRLevel
/*enum EAPRLevel
{
	APR_NONE                                           = 0,
	APR_TRIVIAL                                        = 1,
	APR_LOW                                            = 2,
	APR_MODEST                                         = 3,
	APR_AVERAGE                                        = 4,
	APR_SEVERE                                         = 5,
	APR_HIGH                                           = 6,
	APR_DEADLY                                         = 7,
	APR_MAX                                            = 8
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDispositionType
/*enum EDispositionType
{
	DIT_NEGOTIATE                                      = 0,
	DIT_JOIN_PRICE                                     = 1,
	DIT_JOIN_FREE                                      = 2,
	DIT_ALWAYS_FIGHT                                   = 3,
	DIT_FORCE_JOIN                                     = 4,
	DIT_FLEE                                           = 5,
	DIT_MAX                                            = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDialogueType
/*enum EDialogueType
{
	DT_NARRATION                                       = 0,
	DT_DIALOG                                          = 1,
	DT_COUNCIL_DIALOG                                  = 2,
	DT_SUBTITLE                                        = 3,
	DT_MAX                                             = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESpeaker
/*enum ESpeaker
{
	SPEAKER_CUSTOM                                     = 0,
	SPEAKER_IVAN                                       = 1,
	SPEAKER_HAVEN                                      = 2,
	SPEAKER_NECRO                                      = 3,
	SPEAKER_ACADEMY                                    = 4,
	SPEAKER_STRONGHOLD                                 = 5,
	SPEAKER_ELVES                                      = 6,
	SPEAKER_DUNGEON                                    = 7,
	SPEAKER_MAX                                        = 8
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EUnitCommand
/*enum EUnitCommand
{
	UC_MOVE                                            = 0,
	UC_ABILITY                                         = 1,
	UC_VISIT                                           = 2,
	UC_RECRUIT                                         = 3,
	UC_MEET                                            = 4,
	UC_INTERRUPT                                       = 5,
	UC_GARRISON                                        = 6,
	UC_SKIP_TURN                                       = 7,
	UC_UPGRADE                                         = 8,
	UC_MAX                                             = 9
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESpellOperation
/*enum ESpellOperation
{
	ADD_BUFF                                           = 0,
	REMOVE_BUFF                                        = 1,
	ADD_ABILITY                                        = 2,
	REMOVE_ABILITY                                     = 3,
	ADD_VOLABILITY                                     = 4,
	REMOVE_VOLABILITY                                  = 5,
	SUPPRESS_ABILITY                                   = 6,
	UNSUPPRESS_ABILITY                                 = 7,
	INCREASE_SKILL                                     = 8,
	ESpellOperation_MAX                                = 9
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDefaultAbilities
/*enum EDefaultAbilities
{
	ED_CUSTOM                                          = 0,
	ED_MELEE_ATTACK                                    = 1,
	ED_RANGED_ATTACK                                   = 2,
	ED_RETALIATION_ABILITY                             = 3,
	ED_WAIT_ABILITY                                    = 4,
	ED_DEFEND_ABILITY                                  = 5,
	ED_MORAL_ABILITY                                   = 6,
	ED_REPL_MORAL_ABILITY                              = 7,
	ED_LUCK_ABILITY                                    = 8,
	ED_REPL_LUCK_ABILITY                               = 9,
	ED_REPL_WARFARE_ATTACK                             = 10,
	ED_REPL_WARFARE_DEFAULT                            = 11,
	ED_REPL_WARFARE_SUPPORT                            = 12,
	ED_MAX                                             = 13
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHeroSoundId
/*enum EHeroSoundId
{
	HEROSOUND_MOUNTED_ATTACK                           = 0,
	HEROSOUND_MOUNTED_RANGEATTACK                      = 1,
	HEROSOUND_MOUNTED_COMMAND                          = 2,
	HEROSOUND_MOUNTED_ABILITY                          = 3,
	HEROSOUND_MOUNTED_VICTORY                          = 4,
	HEROSOUND_MOUNTED_DEFEAT                           = 5,
	HEROSOUND_MOUNTED_IDLE                             = 6,
	HEROSOUND_MOUNTED_IDLE_END                         = 7,
	HEROSOUND_MOUNTED_MOVE                             = 8,
	HEROSOUND_MOUNTED_MOVE_END                         = 9,
	HEROSOUND_MOUNTED_TURNLEFT                         = 10,
	HEROSOUND_MOUNTED_TURNRIGHT                        = 11,
	HEROSOUND_LEVEL_UP                                 = 12,
	HEROSOUND_COMBAT_SCREEN_START                      = 13,
	HEROSOUND_ENGAGE_COMBAT                            = 14,
	HEROSOUND_ENGAGE_QUICK_COMBAT                      = 15,
	HEROSOUND_MOVE_SHIP                                = 16,
	HEROSOUND_MOVE_SHIP_END                            = 17,
	HEROSOUND_BOARDING_SHIP                            = 18,
	HEROSOUND_SHIP_TURNING                             = 19,
	HEROSOUND_SHIP_IDLE                                = 20,
	HEROSOUND_SHIP_IDLE_END                            = 21,
	HEROSOUND_MAX                                      = 22
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHeroTypeId
/*enum EHeroTypeId
{
	HEROTYPE_MIGHT                                     = 0,
	HEROTYPE_MAGIC                                     = 1,
	HEROTYPE_MAX                                       = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EH7FlyPointInterp
/*enum EH7FlyPointInterp
{
	FPI_Linear                                         = 0,
	FPI_Squared                                        = 1,
	FPI_InvSquared                                     = 2,
	FPI_Cubed                                          = 3,
	FPI_MAX                                            = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHeroEventType
/*enum EHeroEventType
{
	HE_ATTACK_HIT_TIME                                 = 0,
	HE_ABILITY_CAST_TIME                               = 1,
	HE_MAX                                             = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EWarfareUnitEventType
/*enum EWarfareUnitEventType
{
	WU_RANGE_ATTACK_TIME                               = 0,
	WU_ABILITY_CAST_TIME                               = 1,
	WU_MAX                                             = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECreatureEventType
/*enum ECreatureEventType
{
	CE_ATTACK_HIT_TIME                                 = 0,
	CE_CRITICAL_ATTACK_HIT_TIME                        = 1,
	CE_RANGE_ATTACK_SHOOT_TIME                         = 2,
	CE_ABILITY_CAST_TIME                               = 3,
	CE_ABILITY_CAST_TIME2                              = 4,
	CE_MAX                                             = 5
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHideReveal
/*enum EHideReveal
{
	EHR_HIDE                                           = 0,
	EHR_REVEAL                                         = 1,
	EHR_MAX                                            = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EAdvActionID
/*enum EAdvActionID
{
	AID_AttackArmy                                     = 0,
	AID_AttackBorderArmy                               = 1,
	AID_AttackAoC                                      = 2,
	AID_AttackCity                                     = 3,
	AID_AttackEnemy                                    = 4,
	AID_Plunder                                        = 5,
	AID_Explore                                        = 6,
	AID_Repair                                         = 7,
	AID_Pickup                                         = 8,
	AID_Gather                                         = 9,
	AID_Guard                                          = 10,
	AID_Reinforce                                      = 11,
	AID_Flee                                           = 12,
	AID_Chill                                          = 13,
	AID_UseSite                                        = 14,
	AID_Congregate                                     = 15,
	AID_UseSiteBoost                                   = 16,
	AID_UseSiteCommission                              = 17,
	AID_UseSiteExercise                                = 18,
	AID_UseSiteObserve                                 = 19,
	AID_UseSiteShop                                    = 20,
	AID_UseSiteStudy                                   = 21,
	AID_UseSiteKeymaster                               = 22,
	AID_UseSiteObelisk                                 = 23,
	AID_Replenish                                      = 24,
	__AID_MAX                                          = 25,
	EAdvActionID_MAX                                   = 26
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ELogType
/*enum ELogType
{
	LOG_TYPE_STAT                                      = 0,
	LOG_TYPE_ITEM                                      = 1,
	LOG_TYPE_SKILL                                     = 2,
	LOG_TYPE_BUFF                                      = 3,
	LOG_TYPE_MAX                                       = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EEventStatus
/*enum EEventStatus
{
	ES_ACTIVE                                          = 0,
	ES_INACTIVE                                        = 1,
	ES_MAX                                             = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EHeroWithStat
/*enum EHeroWithStat
{
	E_H7_HWS_MIGHT                                     = 0,
	E_H7_HWS_DEFENSE                                   = 1,
	E_H7_HWS_MAGIC                                     = 2,
	E_H7_HWS_SPIRIT                                    = 3,
	E_H7_HWS_LEADERSHIP                                = 4,
	E_H7_HWS_DESTINY                                   = 5,
	E_H7_HWS_ARCANE_KNOWLEDGE                          = 6,
	E_H7_HWS_DAMAGE_MIN                                = 7,
	E_H7_HWS_DAMAGE_MAX                                = 8,
	E_H7_HWS_MANA_CURRENT                              = 9,
	E_H7_HWS_MANA_MAX                                  = 10,
	E_H7_HWS_MOVEMENT_CURRENT                          = 11,
	E_H7_HWS_MOVEMENT_MAX                              = 12,
	E_H7_HWS_LEVEL                                     = 13,
	E_H7_HWS_EXP_TOTAL                                 = 14,
	E_H7_HWS_EXP_NEXT                                  = 15,
	E_H7_HWS_SKILL_POINTS                              = 16,
	E_H7_HWS_MAX                                       = 17
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EMapTag
/*enum EMapTag
{
	E_H7_MT_OFFICIAL                                   = 0,
	E_H7_MT_USER_GENERATED                             = 1,
	E_H7_MT_MAX                                        = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EEditorObjectColor
/*enum EEditorObjectColor
{
	E_H7_EOC_Blue                                      = 0,
	E_H7_EOC_Orange                                    = 1,
	E_H7_EOC_Green                                     = 2,
	E_H7_EOC_Purple                                    = 3,
	E_H7_EOC_Yellow                                    = 4,
	E_H7_EOC_Pink                                      = 5,
	E_H7_EOC_Cyan                                      = 6,
	E_H7_EOC_Red                                       = 7,
	E_H7_EOC_White                                     = 8,
	E_H7_EOC_MAX                                       = 9
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EH7ShowOnMinimap
/*enum EH7ShowOnMinimap
{
	E_H7_SOM_AUTO                                      = 0,
	E_H7_SOM_CUSTOM                                    = 1,
	E_H7_SOM_DISABLED                                  = 2,
	E_H7_SOM_MAX                                       = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EH7ChampionDwellingChoice
/*enum EH7ChampionDwellingChoice
{
	E_H7_CDC_NONE                                      = 0,
	E_H7_CDC                                           = 1,
	E_H7_CDC01                                         = 2,
	E_H7_CDC_MAX                                       = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EH7RandomDwellingLevel
/*enum EH7RandomDwellingLevel
{
	E_H7_RDL_BASIC                                     = 0,
	E_H7_RDL_UPGRADE                                   = 1,
	E_H7_RDL_ANY                                       = 2,
	E_H7_RDL_MAX                                       = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EH7RandomDwellingType
/*enum EH7RandomDwellingType
{
	E_H7_RDT_CORE                                      = 0,
	E_H7_RDT_ELITE                                     = 1,
	E_H7_RDT_CHAMPION                                  = 2,
	E_H7_RDT_ANY                                       = 3,
	E_H7_RDT_MAX                                       = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EBuffsMod
/*enum EBuffsMod
{
	EBM_ADD                                            = 0,
	EBM_REMOVE                                         = 1,
	EBM_REMOVE_ALL                                     = 2,
	EBM_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EShipInteraction
/*enum EShipInteraction
{
	SI_BOARD                                           = 0,
	SI_DISEMBARK                                       = 1,
	SI_MAX                                             = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESnapType
/*enum ESnapType
{
	NO_SNAP                                            = 0,
	Center                                             = 1,
	Border                                             = 2,
	ESnapType_MAX                                      = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ESnapVerticalType
/*enum ESnapVerticalType
{
	SV_NO_SNAP                                         = 0,
	SV_GROUND                                          = 1,
	SV_FLATTEN_TERRAIN                                 = 2,
	SV_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EObstacleLevel
/*enum EObstacleLevel
{
	OL_UNTOUCHED                                       = 0,
	OL_DEMOLISHED                                      = 1,
	OL_DESTROYED                                       = 2,
	OL_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EObstacleType
/*enum EObstacleType
{
	OT_DEFAULT                                         = 0,
	OT_WALL                                            = 1,
	OT_GATE                                            = 2,
	OT_MOAT                                            = 3,
	OT_TOWER                                           = 4,
	OT_TRAP                                            = 5,
	OT_MAX                                             = 6
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EFoWOverrideState
/*enum EFoWOverrideState
{
	FO_NORMAL                                          = 0,
	FO_HIDDEN                                          = 1,
	FO_SHOWN                                           = 2,
	FO_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EPassabilityType
/*enum EPassabilityType
{
	BLOCKING                                           = 0,
	PASSABLE                                           = 1,
	EPassabilityType_MAX                               = 2
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EDifficultyAIAggressiveness
/*enum EDifficultyAIAggressiveness
{
	DAIA_SHEEP                                         = 0,
	DAIA_BALANCED                                      = 1,
	DAIA_HOSTILE                                       = 2,
	DAIA_NEFARIOUS                                     = 3,
	DAIA_MAX                                           = 4
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EUplayTrackingType
/*enum EUplayTrackingType
{
	UTT_GAMEMODE_START                                 = 0,
	UTT_GAMEMODE_STOP                                  = 1,
	UTT_CAMPAIGN_START                                 = 2,
	UTT_CAMPAIGN_STOP                                  = 3,
	UTT_CAMPAIGN_COMPLETE                              = 4,
	UTT_MAP_START                                      = 5,
	UTT_MAP_STOP                                       = 6,
	UTT_ACHIEVEMENT                                    = 7,
	UTT_CUT_SCENES                                     = 8,
	UTT_PLAYER_DLC                                     = 9,
	UTT_CASTLE_BUILD                                   = 10,
	UTT_ABILITY_LEARNT                                 = 11,
	UTT_SPELL_USED                                     = 12,
	UTT_COMBAT_RECAP                                   = 13,
	UTT_HERO_RECRUITED                                 = 14,
	UTT_TREASUREHUNT                                   = 15,
	UTT_GAME_LOCALIZATION                              = 16,
	UTT_PLAYER_PROGRESSION                             = 17,
	UTT_MAX                                            = 18
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.EMapType
/*enum EMapType
{
	SKIRMISH                                           = 0,
	SCENARIO                                           = 1,
	CAMPAIGN                                           = 2,
	EMapType_MAX                                       = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECellMovementType
/*enum ECellMovementType
{
	MOVTYPE_IMPASSABLE                                 = 0,
	MOVTYPE_GROUND                                     = 1,
	MOVTYPE_WATER                                      = 2,
	MOVTYPE_MAX                                        = 3
};*/

// Enum MMH7Game.H7StructsAndEnumsNative.ECompareOp
/*enum ECompareOp
{
	ECO_EQUAL                                          = 0,
	ECO_LESS_EQUAL                                     = 1,
	ECO_GREATER_EQUAL                                  = 2,
	ECO_LESS                                           = 3,
	ECO_GREATER                                        = 4,
	ECO_MAX                                            = 5
};*/

// Enum MMH7Game.H7ListingSavegame.H7SavegameHealthStatus
/*enum H7SavegameHealthStatus
{
	H7_HS_VALID                                        = 0,
	H7_HS_UNSUPPORTEDVERSION                           = 1,
	H7_HS_CORRUPTED                                    = 2,
	H7_HS_MAX                                          = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.EGameMode
/*enum EGameMode
{
	SINGLEPLAYER                                       = 0,
	MULTIPLAYER                                        = 1,
	HOTSEAT                                            = 2,
	EGameMode_MAX                                      = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.EUnitAnimation
/*enum EUnitAnimation
{
	UAN_MELEE_ATTACK                                   = 0,
	UAN_RANGED_ATTACK                                  = 1,
	UAN_ABILITY                                        = 2,
	UAN_ABILITY2                                       = 3,
	UAN_DEFEND                                         = 4,
	UAN_VICTORY                                        = 5,
	UAN_NONE                                           = 6,
	UAN_MAX                                            = 7
};*/

// Enum MMH7Game.H7StructsAndEnums.EMessageAction
/*enum EMessageAction
{
	MA_NONE                                            = 0,
	MA_BLOCK_UNIT_ACTION                               = 1,
	MA_BLOCK_ENDTURN                                   = 2,
	MA_BLOCK_GAMEPLAY                                  = 3,
	MA_BLOCK_GAMEPLAY_AND_HIDE_GUI                     = 4,
	MA_MAX                                             = 5
};*/

// Enum MMH7Game.H7StructsAndEnums.EFCTType
/*enum EFCTType
{
	FCT_DAMAGE                                         = 0,
	FCT_KILL                                           = 1,
	FCT_RETALIATION                                    = 2,
	FCT_TEXT                                           = 3,
	FCT_HEAL                                           = 4,
	FCT_RESURRECTION                                   = 5,
	FCT_RESOURCE_PICKUP                                = 6,
	FCT_XP                                             = 7,
	FCT_ERROR                                          = 8,
	FCT_IMMUNE                                         = 9,
	FCT_BUFF                                           = 10,
	FCT_HIGHLIGHT                                      = 11,
	FCT_ITEM_PICKUP                                    = 12,
	FCT_STAT_MOD                                       = 13,
	FCT_MAX                                            = 14
};*/

// Enum MMH7Game.H7StructsAndEnums.EHUDMode
/*enum EHUDMode
{
	HM_NORMAL                                          = 0,
	HM_CINEMATIC_SUBTITLE                              = 1,
	HM_WAITING_FOR_OTHERS_TURN                         = 2,
	HM_WAITING_FOR_OTHERS_CONNECT                      = 3,
	HM_WAITING_FOR_AI                                  = 4,
	HM_WAITING_OTHER_PLAYER_ANSWER                     = 5,
	HM_WAITING_OTHER_PLAYER_RETREAT                    = 6,
	HM_COUNCIL                                         = 7,
	HM_IN_BETWEEN_TURNS_FOR_HOTSEAT                    = 8,
	HM_MAPVIEW                                         = 9,
	HM_MAX                                             = 10
};*/

// Enum MMH7Game.H7StructsAndEnums.EH7SeqCondUpdateTurnPeriod
/*enum EH7SeqCondUpdateTurnPeriod
{
	EH7SeqCondUpdateTurnPeriod_Week                    = 0,
	EH7SeqCondUpdateTurnPeriod_Day                     = 1,
	EH7SeqCondUpdateTurnPeriod_MAX                     = 2
};*/

// Enum MMH7Game.H7StructsAndEnums.ECurrentArmyAction
/*enum ECurrentArmyAction
{
	CAA_NOTHING                                        = 0,
	CAA_MOVE                                           = 1,
	CAA_ATTACK_ARMY                                    = 2,
	CAA_SELECT_ARMY                                    = 3,
	CAA_MEET_ARMY                                      = 4,
	CAA_TELEPORT                                       = 5,
	CAA_VISIT                                          = 6,
	CAA_PICK_UP                                        = 7,
	CAA_SPELL_OK                                       = 8,
	CAA_SPELL_NO                                       = 9,
	CAA_ZOOM_TO                                        = 10,
	CAA_BOARD                                          = 11,
	CAA_UNBOARD                                        = 12,
	CAA_TALK                                           = 13,
	CAA_JOIN_OFFER                                     = 14,
	CAA_JOIN_FORCE                                     = 15,
	CAA_BRIBE                                          = 16,
	CAA_FLEE                                           = 17,
	CAA_ENTER_TOWN                                     = 18,
	CAA_DESHELTER                                      = 19,
	CAA_ABORT_ACTION                                   = 20,
	CAA_MAX                                            = 21
};*/

// Enum MMH7Game.H7StructsAndEnums.ECombatPlayerType
/*enum ECombatPlayerType
{
	COMBATPT_ATTACKER                                  = 0,
	COMBATPT_DEFENDER                                  = 1,
	COMBATPT_SPECTATOR                                 = 2,
	COMBATPT_MAX                                       = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.EInventoryAction
/*enum EInventoryAction
{
	IA_SET_ITEM_POS                                    = 0,
	IA_ADD_ITEM                                        = 1,
	IA_MERGE_ITEMS                                     = 2,
	IA_REMOVE_ITEM                                     = 3,
	IA_EQUIP_ITEM                                      = 4,
	IA_UNEQUIP_ITEM                                    = 5,
	IA_MAX                                             = 6
};*/

// Enum MMH7Game.H7StructsAndEnums.EOOSType
/*enum EOOSType
{
	OOS_RNG_COUNTER                                    = 0,
	OOS_ID_COUNTER                                     = 1,
	OOS_UNIT_COUNT                                     = 2,
	OOS_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.EMessageCreationContext
/*enum EMessageCreationContext
{
	MCC_UNKNOWN                                        = 0,
	MCC_ADV_MAP                                        = 1,
	MCC_CBT_MAP                                        = 2,
	MCC_MAIN_MENU                                      = 3,
	MCC_MAX                                            = 4
};*/

// Enum MMH7Game.H7StructsAndEnums.EADType
/*enum EADType
{
	Hero_vs_Creature                                   = 0,
	Hero_vs_Obstacle                                   = 1,
	Creature_vs_Creature                               = 2,
	Creature_vs_Warunit                                = 3,
	Warunit_vs_Creature                                = 4,
	Warunit_vs_Obstacle                                = 5,
	Tower_vs_Creature                                  = 6,
	EADType_MAX                                        = 7
};*/

// Enum MMH7Game.H7StructsAndEnums.EOption
/*enum EOption
{
	OPT_PATH_HOVER_DECAL                               = 0,
	OPT_PATH_HOVER_MAX                                 = 1
};*/

// Enum MMH7Game.H7StructsAndEnums.EQuestStatus
/*enum EQuestStatus
{
	QS_PENDING                                         = 0,
	QS_ACTIVE                                          = 1,
	QS_INACTIVE                                        = 2,
	QS_COMPLETED                                       = 3,
	QS_FAILED                                          = 4,
	QS_MAX                                             = 5
};*/

// Enum MMH7Game.H7StructsAndEnums.H7ListenFocus
/*enum H7ListenFocus
{
	LF_EVERYTHING                                      = 0,
	LF_HERO_SLOT                                       = 1,
	LF_HERO_WINDOW                                     = 2,
	LF_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.ESimTurnCommandState
/*enum ESimTurnCommandState
{
	STCS_DEFAULT                                       = 0,
	STCS_WAITING_RESPONSE_CANCEL_TRADE                 = 1,
	STCS_MAX                                           = 2
};*/

// Enum MMH7Game.H7StructsAndEnums.ESimTurnCommandCancelledReason
/*enum ESimTurnCommandCancelledReason
{
	STCCR_PATH_CHANGED                                 = 0,
	STCCR_ALREADY_LOOTED                               = 1,
	STCCR_ARMY_IN_DIFFERENT_CELL                       = 2,
	STCCR_MAX                                          = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.ESimTurnStartCombatAnswer
/*enum ESimTurnStartCombatAnswer
{
	STSCA_NOT_SET                                      = 0,
	STSCA_RETREAT                                      = 1,
	STSCA_CANCEL                                       = 2,
	STSCA_QUICK_COMBAT                                 = 3,
	STSCA_NORMAL_COMBAT                                = 4,
	STSCA_MAX                                          = 5
};*/

// Enum MMH7Game.H7StructsAndEnums.EInstantCommandType
/*enum EInstantCommandType
{
	ICT_CHEAT_BUILD_ALL                                = 0,
	ICT_CHEAT_TELEPORT                                 = 1,
	ICT_END_TURN                                       = 2,
	ICT_BEGIN_TURN                                     = 3,
	ICT_HERO_ADD_XP                                    = 4,
	ICT_INCREASE_RESOURCE                              = 5,
	ICT_TRADE_RESOURCE                                 = 6,
	ICT_TELEPORT_TO_TOWN                               = 7,
	ICT_DO_COMBAT                                      = 8,
	ICT_INVENTORY_ACTION                               = 9,
	ICT_DISMISS_CREATURESTACK                          = 10,
	ICT_SPLIT_CREATURESTACK                            = 11,
	ICT_BUILD_BUILDING                                 = 12,
	ICT_TRANSFER_HERO                                  = 13,
	ICT_RECRUIT                                        = 14,
	ICT_RECRUIT_DIRECT                                 = 15,
	ICT_UPGRADE_UNIT                                   = 16,
	ICT_UPGRADE_DWELLING                               = 17,
	ICT_RECRUIT_HERO                                   = 18,
	ICT_DESTRUCTION_OR_REPARATION                      = 19,
	ICT_SET_GOVERNOR                                   = 20,
	ICT_START_CARAVAN                                  = 21,
	ICT_REBUILD_FORT                                   = 22,
	ICT_DESTROY_TOWN_BUILDINGS                         = 23,
	ICT_FLEE_OR_SURRENDER                              = 24,
	ICT_CHEAT_STAT_CHANGE                              = 25,
	ICT_CHEAT_WIN_LOSE                                 = 26,
	ICT_INCREASE_SKILL                                 = 27,
	ICT_LEARN_ABILITY_FROM_SKILL                       = 28,
	ICT_OVERWRITE_SKILL                                = 29,
	ICT_JOIN_ARMY                                      = 30,
	ICT_RECRUIT_WARFARE                                = 31,
	ICT_PLUNDER                                        = 32,
	ICT_LET_GO                                         = 33,
	ICT_TRANSFER_STACK_FROM_MERGE_POOL                 = 34,
	ICT_SELECT_SPECIALISATION                          = 35,
	ICT_ENTER_LEAVE_SHELTER                            = 36,
	ICT_SET_AUTO_COMBAT                                = 37,
	ICT_SAVE_GAME                                      = 38,
	ICT_RECYCLE_ARTIFACT                               = 39,
	ICT_DOUBLE_ARMY                                    = 40,
	ICT_DISMISS_HERO                                   = 41,
	ICT_INCREASE_HERO_STAT                             = 42,
	ICT_BUY_SCROLL                                     = 43,
	ICT_ACCEPT_MERGE                                   = 44,
	ICT_TRANSFER_WAR_UNIT                              = 45,
	ICT_SABOTAGE                                       = 46,
	ICT_THIEVES_GUILD_PLUNDER                          = 47,
	ICT_BUY_ARTIFACT_MERCHANT                          = 48,
	ICT_BUY_ARTIFACT_BLACK_MARKET                      = 49,
	ICT_SELL_ARTIFACT                                  = 50,
	ICT_SACRIFICE                                      = 51,
	ICT_RESET_REINFORCEMENT                            = 52,
	ICT_CONFIRM_REINFORCEMENT                          = 53,
	ICT_BUILD_SHIP                                     = 54,
	ICT_USE_FERTILITY_IDOL                             = 55,
	ICT_RANDOM_ITEM_SITE                               = 56,
	ICT_MERGE_ARMIES_AI                                = 57,
	ICT_UNIFY_ARMY                                     = 58,
	ICT_MERGE_ARMIES_LORD                              = 59,
	ICT_MERGE_ARMIES_ADVENTURE                         = 60,
	ICT_MAX                                            = 61
};*/

// Enum MMH7Game.H7StructsAndEnums.EStackPlateOrientation
/*enum EStackPlateOrientation
{
	PLATE_ORIENTATION_LEFT                             = 0,
	PLATE_ORIENTATION_RIGHT                            = 1,
	PLATE_ORIENTATION_MAX                              = 2
};*/

// Enum MMH7Game.H7StructsAndEnums.EArmyNumber
/*enum EArmyNumber
{
	ARMY_NO                                            = 0,
	ARMY_NUMBER_VISIT                                  = 1,
	ARMY_NUMBER_GARRISON                               = 2,
	ARMY_NUMBER_GOVERNORTOWNGUARD                      = 3,
	ARMY_NUMBER_CARAVAN                                = 4,
	ARMY_MAX                                           = 5
};*/

// Enum MMH7Game.H7StructsAndEnums.BarType
/*enum BarType
{
	BARTYPE_HEALTH                                     = 0,
	BARTYPE_MANA                                       = 1,
	BARTYPE_PROGRESS                                   = 2,
	BARTYPE_MAX                                        = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.EWaypointCommand
/*enum EWaypointCommand
{
	WPC_MOVE_NEXT                                      = 0,
	WPC_WAIT                                           = 1,
	WPC_MAX                                            = 2
};*/

// Enum MMH7Game.H7StructsAndEnums.EPathControlType
/*enum EPathControlType
{
	PCT_CONSTANT                                       = 0,
	PCT_MIRROR                                         = 1,
	PCT_REPEAT                                         = 2,
	PCT_MAX                                            = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.EActorTooltipType
/*enum EActorTooltipType
{
	TT_TYPE_STRING                                     = 0,
	TT_TYPE_RESOURCE_PILE                              = 1,
	TT_TYPE_CRITTER_ARMY                               = 2,
	TT_TYPE_BUILDING_BUFFABLE                          = 3,
	TT_TYPE_HERO_ARMY                                  = 4,
	TT_TYPE_TOWN                                       = 5,
	TT_TYPE_BATTLESITE                                 = 6,
	TT_TYPE_DWELLING                                   = 7,
	TT_TYPE_ITEM                                       = 8,
	TT_TYPE_MAX                                        = 9
};*/

// Enum MMH7Game.H7StructsAndEnums.ELootType
/*enum ELootType
{
	LOOT_TYPE_GOLD                                     = 0,
	LOOT_TYPE_EXP                                      = 1,
	LOOT_TYPE_MAX                                      = 2
};*/

// Enum MMH7Game.H7StructsAndEnums.ETownPopup
/*enum ETownPopup
{
	POPUP_NONE                                         = 0,
	POPUP_BUILD                                        = 1,
	POPUP_RECRUIT                                      = 2,
	POPUP_WARFARE                                      = 3,
	POPUP_HALLOFHEROS                                  = 4,
	POPUP_MARKETPLACE                                  = 5,
	POPUP_MAGICGUILD                                   = 6,
	POPUP_THIEVES                                      = 7,
	POPUP_CARAVAN                                      = 8,
	POPUP_TOWNGUARD                                    = 9,
	POPUP_CUSTOM1                                      = 10,
	POPUP_CUSTOM2                                      = 11,
	POPUP_MAX                                          = 12
};*/

// Enum MMH7Game.H7StructsAndEnums.ECursorType
/*enum ECursorType
{
	CURSOR_ABILITY                                     = 0,
	CURSOR_ABILITY_DENY                                = 1,
	CURSOR_ACTION                                      = 2,
	CURSOR_ACTION_BLOCKED                              = 3,
	CURSOR_BUSY                                        = 4,
	CURSOR_DETAILS                                     = 5,
	CURSOR_EXCHANGE                                    = 6,
	CURSOR_EXCHANGE_BLOCKED                            = 7,
	CURSOR_IBEAM                                       = 8,
	CURSOR_MAGIC                                       = 9,
	CURSOR_MAGIC_DENY                                  = 10,
	CURSOR_MEETING                                     = 11,
	CURSOR_MELEE_N                                     = 12,
	CURSOR_MELEE_NW                                    = 13,
	CURSOR_MELEE_NE                                    = 14,
	CURSOR_MELEE_S                                     = 15,
	CURSOR_MELEE_SW                                    = 16,
	CURSOR_MELEE_SE                                    = 17,
	CURSOR_MELEE_W                                     = 18,
	CURSOR_MELEE_E                                     = 19,
	CURSOR_MOVE                                        = 20,
	CURSOR_MOVE_BLOCKED                                = 21,
	CURSOR_MOVE_FLY                                    = 22,
	CURSOR_MOVE_TELEPORT                               = 23,
	CURSOR_MOVE_WALK                                   = 24,
	CURSOR_NORMAL                                      = 25,
	CURSOR_POINTER                                     = 26,
	CURSOR_SHIP_ANCHOR                                 = 27,
	CURSOR_SHIP_ANCHOR_BLOCKED                         = 28,
	CURSOR_SHIP_MOVE                                   = 29,
	CURSOR_SHIP_MOVE_BLOCKED                           = 30,
	CURSOR_SHOT                                        = 31,
	CURSOR_SHOT_UNSIGHTED                              = 32,
	CURSOR_TALK                                        = 33,
	CURSOR_TELEPORT                                    = 34,
	CURSOR_TELEPORT_BLOCKED                            = 35,
	CURSOR_TOWN                                        = 36,
	CURSOR_TRADE                                       = 37,
	CURSOR_UNAVAILABLE                                 = 38,
	CURSOR_VISIT                                       = 39,
	CURSOR_EMPTY                                       = 40,
	CURSOR_MOVE_GHOSTWALK                              = 41,
	CURSOR_INVISIBLE                                   = 42,
	CURSOR_ANIMATION_TEST                              = 43,
	CURSOR_MAX                                         = 44
};*/

// Enum MMH7Game.H7StructsAndEnums.EWarUnitAnimation
/*enum EWarUnitAnimation
{
	WA_IDLE                                            = 0,
	WA_ATTACK_CENTER                                   = 1,
	WA_ATTACK_LEFT                                     = 2,
	WA_ATTACK_LEFT_WIDE                                = 3,
	WA_ATTACK_RIGHT                                    = 4,
	WA_ATTACK_RIGHT_WIDE                               = 5,
	WA_HIT                                             = 6,
	WA_ABILITY                                         = 7,
	WA_DYING                                           = 8,
	WA_MAX                                             = 9
};*/

// Enum MMH7Game.H7StructsAndEnums.EHeroAnimation
/*enum EHeroAnimation
{
	HA_IDLE                                            = 0,
	HA_MOVE                                            = 1,
	HA_ATTACK                                          = 2,
	HA_ABILITY                                         = 3,
	HA_TURNLEFT                                        = 4,
	HA_TURNRIGHT                                       = 5,
	HA_VICTORY                                         = 6,
	HA_NONE                                            = 7,
	HA_MAX                                             = 8
};*/

// Enum MMH7Game.H7StructsAndEnums.EMoraleType
/*enum EMoraleType
{
	GOOD_MORALE                                        = 0,
	BAD_MORALE                                         = 1,
	NORMAL_MORALE                                      = 2,
	EMoraleType_MAX                                    = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.ELuckType
/*enum ELuckType
{
	GOOD_LUCK                                          = 0,
	BAD_LUCK                                           = 1,
	NOTHING_LUCK                                       = 2,
	ELuckType_MAX                                      = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.Orientation
/*enum Orientation
{
	O_NORTH                                            = 0,
	O_EAST                                             = 1,
	O_SOUTH                                            = 2,
	O_WEST                                             = 3,
	O_MAX                                              = 4
};*/

// Enum MMH7Game.H7StructsAndEnums.ERotationDirection
/*enum ERotationDirection
{
	ERDI_CLOCKWISE                                     = 0,
	ERDI_COUNTERCLOCKWISE                              = 1,
	ERDI_NO_ROTATION                                   = 2,
	ERDI_MAX                                           = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.EZoomDirection
/*enum EZoomDirection
{
	ZD_ZOOM_IN                                         = 0,
	ZD_ZOOM_OUT                                        = 1,
	ZD_NONE                                            = 2,
	ZD_MAX                                             = 3
};*/

// Enum MMH7Game.H7StructsAndEnums.ETargetStat
/*enum ETargetStat
{
	TS_STAT_NONE                                       = 0,
	TS_STAT_HITPOINTS                                  = 1,
	TS_STAT_INITIATIVE                                 = 2,
	TS_STAT_ATTACK                                     = 3,
	TS_STAT_DEFENSE                                    = 4,
	TS_STAT_LEADERSHIP                                 = 5,
	TS_STAT_DESTINY                                    = 6,
	TS_STAT_DAMAGE                                     = 7,
	TS_STAT_MOVEMENT                                   = 8,
	TS_STAT_MAX                                        = 9
};*/

// Enum MMH7Game.H7StructsAndEnums.ECreatureCategory
/*enum ECreatureCategory
{
	CREATUREC_FIGHTER                                  = 0,
	CREATUREC_ROGUE                                    = 1,
	CREATUREC_SHOOTER                                  = 2,
	CREATUREC_MAGE                                     = 3,
	CREATUREC_MAX                                      = 4
};*/

// Enum MMH7Game.H7StructsAndEnums.EUtilityFunction
/*enum EUtilityFunction
{
	UF_BOOLEAN                                         = 0,
	UF_INV_BOOLEAN                                     = 1,
	UF_LINEAR                                          = 2,
	UF_INV_LINEAR                                      = 3,
	UF_SINUS                                           = 4,
	UF_INV_SINUS                                       = 5,
	UF_SQUARE                                          = 6,
	UF_INV_SQUARE                                      = 7,
	UF_CUBIC                                           = 8,
	UF_INV_CUBIC                                       = 9,
	UF_CUSTOM                                          = 10,
	UF_BIAS                                            = 11,
	UF_MAX                                             = 12
};*/

// Enum MMH7Game.H7StructsAndEnums.EAiSensorIConst
/*enum EAiSensorIConst
{
	SIC_DISABLED                                       = 0,
	SIC_GRIDCELLS                                      = 1,
	SIC_THIS_CREATURESTACK                             = 2,
	SIC_CREATURESTACKS                                 = 3,
	SIC_OPPONENT_CREATURESTACKS                        = 4,
	SIC_THIS_HERO                                      = 5,
	SIC_OPPONENT_HERO                                  = 6,
	SIC_THIS_ARMY                                      = 7,
	SIC_OPPONENT_ARMY                                  = 8,
	SIC_SOURCE_GRIDCELL                                = 9,
	SIC_TARGET_GRIDCELL                                = 10,
	SIC_TARGET_CREATURESTACK                           = 11,
	SIC_OPPONENT_ARMIES                                = 12,
	SIC_TOWN_ARMIES                                    = 13,
	SIC_THIS_AOCSITE                                   = 14,
	SIC_VISSITES                                       = 15,
	SIC_TARGET_ARMY                                    = 16,
	SIC_TARGET_VISSITE                                 = 17,
	SIC_THIS_PLAYER                                    = 18,
	SIC_OTHER_PLAYERS                                  = 19,
	SIC_THIS_BUILDINGS                                 = 20,
	SIC_TOWNS                                          = 21,
	SIC_HEROABILITIES                                  = 22,
	SIC_CREATUREABILITY                                = 23,
	SIC_TELEPORTERS                                    = 24,
	SIC_TARGET_TELEPORTER                              = 25,
	SIC_RESOURCES                                      = 26,
	SIC_TARGET_RESOURCE                                = 27,
	SIC_TARGET_BASECREATURESTACK                       = 28,
	SIC_MAKESHIFT_ARMY                                 = 29,
	SIC_HEROABILITY                                    = 30,
	SIC_CREATURE_STAT                                  = 31,
	SIC_CREATURE_TIER                                  = 32,
	SIC_MAX                                            = 33
};*/

// Enum MMH7Game.H7StructsAndEnums.EAiSensorParamType
/*enum EAiSensorParamType
{
	SP_NOTHING                                         = 0,
	SP_UNIT                                            = 1,
	SP_CMAPCELL                                        = 2,
	SP_COMBATARMY                                      = 3,
	SP_AMAPCELL                                        = 4,
	SP_ADVENTUREARMY                                   = 5,
	SP_VISSITE                                         = 6,
	SP_PLAYER                                          = 7,
	SP_BUILDING                                        = 8,
	SP_TOWN                                            = 9,
	SP_HEROABILITY                                     = 10,
	SP_CREATUREABILITY                                 = 11,
	SP_TELEPORTER                                      = 12,
	SP_RESOURCE                                        = 13,
	SP_BASECREATURESTACK                               = 14,
	SP_CREATURESTAT                                    = 15,
	SP_CREATURETIER                                    = 16,
	SP_MAX                                             = 17
};*/

// Enum MMH7Game.H7StructsAndEnums.EAiActionParamId
/*enum EAiActionParamId
{
	APID                                               = 0,
	APID01                                             = 1,
	APID02                                             = 2,
	__APID_NUM                                         = 3,
	EAiActionParamId_MAX                               = 4
};*/

// Enum MMH7Game.H7StructsAndEnums.EAiActionParamType
/*enum EAiActionParamType
{
	AP_NOTHING                                         = 0,
	AP_UNIT                                            = 1,
	AP_CMAPCELL                                        = 2,
	AP_COMBATARMY                                      = 3,
	AP_AMAPCELL                                        = 4,
	AP_ADVENTUREARMY                                   = 5,
	AP_VISSITE                                         = 6,
	AP_PLAYER                                          = 7,
	AP_BUILDING                                        = 8,
	AP_ABILITY                                         = 9,
	AP_TELEPORTER                                      = 10,
	AP_RESOURCE                                        = 11,
	AP_RECRUIT_HERO_DATA                               = 12,
	AP_BASECREATURESTACK                               = 13,
	AP_MAX                                             = 14
};*/

// Enum MMH7Game.H7StructsAndEnums.EAiAdventureSensor
/*enum EAiAdventureSensor
{
	AAS_ArmyStrength                                   = 0,
	AAS_ArmyStrengthCombined                           = 1,
	AAS_DistanceToTarget                               = 2,
	AAS_TargetInterest                                 = 3,
	AAS_ArmyStrengthCombinedNoHero                     = 4,
	AAS_HeroCount                                      = 5,
	AAS_GameProgress                                   = 6,
	AAS_TownDistance                                   = 7,
	AAS_PlayerArmiesCompare                            = 8,
	AAS_PoolGarrison                                   = 9,
	AAS_TownBuilding                                   = 10,
	AAS_GameDayOfWeek                                  = 11,
	AAS_TradeResource                                  = 12,
	AAS_ResourceStockpile                              = 13,
	AAS_TownDefense                                    = 14,
	AAS_TownArmyCount                                  = 15,
	AAS_HireHeroCount                                  = 16,
	AAS_SiteAvailable                                  = 17,
	AAS_InstantRecall                                  = 18,
	AAS_TeleportInterest                               = 19,
	AAS_CanUpgrade                                     = 20,
	AAS_ArmyStrengthCombinedReverse                    = 21,
	AAS_UpgradeStrength                                = 22,
	AAS_TownThreat                                     = 23,
	AAS_TargetThreat                                   = 24,
	AAS_TargetCutoffRange                              = 25,
	AAS_ArmyStrengthCombinedGlobal                     = 26,
	AAS_ArmyStrengthCombinedGlobalReverse              = 27,
	AAS_MAX                                            = 28
};*/

// Enum MMH7Game.H7StructsAndEnums.EAiCombatSensor
/*enum EAiCombatSensor
{
	ACS_ArmyHasRangeAttack                             = 0,
	ACS_GridCellReachable                              = 1,
	ACS_GeomDistance                                   = 2,
	ACS_CanRangeAttack                                 = 3,
	ACS_CanRetaliate                                   = 4,
	ACS_ThreatLevel                                    = 5,
	ACS_HasAdjacentEnemy                               = 6,
	ACS_HPPercentLoss                                  = 7,
	ACS_HPPercentLossRetaliate                         = 8,
	ACS_CanMoveAttack                                  = 9,
	ACS_HasGreaterDamage                               = 10,
	ACS_CanCastBuff                                    = 11,
	ACS_MeleeCasualityCount                            = 12,
	ACS_MeleeCreatureDamage                            = 13,
	ACS_RangeCasualityCount                            = 14,
	ACS_RangeCreatureDamage                            = 15,
	ACS_ManaCost                                       = 16,
	ACS_SpellTargetCheck                               = 17,
	ACS_HealingPercentage                              = 18,
	ACS_AbilityCasualityCount                          = 19,
	ACS_AbilityCreatureDamage                          = 20,
	ACS_Opportunity                                    = 21,
	ACS_SpellSingleDamage                              = 22,
	ACS_SpellMultiDamage                               = 23,
	ACS_SpellSingleHeal                                = 24,
	ACS_SpellMultiHeal                                 = 25,
	ACS_CreatureCount                                  = 26,
	ACS_CreatureStrength                               = 27,
	ACS_MoveDistance                                   = 28,
	ACS_CreatureStat                                   = 29,
	ACS_CreatureIsRanged                               = 30,
	ACS_CreatureAdjacentToEnemy                        = 31,
	ACS_CreatureAdjacentToAlly                         = 32,
	ACS_CreatureTier                                   = 33,
	ACS_CreatureCanAttack                              = 34,
	ACS_CreatureCanBeAttacked                          = 35,
	ACS_RangedCreatureCount                            = 36,
	ACS_GoodTimeToWait                                 = 37,
	ACS_MAX                                            = 38
};*/

// Enum MMH7Game.H7StructsAndEnums.EHeroAffinity
/*enum EHeroAffinity
{
	AFF_MIGHT                                          = 0,
	AFF_MAGIC                                          = 1,
	AFF_MAX                                            = 2
};*/

// Enum MMH7Game.H7AdventureCellMarker.CellMarker_Shape
/*enum CellMarker_Shape
{
	CMS_BOX                                            = 0,
	CMS_CYLINDER                                       = 1,
	CMS_SINGLECELL                                     = 2,
	CMS_USERPICK                                       = 3,
	CMS_MAX                                            = 4
};*/

// Enum MMH7Game.H7WaypointBasedCameraAction.EInterpType
/*enum EInterpType
{
	IT_LINEAR                                          = 0,
	IT_JUMP                                            = 1,
	IT_EASEIN                                          = 2,
	IT_EASEOUT                                         = 3,
	IT_EASEINOUT                                       = 4,
	IT_HOLD                                            = 5,
	IT_MAX                                             = 6
};*/

// Enum MMH7Game.H7GUIGeneralProperties.ETextureQuality
/*enum ETextureQuality
{
	TEXQ_LOWEST                                        = 0,
	TEXQ_LOW                                           = 1,
	TEXQ_MEDIUM                                        = 2,
	TEXQ_HIGH                                          = 3,
	TEXQ_ULTRA                                         = 4,
	TEXQ_MAX                                           = 5
};*/

// Enum MMH7Game.H7GUIGeneralProperties.ELanguageExt
/*enum ELanguageExt
{
	LANG_INT                                           = 0,
	LANG_DEU                                           = 1,
	LANG_FRA                                           = 2,
	LANG_POL                                           = 3,
	LANG_HUN                                           = 4,
	LANG_CHT                                           = 5,
	LANG_CHN                                           = 6,
	LANG_ITA                                           = 7,
	LANG_ESN                                           = 8,
	LANG_CZE                                           = 9,
	LANG_KOR                                           = 10,
	LANG_PTB                                           = 11,
	LANG_RUS                                           = 12,
	LANG_RUM                                           = 13,
	LANG_MAX                                           = 14
};*/

// Enum MMH7Game.H7GUIGeneralProperties.EAudioLanguageExt
/*enum EAudioLanguageExt
{
	AUDIOLANG_INT                                      = 0,
	AUDIOLANG_DEU                                      = 1,
	AUDIOLANG_FRA                                      = 2,
	AUDIOLANG_POL                                      = 3,
	AUDIOLANG_CHN                                      = 4,
	AUDIOLANG_RUS                                      = 5,
	AUDIOLANG_MAX                                      = 6
};*/

// Enum MMH7Game.H7KeybindManager.EKeybindCategory
/*enum EKeybindCategory
{
	KC_GENERAL                                         = 0,
	KC_ADVENTURE                                       = 1,
	KC_COMBAT                                          = 2,
	KC_TOWN                                            = 3,
	KC_CAMERA                                          = 4,
	KC_MOVEMENT                                        = 5,
	KC_CHEATS                                          = 6,
	KC_WINDOW_UNDEFINED                                = 7,
	KC_WINDOW_GAME_MENU                                = 8,
	KC_WINDOW_REQUEST                                  = 9,
	KC_WINDOW_DIALOG                                   = 10,
	KC_WINDOW_COMBAT                                   = 11,
	KC_WINDOW_BUILDING                                 = 12,
	KC_WINDOW_WEEKLY                                   = 13,
	KC_WINDOW_LOADSAVE                                 = 14,
	KC_WINDOW_QUESTCOMPLETE                            = 15,
	KC_MAX                                             = 16
};*/

// Enum MMH7Game.H7CouncilGameInfo.ECouncilState
/*enum ECouncilState
{
	CS_Invalid                                         = 0,
	CS_MainMenu                                        = 1,
	CS_TransitionBack                                  = 2,
	CS_CouncilView                                     = 3,
	CS_CouncillorView                                  = 4,
	CS_CampaignView                                    = 5,
	CS_MAX                                             = 6
};*/

// Enum MMH7Game.H7OptionsManager.EOptionCategory
/*enum EOptionCategory
{
	OC_VIDEO                                           = 0,
	OC_SOUND                                           = 1,
	OC_GAMEPLAY                                        = 2,
	OC_GUI                                             = 3,
	OC_KEYBINDINGS                                     = 4,
	OC_DEBUG                                           = 5,
	OC_MAX                                             = 6
};*/

// Enum MMH7Game.H7OptionsManager.EOptionType
/*enum EOptionType
{
	OT_BOOL                                            = 0,
	OT_FLOAT                                           = 1,
	OT_ENUM                                            = 2,
	OT_KEYBIND                                         = 3,
	OT_MAX                                             = 4
};*/

// Enum MMH7Game.H7OptionsManager.EOptionChangeMode
/*enum EOptionChangeMode
{
	OM_LIVE                                            = 0,
	OM_APPLY                                           = 1,
	OM_RESTART                                         = 2,
	OM_MAX                                             = 3
};*/

// Enum MMH7Game.H7IActionable.EActionCategory
/*enum EActionCategory
{
	EAC_MISC                                           = 0,
	EAC_GAME                                           = 1,
	EAC_CAMERA                                         = 2,
	EAC_HERO                                           = 3,
	EAC_QUEST                                          = 4,
	EAC_CRITTER                                        = 5,
	EAC_PLAYER                                         = 6,
	EAC_TOWN                                           = 7,
	EAC_DESTRUCTIBLE                                   = 8,
	EAC_BUILDING                                       = 9,
	EAC_OBJECT                                         = 10,
	EAC_ITEM                                           = 11,
	EAC_TILE                                           = 12,
	EAC_MAX                                            = 13
};*/

// Enum MMH7Game.H7IConditionable.EConditionCategory
/*enum EConditionCategory
{
	ECC_MISC                                           = 0,
	ECC_PLAYER                                         = 1,
	ECC_ARMY                                           = 2,
	ECC_DESTRUCTIBLE                                   = 3,
	ECC_GAME                                           = 4,
	ECC_SCRIPT                                         = 5,
	ECC_HERO                                           = 6,
	ECC_MAX                                            = 7
};*/

// Enum MMH7Game.H7ITriggerable.ETriggerCategory
/*enum ETriggerCategory
{
	ETC_MISC                                           = 0,
	ETC_HERO                                           = 1,
	ETC_PLAYER                                         = 2,
	ETC_DESTRUCTIBLE                                   = 3,
	ETC_TOWNS_FORTS                                    = 4,
	ETC_GAME                                           = 5,
	ETC_TIME                                           = 6,
	ETC_SCENARIO                                       = 7,
	ETC_MAX                                            = 8
};*/

// Enum MMH7Game.H7MessageSystem.H7MessageDestination
/*enum H7MessageDestination
{
	MD_LOG                                             = 0,
	MD_QA_LOG                                          = 1,
	MD_SIDE_BAR                                        = 2,
	MD_POPUP                                           = 3,
	MD_ERROR_SCREEN                                    = 4,
	MD_SLIDE_IN                                        = 5,
	MD_FLOATING                                        = 6,
	MD_FULLSCREEN_FLOATING                             = 7,
	MD_TOP_NOTE                                        = 8,
	MD_NOTE_BAR                                        = 9,
	MD_CHAT                                            = 10,
	MD_MAX                                             = 11
};*/

// Enum MMH7Game.H7QuestController.EEndGameAction
/*enum EEndGameAction
{
	EGA_NEXT_MAP                                       = 0,
	EGA_COUNCIL                                        = 1,
	EGA_MAINMENU                                       = 2,
	EGA_OBSERVER                                       = 3,
	EGA_LOAD_GAME                                      = 4,
	EGA_RESTART_MAP                                    = 5,
	EGA_MAX                                            = 6
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ERMGZoneShare
/*enum ERMGZoneShare
{
	EZS_TREASURE_SHARE                                 = 0,
	EZS_ARTIFACT_SHARE                                 = 1,
	EZS_BATTLE_SITE_SHARE                              = 2,
	EZS_TEMP_BUFF_SHARE                                = 3,
	EZS_PERM_BONUS_SHARE                               = 4,
	EZS_ARC_LIB_SHARE                                  = 5,
	EZS_RES_BUILD_SHARE                                = 6,
	EZS_MISC_BUILD_SHARE                               = 7,
	EZS_MAX                                            = 8
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ERMGConnectorType
/*enum ERMGConnectorType
{
	ERMGCT_NONE                                        = 0,
	ERMGCT_A                                           = 1,
	ERMGCT_B                                           = 2,
	ERMGCT_MAX                                         = 3
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ETownLevel
/*enum ETownLevel
{
	ETL_LEVEL                                          = 0,
	ETL_LEVEL01                                        = 1,
	ETL_LEVEL02                                        = 2,
	ETL_LEVEL03                                        = 3,
	ETL_LEVEL_MAX                                      = 4
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.EFortLevel
/*enum EFortLevel
{
	EFL_LEVEL                                          = 0,
	EFL_LEVEL01                                        = 1,
	EFL_LEVEL02                                        = 2,
	EFL_LEVEL_MAX                                      = 3
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.EAoCLordType
/*enum EAoCLordType
{
	ALT_NONE                                           = 0,
	ALT_TOWN                                           = 1,
	ALT_FORT                                           = 2,
	ALT_MAX                                            = 3
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ERMGBuildingType
/*enum ERMGBuildingType
{
	ERBT_UNDEFINED                                     = 0,
	ERBT_TOWN                                          = 1,
	ERBT_FORT                                          = 2,
	ERBT_DWELLING                                      = 3,
	ERBT_MINE                                          = 4,
	ERBT_NEUTRAL_SITE                                  = 5,
	ERBT_PICKUP_RESOURCE                               = 6,
	ERBT_PICKUP_ITEM                                   = 7,
	ERBT_TELEPORTER                                    = 8,
	ERBT_RESOURCE_CLUSTER                              = 9,
	ERBT_MAX                                           = 10
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.EMapSize
/*enum EMapSize
{
	MS_TINY                                            = 0,
	MS_SMALL                                           = 1,
	MS_MEDIUM                                          = 2,
	MS_LARGE                                           = 3,
	MS_MAX                                             = 4
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ELayerType
/*enum ELayerType
{
	ELT_PLANE                                          = 0,
	ELT_CLIFF                                          = 1,
	ELT_COAST                                          = 2,
	ELT_DECORATION                                     = 3,
	ELT_ROAD                                           = 4,
	ELT_CUSTOM                                         = 5,
	ELT_MAX                                            = 6
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ERMGTeleporterType
/*enum ERMGTeleporterType
{
	ERTT_TELEPORTER                                    = 0,
	ERTT_UNDERGROUND_ENTRANCE                          = 1,
	ERTT_UNDERGROUND_EXIT                              = 2,
	ERTT_MAX                                           = 3
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ERoundingType
/*enum ERoundingType
{
	RT_FLOOR                                           = 0,
	RT_CEIL                                            = 1,
	RT_MAX                                             = 2
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ECritterAmount
/*enum ECritterAmount
{
	ECA_FEW                                            = 0,
	ECA_SOME                                           = 1,
	ECA_MANY                                           = 2,
	ECA_HORDE                                          = 3,
	ECA_MAX                                            = 4
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.ECritterStrength
/*enum ECritterStrength
{
	CR_WEAK                                            = 0,
	CR_MEDIUM                                          = 1,
	CR_HARD                                            = 2,
	CR_INSANE                                          = 3,
	CR_MAX                                             = 4
};*/

// Enum MMH7Game.H7RMGStructsAndEnums.EMineType
/*enum EMineType
{
	MINE_GOLD                                          = 0,
	MINE_WOOD                                          = 1,
	MINE_CRYSTAL                                       = 2,
	MINE_ORE                                           = 3,
	MINE_STARSILVER                                    = 4,
	MINE_DRAGONSTEEL                                   = 5,
	MINE_SHADOWSTEEL                                   = 6,
	MINE_MAX                                           = 7
};*/

// Enum MMH7Game.H7SavegameController.H7SavegameSlotType
/*enum H7SavegameSlotType
{
	H7SavegameSlotType_Normal                          = 0,
	H7SavegameSlotType_Quicksave                       = 1,
	H7SavegameSlotType_Autosave                        = 2,
	H7SavegameSlotType_Profile                         = 3,
	H7SavegameSlotType_CampaignTransition              = 4,
	H7SavegameSlotType_MAX                             = 5
};*/

// Enum MMH7Game.H7SavegameController.H7SavegameControllerTaskState
/*enum H7SavegameControllerTaskState
{
	H7SavegameControllerTaskState_None                 = 0,
	H7SavegameControllerTaskState_InProgress           = 1,
	H7SavegameControllerTaskState_ReadyToFinish        = 2,
	H7SavegameControllerTaskState_MAX                  = 3
};*/

// Enum MMH7Game.H7SavegameController.H7SavegameControllerSaveType
/*enum H7SavegameControllerSaveType
{
	H7SavegameControllerSaveType_None                  = 0,
	H7SavegameControllerSaveType_Disk                  = 1,
	H7SavegameControllerSaveType_UPlay                 = 2,
	H7SavegameControllerSaveType_MAX                   = 3
};*/

// Enum MMH7Game.H7SeqAct_BaseDialogue.EDialogueSpeakerPosition
/*enum EDialogueSpeakerPosition
{
	DSP_LEFT                                           = 0,
	DSP_RIGHT                                          = 1,
	DSP_MAX                                            = 2
};*/

// Enum MMH7Game.H7SeqAct_FocusCamera.EFocusCameraZoomValue
/*enum EFocusCameraZoomValue
{
	EFocusCameraZoomValue_ValueMax                     = 0,
	EFocusCameraZoomValue_ValueMin                     = 1,
	EFocusCameraZoomValue_ValueDefault                 = 2,
	EFocusCameraZoomValue_ValueCustom                  = 3,
	EFocusCameraZoomValue_MAX                          = 4
};*/

// Enum MMH7Game.H7SeqAct_Quest_NewNode.EH7QuestRewardAttribute
/*enum EH7QuestRewardAttribute
{
	EH7QRT_A_Might                                     = 0,
	EH7QRT_A_Magic                                     = 1,
	EH7QRT_A_Defense                                   = 2,
	EH7QRT_A_Spirit                                    = 3,
	EH7QRT_A_Leadership                                = 4,
	EH7QRT_A_Destiny                                   = 5,
	EH7QRT_A_MAX                                       = 6
};*/

// Enum MMH7Game.H7SeqAct_Quest_NewNode.EH7QuestRewardType
/*enum EH7QuestRewardType
{
	EH7QRT_None                                        = 0,
	EH7QRT_Attribute                                   = 1,
	EH7QRT_Artifact                                    = 2,
	EH7QRT_Creature                                    = 3,
	EH7QRT_Expierence                                  = 4,
	EH7QRT_Resource                                    = 5,
	EH7QRT_MAX                                         = 6
};*/

// Enum MMH7Game.H7SeqAct_QuestObjective.EH7ObjectiveStage
/*enum EH7ObjectiveStage
{
	EH7OS_STAGE                                        = 0,
	EH7OS_STAGE01                                      = 1,
	EH7OS_STAGE02                                      = 2,
	EH7OS_STAGE03                                      = 3,
	EH7OS_STAGE04                                      = 4,
	EH7OS_STAGE05                                      = 5,
	EH7OS_STAGE06                                      = 6,
	EH7OS_STAGE07                                      = 7,
	EH7OS_STAGE08                                      = 8,
	EH7OS_STAGE_MAX                                    = 9
};*/

// Enum MMH7Game.H7SeqCon_DestructibleObjectIs.EDestructibleObjectState
/*enum EDestructibleObjectState
{
	DOS_INTACT                                         = 0,
	DOS_DESTROYED                                      = 1,
	DOS_MAX                                            = 2
};*/

// Enum MMH7Game.H7SeqCon_Event.EEventExecution
/*enum EEventExecution
{
	EE_ONCE                                            = 0,
	EE_MULTIPLE                                        = 1,
	EE_ALWAYS                                          = 2,
	EE_MAX                                             = 3
};*/

// Enum MMH7Game.H7SeqEvent_CombatTrigger.EWhichCombatMap
/*enum EWhichCombatMap
{
	H7_EWC_ANY                                         = 0,
	H7_EWC_SPECIFIC                                    = 1,
	H7_EWC_MAX                                         = 2
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class MMH7Game.H7StructsAndEnumsNative ( Property size: 0 iter: 277) 
// Class name index: 7953 
// 0x0000 (0x0060 - 0x0060)
class UH7StructsAndEnumsNative : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3168 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7AdventureLayerCellProperty ( Property size: 10 iter: 10) 
// Class name index: 7955 
// 0x005C (0x00BC - 0x0060)
class UH7AdventureLayerCellProperty : public UH7LandscapeGameLayerInfoData
{
public:
	struct FString                                     DisplayName;                                      		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      GridColor;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              movementCost;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeepWaterThreshold;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           mCombatMapList;                                   		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mWetCombatMapList;                                		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkEvent*                                    mPlayAkEvents;                                    		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayAmbientAkEvents;                             		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayFoWAmbientAkEvents;                          		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeAkEvents;                                  		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3170 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CombatMapGridDecalComponent ( Property size: 5 iter: 7) 
// Class name index: 7957 
// 0x0030 (0x03E0 - 0x03B0)
class UH7CombatMapGridDecalComponent : public UDecalComponent
{
public:
	class AH7EditorCombatGrid*                         mOwnerGrid;                                       		// 0x03B0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UMaterial*                                   mOriginalMaterial;                                		// 0x03B8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   mDynamicMaterialInstance;                         		// 0x03C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2DDynamic*                           mDynamicGridDataTexture;                          		// 0x03C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            mDynamicGridDataTexMip;                           		// 0x03D0 (0x0010) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3172 ];

		return pClassPointer;
	};

	void ManualReattach ( );
	void UpdateGridDataRendering ( );
};



// Class MMH7Game.H7LandscapeFilteredDecalComponent ( Property size: 2 iter: 2) 
// Class name index: 7959 
// 0x0005 (0x03B5 - 0x03B0)
class UH7LandscapeFilteredDecalComponent : public UDecalComponent
{
public:
	unsigned long                                      mIsLandscapeFilteringActive : 1;                  		// 0x03B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      mLandscapeToProjectOn;                            		// 0x03B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3174 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ListingSavegame ( Property size: 0 iter: 6) 
// Class name index: 7961 
// 0x0000 (0x0060 - 0x0060)
class UH7ListingSavegame : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3176 ];

		return pClassPointer;
	};

	struct FString GetSavegameFolderPath ( );
	void Stop ( );
	void Poll ( TArray< struct FH7ListingSavegameDataScene >* outData, int* isPollingOver );
	void Start ( );
};



// Class MMH7Game.H7SavegameController ( Property size: 1 iter: 10) 
// Class name index: 7963 
// 0x00E8 (0x0148 - 0x0060)
class UH7SavegameController : public UObject
{
public:
	struct FH7SavegameData                             mHeaderData;                                      		// 0x0060 (0x00E8) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3178 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SavegameDataHolder ( Property size: 0 iter: 1) 
// Class name index: 7965 
// 0x0000 (0x0060 - 0x0060)
class UH7SavegameDataHolder : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3180 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SavegameTask_Base ( Property size: 4 iter: 7) 
// Class name index: 7967 
// 0x000C (0x006C - 0x0060)
class UH7SavegameTask_Base : public UObject
{
public:
	unsigned char                                      mCurrentState;                                    		// 0x0060 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      mCurrentSavegameSystem;                           		// 0x0061 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      mIsErrorTriggered : 1;                            		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                mTargetSlotIndex;                                 		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3182 ];

		return pClassPointer;
	};

	int GetTargetSlotIndex ( );
	void UpdateStatus ( );
	unsigned char GetCurrentTaskState ( );
};



// Class MMH7Game.H7SavegameTask_Checking ( Property size: 3 iter: 5) 
// Class name index: 7969 
// 0x0014 (0x0080 - 0x006C)
class UH7SavegameTask_Checking : public UH7SavegameTask_Base
{
public:
	unsigned long                                      mResultIsSlotFilled : 1;                          		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FPointer                                    mUPlayOverlapOperation;                           		// 0x0070 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    mUPlayGameList;                                   		// 0x0078 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3184 ];

		return pClassPointer;
	};

	bool FinishTaskCheckSlot ( int* isSlotFilled );
	void StartTaskCheckSlot ( int SlotIndex );
};



// Class MMH7Game.H7SavegameTask_Delete ( Property size: 2 iter: 4) 
// Class name index: 7971 
// 0x000C (0x0078 - 0x006C)
class UH7SavegameTask_Delete : public UH7SavegameTask_Base
{
public:
	int                                                mCurrentDeleteStep;                               		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    mUPlayOverlapOperation;                           		// 0x0070 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3186 ];

		return pClassPointer;
	};

	bool FinishDeleteTask ( );
	void StartDeleteTask ( int SlotIndex );
};



// Class MMH7Game.H7SavegameTask_Loading ( Property size: 6 iter: 9) 
// Class name index: 7973 
// 0x0034 (0x00A0 - 0x006C)
class UH7SavegameTask_Loading : public UH7SavegameTask_Base
{
public:
	TArray< unsigned char >                            mGameDataBuffer;                                  		// 0x006C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mCurrentLoadStep;                                 		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    mUPlayOverlapOperation;                           		// 0x0080 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    mUPlayGameList;                                   		// 0x0088 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    mSavegameHandle;                                  		// 0x0090 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    mUPlayByteRead;                                   		// 0x0098 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3188 ];

		return pClassPointer;
	};

	bool FinishObjectLoadTask ( class UObject* Obj );
	bool FinishSceneLoadTask ( );
	void StartLoadTask ( int SlotIndex );
};



// Class MMH7Game.H7SavegameTask_Saving ( Property size: 7 iter: 13) 
// Class name index: 7975 
// 0x0040 (0x00AC - 0x006C)
class UH7SavegameTask_Saving : public UH7SavegameTask_Base
{
public:
	TArray< unsigned char >                            mGameDataBuffer;                                  		// 0x006C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      mCurrentSlotType;                                 		// 0x007C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     mTargetName;                                      		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mCurrentSaveStep;                                 		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    mUPlayOverlapOperation;                           		// 0x0094 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    mUPlayGameList;                                   		// 0x009C (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    mSavegameHandle;                                  		// 0x00A4 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3190 ];

		return pClassPointer;
	};

	bool FinishSaveTaskGetSlot ( int* outSlotIndex );
	bool FinishSaveTask ( );
	void StartObjectSaveTaskToAreaSlot ( unsigned char slotType, struct FString SaveGameName, class UObject* Data );
	void StartObjectSaveTask ( int SlotIndex, struct FString SaveGameName, class UObject* Data );
	void StartSceneSaveTaskToAreaSlot ( unsigned char slotType, struct FString SaveGameName, struct FH7SavegameData* saveGameHeaderData );
	void StartSceneSaveTask ( int SlotIndex, struct FString SaveGameName, struct FH7SavegameData* saveGameHeaderData );
};



// Class MMH7Game.H7SavegameTaskSlotManager ( Property size: 1 iter: 2) 
// Class name index: 7977 
// 0x0010 (0x0070 - 0x0060)
class UH7SavegameTaskSlotManager : public UObject
{
public:
	TArray< struct FH7SavegameTask_SlotLocking >       mCurrentlyLockedSlot;                             		// 0x0060 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3192 ];

		return pClassPointer;
	};

};



// Class MMH7Game.SaveGameStatePlayerController ( Property size: 20 iter: 52) 
// Class name index: 7979 
// 0x0068 (0x079C - 0x0734)
class ASaveGameStatePlayerController : public AGamePlayerController
{
public:
	class UH7SaveGameHeaderManager*                    mSaveGameHeaderManager;                           		// 0x0734 (0x0008) [0x0000000000000000]              
	class UH7ListingSavegame*                          mSaveGameScanner;                                 		// 0x073C (0x0008) [0x0000000000000000]              
	unsigned long                                      mCanPoll : 1;                                     		// 0x0744 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mScanningSaves : 1;                               		// 0x0744 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mSavedThisTick : 1;                               		// 0x0744 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mLoadedThisTick : 1;                              		// 0x0744 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      mSaveTaskSucceeded : 1;                           		// 0x0744 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      mLoadTaskSucceeded : 1;                           		// 0x0744 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      mDeleteTaskSucceeded : 1;                         		// 0x0744 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      mCheckTaskSucceeded : 1;                          		// 0x0744 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      mPreSlotCheck : 1;                                		// 0x0744 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      mPostSlotCheck : 1;                               		// 0x0744 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      mSlotCheckMP : 1;                                 		// 0x0744 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      mWantsQuickLoad : 1;                              		// 0x0744 (0x0004) [0x0000000000000000] [0x00000800] 
	TArray< struct FH7ListingSavegameDataScene >       mSaveGameList;                                    		// 0x0748 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7ListingSavegameDataScene >       mScannedSaves;                                    		// 0x0758 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UH7SavegameTask_Base* >              mSaveLoadTasks;                                   		// 0x0768 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mSlotCheckStatus;                                 		// 0x0778 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __mOnDeleteComplete__Delegate;                    		// 0x077C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0780 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SaveGameSort__Delegate;                         		// 0x078C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0790 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3194 ];

		return pClassPointer;
	};

	void ExitHeroes ( );
	void eventComputeTick ( );
	void LoadPlayerProfileState ( struct FString Filename );
	void SavePlayerProfileState ( struct FString Filename );
	struct FString ScrubScannerSaveName ( struct FString scannerSaveName );
	struct FString ScrubUserSaveName ( struct FString userSaveName );
	struct FString ScrubFileName ( struct FString Filename );
	class UH7SaveGameHeaderManager* GetSaveGameHeaderManagerForSaveGame ( int SlotIndex );
	bool SaveGameExists ( int SlotIndex );
	int GetIndexOf ( struct FString Filename );
	int SaveGameSort ( struct FH7ListingSavegameDataScene A, struct FH7ListingSavegameDataScene B );
	void SortSaveGameList ( );
	TArray< struct FH7ListingSavegameDataScene > GetSaveGameList ( );
	void DeleteSaveGameInUplay ( int SlotIndex );
	void DeleteSaveGame ( int SlotIndex, struct FScriptDelegate callbackFunction );
	void LoadGameState ( int SlotIdx, struct FString MapName, unsigned long isMultiplayer );
	void CacheSaves ( );
	void ClearSavesCache ( );
	void SaveGameComplete ( int SlotIndex, unsigned char saveType, struct FString userInputName );
	void Savegame ( int SlotIndex, unsigned char saveType, struct FString userInputName );
	int GetSlotIdMP ( int checksum );
	void ProcessScanMP ( );
	void ScanForAllSaveGamesMP ( unsigned long justSlotCheck );
	void StopScan ( );
	void ScanComplete ( );
	void ProcessScan ( );
	void ScanForAllSaveGames ( );
	void eventPostBeginPlay ( );
	class AH7Hud* GetHUD ( );
	class UH7SaveGameHeaderManager* GetSaveGameHeaderManager ( );
	void mOnDeleteComplete ( );
};



// Class MMH7Game.H7ActorFactory ( Property size: 0 iter: 0) 
// Class name index: 7981 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3196 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CameraHeightVolume ( Property size: 0 iter: 0) 
// Class name index: 7983 
// 0x0000 (0x027C - 0x027C)
class AH7CameraHeightVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3198 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CellChangerActor ( Property size: 3 iter: 5) 
// Class name index: 7985 
// 0x001F (0x026C - 0x024D)
class AH7CellChangerActor : public AStaticMeshActor
{
public:
	TArray< class UH7AdventureMapCell* >               mCellsToChange;                                   		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystemComponent*                    mFX;                                              		// 0x0260 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                mLastCellChange;                                  		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3200 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void eventProcessCellChange ( unsigned char cellMovementType );
};



// Class MMH7Game.H7EditorCameraHeightTool ( Property size: 4 iter: 5) 
// Class name index: 7987 
// 0x0044 (0x027C - 0x0238)
class UH7EditorCameraHeightTool : public UPrimitiveComponent
{
public:
	class UMaterialInstance*                           Material;                                         		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FBoxSphereBounds                            ComputedBounds;                                   		// 0x0240 (0x001C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FCamHeight_VertexData >             VertexData;                                       		// 0x025C (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      IndiceData;                                       		// 0x026C (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3202 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7EditorCellOverlayComponent ( Property size: 5 iter: 6) 
// Class name index: 7989 
// 0x0048 (0x0280 - 0x0238)
class UH7EditorCellOverlayComponent : public UPrimitiveComponent
{
public:
	class UMaterialInstance*                           Material;                                         		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Offset;                                           		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBoxSphereBounds                            ComputedBounds;                                   		// 0x0244 (0x001C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FCellOverlay_VertexData >           VertexData;                                       		// 0x0260 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      IndiceData;                                       		// 0x0270 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3204 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7EditorDummyMapObject ( Property size: 1 iter: 2) 
// Class name index: 7991 
// 0x000B (0x0258 - 0x024D)
class AH7EditorDummyMapObject : public AStaticMeshActor
{
public:
	struct FPointer                                    VfTable_IH7IEditorTerrainScan;                    		// 0x0250 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3206 ];

		return pClassPointer;
	};

	void OnTerrainChange ( class ULandscapeLayerInfoObject* newLayer, class ALandscapeProxy* newLandscape );
};



// Class MMH7Game.H7EditorItemType ( Property size: 1 iter: 1) 
// Class name index: 7993 
// 0x0001 (0x0061 - 0x0060)
class UH7EditorItemType : public UObject
{
public:
	unsigned char                                      mItemTypeProperty;                                		// 0x0060 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3208 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7EditorScanner ( Property size: 3 iter: 7) 
// Class name index: 7995 
// 0x0004 (0x00B8 - 0x00B4)
class UH7EditorScanner : public UBrushBuilder
{
public:
	unsigned long                                      mRecreateLandscapeColliders : 1;                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mAllStaticMeshActorToFoliage : 1;                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mSelectedStaticMeshActorToFoliage : 1;            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3210 ];

		return pClassPointer;
	};

	void StaticMeshActorToFoliage ( unsigned long onlySelected );
	void RecreateLandscapeColliders ( );
	void PerformFullScan ( );
	bool eventBuild ( );
};



// Class MMH7Game.H7EditorTools ( Property size: 13 iter: 27) 
// Class name index: 7997 
// 0x000C (0x00C0 - 0x00B4)
class UH7EditorTools : public UBrushBuilder
{
public:
	unsigned long                                      mWeldStaticMeshes : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mLandscapeCropStaticMeshes : 1;                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mTransformLandscape : 1;                          		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mFullTransformLandscape : 1;                      		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mVertexTransformLandscape : 1;                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mComputeLandscapeMaterials : 1;                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mStaticMeshesInstantiation : 1;                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mConvertToH7InterpActor : 1;                      		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      mConvertToH7ParticleEmitter : 1;                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      mResetArmyMeshes : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      mSetupDefaultCellLayerData : 1;                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      mClearPathsRebuilt : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	class UPrefab*                                     mPrefabToClean;                                   		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3212 ];

		return pClassPointer;
	};

	void ClearPathsRebuilt ( );
	void SetupDefaultCellLayerData ( );
	void ResetArmyMeshes ( );
	void CleanupPrefab ( );
	void ConvertParticleEmitters ( );
	void ConvertInterpActors ( );
	void StaticMeshesInstantiation ( );
	void ComputeLandscapeMaterials ( );
	void VertexTransformLandscape ( );
	void FullTransformLandscape ( );
	void TransformLandscape ( );
	void LandscapeCropStaticMeshes ( );
	void WeldStaticMeshes ( );
	bool eventBuild ( );
};



// Class MMH7Game.H7IAdventureMapCellInteractor ( Property size: 0 iter: 2) 
// Class name index: 7999 
// 0x0000 (0x0060 - 0x0060)
class UH7IAdventureMapCellInteractor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3214 ];

		return pClassPointer;
	};

	void OnArmyUnregister ( class AH7AdventureArmy* Army, class UH7AdventureMapCell* newDestinationCell );
	void OnArmyRegister ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7IEditorTerrainScan ( Property size: 0 iter: 1) 
// Class name index: 8001 
// 0x0000 (0x0060 - 0x0060)
class UH7IEditorTerrainScan : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3216 ];

		return pClassPointer;
	};

	void OnTerrainChange ( class ULandscapeLayerInfoObject* newLayer, class ALandscapeProxy* newLandscape );
};



// Class MMH7Game.H7KismetHeroReplacer ( Property size: 4 iter: 6) 
// Class name index: 8003 
// 0x0014 (0x00C8 - 0x00B4)
class UH7KismetHeroReplacer : public UBrushBuilder
{
public:
	unsigned long                                      mRebuild : 1;                                     		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mPreview : 1;                                     		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AH7EditorHero*                               mOldHero;                                         		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorHero*                               mNewHero;                                         		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3218 ];

		return pClassPointer;
	};

	bool ReplaceHeroes ( );
	bool eventBuild ( );
};



// Class MMH7Game.H7LandscapeGenerator ( Property size: 29 iter: 34) 
// Class name index: 8005 
// 0x00E0 (0x0194 - 0x00B4)
class UH7LandscapeGenerator : public UBrushBuilder
{
public:
	TArray< struct FLandscapeGeneratorMapSizePreference > MapSizePreferences;                               		// 0x00B4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLandscapeGeneratorTypePreference > TypePreferences;                                  		// 0x00C4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLandscapeGeneratorTypePreference > TypePreferences_Underground;                      		// 0x00D4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FVector                                     UndergroundOffset;                                		// 0x00E4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     WaterOffset;                                      		// 0x00F0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     SkyboxOffset;                                     		// 0x00FC (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     LandscapeDrawscale;                               		// 0x0108 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      UndergroundLightColor;                            		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      UndergroundLightEnvironmentColor;                 		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              UndergroundLightEnvironmentIntensity;             		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              UndergroundLightBrightness;                       		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      UndergroundLightCastShadows : 1;                  		// 0x0124 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      mRebuild : 1;                                     		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mInited : 1;                                      		// 0x0124 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FLinearColor                                UndergroundFogColor;                              		// 0x0128 (0x0010) [0x0000000000004000]              ( CPF_Config )
	float                                              UndergroundFogBrightness;                         		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              UndergroundFogDensity;                            		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      mMapSizePredefined;                               		// 0x0140 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mLandscapeType;                                   		// 0x0141 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSizeWidth;                                       		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSizeHeight;                                      		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mLocation;                                        		// 0x014C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LandscapeMaterial;                                		// 0x0158 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ComponentSizeQuads;                               		// 0x0160 (0x0004) [0x0000000000000000]              
	int                                                SubsectionSizeQuads;                              		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSubsections;                                   		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             mLayerNames;                                      		// 0x016C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UH7LandscapeGameLayerInfoData* >     mGameData;                                        		// 0x017C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       mDefaultLayer;                                    		// 0x018C (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3220 ];

		return pClassPointer;
	};

	class ALandscape* ActualCreateLandscape ( );
	void SetDataFromConfig ( );
	bool eventBuild ( );
};



// Class MMH7Game.H7ObjectLayerFilterConfig ( Property size: 1 iter: 2) 
// Class name index: 8007 
// 0x0010 (0x0070 - 0x0060)
class UH7ObjectLayerFilterConfig : public UObject
{
public:
	TArray< struct FObjectLayerFilter >                ObjectLayerFilters;                               		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3222 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ObjectLayerFilterConfig_Artifacts ( Property size: 0 iter: 0) 
// Class name index: 8010 
// 0x0000 (0x0070 - 0x0070)
class UH7ObjectLayerFilterConfig_Artifacts : public UH7ObjectLayerFilterConfig
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3224 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ObjectLayerFilterConfig_Buildings ( Property size: 0 iter: 0) 
// Class name index: 8012 
// 0x0000 (0x0070 - 0x0070)
class UH7ObjectLayerFilterConfig_Buildings : public UH7ObjectLayerFilterConfig
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3226 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ObjectLayerFilterConfig_Creatures ( Property size: 0 iter: 0) 
// Class name index: 8014 
// 0x0000 (0x0070 - 0x0070)
class UH7ObjectLayerFilterConfig_Creatures : public UH7ObjectLayerFilterConfig
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3228 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ObjectLayerFilterConfig_Misc ( Property size: 0 iter: 0) 
// Class name index: 8016 
// 0x0000 (0x0070 - 0x0070)
class UH7ObjectLayerFilterConfig_Misc : public UH7ObjectLayerFilterConfig
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3230 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ObjectLayerFilterConfig_Resources ( Property size: 0 iter: 0) 
// Class name index: 8018 
// 0x0000 (0x0070 - 0x0070)
class UH7ObjectLayerFilterConfig_Resources : public UH7ObjectLayerFilterConfig
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3232 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ObjectLayerFilterConfig_Towns ( Property size: 0 iter: 0) 
// Class name index: 8020 
// 0x0000 (0x0070 - 0x0070)
class UH7ObjectLayerFilterConfig_Towns : public UH7ObjectLayerFilterConfig
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3234 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7AchievementManager ( Property size: 7 iter: 45) 
// Class name index: 8022 
// 0x001C (0x007C - 0x0060)
class UH7AchievementManager : public UObject
{
public:
	TArray< class UH7UPlayTask* >                      mRunningUPlayTasks;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7PlayerProfile*                            playerProfile;                                    		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned long                                      mCompletedFirstCampaignMap : 1;                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mCompletedOneCampaign : 1;                        		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mCompletedTwoCampaigns : 1;                       		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mCompletedFinalCampaign : 1;                      		// 0x0078 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mCompletedOneSkirmishGame : 1;                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3236 ];

		return pClassPointer;
	};

	void Cheat_UnlockAllRewards ( );
	bool CanRewardBeUsed ( );
	int GetRewardIndexByID ( struct FString nameID );
	void SetStateReward_LM ( unsigned long NewState );
	bool GetStateReward_LM ( );
	void SetStateReward_AP ( unsigned long NewState );
	bool GetStateReward_AP ( );
	void SetStateReward_BH ( unsigned long NewState );
	bool GetStateReward_BH ( );
	void SetStateReward_PM ( unsigned long NewState );
	bool GetStateReward_PM ( );
	void SetStateReward_HD ( unsigned long NewState );
	bool GetStateReward_HD ( );
	void eventBuildRewardMenu ( );
	void PullUPlayRewards ( );
	void ActionCompletedBulk ( TArray< int > actionIDs );
	void ActionCompleted_SAAIDY ( );
	void ActionCompleted_ML ( );
	void ActionCompleted_PYS ( );
	void ActionCompleted_LFTP ( );
	void ActionCompleted_DIH ( );
	void eventActionUnlocked ( struct FString actionID, struct FString actionSID, unsigned long isOffilne, unsigned long showPopup );
	void PullActions ( );
	void HandleMapCompleted ( struct FString MapFilename );
	void eventSaveProfile ( );
	void UpdateStatus ( );
	bool GetCompletedFirstCampaignMap ( );
	void SetCompletedFirstCampaignMap ( );
	bool GetCompletedOneSkirmishMap ( );
	void SetCompletedOneSkirmishMap ( );
	bool GetCompletedFinalCampaign ( );
	void SetCompletedFinalCampaign ( );
	bool GetCompletedTwoCampaigns ( );
	void SetCompletedTwoCampigns ( );
	bool GetCompletedOneCampaign ( );
	void SetCompletedOneCampaign ( );
	class UH7PlayerProfile* GetPlayerProfile ( );
	void SetPlayerProfile ( class UH7PlayerProfile* Profile );
};



// Class MMH7Game.H7AdventureCellMarker ( Property size: 8 iter: 17) 
// Class name index: 8024 
// 0x003C (0x027C - 0x0240)
class AH7AdventureCellMarker : public AH7UnrealObjectCellMarker
{
public:
	struct FPointer                                    VfTable_IH7IQuestTarget;                          		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mShape;                                           		// 0x0248 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mSkipBlocked : 1;                                 		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              mEditorVisibilityHeight;                          		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      mEditorTriggerColor;                              		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7AdventureMapCell* >               mUserPickedCells;                                 		// 0x0258 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7AdventureMapCell* >               mMarkedCells;                                     		// 0x0268 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Mid;                                              		// 0x0278 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3238 ];

		return pClassPointer;
	};

	void eventInitMarker ( );
	class UH7AdventureMapCell* GetCurrentPosition ( );
	void AddQuestFlag ( );
	void ClearQuestFlag ( );
	bool IsMovable ( );
	bool IsHidden ( );
	int GetQuestTargetID ( );
	bool Contains ( class UH7AdventureMapCell* cell );
};



// Class MMH7Game.H7CellFoWMarker ( Property size: 0 iter: 0) 
// Class name index: 8026 
// 0x0000 (0x027C - 0x027C)
class AH7CellFoWMarker : public AH7AdventureCellMarker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3240 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CellTriggerArmy ( Property size: 2 iter: 4) 
// Class name index: 8028 
// 0x0018 (0x0294 - 0x027C)
class AH7CellTriggerArmy : public AH7AdventureCellMarker
{
public:
	struct FPointer                                    VfTable_IH7IAdventureMapCellInteractor;           		// 0x027C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class AH7AdventureArmy* >                  mRegisteredArmies;                                		// 0x0284 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3242 ];

		return pClassPointer;
	};

	void OnArmyUnregister ( class AH7AdventureArmy* Army, class UH7AdventureMapCell* newDestinationCell );
	void OnArmyRegister ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7TileMarker ( Property size: 0 iter: 0) 
// Class name index: 8030 
// 0x0000 (0x027C - 0x027C)
class AH7TileMarker : public AH7AdventureCellMarker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3244 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TreasureMarker ( Property size: 0 iter: 0) 
// Class name index: 8032 
// 0x0000 (0x027C - 0x027C)
class AH7TreasureMarker : public AH7TileMarker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3246 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7AdventureConfiguration ( Property size: 77 iter: 77) 
// Class name index: 8034 
// 0x02A8 (0x04E8 - 0x0240)
class AH7AdventureConfiguration : public AActor
{
public:
	int                                                mBaseLostHeroCost;                                		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPerLevelLostHeroCost;                            		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mBaseNewHeroCost;                                 		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPerNumHeroesNewHeroCost;                         		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mNumHeroesSameFaction;                            		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mNumHeroesOtherFactions;                          		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxSkillSlot;                                    		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSkillSlot;                                       		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAbilitySlot;                                     		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mOptionalAbility : 1;                             		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mEnableDailyGrowth : 1;                           		// 0x0264 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mQuickCombatAllowSpellCast : 1;                   		// 0x0264 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mQuickCombatOutputToLog : 1;                      		// 0x0264 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mQuickCombatIgnoreHeroes : 1;                     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FH7RelativeWeightData                       mWeightData;                                      		// 0x0268 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCaravanMaxMovementPoints;                        		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mHighlightParticle;                               		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCostPerInformation;                              		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mManaRegenMultiplier;                             		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7Ship*                                     mShip;                                            		// 0x0298 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mArcaneKnowledgeTiers[ 0x4 ];                     		// 0x02A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mAPRLevels[ 0x6 ];                                		// 0x02B0 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	float                                              mNegotiationBaseChances[ 0x7 ];                   		// 0x02C8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              mNegotiationImpressionMods[ 0x7 ];                		// 0x02E4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mDefaultStartingWeek;                             		// 0x0300 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mWeeks;                                           		// 0x0310 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mMonth;                                           		// 0x0320 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mMaxDayPerWeek;                                   		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxWeeksPerMonth;                                		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxMonthPerYear;                                 		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyPlayerStartResourcesMultiplier[ 0x4 ]; 		// 0x033C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyCritterStartSizeMultiplier[ 0x4 ];     		// 0x034C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyCritterGrowthRateMultiplier[ 0x4 ];    		// 0x035C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAIStartResourcesMultiplier[ 0x4 ];     		// 0x036C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAICreatureGrowthRateMultiplier[ 0x4 ]; 		// 0x037C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAIResourceIncomeMultiplier[ 0x4 ];     		// 0x038C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAIAggressivenessMultiplier[ 0x4 ];     		// 0x039C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyPlayerStartResourcesMultiplierCampaign[ 0x4 ];		// 0x03AC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyCritterStartSizeMultiplierCampaign[ 0x4 ];		// 0x03BC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyCritterGrowthRateMultiplierCampaign[ 0x4 ];		// 0x03CC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAIStartResourcesMultiplierCampaign[ 0x4 ];		// 0x03DC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAICreatureGrowthRateMultiplierCampaign[ 0x4 ];		// 0x03EC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAIResourceIncomeMultiplierCampaign[ 0x4 ];		// 0x03FC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                mQuickCombatMapWidth;                             		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatMoraleLuckInitBonusFactor;            		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatMovementFactor;                       		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatHeroDamageFactor;                     		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatAttackDefenseMightMagicFactor;        		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatSpellSubBaseValue;                    		// 0x0420 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatSpellSubFactor;                       		// 0x0424 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatSpellExponentBaseRank;                		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatSpellExponentBaseTier;                		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatArmyRelationThreshold;                		// 0x0430 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatWarcryAttackBonusFactor;              		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mQuickCombatWarcryAttackBonusMultiplier;          		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseAbility* >                    mQuickCombatMoraleImmunityCriteria;               		// 0x043C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7Skill*                                    mQuickCombatWarcrySkillReference;                 		// 0x044C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mQuickCombatSiegeAbilityReference;                		// 0x0454 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mQuickCombatWarcryAbilityReference;               		// 0x045C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mQuickCombatWarfareAbilityReference;              		// 0x0464 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mQuickCombatAttackWarfareReference;               		// 0x046C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPlunderCost;                                     		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSabotageCost;                                    		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCreatureUpgradeCostModifier;                     		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7AiAdventureMapConfig*                     mAiAdvMapConfig;                                  		// 0x0480 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mPickUpParticle;                                  		// 0x0488 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mLevelUpParticle;                                 		// 0x0490 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mNPCSymbol;                                       		// 0x0498 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestObjectSymbol;                               		// 0x04A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFlagCrestTexture;                                		// 0x04A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mTownFlagIconTexture;                             		// 0x04B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFortFlagIconTexture;                             		// 0x04B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMineFlagIconTexture;                             		// 0x04C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mGarrisonFlagIconTexture;                         		// 0x04C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDwellingFlagIconTexture;                         		// 0x04D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPlunderFlagIconTexture;                          		// 0x04D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mRevealFogParticle;                               		// 0x04E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3248 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7AdventureMapPathfinder ( Property size: 8 iter: 28) 
// Class name index: 8036 
// 0x0058 (0x00B8 - 0x0060)
class UH7AdventureMapPathfinder : public UObject
{
public:
	class AH7AdventureGridManager*                     mGridManager;                                     		// 0x0060 (0x0008) [0x0000000000001000]              ( CPF_Native )
	TArray< class UH7AdventureMapCell* >               mOpenList;                                        		// 0x0068 (0x0010) [0x0000000000001000]              ( CPF_Native )
	float                                              mGeneralTerrainCostModifier;                      		// 0x0078 (0x0004) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmy;                                            		// 0x007C (0x0008) [0x0000000000000000]              
	TArray< class AH7Ship* >                           mShips;                                           		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIgnoreFoW : 1;                                   		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UH7AdventureLayerCellProperty* >     mMoveCostsTerrain;                                		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mMoveCostsValue;                                  		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3250 ];

		return pClassPointer;
	};

	void LogTest ( class UH7BaseBuff* buff );
	float ManhattanDistanceFromIntPoints ( struct FIntPoint A, struct FIntPoint B );
	float GetTotalPathCosts ( TArray< class UH7AdventureMapCell* > Path, class UH7AdventureMapCell* startCell, float movePoints, int* numOfWalkableCells );
	TArray< class UH7AdventureMapCell* > CutPathToWalkable ( TArray< class UH7AdventureMapCell* > Path, int numOfWalkableCells );
	TArray< float > GetPathCosts ( TArray< class UH7AdventureMapCell* > Path, class UH7AdventureMapCell* startCell, float movePoints, int* numOfWalkableCells );
	class UH7AdventureMapCell* GetClosestReachableShipCell ( class UH7AdventureMapCell* currentCell, class UH7AdventureMapCell* targetCell, class AH7Player* CurrentPlayer, unsigned long HasShip );
	TArray< class UH7AdventureMapCell* > GetPath ( class UH7AdventureMapCell* startCell, class UH7AdventureMapCell* targetCell, class AH7Player* CurrentPlayer, unsigned long HasShip, unsigned long ignoreFoW, unsigned long checkReachability );
	bool GetReachableSitesAndArmies ( class UH7AdventureMapCell* startCell, class AH7Player* CurrentPlayer, unsigned long HasShip, unsigned long ignoreFoW, float allowedTime, TArray< class AH7VisitableSite* >* sites, TArray< class AH7AdventureArmy* >* armies, TArray< float >* sitesDistance, TArray< float >* armiesDistance );
	bool IsReachable ( class UH7AdventureMapCell* startCell, class UH7AdventureMapCell* targetCell, class AH7Player* CurrentPlayer, unsigned long HasShip, unsigned long ignoreFoW );
	void GetNeighbours ( class UH7AdventureMapCell* cell, class UH7AdventureMapCell* targetCell, class AH7Player* CurrentPlayer, class AH7AdventureArmy* ignoreArmy, unsigned long HasShip, TArray< class UH7AdventureMapCell* >* neighbours );
	float FindPathLengthByWayPoints ( class UH7AdventureMapCell* startCell, class UH7AdventureMapCell* targetCell );
	TArray< class UH7AdventureMapCell* > FindPath ( class UH7AdventureMapCell* startCell, class UH7AdventureMapCell* targetCell, class AH7Player* CurrentPlayer, unsigned long HasShip, unsigned long ignoreFoW );
	float GetMovementCostSimple ( class UH7AdventureMapCell* originCell, class UH7AdventureMapCell* destCell, class UH7AdventureMapCell* pathEndCell );
	float GetMovementCost ( class UH7AdventureMapCell* originCell, class UH7AdventureMapCell* destCell, class UH7AdventureMapCell* pathEndCell, class AH7Player* CurrentPlayer, class AH7AdventureArmy* ignoreArmy, unsigned long HasShip, unsigned long recalculatePassability );
	bool CanMoveToArmy ( class UH7AdventureMapCell* targetCell, class AH7Player* CurrentPlayer, class AH7AdventureArmy* ignoreArmy, unsigned long HasShip );
	bool CanMoveToVisitable ( class UH7AdventureMapCell* targetCell, class AH7VisitableSite* pathEndSite, class AH7Player* CurrentPlayer, class AH7AdventureArmy* ignoreArmy, unsigned long HasShip );
	bool CanMoveToCell ( class UH7AdventureMapCell* targetCell, class UH7AdventureMapCell* pathEndCell, class AH7Player* CurrentPlayer, class AH7AdventureArmy* ignoreArmy, unsigned long HasShip );
	float DiagonalDistanceFromIntPoints ( struct FIntPoint A, struct FIntPoint B );
	void Init ( );
};



// Class MMH7Game.H7AiAdventureMapConfig ( Property size: 50 iter: 50) 
// Class name index: 8038 
// 0x3094 (0x30F4 - 0x0060)
class UH7AiAdventureMapConfig : public UObject
{
public:
	struct FH7AiActionConfig                           mConfigAttackArmy;                                		// 0x0060 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigAttackBorderArmy;                          		// 0x0228 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigAttackEnemy;                               		// 0x03F0 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigAttackAoC;                                 		// 0x05B8 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigAttackCity;                                		// 0x0780 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigPickup;                                    		// 0x0948 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigGather;                                    		// 0x0B10 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigReinforce;                                 		// 0x0CD8 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigExplore;                                   		// 0x0EA0 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigRepair;                                    		// 0x1068 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigGuarding;                                  		// 0x1230 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigFlee;                                      		// 0x13F8 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigChill;                                     		// 0x15C0 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigPlunder;                                   		// 0x1788 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSite;                                   		// 0x1950 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteBoost;                              		// 0x1B18 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteCommission;                         		// 0x1CE0 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteExercise;                           		// 0x1EA8 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteObserve;                            		// 0x2070 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteShop;                               		// 0x2238 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteStudy;                              		// 0x2400 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteKeymaster;                          		// 0x25C8 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigUseSiteObelisk;                            		// 0x2790 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigCongregate;                                		// 0x2958 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionConfig                           mConfigReplenish;                                 		// 0x2B20 (0x01C8) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiHeroConfig                             mConfigHeroes;                                    		// 0x2CE8 (0x0078) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiHeroConfig2                            mConfigHeroes2;                                   		// 0x2D60 (0x017C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiActionParameter                        mConfigAttackBorderArmy_PowerFactorPlayer;        		// 0x2EDC (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigDiscoveryScoutingThreshold;                		// 0x2EF4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigZoneOfDeathThreshold;                      		// 0x2EF8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigMaxHireHero;                               		// 0x2EFC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigHireHeroSpending;                          		// 0x2F00 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigHireHeroSpendingMaxCurrency;               		// 0x2F04 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigTradingTurnStart;                          		// 0x2F08 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigTradingFrequency;                          		// 0x2F0C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigDevelopmentTurnStart;                      		// 0x2F10 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigDevelopmentFrequency;                      		// 0x2F14 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigDevelopmentSpending;                       		// 0x2F18 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigDevelopmentSpendingMaxCurrency;            		// 0x2F1C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigRecruitTurnStart;                          		// 0x2F20 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigRecruitSpending;                           		// 0x2F24 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigRecruitSpendingMaxCurrency;                		// 0x2F28 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigHeroCongregationMinArmyPowerThreshold;     		// 0x2F2C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mConfigUpgradeCreaturesSpending;                  		// 0x2F30 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigUpgradeCreaturesMaxCurrency;               		// 0x2F34 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                mConfigRecruitmentInterval;                       		// 0x2F38 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FH7AiTownConfig                             mConfigTechTrees;                                 		// 0x2F3C (0x01B0) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              mConfigHPBoostVsNeutralMultiplier;                		// 0x30EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      mConfigOutputToLog : 1;                           		// 0x30F0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      mConfigVisualiseReachability : 1;                 		// 0x30F0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3252 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7AiSensorBase ( Property size: 0 iter: 3) 
// Class name index: 8040 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3254 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	float GetValue1 ( class UH7AiSensorParam* param0 );
	float GetValue0 ( );
};



// Class MMH7Game.H7AiSensorAdvTargetThreat ( Property size: 0 iter: 2) 
// Class name index: 8042 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorAdvTargetThreat : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3256 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	float CalculateThreat ( class AH7AdventureArmy* forArmy, class UH7AdventureMapCell* cell );
};



// Class MMH7Game.H7AiSensorInputConst ( Property size: 78 iter: 229) 
// Class name index: 8044 
// 0x03A4 (0x0404 - 0x0060)
class UH7AiSensorInputConst : public UObject
{
public:
	TArray< class UH7CombatMapCell* >                  mConstCells;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapCell*                            mConstSourceCell;                                 		// 0x0070 (0x0008) [0x0000000000000000]              
	class UH7CombatMapCell*                            mConstTargetCell;                                 		// 0x0078 (0x0008) [0x0000000000000000]              
	class AH7CreatureStack*                            mConstThisCreatureStack;                          		// 0x0080 (0x0008) [0x0000000000000000]              
	TArray< class AH7CreatureStack* >                  mConstCreatureStacks;                             		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7CreatureStack* >                  mConstOppCreatureStacks;                          		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7WarUnit*                                  mConstThisWarUnit;                                		// 0x00A8 (0x0008) [0x0000000000000000]              
	class AH7CombatHero*                               mConstThisHero;                                   		// 0x00B0 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mConstThisHeroAdv;                                		// 0x00B8 (0x0008) [0x0000000000000000]              
	class AH7CombatHero*                               mConstOppHero;                                    		// 0x00C0 (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mConstThisArmy;                                   		// 0x00C8 (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mConstOppArmy;                                    		// 0x00D0 (0x0008) [0x0000000000000000]              
	class AH7CreatureStack*                            mConstTargetCreatureStack;                        		// 0x00D8 (0x0008) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mConstCellsAdv;                                   		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7AdventureMapCell*                         mConstSourceCellAdv;                              		// 0x00F0 (0x0008) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mConstTargetCellAdv;                              		// 0x00F8 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mConstThisArmyAdv;                                		// 0x0100 (0x0008) [0x0000000000000000]              
	TArray< class AH7AdventureArmy* >                  mConstArmiesAdv;                                  		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mConstBorderArmiesAdv;                            		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mConstNeutralArmiesAdv;                           		// 0x0128 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mConstTownArmiesAdv;                              		// 0x0138 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mConstHiddenArmiesAdv;                            		// 0x0148 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7VisitableSite*                            mConstThisVisSite;                                		// 0x0158 (0x0008) [0x0000000000000000]              
	TArray< class AH7VisitableSite* >                  mConstVisSites;                                   		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureArmy*                            mConstTargetArmyAdv;                              		// 0x0170 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mConstMakeshiftArmyAdv;                           		// 0x0178 (0x0008) [0x0000000000000000]              
	class AH7VisitableSite*                            mConstTargetVisSite;                              		// 0x0180 (0x0008) [0x0000000000000000]              
	TArray< class AH7VisitableSite* >                  mConstThisAoCSites;                               		// 0x0188 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstOppAoCSites;                                		// 0x0198 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Player*                                   mConstThisPlayer;                                 		// 0x01A8 (0x0008) [0x0000000000000000]              
	TArray< class AH7Player* >                         mConstOtherPlayers;                               		// 0x01B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7TownBuilding* >                   mConstBuildings;                                  		// 0x01C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Town* >                           mConstTowns;                                      		// 0x01D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Fort* >                           mConstForts;                                      		// 0x01E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mConstHeroAbilities;                              		// 0x01F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CreatureAbility*                          mConstCreatureAbility;                            		// 0x0200 (0x0008) [0x0000000000000000]              
	TArray< class AH7VisitableSite* >                  mConstHiddenVisSites;                             		// 0x0208 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstBuffSites;                                  		// 0x0218 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstCollectibles;                               		// 0x0228 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstStudySites;                                 		// 0x0238 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstCommissionSites;                            		// 0x0248 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstShopSites;                                  		// 0x0258 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstBattleSites;                                		// 0x0268 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstKeymasterSites;                             		// 0x0278 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstRunicGateSites;                             		// 0x0288 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstObservatorySites;                           		// 0x0298 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstDestructibleSites;                          		// 0x02A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstObeliskSites;                               		// 0x02B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstShelterSites;                               		// 0x02C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mConstTrainingSites;                              		// 0x02D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureHero* >                  mConstOwnHeroes;                                  		// 0x02E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7HeroAbility*                              mConstUseHeroAbility;                             		// 0x02F8 (0x0008) [0x0000000000000000]              
	TArray< class AH7Teleporter* >                     mConstTeleporters;                                		// 0x0300 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Teleporter*                               mConstTargetTeleporter;                           		// 0x0310 (0x0008) [0x0000000000000000]              
	TArray< class AH7Teleporter* >                     mConstHiddenTeleporters;                          		// 0x0318 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FResourceStockpile >                mConstResources;                                  		// 0x0328 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FResourceStockpile                          mConstTargetResource;                             		// 0x0338 (0x0010) [0x0000000000000000]              
	TArray< struct FRecruitHeroData >                  mConstRecruitHeroes;                              		// 0x0348 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRecruitHeroData                            mConstTargetRecruitHero;                          		// 0x0358 (0x0014) [0x0000000000000000]              
	class AH7Town*                                     mConstTargetTown;                                 		// 0x036C (0x0008) [0x0000000000000000]              
	TArray< class AH7VisitableSite* >                  mConstCurrentReachableSites;                      		// 0x0374 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mConstCurrentReachableArmies;                     		// 0x0384 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mConstCurrentReachableSitesDistance;              		// 0x0394 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mConstCurrentReachableArmiesDistance;             		// 0x03A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7BaseCreatureStack*                        mConstTargetBaseCreatureStack;                    		// 0x03B4 (0x0008) [0x0000000000000000]              
	unsigned char                                      mConstCreatureStat;                               		// 0x03BC (0x0001) [0x0000000000000000]              
	unsigned char                                      mConstCreatureTier;                               		// 0x03BD (0x0001) [0x0000000000000000]              
	TArray< float >                                    mDistances;                                       		// 0x03C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mCalcStep;                                        		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              mLastDeltaTime;                                   		// 0x03D4 (0x0004) [0x0000000000000000]              
	int                                                mCalcArrayIndex;                                  		// 0x03D8 (0x0004) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mCalcLastCell;                                    		// 0x03DC (0x0008) [0x0000000000000000]              
	float                                              mCalcElapsedTime;                                 		// 0x03E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      mCalcDone : 1;                                    		// 0x03E8 (0x0004) [0x0000000000000000] [0x00000001] 
	class AH7AdventureController*                      mAdvCntl;                                         		// 0x03EC (0x0008) [0x0000000000000000]              
	class AH7AdventureGridManager*                     mGridManager;                                     		// 0x03F4 (0x0008) [0x0000000000000000]              
	int                                                mConstNumCollectiblesAtStart;                     		// 0x03FC (0x0004) [0x0000000000000000]              
	int                                                mConstHireHeroLimit;                              		// 0x0400 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3258 ];

		return pClassPointer;
	};

	void CalcSortMovementDistancesArmies ( TArray< class AH7AdventureArmy* >* armies, TArray< float >* armyDistance );
	void CalcSortMovementDistances ( TArray< class AH7VisitableSite* >* sites, TArray< float >* sitesDistance );
	void CalcSortDistances ( TArray< class AH7VisitableSite* >* sites, TArray< float >* sitesDistance );
	void Reset ( unsigned long isCombatMapDomain, unsigned long isTownDomain );
	void ResetAdventure ( unsigned long isTown );
	void ResetCalcStep ( );
	void ResetConsts ( );
	void StartAdventure ( );
	bool IsTrainingGrounds ( class AH7VisitableSite* Site );
	bool IsDestructible ( class AH7VisitableSite* Site );
	bool IsRunicGate ( class AH7VisitableSite* Site );
	bool IsKeymaster ( class AH7VisitableSite* Site );
	bool IsStudy ( class AH7VisitableSite* Site );
	bool IsObelisk ( class AH7VisitableSite* Site );
	bool IsItemPile ( class AH7VisitableSite* Site );
	bool IsResourcePile ( class AH7VisitableSite* Site );
	bool isGarrison ( class AH7VisitableSite* Site );
	bool IsShelter ( class AH7VisitableSite* Site );
	bool IsObservatory ( class AH7VisitableSite* Site );
	bool IsTownOrFort ( class AH7VisitableSite* Site );
	bool IsBattleSite ( class AH7VisitableSite* Site );
	bool IsQuickTravel ( class AH7VisitableSite* Site );
	bool IsDwelling ( class AH7VisitableSite* Site );
	bool IsWeeklyResources ( class AH7VisitableSite* Site );
	bool IsShop ( class AH7VisitableSite* Site );
	bool IsMine ( class AH7VisitableSite* Site );
	bool IsBuffSite ( class AH7VisitableSite* Site );
	bool IsPermanentBonusSite ( class AH7VisitableSite* Site );
	void ResetCombat ( );
	void SetBuildingsFromVisSite ( );
	void SetTargetArmyAdvFromVisSite ( );
	void SetTargetVisSiteFromArmyAdv ( );
	bool IsTownArmy ( class AH7AdventureArmy* Army );
	void SetCreatureTier ( unsigned char Tier );
	unsigned char GetCreatureTier ( );
	void SetCreatureStat ( unsigned char Stat );
	unsigned char GetCreatureStat ( );
	int GetHireHeroLimit ( );
	class UH7BaseCreatureStack* GetTargetBaseCreatureStack ( );
	void SetTargetBaseCreatureStack ( class UH7BaseCreatureStack* C );
	class AH7Town* GetTargetTown ( );
	void SetTargetTown ( class AH7Town* Town );
	struct FRecruitHeroData GetTargetRecruitHero ( );
	void SetTargetRecruitHero ( struct FRecruitHeroData rhd );
	struct FRecruitHeroData GetRecruitHero ( int Idx );
	int GetRecruitHeroNum ( );
	struct FResourceStockpile GetTargetResource ( );
	void SetTargetResource ( struct FResourceStockpile rs );
	struct FResourceStockpile GetResource ( int Idx );
	int GetResourcesNum ( );
	class AH7Teleporter* GetHiddenTeleporter ( int Idx );
	int GetHiddenTeleportersNum ( );
	class AH7Teleporter* GetTargetTeleporter ( );
	void SetTargetTeleporter ( class AH7Teleporter* tele );
	class AH7Teleporter* GetTeleporter ( int Idx );
	int GetTeleportersNum ( );
	class UH7HeroAbility* GetUseHeroAbility ( );
	void SetUseHeroAbility ( class UH7HeroAbility* Ability );
	class AH7AdventureHero* GetOwnHeroes ( int Idx );
	int GetOwnHeroesNum ( );
	class AH7VisitableSite* GetTrainingSite ( int Idx );
	int GetTrainingSiteNum ( );
	class AH7VisitableSite* GetShelterSite ( int Idx );
	int GetShelterSiteNum ( );
	class AH7VisitableSite* GetObeliskSite ( int Idx );
	int GetObeliskSiteNum ( );
	class AH7VisitableSite* GetDestructibleSite ( int Idx );
	int GetDestructibleSiteNum ( );
	class AH7VisitableSite* GetObservatorySite ( int Idx );
	int GetObservatorySiteNum ( );
	class AH7VisitableSite* GetKeymasterSite ( int Idx );
	int GetKeymasterSiteNum ( );
	class AH7VisitableSite* GetBattleSite ( int Idx );
	int GetBattleSiteNum ( );
	class AH7VisitableSite* GetShopSite ( int Idx );
	int GetShopSiteNum ( );
	class AH7VisitableSite* GetCommissionSite ( int Idx );
	int GetCommissionSiteNum ( );
	class AH7VisitableSite* GetStudySite ( int Idx );
	int GetStudySiteNum ( );
	class AH7VisitableSite* GetCollectibles ( int Idx );
	int GetCollectiblesNum ( );
	class AH7VisitableSite* GetBuffSite ( int Idx );
	int GetBuffSiteNum ( );
	class AH7VisitableSite* GetHiddenVisSite ( int Idx );
	int GetHiddenVisSiteNum ( );
	class UH7CreatureAbility* GetCreatureAbility ( );
	void SetCreatureAbility ( class UH7CreatureAbility* ca );
	class UH7HeroAbility* GetHeroAbility ( int Idx );
	int GetHeroAbilityNum ( );
	class AH7Fort* GetFort ( int Idx );
	int GetFortsNum ( );
	class AH7Town* GetTown ( int Idx );
	int GetTownsNum ( );
	class UH7TownBuilding* GetBuilding ( int Idx );
	int GetBuildingsNum ( );
	class AH7Player* GetOtherPlayer ( int Idx );
	int GetOtherPlayersNum ( );
	class AH7Player* GetPlayer ( );
	void SetPlayer ( class AH7Player* Player );
	class AH7VisitableSite* GetTargetVisSite ( );
	void SetTargetVisSite ( class AH7VisitableSite* Site, unsigned long ignoreArmy );
	class AH7AdventureArmy* GetMakeshiftArmyAdv ( );
	void SetMakeshiftArmyAdv ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetTargetArmyAdv ( );
	void SetTargetArmyAdv ( class AH7AdventureArmy* Army, unsigned long ignoreSite );
	class AH7VisitableSite* GetOppAoCSite ( int Idx );
	int GetOppAoCSiteNum ( );
	class AH7VisitableSite* GetAoCSite ( int Idx );
	int GetAoCSiteNum ( );
	class AH7VisitableSite* GetVisSite ( int Idx );
	int GetVisSiteNum ( );
	class AH7VisitableSite* GetThisVisSite ( );
	class AH7AdventureArmy* GetHiddenArmyAdv ( int Idx );
	int GetHiddenArmyAdvNum ( );
	class AH7AdventureArmy* GetTownArmyAdv ( int Idx );
	class AH7AdventureArmy* GetNeutralArmyAdv ( int Idx );
	class AH7AdventureArmy* GetBorderArmyAdv ( int Idx );
	class AH7AdventureArmy* GetOtherArmyAdv ( int Idx );
	class UH7AdventureMapCell* GetTargetCellAdv ( );
	void SetTargetCellAdv ( class UH7AdventureMapCell* cell );
	class UH7AdventureMapCell* GetSourceCellAdv ( );
	void SetSourceCellAdv ( class UH7AdventureMapCell* cell );
	class AH7AdventureArmy* GetArmyAdv ( );
	class UH7AdventureMapCell* GetCellAdv ( int Idx );
	int GetTownArmyNumAdv ( );
	int GetBorderArmyNumAdv ( );
	int GetNeutralArmyNumAdv ( );
	int GetArmyNumAdv ( );
	int GetCellNumAdv ( );
	class AH7CreatureStack* GetTargetCreatureStack ( );
	void SetTargetCreatureStack ( class AH7CreatureStack* Stack );
	class UH7CombatMapCell* GetTargetCell ( );
	void SetTargetCell ( class UH7CombatMapCell* cell );
	class UH7CombatMapCell* GetSourceCell ( );
	void SetSourceCell ( class UH7CombatMapCell* cell );
	class AH7CombatArmy* GetOppArmy ( );
	class AH7CombatArmy* GetArmy ( );
	class AH7CombatHero* GetOppHero ( );
	class AH7AdventureHero* GetHeroAdv ( );
	class AH7CombatHero* GetHero ( );
	class AH7CreatureStack* GetOppCreatureStack ( int Idx );
	class AH7CreatureStack* GetCreatureStack ( int Idx );
	void SetThisCreatureStack ( class AH7CreatureStack* cs );
	class AH7CreatureStack* GetThisCreatureStack ( );
	class UH7CombatMapCell* GetCell ( int Idx );
	int GetOppCreatureStackNum ( );
	int GetCreatureStackNum ( );
	int GetCellNum ( );
	void ResetCalc ( );
};



// Class MMH7Game.H7BaseCell ( Property size: 8 iter: 52) 
// Class name index: 8046 
// 0x0050 (0x00B0 - 0x0060)
class UH7BaseCell : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FIntPoint                                   mPosition;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mWorldCenter;                                     		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     mWorldCenterOrig;                                 		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mRotation;                                        		// 0x0090 (0x000C) [0x0000000000000000]              
	int                                                Mid;                                              		// 0x009C (0x0004) [0x0000000000000000]              
	TArray< class UH7BaseAbility* >                    mAuraAbilities;                                   		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3260 ];

		return pClassPointer;
	};

	void TriggerEvents ( unsigned char Trigger, unsigned long simulate, struct FH7EventContainerStruct container );
	struct FVector GetCenterPosByDimensions ( struct FIntPoint dim );
	struct FVector GetCenterByCreatureDim ( int creatureDim );
	void SetOriginalLocation ( struct FVector NewLocation );
	struct FVector GetOriginalLocation ( );
	void SetRotation ( struct FRotator NewRotation );
	void SetLocation ( struct FVector NewLocation );
	struct FRotator GetRotation ( );
	struct FVector GetLocation ( );
	class UH7IEffectTargetable* GetTargetable ( );
	void SetCellPosition ( int X, int Y );
	struct FIntPoint GetCellPosition ( );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	int GetHitPoints ( );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	TArray< class UH7BaseAbility* > GetAuras ( );
	bool HasAuras ( );
	void AddAuraAbility ( class UH7BaseAbility* Ability );
	void RemoveAuraAbility ( class UH7BaseAbility* Ability );
	class UH7ICaster* GetOriginal ( );
	struct FIntPoint GetGridPosition ( );
	bool IsDefaultAttackActive ( );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	class AH7Player* GetPlayer ( );
	unsigned char GetEntityType ( );
	int GetID ( );
	void DataChanged ( struct FString cause );
	class AH7CombatArmy* GetCombatArmy ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7CombatMapCell ( Property size: 49 iter: 163) 
// Class name index: 8048 
// 0x00E0 (0x0190 - 0x00B0)
class UH7CombatMapCell : public UH7BaseCell
{
public:
	unsigned long                                      mIsMouseOver : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsSelected : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsSelectedEnemy : 1;                             		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsSelectedAlly : 1;                              		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mIsSelectedDeadAlly : 1;                          		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mIsPassable : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mIsWarfareBuffer : 1;                             		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mIsGatePassage : 1;                               		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mIsMerged : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mIsMergedOn2ndLayer : 1;                          		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mIsForeshadow : 1;                                		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mIsForeshadowAlt : 1;                             		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mHasRemains : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      mForceHighlight : 1;                              		// 0x00B0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      mForceEnemyHighlight : 1;                         		// 0x00B0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      mIsSiegeWallCover : 1;                            		// 0x00B0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      mIsAbilityHighlight : 1;                          		// 0x00B0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      mHasObstacleNearby : 1;                           		// 0x00B0 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      mRandomObstaclePlacementFlag : 1;                 		// 0x00B0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      mHasObstacle : 1;                                 		// 0x00B0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      mHasCreatureStack : 1;                            		// 0x00B0 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      mHasWarUnit : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned char                                      mSelectionType;                                   		// 0x00B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCellSize;                                        		// 0x00B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCellSize2ndLayer;                                		// 0x00B6 (0x0001) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mNeighbours;                                      		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mMergedCells;                                     		// 0x00C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mMergedCells2ndLayer;                             		// 0x00D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7WarUnit*                                  mWarUnit;                                         		// 0x00E8 (0x0008) [0x0000000000000000]              
	class AH7CreatureStack*                            mCreatureStack;                                   		// 0x00F0 (0x0008) [0x0000000000000000]              
	class AH7CreatureStack*                            mDeadCreatureStack;                               		// 0x00F8 (0x0008) [0x0000000000000000]              
	class AH7CombatObstacleObject*                     mObstacle;                                        		// 0x0100 (0x0008) [0x0000000000000000]              
	class UH7CombatMapCell*                            mMouseOverMaster;                                 		// 0x0108 (0x0008) [0x0000000000000000]              
	class UH7CombatMapCell*                            mMaster;                                          		// 0x0110 (0x0008) [0x0000000000000000]              
	class UH7CombatMapCell*                            mMaster2ndLayer;                                  		// 0x0118 (0x0008) [0x0000000000000000]              
	int                                                mIsMouseOverMaster;                               		// 0x0120 (0x0004) [0x0000000000000000]              
	class UDecalComponent*                             mDecal;                                           		// 0x0124 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDecalComponent*                             mCoverDecal;                                      		// 0x012C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     mDecalOffset;                                     		// 0x0134 (0x000C) [0x0000000000000000]              
	TArray< struct FVector >                           mCenterPosition;                                  		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mThreat;                                          		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              mOpportunity;                                     		// 0x0154 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          mMaterial;                                        		// 0x0158 (0x0008) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x0160 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ADynamicSMActor_Spawnable*                   mDynamicStaticMeshActor;                          		// 0x0168 (0x0008) [0x0000000000000000]              
	class AH7FracturedDynMeshActor*                    mFracturedStaticMeshActor;                        		// 0x0170 (0x0008) [0x0000000000000000]              
	class AEmitterSpawnable*                           mEmitterActor;                                    		// 0x0178 (0x0008) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mGridController;                                  		// 0x0180 (0x0008) [0x0000000000000000]              
	class AH7CombatController*                         mCombatController;                                		// 0x0188 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3262 ];

		return pClassPointer;
	};

	void RenderDebugCellStateInfo ( class UCanvas* myCanvas, int Version );
	bool HasUnit ( );
	class AH7Unit* GetUnit ( );
	class UH7IEffectTargetable* GetTargetable ( );
	void RemoveDeadCreature ( );
	void RemoveWarfare ( );
	void RemoveCreature ( );
	void RemoveDeadCreatureStack ( );
	void RemoveWarfareUnit ( );
	void RemoveCreatureStack ( );
	void RemoveObstacle ( );
	void RemoveObstacles ( );
	bool CanPlaceCreatureStack ( class AH7CreatureStack* creatureStack );
	void PlaceObstacle ( class AH7CombatObstacleObject* obstacleToPlace );
	void PlaceDeadCreature ( class AH7CreatureStack* creatureStack );
	bool HasPassableAllies ( class AH7CreatureStack* creatureStack );
	void PlaceWarfareUnit ( class AH7WarUnit* warUnit );
	void PlaceCreature ( class AH7CreatureStack* creatureStack, unsigned long isCreatureMoving );
	void GetCellsHitByCellSize ( unsigned char cellSize, unsigned long cleanNoneCells, TArray< class UH7CombatMapCell* >* activeCells );
	void GetCellsHitByCellSizeXY ( int cellX, int cellY, unsigned long cleanNoneCells, TArray< class UH7CombatMapCell* >* activeCells );
	void UpdateSelectionType ( );
	bool IsBlocked ( class AH7CreatureStack* ignoreCreatureStack );
	struct FVector GetCenterPosBySize ( unsigned char Size, unsigned long useMaster, unsigned long use2ndLayer );
	struct FVector GetCenterPosFor2ndLayer ( );
	struct FVector GetCenterPos ( );
	void DespawnCreatureRemains ( );
	void SpawnCreatureRemains ( );
	void HideRemains ( unsigned long Value );
	float GetHeightFromSize ( unsigned char Size );
	float GetWidthFromSize ( unsigned char Size );
	void SetDeadCreatureStack ( class AH7CreatureStack* newDeadCreatureStack );
	void SetObstacle ( class AH7CombatObstacleObject* newObstacle );
	void SetWarfareUnit ( class AH7WarUnit* warUnit );
	void SetCreatureStack ( class AH7CreatureStack* newCreatureStack );
	void SetMouseOver ( unsigned long newIsMouseOver, int isMouseOverMaster, class UH7CombatMapCell* mouseOverMaster );
	void SetSelectedMerged ( unsigned long newIsSelected, unsigned char Type );
	void SetDying ( unsigned long Value );
	struct FVector GetCenterByCreatureDim ( int creatureDim );
	struct FIntPoint GetGridDistanceTo ( class UH7CombatMapCell* targetCell );
	bool HasCreatureStackOnDeadStack ( );
	void SetSelectedDeadAlly ( unsigned long newIsSelected );
	void SetSelectedAlly ( unsigned long newIsSelected );
	void SetSelectedEnemy ( unsigned long newIsSelected );
	void SetSelected ( unsigned long newIsSelected );
	void Init ( class AH7CombatMapGridController* gridController );
	bool IsSlaveOf ( class UH7CombatMapCell* cell );
	void SetSelectedMergedEnemy ( unsigned long newIsSelected );
	void SetSelectedMergedDeadAlly ( unsigned long newIsSelected );
	void SetSelectedMergedAlly ( unsigned long newIsSelected );
	bool IsForeshadowAlt ( );
	void SetForeshadowAlt ( unsigned long newIsForeshadowAlt );
	bool IsAbilityHighlight ( );
	void SetAbilityHighlight ( unsigned long highlight );
	bool IsForeshadow ( );
	void SetForeshadow ( unsigned long newIsForeshadow, unsigned long updateMat );
	bool IsSelected ( );
	bool HasRemains ( );
	bool HasDeadCreatureStack ( );
	class AH7CreatureStack* GetDeadCreatureStack ( );
	class AH7WarUnit* GetWarfareUnit ( );
	bool HasWarfareUnit ( );
	bool SlaveHasCreatureStack ( );
	bool HasCreatureStack ( );
	class AH7CreatureStack* GetCreatureStack ( );
	class AH7CombatObstacleObject* eventGetObstacle ( );
	bool HasObstacle ( );
	void SetGatePassage ( unsigned long P );
	bool IsGatePassage ( );
	void SetWarfareBuffer ( unsigned long val );
	bool IsWarfareBuffer ( );
	void SetPassable ( unsigned long newIsPassable );
	bool IsPassable ( );
	void SetSelectionType ( unsigned char newSelectionType );
	unsigned char GetSelectionType ( );
	struct FVector GetPosition1x1 ( );
	void SetCellSize2ndLayer ( unsigned char newCellSize );
	unsigned char GetCellSize2ndLayer ( );
	void SetCellSize ( unsigned char newCellSize );
	unsigned char GetCellSize ( );
	void SetMaster2ndLayer ( class UH7CombatMapCell* newMaster );
	class UH7CombatMapCell* GetMaster2ndLayer ( );
	void SetMergedCells2ndLayer ( TArray< class UH7CombatMapCell* > newMergedCells );
	TArray< class UH7CombatMapCell* > GetMergedCells2ndLayer ( );
	void SetMaster ( class UH7CombatMapCell* newMaster );
	class UH7CombatMapCell* GetMaster ( );
	void SetMergedCells ( TArray< class UH7CombatMapCell* > newMergedCells );
	TArray< class UH7CombatMapCell* > GetMergedCells ( );
	void SetNeighbours ( TArray< class UH7CombatMapCell* > newNeighbours );
	TArray< class UH7CombatMapCell* > GetNeighbours ( );
	void SetSiegeWallCover ( unsigned long IsSiegeWallCover );
	bool IsSiegeWallCover ( );
	bool HasActiveAura ( );
	void SetHasObstacleNearby ( unsigned long val );
	bool HasObstacleNearby ( );
	bool IsMerged ( );
	void ModifyOpportunity ( float opMod );
	void SetOpportunity ( float Op );
	float GetOpportunity ( );
	void ModifyThreat ( float threatMod );
	void SetThreat ( float threat );
	float GetThreat ( );
	bool HasAIDanger ( class AH7CreatureStack* creatureStack );
	bool GetForceEnemyHightlight ( );
	void SetForceEnemyHightlight ( unsigned long Value );
	bool GetForceHightlight ( );
	void SetForceHighlight ( unsigned long Value );
	class UH7BaseAbility* GetPreparedAbility ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	void DataChanged ( struct FString cause );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
};



// Class MMH7Game.H7EditorAdventureTile ( Property size: 15 iter: 22) 
// Class name index: 8050 
// 0x0060 (0x0110 - 0x00B0)
class UH7EditorAdventureTile : public UH7BaseCell
{
public:
	unsigned char                                      mMovementType;                                    		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mFoWOverrideState;                                		// 0x00B1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UH7AdventureLayerCellProperty*               mSourceLayerCellData;                             		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mForcedCombatMapLine;                             		// 0x00BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mCameraHeight;                                    		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAreaOfControl;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsShoreTile : 1;                                  		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsWet : 1;                                        		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsAoCBorder : 1;                                  		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AH7VisitableSite*                            mVisitableSite;                                   		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7TargetableSite*                           mTargetableSite;                                  		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7IDefendable*                              mDefendableSiteOnTop;                             		// 0x00E8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00F0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UH7IAdventureMapCellInteractor* >    mInteractorList;                                  		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CombatListLayerInfoIndex;                         		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BlockingOverridenStatus;                          		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3264 ];

		return pClassPointer;
	};

	struct FString PickRandomStringFromArray ( TArray< struct FString > inArray );
	struct FString PickRandomStringFromLine ( struct FString inputline );
	struct FString PickAppropriateCombatMap ( );
	void SetNewLayerData ( class UH7AdventureLayerCellProperty* newCellLayerData );
	void SetMovementType ( unsigned char mNewMovementType );
	float GetMovementCost ( );
	class UH7AdventureLayerCellProperty* GetSourceLayerCellData ( );
};



// Class MMH7Game.H7AdventureMapCell ( Property size: 12 iter: 62) 
// Class name index: 8052 
// 0x0088 (0x0198 - 0x0110)
class UH7AdventureMapCell : public UH7EditorAdventureTile
{
public:
	class AH7AdventureMapGridController*               mGridOwner;                                       		// 0x0110 (0x0008) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mNeighbours;                                      		// 0x0118 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mHasPickable : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsDeepWater : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FCellPathfinderData                         mPathfinderData;                                  		// 0x012C (0x0024) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mWayPoint;                                        		// 0x0150 (0x0008) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mWayPointNeighbours;                              		// 0x0158 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureArmy*                            mAdvArmy;                                         		// 0x0168 (0x0008) [0x0000000000000000]              
	TArray< class AH7AdventureArmy* >                  mControllingArmies;                               		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Ship*                                     mShip;                                            		// 0x0180 (0x0008) [0x0000000000000000]              
	class AH7AdventureObject*                          mAdventureObject;                                 		// 0x0188 (0x0008) [0x0000000000000000]              
	class AH7Teleporter*                               mTeleporter;                                      		// 0x0190 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3266 ];

		return pClassPointer;
	};

	void DrawAoC ( );
	bool IsNeighbour ( class UH7AdventureMapCell* cell );
	bool IsBlocked ( class AH7AdventureArmy* ignoreArmy );
	void UnregisterShip ( class AH7Ship* shipToRemove );
	void RegisterShip ( class AH7Ship* newShip );
	void UnregisterArmy ( class AH7AdventureArmy* armyToRemove, class UH7AdventureMapCell* newDestinationCell );
	class AH7AdventureArmy* GetHostileArmy ( class AH7Player* dasPlayer );
	bool HasHostileArmy ( class AH7Player* dasPlayer );
	void RegisterArmy ( class AH7AdventureArmy* newArmy );
	void SetHasPickable ( unsigned long HasPickable );
	void InitCell ( );
	struct FString GetCombatMapName ( );
	class UH7IEffectTargetable* GetTargetable ( );
	class AH7AdventureMapGridController* GetGridOwner ( );
	void SetGridOwner ( class AH7AdventureMapGridController* newGrid );
	bool IsSurroundedByImpassable ( );
	class UH7AdventureMapCell* GetWayPoint ( );
	void RemoveWayPointNeighbour ( class UH7AdventureMapCell* cell );
	void AddWayPointNeighbour ( class UH7AdventureMapCell* cell );
	void RemoveNeighbour ( class UH7AdventureMapCell* cell );
	void AddNeighbour ( class UH7AdventureMapCell* cell );
	void SetNeighbours ( TArray< class UH7AdventureMapCell* > newNeighbours );
	TArray< class UH7AdventureMapCell* > GetNeighbours ( );
	void SetVisitableSite ( class AH7VisitableSite* Site );
	class AH7VisitableSite* GetVisitableSite ( );
	void SetAreaOfControl ( int area );
	int GetAreaOfControl ( );
	class AH7Ship* GetShip ( );
	class AH7AdventureArmy* GetArmy ( );
	void SetShoreCell ( unsigned long shore );
	bool IsShoreCell ( );
	class UH7BaseAbility* GetPreparedAbility ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	void DataChanged ( struct FString cause );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	void RemoveControllingArmy ( class AH7AdventureArmy* A );
	void AddControllingArmy ( class AH7AdventureArmy* A );
	TArray< class AH7AdventureArmy* > GetControllingArmies ( );
	void SetAdventureObject ( class AH7AdventureObject* O );
	class AH7AdventureObject* GetAdventureObject ( );
	struct FString GetName ( );
	bool HasPickable ( );
	void SetTeleporter ( class AH7Teleporter* porter );
	class AH7Teleporter* GetTeleporter ( );
	bool IsTeleporterEntrance ( );
};



// Class MMH7Game.H7BaseCreatureStack ( Property size: 14 iter: 47) 
// Class name index: 8054 
// 0x002C (0x008C - 0x0060)
class UH7BaseCreatureStack : public UObject
{
public:
	class AH7Creature*                                 mType;                                            		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSize;                                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseCustomPosition : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsUnDeployed : 1;                                		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsLocalGuard : 1;                                		// 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mUpgradeLock : 1;                                 		// 0x006C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mAILock : 1;                                      		// 0x006C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mDismissDisabled : 1;                             		// 0x006C (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                mCustomPositionX;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCustomPositionY;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7CreatureStack*                            mSpawnedStackOnMap;                               		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              mRemainingGrowth;                                 		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                mStartingSize;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                mStackSizeAtMapStart;                             		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3268 ];

		return pClassPointer;
	};

	void DumpCurrentState ( );
	bool TransferCreatureStacksByArray ( int indexSource, int indexTarget, int splitAmount, unsigned long withinSameArmy, TArray< class UH7BaseCreatureStack* >* sourceStacks, TArray< class UH7BaseCreatureStack* >* targetStacks );
	struct FString GetObfuscatedSize ( int StackSize );
	struct FString GetStackSizeObfuscated ( );
	bool IsUnitType ( class UH7BaseCreatureStack* Stack );
	float GetCreatureStackStrength ( );
	bool IsDeployed ( );
	void SetDeployed ( unsigned long val );
	int GetCustomPositionY ( );
	int GetCustomPositionX ( );
	bool GetCustomPositionBool ( );
	void SetCustomPosition ( unsigned long flag, int X, int Y );
	class AH7CreatureStack* GetSpawnedStackOnMap ( );
	void SetSpawnedStackOnMap ( class AH7CreatureStack* Type );
	bool IsLockedForUpgrade ( );
	void SetLockedForUpgrade ( unsigned long val );
	int GetStackSizeAtMapStart ( );
	void SetStackSizeAtMapStart ( int Size );
	int GetStartingSize ( );
	void SetStartingSize ( int startingSize );
	float GetRemainingGrowth ( );
	void SetRemainingGrowth ( float remainingGrowth );
	bool isLocalGuard ( );
	void SetIsLocalGuard ( unsigned long isLocalGuard );
	bool IsDismissDisabled ( );
	void SetDismissDisabled ( unsigned long B );
	bool HasAILock ( );
	void SetAILock ( unsigned long B );
	class AH7Creature* GetStackType ( );
	void SetStackType ( class AH7Creature* Type );
	void AddToStack ( int Value );
	int GetStackSize ( );
	void SetStackSize ( int Size, unsigned long updateStartingSize );
};



// Class MMH7Game.H7BaseGameController ( Property size: 1 iter: 4) 
// Class name index: 8056 
// 0x0008 (0x0248 - 0x0240)
class AH7BaseGameController : public AActor
{
public:
	class UH7CommandQueue*                             mCommandQueue;                                    		// 0x0240 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3270 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	class AH7BaseGameController* GetBaseInstance ( );
	class UH7CommandQueue* GetCommandQueue ( );
};



// Class MMH7Game.H7AdventureController ( Property size: 103 iter: 410) 
// Class name index: 8058 
// 0x0434 (0x067C - 0x0248)
class AH7AdventureController : public AH7BaseGameController
{
public:
	TArray< class AH7Player* >                         mEditorPlayers;                                   		// 0x0248 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7AdventureConfiguration*                   mAdventureConfiguration;                          		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7AbilityTrackingData >            mAbilityTrackingData;                             		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mNumberOfFightsTotal;                             		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                mNumberOfFightsManual;                            		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                mNumberOfFightsQuickCombat;                       		// 0x0278 (0x0004) [0x0000000000000000]              
	int                                                mNumberOfRoundsInFightsTotal;                     		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                mNumberOfRoundsInFightsAutoCombat;                		// 0x0280 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsDeserializing : 1;                             		// 0x0284 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsHeroFXHidden : 1;                              		// 0x0284 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mCouncilMapActive : 1;                            		// 0x0284 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mTearOfAshaRetrieved : 1;                         		// 0x0284 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mHasUpgradeCostWeekEffect : 1;                    		// 0x0284 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mTurnTimerPaused : 1;                             		// 0x0284 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mSimTurnOfAI : 1;                                 		// 0x0284 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mRestoreSFX : 1;                                  		// 0x0284 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mIsInitialized : 1;                               		// 0x0284 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mIsCaravanTurnFinished : 1;                       		// 0x0284 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mIsPlayerTurn : 1;                                		// 0x0284 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mAutomatedAIEnabled : 1;                          		// 0x0284 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mSkipMove : 1;                                    		// 0x0284 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      mAIAllowQuickCombat : 1;                          		// 0x0284 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      mKismetAllowsFlee : 1;                            		// 0x0284 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      mKismetAllowsSurrender : 1;                       		// 0x0284 (0x0004) [0x0000000000000000] [0x00008000] 
	TArray< class USeqAct_Interp* >                    mLoadSaveMatinees;                                		// 0x0288 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USeqAct_Interp* >                    mToReopenMatinees;                                		// 0x0298 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mConfigPath;                                      		// 0x02A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CampaignDefinition*                       mCampaign;                                        		// 0x02B8 (0x0008) [0x0000000000000000]              
	struct FH7RawCampaignData                          mRawCampaign;                                     		// 0x02C0 (0x0084) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7LobbyDataMapSettings                     mMapSettings;                                     		// 0x0344 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7LobbyDataGameSettings                    mGameSettings;                                    		// 0x0364 (0x002C) [0x0000000000000000]              
	TArray< struct FPlayerLobbySelectedSettings >      mPlayerSettings;                                  		// 0x0390 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Calendar*                                 mCalendar;                                        		// 0x03A0 (0x0008) [0x0000000000000000]              
	struct FString                                     mUniqueGameName;                                  		// 0x03A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureGridManager*                     mGridManager;                                     		// 0x03B8 (0x0008) [0x0000000000000000]              
	class AH7CouncilMapManager*                        mCouncilMapManager;                               		// 0x03C0 (0x0008) [0x0000000000000000]              
	struct FVector                                     mCouncilMapOffset;                                		// 0x03C8 (0x000C) [0x0000000000000000]              
	struct FName                                       mCouncilMapLevel;                                 		// 0x03D4 (0x0008) [0x0000000000000000]              
	int                                                mIdCounter;                                       		// 0x03DC (0x0004) [0x0000000000000000]              
	float                                              mDifficultyPlayerStartResourcesMultiplier;        		// 0x03E0 (0x0004) [0x0000000000000000]              
	float                                              mDifficultyCritterStartSizeMultiplier;            		// 0x03E4 (0x0004) [0x0000000000000000]              
	float                                              mDifficultyCritterGrowthRateMultiplier;           		// 0x03E8 (0x0004) [0x0000000000000000]              
	TArray< class AH7Player* >                         mPlayers;                                         		// 0x03EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mArmies;                                          		// 0x03FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7CaravanArmy* >                    mActiveCarravans;                                 		// 0x040C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Teleporter* >                     mTeleporterList;                                  		// 0x041C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Mine* >                           mMineList;                                        		// 0x042C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Town* >                           mTownList;                                        		// 0x043C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Fort* >                           mFortList;                                        		// 0x044C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Dwelling* >                       mDwellingList;                                    		// 0x045C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7CustomNeutralDwelling* >          mCostumNeutralDwelling;                           		// 0x046C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Merchant* >                       mMerchantList;                                    		// 0x047C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AreaOfControlBuffSite* >          mAoCBuffSiteList;                                 		// 0x048C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7DestructibleObjectManipulator* >  mDestructionManipulators;                         		// 0x049C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureObject* >                mAdventureObjectList;                             		// 0x04AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Garrison* >                       mGarrisonList;                                    		// 0x04BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7PermanentBonusSite* >             mPermanentBonusSiteList;                          		// 0x04CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ALandscape* >                        mLandscapesList;                                  		// 0x04DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7BattleSite* >                     mBattleSiteList;                                  		// 0x04EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7DenOfThieves* >                   mDenOfThievesList;                                		// 0x04FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mNeutralGrowthMultiplier;                         		// 0x050C (0x0004) [0x0000000000000000]              
	int                                                mAmountOfObelisks;                                		// 0x0510 (0x0004) [0x0000000000000000]              
	struct FIntPoint                                   mTearOfAshaCoordinates;                           		// 0x0514 (0x0008) [0x0000000000000000]              
	int                                                mTearOfAshaGridIndex;                             		// 0x051C (0x0004) [0x0000000000000000]              
	float                                              mUpgradeCostWeekEffect;                           		// 0x0520 (0x0004) [0x0000000000000000]              
	float                                              mGlobalTradeModifier;                             		// 0x0524 (0x0004) [0x0000000000000000]              
	class AH7AiAdventureMap*                           mAI;                                              		// 0x0528 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mSelectedArmy;                                    		// 0x0530 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mHoveredArmy;                                     		// 0x0538 (0x0008) [0x0000000000000000]              
	int                                                mCurrentPlayerIndex;                              		// 0x0540 (0x0004) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mBeforeBattleCell;                                		// 0x0544 (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSite*                        mBeforeBattleArea;                                		// 0x054C (0x0008) [0x0000000000000000]              
	class AH7BattleSite*                               mCurrentBattleSite;                               		// 0x0554 (0x0008) [0x0000000000000000]              
	int                                                mTurnCounter;                                     		// 0x055C (0x0004) [0x0000000000000000]              
	class UH7AdventureCursor*                          mCursor;                                          		// 0x0560 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmyAttacker;                                    		// 0x0568 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmyDefender;                                    		// 0x0570 (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mArmyAttackerCombat;                              		// 0x0578 (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mArmyDefenderCombat;                              		// 0x0580 (0x0008) [0x0000000000000000]              
	class UH7TownCastingStage*                         mPreparedCastingStage;                            		// 0x0588 (0x0008) [0x0000000000000000]              
	struct FString                                     mCombatMapName;                                   		// 0x0590 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mAdventureMapName;                                		// 0x05A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7HallOfHeroesManager*                      mHallOfHeroesManager;                             		// 0x05B0 (0x0008) [0x0000000000000000]              
	class AH7CameraActionController*                   mCameraActionTemplate;                            		// 0x05B8 (0x0008) [0x0000000000000000]              
	class UH7TeamManager*                              mTeamManager;                                     		// 0x05C0 (0x0008) [0x0000000000000000]              
	int                                                mIsHotSeat;                                       		// 0x05C8 (0x0004) [0x0000000000000000]              
	class UH7HeroEventParam*                           mHeroEventParam;                                  		// 0x05CC (0x0008) [0x0000000000000000]              
	class UH7PlayerEventParam*                         mPlayerEventParam;                                		// 0x05D4 (0x0008) [0x0000000000000000]              
	class UH7MapInfo*                                  mMapInfo;                                         		// 0x05DC (0x0008) [0x0000000000000000]              
	class AH7SynchRNG*                                 mSynchRNG;                                        		// 0x05E4 (0x0008) [0x0000000000000000]              
	float                                              mCurrentTurnTimeLeft;                             		// 0x05EC (0x0004) [0x0000000000000000]              
	float                                              mCurrentRetreatTimeLeft;                          		// 0x05F0 (0x0004) [0x0000000000000000]              
	class AH7AdventurePlayerController*                mAdventurePlayerController;                       		// 0x05F4 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           mAdventurePP;                                     		// 0x05FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class USequenceOp* >                       mSeqsToReopen;                                    		// 0x0604 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mSessionGameplayTimeSec;                          		// 0x0614 (0x0004) [0x0000000000000000]              
	int                                                mSessionGameplayTimeMin;                          		// 0x0618 (0x0004) [0x0000000000000000]              
	TArray< class USequenceAction* >                   mCellPassChanges;                                 		// 0x061C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USequenceAction* >                   mCellLayerChanges;                                		// 0x062C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USequenceAction* >                   mCellFOWChanges;                                  		// 0x063C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mGameRevisionOriginal;                            		// 0x064C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mGameRevisionLatest;                              		// 0x065C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnScreenshotComplete__Delegate;                 		// 0x066C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0670 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3272 ];

		return pClassPointer;
	};

	void UpdateEndDayDelayedWeekStart ( );
	void DumpCurrentState ( class AH7Player* pl );
	void TrackingGameModeEnd ( );
	void TrackingGameStart ( );
	void TrackingMapEnd ( struct FString Reason );
	void TrackingRecruitHero ( );
	void TrackingMapStart ( );
	void SendTrackingSpellUsed ( );
	void SendTrackingTreasureHunt ( );
	void SendTrackingCombatData ( );
	void TickSessionGameplayTime ( float DeltaTime );
	void SetCurrentPlayerIndex ( int newCurrentPlayerIndex );
	bool QuickCombatWithAdventureArmies ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy );
	void FinalizeAfterCombat ( class AH7CombatArmy* attackingArmyCombat, class AH7CombatArmy* defendingArmyCombat, unsigned long QuickCombat, TArray< class UH7BaseCreatureStack* > localGuard, class AH7AdventureArmy** attackingArmy, class AH7AdventureArmy** defendingArmy );
	int ShuffleQuickCombatQueue ( struct FH7QuickCombatStack A, struct FH7QuickCombatStack B );
	int SortQuickCombatQueue ( struct FH7QuickCombatStack A, struct FH7QuickCombatStack B );
	void CreateQuickCombatStacks ( TArray< class UH7BaseCreatureStack* > baseStacks, struct FH7QuickCombatHero Hero, unsigned long IsAttacker, unsigned long moralePenalty, float healthMultiplier, TArray< struct FH7QuickCombatStack >* quickCombatStacks );
	void CreateQuickCombatWarfareUnits ( TArray< class AH7EditorWarUnit* > Templates, unsigned long IsAttacker, TArray< struct FH7QuickCombatStack >* warfareUnits );
	void CreateQuickCombatTowers ( class AH7TowerUnit* towerTemplate, TArray< struct FH7QuickCombatStack >* towers );
	void CreateQuickCombatHero ( class AH7EditorHero* Hero, float armyRelation, struct FH7QuickCombatHero* quickCombatHero );
	int GetQuickCombatHeroActionDamage ( struct FH7QuickCombatHero Hero, struct FH7QuickCombatStack Target );
	int GetQuickCombatUnitActionDamage ( struct FH7QuickCombatStack Stack, struct FH7QuickCombatStack Target );
	int DoQuickCombatCreatureAction ( unsigned long CanMove, struct FH7QuickCombatStack* Stack, TArray< struct FH7QuickCombatStack >* enemyStacks );
	int DoQuickCombatWarfareUnitAction ( struct FH7QuickCombatHero Hero, struct FH7QuickCombatStack* Stack, TArray< struct FH7QuickCombatStack >* myStacks, TArray< struct FH7QuickCombatStack >* enemyStacks, int* wasFriendly );
	int DoQuickCombatTowerAction ( struct FH7QuickCombatStack* Stack, TArray< struct FH7QuickCombatStack >* enemyStacks );
	void GetCastableSpellsForQuickCombatHero ( struct FH7QuickCombatHero Hero, TArray< class UH7HeroAbility* >* Spells );
	void ApplyQuickCombatImpact ( class UH7HeroAbility* spell, struct FQuickCombatImpact CurrentImpact, struct FH7QuickCombatHero Hero, struct FH7QuickCombatStack* Stack );
	void ApplyQuickCombatImpactWarcry ( struct FH7QuickCombatHero Hero, struct FH7QuickCombatStack* Stack );
	TArray< int > DoQuickCombatHeroAction ( float armyRelation, struct FH7QuickCombatHero* Hero, TArray< struct FH7QuickCombatStack >* enemyStacks, TArray< struct FH7QuickCombatStack >* myStacks, class UH7HeroAbility** usedSpell );
	void ResetQuickCombatRound ( TArray< struct FH7QuickCombatStack >* queue, struct FH7QuickCombatHero* attackerHero, struct FH7QuickCombatHero* defenderHero );
	bool QuickCombatWithCombatArmies ( unsigned long isSiege, struct FH7SiegeTownData siegeData, class AH7CombatArmy** attackingArmy, class AH7CombatArmy** defendingArmy );
	void LogQuickCombatHeroData ( struct FH7QuickCombatHero Hero );
	bool PreQuickCombatWithCombatArmies ( class AH7AdventureArmy* defendingArmy, class AH7CombatArmy** defendingArmyCombat, TArray< class UH7BaseCreatureStack* >* localGuardStacks, struct FH7SiegeTownData* siegeTownData );
	void DeleteCaravan ( int caravanID );
	void ProduceUnitsForSites ( );
	void UpdatePlayerPlunder ( );
	void ProduceDayUnits ( );
	void ResetBuildingStateWeekly ( );
	void UpdateBuiltTodayForTowns ( unsigned char currentPlayerNumber );
	void UpdatePlunderDelayForAoCBuffSites ( unsigned char currentPlayerNumber );
	void UpdatePlunderDelayForMines ( unsigned char currentPlayerNumber );
	void TriggerCombatEvent ( class AH7AdventureArmy* victoriousArmy, class AH7AdventureArmy* defeatArmy );
	void TriggerQuickCombatStartEvent ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy );
	void AutoFocusArmyForPlayer ( class AH7Player* pl );
	void AutoSelectArmy ( unsigned long shouldFocus );
	void DoBackToAdventureFade ( );
	void DoBackToAdventureFromCombat ( class AH7AdventureArmy* victoriousArmy, class AH7AdventureArmy* defeatArmy, unsigned long wasDefeated );
	void ResetAdventurePostProcess ( );
	void PrepareAdventureMapForCombatReturn ( );
	void PrepareAdventureMapForCombat ( );
	void CleanCombatMapForGC ( struct FString CombatMapName );
	void ReleaseCombatMap ( unsigned long isReplayCombat );
	void UpdateHerosNewTurn ( );
	void UpdateHUD ( TArray< class AH7AdventureHero* > Heroes, class AH7AdventureArmy* armyToSelect, unsigned long shouldSelectArmy, unsigned long shouldFocus, unsigned long isNewTurn );
	class AH7AdventureArmy* GetArmyToSelect ( TArray< class AH7AdventureHero* > Heroes );
	int SortTownByThreatDescending ( class AH7Town* A, class AH7Town* B );
	void RecalculateTownCaravanChainAI ( class AH7Player* dasPlayer );
	void UpdateTownsAI ( class AH7Player* ply );
	bool IsHotSeat ( );
	class AH7Player* FindLocalPlayer ( );
	int GetTotalResCount ( );
	int GetTotalUnitsCount ( );
	class AH7Player* GetLocalPlayer ( unsigned long allowNone );
	void CalculateInputAllowed ( class AH7Player* thePlayer );
	void HandleStartOfTurnMessages ( class AH7Player* CurrentPlayer );
	int SetNextPlayer ( int CurrentPlayer, unsigned long isGameStart );
	void ClearRetreatTimer ( );
	void UpdateCurrentRetreatTimer ( float ElapsedTime );
	void ResetCurrentRetreatTimer ( );
	void UpdateCurrentTurnTimer ( float ElapsedTime );
	void ResetCurrentTurnTimer ( );
	void TriggerStartOfTurnEvents ( );
	void StartAITurn ( );
	void StartPlayerTurn ( int currentPlayerIndex, unsigned long UpdateTurnCounter, unsigned long isGameStart );
	void StartPlayerTurnConfirmed ( );
	void EndPlayerTurn ( int currentPlayerIndex, unsigned long UpdateTurnCounter, unsigned long isGameStart );
	bool AllPlayersHaveQuit ( );
	void FinishHeroTurn ( );
	void RequestCancelEndTurn ( );
	void BeginTurn ( );
	bool SetNextAIPlayerInSimTurns ( int currentPlayerIdx );
	void EndMyTurnComplete ( );
	void EndAITurn ( );
	void EndMyTurn ( );
	void UpdateSpells ( unsigned char PlayerID );
	void UpdateProductionPostIncome ( unsigned char PlayerID );
	void UpdateProduction ( unsigned char PlayerID );
	void UpdateEvents ( unsigned char eventTrigger, unsigned char PlayerID, struct FH7EventContainerStruct container, TArray< class AH7EditorHero* > excludeHeroes );
	void SetHoverArmy ( class AH7AdventureArmy* Army );
	void UnhoverArmy ( );
	TArray< class AH7AdventureArmy* > GetPlayerArmies ( class AH7Player* fromPlayer, unsigned long checkHasHero );
	class AH7AdventureArmy* GetAdvArmyOnCombatByPlayer ( class AH7Player* fromPlayer );
	TArray< class AH7AdventureHero* > GetCurrentPlayerHeroes ( unsigned long withoutGarrison );
	TArray< class AH7AdventureHero* > GetLocalPlayerHeroes ( unsigned long withoutGarrison );
	struct FPlayerLobbySelectedSettings GetPlayerSettingsFromPlayerNumber ( unsigned char PlayerNumber );
	unsigned char GetAIAggressivenessFromDifficulty ( unsigned char diff );
	void SetSelectedArmy ( class AH7AdventureArmy* Army );
	void SelectArmy ( class AH7AdventureArmy* Army, unsigned long doFocus );
	void SoftSelectArmy ( class AH7AdventureArmy* Army );
	void SelectArmyByHeroID ( int heroId );
	class AH7AdventureArmy* GetArmyByHeroID ( int heroId );
	TArray< class AH7AdventureArmy* > GetArmies ( );
	void GotoNextMap ( );
	struct FString GetCombatMapName ( class AH7AdventureArmy* defendingArmy );
	void PerformCombatMapSwitch_NotReplay ( );
	void ShowCombatLoadingScreen ( );
	void StartCombatFading ( );
	void StartCombat ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy, unsigned long isReplayCombat );
	void StartRecruitedCaravans ( class AH7Player* playerFilter );
	void Negotiate ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy );
	void NegotiateAI ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy );
	void CarryOutNegotiationAI ( class AH7AdventureArmy* heroArmy, class AH7AdventureArmy* creatureArmy, unsigned long join, TArray< struct FH7ResourceQuantity > Cost, unsigned long Force, unsigned long forceFlee );
	float GetNegotiationImpressionModifier ( unsigned char threatLevel );
	float GetBaseNegotiationChance ( unsigned char threatLevel );
	unsigned char GetAPRLevel ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy, TArray< class UH7BaseCreatureStack* > additionalStacks );
	void StartCombatDelayed ( );
	void SetActiveUnitCommand_UsePreparedAbility ( class UH7IEffectTargetable* Targetable );
	void SetActiveUnitCommand_PrepareAbility ( class UH7BaseAbility* Ability );
	void SetActiveUnitCommand_MovePatrol ( TArray< class UH7BaseCell* > Path );
	void SetActiveUnitCommand_MoveVisitAndUpgrade ( TArray< class UH7AdventureMapCell* > Path, class AH7VisitableSite* targetSite );
	void SetActiveUnitCommand_MoveVisitAndGarrison ( TArray< class UH7AdventureMapCell* > Path, class AH7VisitableSite* targetSite );
	void SetActiveUnitCommand_VisitAndRecruit ( class AH7VisitableSite* targetSite );
	void SetActiveUnitCommand_MoveVisitAndRecruit ( TArray< class UH7AdventureMapCell* > Path, class AH7VisitableSite* targetSite );
	void SetActiveUnitCommand_MoveVisit ( TArray< class UH7AdventureMapCell* > Path, class AH7VisitableSite* targetSite );
	void SetActiveUnitCommand_MoveMeet ( TArray< class UH7AdventureMapCell* > Path, class UH7IEffectTargetable* Target );
	void SetActiveUnitCommand_Move ( TArray< class UH7BaseCell* > Path );
	bool CanQueueCommand ( );
	class AH7Town* GetAoCOwnerByWorldLocation ( struct FVector Point );
	void OutlineAdventureObject ( class AH7AdventureObject* advObject, struct FColor OutlineColor, unsigned long showOutline );
	void DehighlightAdventureObjects ( );
	void InitPersistentObjectsNative ( unsigned long isLoaded );
	void InitPersistentObjects ( );
	int PlayerCompare ( class AH7Player* A, class AH7Player* B );
	bool HasPlayerReplication ( unsigned char PlayerNumber );
	void InitTemplateArmies ( );
	void InitTemplatePlayersAndArmies ( );
	class AH7Player* eventGetNeutralPlayer ( );
	class AH7Player* CreateNeutralPlayer ( );
	void RemoveArmyOnlyFromList ( class AH7AdventureArmy* Army );
	void RemoveArmy ( class AH7AdventureArmy* Army );
	void RemoveArmiesOfPlayer ( class AH7Player* pl );
	void RemoveCaravan ( class AH7CaravanArmy* caravan );
	class AH7Player* GetPlayerByID ( int PlayerID );
	int GetRemainingActivePlayerCount ( );
	class AH7Player* GetPlayerByIndex ( int Index );
	class AH7Player* GetAnyActivePlayer ( unsigned long ignoreNeutral );
	TArray< class AH7Player* > GetActivePlayers ( unsigned long ignoreNeutral );
	class AH7Player* GetPlayerByNumber ( unsigned char PlayerNumber );
	void GetAllTargetable ( TArray< class UH7IEffectTargetable* >* Targets );
	void AddCaravan ( class AH7CaravanArmy* Army );
	void AddArmy ( class AH7AdventureArmy* Army );
	bool IsArmyOnMap ( class AH7AdventureArmy* Army );
	void InitAdventureAI ( );
	void InitCameraActionController ( );
	void InitFCT ( );
	void ApplyOutline ( );
	void ApplyGameModeGfxSettings ( );
	void ShowAllSiteFlags ( );
	void HideAllSiteFlags ( );
	void SetAllAOCSitesOfPlayerToNeutral ( class AH7Player* pl );
	void ShowAllHeroFX ( );
	void HideAllHeroFX ( );
	int TownCompare ( class AH7Town* A, class AH7Town* B );
	void SortTownList ( );
	void InitTeamManager ( );
	void InitTransitionSaveGame ( );
	void NewTurnInitAdventureMapMusic ( );
	void InitAdventureMapMusic ( );
	void UpdateFogAndAoCVisibilityDelayed ( );
	unsigned char GetCurrentGameMode ( );
	void InitEventManageables ( );
	void InitAdvCntl ( );
	void SwitchToAdventureMapReady ( );
	void SwitchToAdventureMap ( );
	void SwitchToCouncilMapReady ( );
	void SwitchToCouncilMap ( );
	void StreamInCouncilMap ( );
	void UpdatePlayerProfileStats ( );
	void PostBeginPlay ( );
	void eventAddCellFOWChange ( class USequenceAction* cellChangeNode );
	void eventAddCellLayerChange ( class USequenceAction* cellChangeNode );
	void eventAddCellPassabilityChange ( class USequenceAction* cellChangeNode );
	void RestoreCellFOW ( );
	void RestoreCellLayer ( );
	void RestoreCellPassability ( );
	void RestoreCellState ( );
	void RestoreSFX ( );
	void HandleLoadSaveMatinees ( );
	void ReopenMatinees ( );
	void ReopenSequences ( );
	void eventPostSerialize ( );
	void SortMatineesByLoadPriority ( TArray< class USequenceObject* >* matineesToSort );
	void eventFinalizeSerialize ( );
	class UH7MapInfo* GetMapInfo ( );
	class AWorldInfo* GetWorldInfo ( );
	class AH7AdventureController* GetInstance ( );
	void MarkForDeletion ( unsigned long val );
	bool IsMarkedForDeletion ( );
	void GetArmiesCurrentlyOnMap ( TArray< class AH7AdventureArmy* >* armies );
	void AddLoadSaveMatinee ( class USeqAct_Interp* Mat );
	TArray< struct FH7AbilityTrackingData > GetAbilityTrackingData ( );
	void AddAbilityTrackingData ( struct FH7AbilityTrackingData Data );
	void IncrementTrackingRoundCounterAutoCombat ( );
	void IncrementTrackingRoundCounter ( );
	struct FString GetMapFileName ( );
	bool IsSpectatorMode ( );
	void SetRandomSkilling ( unsigned long val );
	bool GetRandomSkilling ( );
	bool GetTeamTrade ( );
	unsigned char GetForceQuickCombat ( );
	TArray< struct FPlayerLobbySelectedSettings > GetPlayerSettings ( );
	void SetGameSettingsSpeedAi ( float S );
	void SetGameSettingsSpeedCmb ( float S );
	void SetGameSettingsSpeedAdv ( float S );
	struct FH7LobbyDataGameSettings GetGameSettings ( );
	struct FH7LobbyDataMapSettings GetMapSettings ( );
	bool IsSimTurnOfAI ( );
	void SetTurnTimerPaused ( unsigned long Paused );
	bool IsCouncilMapActive ( );
	void SetCouncilMapManager ( class AH7CouncilMapManager* NewValue );
	class AH7CouncilMapManager* GetCouncilMapManager ( );
	class UH7CampaignDefinition* GetCampaign ( );
	void AddDenOfThieves ( class AH7DenOfThieves* den );
	TArray< class AH7DenOfThieves* > GetDenOfThievesList ( );
	void SetNeutralGrowthMultiplier ( float F );
	float GetNeutralGrowthMultiplier ( );
	class UH7Calendar* GetCalendar ( );
	bool KismetAllowsSurrender ( );
	bool KismetAllowsFlee ( );
	void SetKismetAllowsSurrender ( unsigned long canSurrender );
	void SetKismetAllowsFlee ( unsigned long canFlee );
	bool GetAIAllowQuickCombat ( );
	void SetAIAllowQuickCombat ( unsigned long canQuickCombat );
	void SetSkipMove ( unsigned long IsEnabled );
	bool ShouldSkipMove ( );
	void SetAutomatedTestingAI ( unsigned long IsEnabled );
	bool IsAutomatedTestingAIEnabled ( );
	bool IsInitialized ( );
	class UH7TeamManager* GetTeamManager ( );
	TArray< class ALandscape* > GetLandscapes ( );
	class AH7AdventureGridManager* GetGridController ( );
	bool IsAllHeroFXHidden ( );
	void SetPreparedCastingStage ( class UH7TownCastingStage* stage );
	class UH7TownCastingStage* GetPreparedCastingStage ( );
	void SetCurrentBattleSite ( class AH7BattleSite* Site );
	class AH7BattleSite* GetCurrentBattleSite ( );
	void SetBeforeBattleArea ( class AH7AreaOfControlSite* Site );
	class AH7AreaOfControlSite* GetBeforeBattleArea ( );
	TArray< class AH7CaravanArmy* > GetCurrentCaravanArmies ( );
	class UH7HallOfHeroesManager* GetHallOfHeroesManager ( );
	void AddDestructionManipulator ( class AH7DestructibleObjectManipulator* Obj );
	TArray< class AH7DestructibleObjectManipulator* > GetDestructionManipulators ( );
	TArray< class AH7Fort* > GetFortList ( );
	TArray< class AH7Town* > GetTownList ( );
	TArray< class AH7Merchant* > GetMerchantList ( );
	TArray< class AH7Teleporter* > GetTeleporterList ( );
	TArray< class AH7AdventureObject* > GetAdvObjectList ( );
	void RemoveAdvObject ( class AH7AdventureObject* objectissimo );
	void AddAdvObject ( class AH7AdventureObject* objectissimo );
	void AddGarrison ( class AH7Garrison* garrison );
	void AddBattleSite ( class AH7BattleSite* Site );
	void AddPermanentBonusSite ( class AH7PermanentBonusSite* Site );
	void AddAoCBuffSite ( class AH7AreaOfControlBuffSite* aocBuffSite );
	TArray< class AH7Mine* > GetMines ( );
	void AddMerchant ( class AH7Merchant* Mine );
	void AddMine ( class AH7Mine* Mine );
	void AddCustomNeutralDwelling ( class AH7CustomNeutralDwelling* costumDwelling );
	void AddDwelling ( class AH7Dwelling* Dwelling );
	void AddFort ( class AH7Fort* fort );
	void AddTown ( class AH7Town* Town );
	void AddTeleporter ( class AH7Teleporter* porter );
	class AH7AiAdventureMap* GetAI ( );
	void SetArmyDefenderCombat ( class AH7CombatArmy* Army );
	class AH7CombatArmy* GetArmyDefenderCombat ( );
	void SetArmyAttackerCombat ( class AH7CombatArmy* Army );
	class AH7CombatArmy* GetArmyAttackerCombat ( );
	void SetArmyDefender ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetArmyDefender ( );
	void SetArmyAttacker ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetArmyAttacker ( );
	int GetTurns ( );
	class AH7AdventureArmy* GetSelectedArmy ( );
	int GetNumOfPlayers ( );
	TArray< class AH7Player* > GetPlayers ( );
	class AH7Player* GetCurrentPlayer ( );
	void SetBeforeCombatCell ( class UH7AdventureMapCell* cell );
	class UH7AdventureCursor* GetCursor ( );
	class AH7AdventureConfiguration* GetConfig ( );
	void IncrementObeliskCount ( );
	int GetAmountOfObelisks ( );
	struct FIntPoint GetTearOfAshaCoordinates ( );
	int GetTearOfAshaGridIndex ( );
	void SetTearOfAshaRetrieved ( unsigned long val );
	bool IsTearOfAshaRetrieved ( );
	void SetHasUpgradeCostWeekEffect ( unsigned long bValue );
	bool HasUpradeCostWeekEffect ( );
	void SetUpgradeCostWeekEffect ( float Mult );
	float GetUpgradeCostWeekEffect ( );
	void SetGlobalTradeModifier ( float F );
	float GetGlobalTradeModifier ( );
	void OnScreenshotComplete ( );
};



// Class MMH7Game.H7CombatController ( Property size: 46 iter: 166) 
// Class name index: 8060 
// 0x0138 (0x0380 - 0x0248)
class AH7CombatController : public AH7BaseGameController
{
public:
	struct FString                                     mArmyAttackerDefaultSetup;                        		// 0x0248 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mArmyDefenderDefaultSetup;                        		// 0x0258 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7Player*                                   mPlayerAttackerTemplate;                          		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Player*                                   mPlayerDefenderTemplate;                          		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsNavalCombat : 1;                               		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mPlacingAttackerDone : 1;                         		// 0x0278 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mPlacingDefenderDone : 1;                         		// 0x0278 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsSomeoneDying : 1;                              		// 0x0278 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mIsLastStackDying : 1;                            		// 0x0278 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mLastUnitWasHero : 1;                             		// 0x0278 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mCheckEndCombatImmediately : 1;                   		// 0x0278 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mSkipTurnCommand : 1;                             		// 0x0278 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mTacticsStartable : 1;                            		// 0x0278 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mResultWin : 1;                                   		// 0x0278 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      mForceEndTurnAfterAnim : 1;                       		// 0x0278 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mAnyDidSurrender : 1;                             		// 0x0278 (0x0004) [0x0000000000000000] [0x00000800] 
	class AH7CombatConfiguration*                      mCombatConfiguration;                             		// 0x027C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureConfiguration*                   mAventureConfigurationDuels;                      		// 0x0284 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatArmy*                               mArmyDefender;                                    		// 0x028C (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mArmyAttacker;                                    		// 0x0294 (0x0008) [0x0000000000000000]              
	class UH7InitiativeQueue*                          mInitiativeQueue;                                 		// 0x029C (0x0008) [0x0000000000000000]              
	class UH7GameProcessor*                            mGameProcessor;                                   		// 0x02A4 (0x0008) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mGridController;                                  		// 0x02AC (0x0008) [0x0000000000000000]              
	class AH7AiCombatMap*                              mAI;                                              		// 0x02B4 (0x0008) [0x0000000000000000]              
	int                                                mTurnCounter;                                     		// 0x02BC (0x0004) [0x0000000000000000]              
	class UH7CombatMapCursor*                          mCursor;                                          		// 0x02C0 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mActiveUnit;                                      		// 0x02C8 (0x0008) [0x0000000000000000]              
	TArray< class AH7Unit* >                           mAttackBuffer;                                    		// 0x02D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Unit* >                           mNoAttackBuffer;                                  		// 0x02E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mBadMoraleTime;                                   		// 0x02F0 (0x0004) [0x0000000000000000]              
	float                                              mCurrentTimeBadMorale;                            		// 0x02F4 (0x0004) [0x0000000000000000]              
	float                                              mGameSpeed;                                       		// 0x02F8 (0x0004) [0x0000000000000000]              
	class AH7CoverManager*                             mCoverManager;                                    		// 0x02FC (0x0008) [0x0000000000000000]              
	class AH7CameraActionController*                   mCameraActionTemplate;                            		// 0x0304 (0x0008) [0x0000000000000000]              
	class UH7HeroEventParam*                           mHeroEventParam;                                  		// 0x030C (0x0008) [0x0000000000000000]              
	struct FString                                     mHeroWithDisableFleeSurrender;                    		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mDisableFleeSurrenderArtifact;                    		// 0x0324 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mResultXPWinner;                                  		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mResultXPLoser;                                   		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AH7CombatArmy*                               mResultArmy;                                      		// 0x033C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              mCurrentTurnTimeLeft;                             		// 0x0344 (0x0004) [0x0000000000000000]              
	TArray< struct FH7AbilityTrackingData >            mAbilityTrackingData;                             		// 0x0348 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mUniqueGameName;                                  		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mTurnNameInst;                                    		// 0x0368 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mNumberOfRoundsInFightsTotal;                     		// 0x0378 (0x0004) [0x0000000000000000]              
	int                                                mNumberOfRoundsInFightsAutoCombat;                		// 0x037C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3274 ];

		return pClassPointer;
	};

	void MPAutoWin ( );
	void VictoryCamEnded ( );
	bool ShouldTakeCareOfArmy ( class AH7CombatArmy* Army );
	class AH7Player* GetLocalPlayer ( );
	void SendTrackingSpellUsed ( );
	void TrackingMapEnd ( struct FString Reason );
	void SendTrackingCombatDataDuel ( );
	void TrackingMapStart ( );
	void TrackingGameModeEnd ( );
	TArray< struct FH7AbilityTrackingData > GetAbilityTrackingData ( );
	void AddAbilityTrackingData ( struct FH7AbilityTrackingData Data );
	void UpdateCurrentTurnTimer ( float ElapsedTime );
	void ResetTimerForTactics ( );
	void ResetCurrentTurnTimer ( );
	void StartCombat ( );
	void RaiseEventOnArmiesWarUnits ( unsigned char dasTrigger, class AH7CombatArmy* Army, unsigned long simulate, struct FH7EventContainerStruct container );
	void RaiseEventOnArmiesTowers ( unsigned char Trigger, class AH7CombatArmy* Army, unsigned long simulate, struct FH7EventContainerStruct container );
	void RaiseEventOnArmiesStacks ( unsigned char Trigger, class AH7CombatArmy* Army, unsigned long simulate, struct FH7EventContainerStruct container );
	void raiseEvent ( unsigned char Trigger, unsigned long simulate, class AH7CombatArmy* Army, struct FH7EventContainerStruct container );
	void DestroyAllStackGhosts ( );
	void TeleportSpellWasCanceled ( );
	void RefreshAllUnits ( );
	struct FString GetCurrentGameMode ( );
	void EndBattle ( unsigned long isRestarting );
	void CalculateInputAllowed ( unsigned long waitForAnimIfNecessary );
	void TravelBack ( );
	bool FinishActiveUnitTurn ( unsigned long triggerUnitEndTurn );
	void NextPlayer ( );
	void SkipTurn ( );
	void SetActiveUnitCommand_UsePreparedAbility ( class UH7IEffectTargetable* Target, unsigned char Direction, class UH7CombatMapCell* TrueHitCell, unsigned char commandTagOverride );
	bool SetActiveUnitCommand_PrepareAbility ( class UH7BaseAbility* Ability );
	void SetActiveUnit ( class AH7Unit* Unit );
	bool CanHeroDoActionInCreatureTurn ( );
	bool IsHeroInCreatureTurn ( );
	void WinCombat ( );
	void LoseCombat ( );
	bool IsPlayerParticipatingInCombat ( class AH7Player* pl );
	void SetActiveUnitCommand_SurrenderComplete ( );
	void SetActiveUnitCommand_Surrender ( );
	void SetActiveUnitCommand_FleeComplete ( );
	void SetActiveUnitCommand_Flee ( );
	void SetActiveUnitCommand_MoveAttack ( TArray< class UH7CombatMapCell* > Path, class UH7IEffectTargetable* Target );
	void SetActiveUnitCommand_Move ( TArray< class UH7CombatMapCell* > Path, unsigned long isMoveAttack );
	void SetActiveUnitCommand_SkipTurn ( unsigned long doMPSynchronization );
	void InitializeAurasOnEnterCell ( );
	void PutUnitOnCursor ( int Id );
	void PutUnitOnBar ( int Id );
	void GetAllTargetable ( TArray< class UH7IEffectTargetable* >* outTargets );
	class AH7CombatArmy* GetCurrentlyDeployingArmy ( );
	TArray< class AH7CreatureStack* > GetUnitsForDeployment ( );
	TArray< struct FH7StackDeployment > GetStackDeployments ( );
	void InitInsertArmyInInitiativeQueue ( class AH7CombatArmy* Army, unsigned long IsAttacker );
	void InitInitiativeQueue ( unsigned long firstRound );
	bool IsCombatComingFromAdventureMap ( );
	class AH7CombatArmy* CreateCombatArmyUsingAdventureArmy ( class AH7AdventureArmy* Army, unsigned long IsAttacker );
	void InitPlayerAndArmy ( );
	int GetLocalGuardSlots ( );
	int GetMaxDeployNumber ( );
	bool IsBadMoraleDelayRunning ( );
	void CheckStartable ( );
	void InitTemplatePlayersAndArmies ( );
	void InitCameraActionController ( );
	void InitCombatAI ( );
	void InitFCT ( );
	void DonePresentArmy ( );
	void CameraActionPresentArmy ( );
	void CameraActionIntroduceHero ( );
	void ApplyOutline ( );
	void ApplyGameModeGfxSettings ( );
	void DoNewUnitHudUpdates ( );
	void LoadSummonableCreatureVisuals ( );
	void PostBeginPlay ( );
	void SetGameSpeed ( float NewSpeed );
	int GetTotalHealth ( );
	class AH7Player* GetPlayerByNumber ( unsigned char PlayerNumber );
	bool AllAnimationsDone ( );
	bool ArtifactAllowsFleeSurrender ( );
	bool AllowCurrentUnitAction ( );
	void SetPreviousActiveUnit ( );
	void SetActiveUnitHero ( );
	void RaiseEventOnArray ( TArray< class UH7IEffectTargetable* > units, unsigned char Event );
	void SetTacticPhaseFinishedMP ( unsigned long IsDefender );
	bool IsSurrenderPossible ( struct FString* blockReason );
	bool IsFleePossible ( struct FString* blockReason );
	bool canRangeAttack ( class UH7IEffectTargetable* Target );
	class UH7CombatMapCell* GetCellByID ( int cellId );
	bool IsLocalPlayerSpectator ( );
	class AH7CombatController* GetInstance ( );
	struct FString GetTurnName ( );
	void StartBadMoraleDelay ( float Time, unsigned long doSkipTurnCommand );
	struct FString GetHeroWithDisableFleeSurrender ( );
	struct FString GetDisableFleeSurrenderArtifact ( );
	bool IsEndOfCombat ( );
	void SetSomeoneDying ( unsigned long isDying );
	bool IsSomeoneDying ( );
	bool IsInNonCombatPhase ( );
	bool IsInTacticsPhase ( );
	bool HasEnoughCurrencyForSurrender ( );
	class AH7Unit* GetActiveUnit ( );
	class AH7CoverManager* GetCoverManager ( );
	class AH7AiCombatMap* GetAI ( );
	class AH7CombatMapGridController* GetGridController ( );
	class AH7CombatConfiguration* GetCombatConfiguration ( );
	class AH7CombatArmy* GetArmyAttacker ( );
	class AH7CombatArmy* GetArmyDefender ( );
	class AH7CombatArmy* GetOpponentArmy ( class AH7CombatArmy* Army );
	class AH7CombatArmy* GetActiveArmy ( );
	int GetCurrentTurn ( );
	class UH7InitiativeQueue* GetInitiativeQueue ( );
	class UH7CombatMapCursor* GetCursor ( );
	float GetGameSpeed ( );
};



// Class MMH7Game.H7Calendar ( Property size: 14 iter: 71) 
// Class name index: 8062 
// 0x0054 (0x00B4 - 0x0060)
class UH7Calendar : public UObject
{
public:
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mCalendarYear;                                    		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                mCalendarMonth;                                   		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                mCalendarWeek;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mCalendarDay;                                     		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                mMaxMonthPerYear;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                mMaxWeeksPerMonth;                                		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                mMaxDaysPerWeek;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                Mid;                                              		// 0x0084 (0x0004) [0x0000000000000000]              
	class AH7AdventureController*                      mAdventureController;                             		// 0x0088 (0x0008) [0x0000000000000000]              
	class AH7ScriptingController*                      mScriptingController;                             		// 0x0090 (0x0008) [0x0000000000000000]              
	TArray< class UH7Month* >                          mMonth;                                           		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7WeekManager*                              mWeekManager;                                     		// 0x00A8 (0x0008) [0x0000000000000000]              
	int                                                mDaysPassed;                                      		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3276 ];

		return pClassPointer;
	};

	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	struct FString GetTotalPlayTimeString ( );
	void WeekStart ( );
	void WeekPassed ( );
	void DayStart ( );
	void DayPassed ( );
	void NextYear ( );
	void NextMonth ( );
	void NextWeek ( );
	void NextDay ( );
	void UpdateWeekEvents ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	void InitializeGameStartWeek ( );
	void Init ( );
	class UH7Month* GetCurrentMonth ( );
	void SetCalendarDay ( int Day );
	void SetCalendarWeek ( int week );
	void SetCalendarMonth ( int Month );
	void SetCalendarYear ( int Year );
	int GetStartYear ( );
	class UH7Week* GetNextWeek ( );
	class UH7Week* GetCurrentWeek ( );
	int GetWeeksPassed ( );
	int GetCalendarDay ( );
	int GetCalendarWeek ( );
	int GetCalendarMonth ( );
	int GetCalendarYear ( );
	int GetCalendarYearForGUI ( );
	class UH7WeekManager* GetWeekManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7ICaster* GetOriginal ( );
	class AH7Player* GetPlayer ( );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetLocation ( );
	bool IsDefaultAttackActive ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	class AH7CombatArmy* GetCombatArmy ( );
	unsigned char GetEntityType ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	int GetID ( );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	int GetDaysPassed ( );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	void DataChanged ( struct FString cause );
	class UH7EffectManager* GetEffectManager ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7Camera ( Property size: 46 iter: 116) 
// Class name index: 8064 
// 0x035C (0x08E4 - 0x0588)
class AH7Camera : public ACamera
{
public:
	struct FVector                                     TargetVRP[ 0x7 ];                                 		// 0x0588 (0x0054) [0x0000000000000000]              
	struct FVector                                     CurrentVRP[ 0x7 ];                                		// 0x05DC (0x0054) [0x0000000000000000]              
	struct FRotator                                    TargetRotation[ 0x7 ];                            		// 0x0630 (0x0054) [0x0000000000000000]              
	struct FRotator                                    CurrentRotation[ 0x7 ];                           		// 0x0684 (0x0054) [0x0000000000000000]              
	float                                              TargetViewingDistance[ 0x7 ];                     		// 0x06D8 (0x001C) [0x0000000000000000]              
	struct FVector                                     DefaultGridCenter[ 0x7 ];                         		// 0x06F4 (0x0054) [0x0000000000000000]              
	float                                              BaseZ[ 0x7 ];                                     		// 0x0748 (0x001C) [0x0000000000000000]              
	int                                                lastGridID[ 0x7 ];                                		// 0x0764 (0x001C) [0x0000000000000000]              
	int                                                IsInitialized[ 0x7 ];                             		// 0x0780 (0x001C) [0x0000000000000000]              
	class UH7CameraProperties*                         CameraProperties[ 0x7 ];                          		// 0x079C (0x0038) [0x0000000000000000]              
	class UH7CameraProperties*                         DefaultTownCameraProperties;                      		// 0x07D4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UH7CameraProperties*                         RetroModeAdvCameraProperties;                     		// 0x07DC (0x0008) [0x0000000000000000]              
	class UH7CameraProperties*                         RetroModeCombatCameraProperties;                  		// 0x07E4 (0x0008) [0x0000000000000000]              
	struct FString                                     CustomAdventureCameraProperties;                  		// 0x07EC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CustomCombatCameraProperties;                     		// 0x07FC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                mActiveCameraIdx;                                 		// 0x080C (0x0004) [0x0000000000000000]              
	int                                                mIsFollowing[ 0x7 ];                              		// 0x0810 (0x001C) [0x0000000000000000]              
	class AActor*                                      mToFocus[ 0x7 ];                                  		// 0x082C (0x0038) [0x0000000000000000]              
	unsigned long                                      mCameraLocked : 1;                                		// 0x0864 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mCameraLockAffectsFocusCamera : 1;                		// 0x0864 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsInCameraActionMode : 1;                        		// 0x0864 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mOverridenFOV : 1;                                		// 0x0864 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mChangeTileType : 1;                              		// 0x0864 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mMatineeActive : 1;                               		// 0x0864 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mCinematicListenerEnabled : 1;                    		// 0x0864 (0x0004) [0x0000000000000000] [0x00000040] 
	float                                              mCameraPanYOffset;                                		// 0x0868 (0x0004) [0x0000000000000000]              
	float                                              mCameraPanXOffset;                                		// 0x086C (0x0004) [0x0000000000000000]              
	float                                              mCameraPanYOffsetCloseZoom;                       		// 0x0870 (0x0004) [0x0000000000000000]              
	float                                              mCameraMaxDistanceCalculated;                     		// 0x0874 (0x0004) [0x0000000000000000]              
	class UCameraAnim*                                 mBattleStartAnim;                                 		// 0x0878 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             mBSAInst;                                         		// 0x0880 (0x0008) [0x0000000000000000]              
	float                                              mCameraMaxDistanceCache;                          		// 0x0888 (0x0004) [0x0000000000000000]              
	float                                              mCurrentGridBorderHorizontalSize;                 		// 0x088C (0x0004) [0x0000000000000000]              
	float                                              mCurrentGridBorderVerticalSize;                   		// 0x0890 (0x0004) [0x0000000000000000]              
	float                                              mGridBorderVerticalSize;                          		// 0x0894 (0x0004) [0x0000000000000000]              
	float                                              mGridBorderHorizontalSize;                        		// 0x0898 (0x0004) [0x0000000000000000]              
	float                                              mTileCheckTargetTime;                             		// 0x089C (0x0004) [0x0000000000000000]              
	struct FName                                       mRefTileDisplayName;                              		// 0x08A0 (0x0008) [0x0000000000000000]              
	struct FVector                                     VRPRef;                                           		// 0x08A8 (0x000C) [0x0000000000000000]              
	float                                              mDeltaTimeDelay;                                  		// 0x08B4 (0x0004) [0x0000000000000000]              
	float                                              mLastPannedDistance;                              		// 0x08B8 (0x0004) [0x0000000000000000]              
	float                                              mLastRotatedAngle;                                		// 0x08BC (0x0004) [0x0000000000000000]              
	struct FRotator                                    mOriginalRotation;                                		// 0x08C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     mOriginalPosition;                                		// 0x08CC (0x000C) [0x0000000000000000]              
	float                                              mOriginalFOV;                                     		// 0x08D8 (0x0004) [0x0000000000000000]              
	class ADynamicCameraActor*                         mTreasureCam;                                     		// 0x08DC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3278 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void SetCameraRotation ( struct FRotator NewRotation );
	void SetCameraLocation ( struct FVector NewLocation );
	void EnableAudioListener ( unsigned long Enable );
	void UpdateAkAudioListener ( int PlayerIndex, struct FVector AnchorPoint, struct FVector Up, struct FVector Right, struct FVector Front );
	void UpdateAudioListener ( class ACameraActor* CamActor );
	void PlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	float GetScreenRatioCoef ( );
	void CheckForClipping ( class AH7AdventureGridManager* adventureGrid, struct FVector* cameraPos );
	void AdjustToGround ( class AH7AdventureGridManager* adventureGrid );
	struct FVector CalculateNewPosition ( class AH7PlayerController* InputController, float DeltaTime );
	struct FVector CalculateNewPositionNative ( class AH7PlayerController* InputController, float DeltaTime );
	struct FRotator CalculateNewRotation ( class AH7PlayerController* InputController );
	void CalculateNewZoom ( class AH7PlayerController* InputController, float DeltaTimeAdjusted );
	void ClearFocusActor ( );
	void SetFocusActor ( class AActor* FocusActor, int PlayerNumber, unsigned long IsFollowing, unsigned long setInstant, unsigned long IsMoving );
	void SetCurrentVRP ( struct FVector vrp );
	struct FVector GetCurrentVRP ( );
	bool IsFinishedBattleCamera ( );
	void StopBattleCamera ( );
	void StartBattleCamera ( );
	void LockCameraPreventFocusActor ( unsigned long locked );
	bool IsCameraLocked ( );
	void LockCamera ( unsigned long locked );
	float AdjustCombatPanYOffset ( float panYOffset );
	void AdjustCombatBorderGridSize ( );
	float AdjustCombatViewingDistance ( float viewingDistance );
	float CalculateInitialViewingDistance ( );
	void SetCameraEnsureAspectRatio ( unsigned long IsActive );
	void Reset ( );
	void ForceReInitialisation ( int camIdx );
	void ForceInitialisation ( );
	void ActivateMatineeTransform ( );
	bool IsMatineeControlled ( );
	void SetCinematicListenerEnabled ( unsigned long val );
	void UseCameraTown ( class UH7CameraProperties* camProperties );
	void SetActiveProperties ( class UH7CameraProperties* camProperties );
	void SetCameraTransform ( struct FVector NewPosition, struct FRotator NewRotation, float NewFOV );
	void ResetCurrentViewingDistance ( );
	void SetDeltaDelay ( float Delay );
	class ADynamicCameraActor* GetTreasureCam ( );
	void SetTreasureCam ( class ADynamicCameraActor* NewCam );
	bool GetOverridenFOV ( );
	void SetOverridenFOV ( unsigned long Value );
	void SetIsInCameraActionMode ( unsigned long Value );
	struct FVector GetTargetVRP ( );
	void SetTargetVRP ( struct FVector vrp );
	void SetTargetViewingDistance ( float viewingDistance );
	float eventGetTargetViewingDistance ( );
	struct FVector GetDefaultGridCenter ( );
	float GetDefaultRotationAngle ( );
	float GetCurrentPitchAngle ( );
	float GetCurrentRotationAngle ( );
	void SetCurrentRotation ( struct FRotator Value );
	void SetTargetRotation ( struct FRotator Value );
	struct FRotator GetTargetRotation ( );
	struct FRotator eventGetCurrentRotation ( );
	class AH7Camera* GetInstance ( );
	bool IsFollowing ( );
	int GetActiveCameraMode ( );
	class UH7CameraProperties* eventGetActiveProperties ( );
	void UseCameraCouncilMap ( );
	void UseCameraCouncil ( );
	void UseCameraAdventure ( );
	void UseCameraBattleStart ( );
	void UseCameraDeployment ( );
	void UseCameraCombat ( );
	class AActor* GetCurrentFocusActor ( );
};



// Class MMH7Game.H7CameraProperties ( Property size: 33 iter: 33) 
// Class name index: 8066 
// 0x009C (0x00FC - 0x0060)
class UH7CameraProperties : public UObject
{
public:
	float                                              viewingDistance;                                  		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewingDistance4x3;                               		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FieldOfView;                                      		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x006C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PanBlendSpeed;                                    		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationBlendSpeed;                               		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DollyBlendSpeed;                                  		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PanVelocity;                                      		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PanXOffset;                                       		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              panYOffset;                                       		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PanZOffset;                                       		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PanYOffsetCloseZoom;                              		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationVelocity;                                 		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DollyVelocity;                                    		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DollyMouseScrollVelocity;                         		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationLimit;                                    		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GridBorderVerticalSizeMin;                        		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GridBorderVerticalSizeMax;                        		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GridBorderHorizontalSizeMin;                      		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GridBorderHorizontalSizeMax;                      		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewDistanceMinimum;                              		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewDistanceMaximum;                              		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewDistanceMaximumCache;                         		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FOVMinimum;                                       		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FOVMaximum;                                       		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HighPitch;                                        		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LowPitch;                                         		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PitchBlendStart;                                  		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ShakeRate;                                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector2D                                   BaseGridSize;                                     		// 0x00DC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector2D                                   ViewingDistanceIncreasePerCell;                   		// 0x00E4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector2D                                   PanYOffsetPerCell;                                		// 0x00EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector2D                                   BorderGridSizePerCell;                            		// 0x00F4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3280 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CampaignDefinition ( Property size: 26 iter: 65) 
// Class name index: 8068 
// 0x0148 (0x01A8 - 0x0060)
class UH7CampaignDefinition : public UObject
{
public:
	struct FString                                     mName;                                            		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mDescription;                                     		// 0x0070 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mBonusDescription;                                		// 0x0080 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mNameInst;                                        		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mDescriptionInst;                                 		// 0x00A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mBonusDescriptionInst;                            		// 0x00B0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mIsCouncilCampaign : 1;                           		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsIvan : 1;                                      		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UH7Faction*                                  mFaction;                                         		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorHero*                               mCouncillor;                                      		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mStartYear;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mEndYear;                                         		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7MapEntry >                       mCampaignMaps;                                    		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mStartMatineeName;                                		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mEndMatineeName;                                  		// 0x00FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mAuthor;                                          		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mRevision;                                        		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           mIvanCampaignSelectText;                          		// 0x0120 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mStartCampaignText;                               		// 0x0130 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mContinueCampaignText;                            		// 0x0140 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mRestartCampaignText;                             		// 0x0150 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UMaterialInterface*                          mLoadScreenBackground;                            		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mFileName;                                        		// 0x0168 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mContainerObjectName;                             		// 0x0178 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mNameFallback;                                    		// 0x0188 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mDescriptionFallback;                             		// 0x0198 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3282 ];

		return pClassPointer;
	};

	void LogUserCampaign ( );
	void InitFromCampaignDataParams ( int revision, struct FString campaignName, struct FString Filename, struct FString Author, struct FString Description, TArray< struct FString > inCampaignMaps, TArray< struct FString > inCampaignMapNames, TArray< struct FString > inCampaignMapInfoNumbers, struct FString containerObjectName );
	void InitFromCampaignData ( struct FH7CampaignData Data );
	void InitFromRawData ( struct FH7RawCampaignData RawData );
	struct FString GetMapLocaName ( struct FString MapFilename );
	void SetMapPixel ( struct FString MapName, int pixel );
	int GetMapInfoNumberOfMap ( struct FString MapName );
	int GetPixelOfMap ( struct FString MapName );
	int GetYearOfMap ( struct FString MapName );
	bool IsLastMap ( struct FString MapFilename );
	struct FString GetPrevMap ( struct FString MapFilename );
	struct FString GetNextMap ( struct FString MapFilename );
	struct FString GetCurrentCharacterText ( );
	int GetMapsNum ( );
	TArray< struct FString > GetMaps ( );
	int GetMapIndex ( struct FString MapFilename );
	struct FH7MapEntry GetMapEntry ( struct FString MapFilename );
	class UMaterialInterface* GetLoadscreenBackground ( );
	bool IsIvanCampaign ( );
	struct FString GetMapByIndex ( int Index );
	struct FString GetMapByNumber ( int Number );
	int GetMaxMaps ( );
	struct FString GetLastMap ( );
	struct FString GetFirstMap ( );
	class UH7Faction* GetFaction ( );
	class AH7EditorHero* GetCouncillor ( );
	bool IsSameCampaign ( class UH7CampaignDefinition* otherCampaign );
	struct FString GetBonusDescription ( );
	struct FString GetDescription ( );
	struct FString GetName ( );
	struct FString GetAuthor ( );
	struct FString GetAID ( );
	void Load ( struct FString Filename );
	void Save ( struct FString Filename );
	bool RequiresFactionPrivilege ( );
	bool IsCouncilCampaign ( );
	struct FString GetFilename ( );
	void SetFileName ( struct FString Filename );
};



// Class MMH7Game.H7CombatAction ( Property size: 7 iter: 26) 
// Class name index: 8070 
// 0x006C (0x00CC - 0x0060)
class UH7CombatAction : public UObject
{
public:
	class UH7ICaster*                                  mAttackerUnit;                                    		// 0x0060 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UH7IEffectTargetable* >              mDefenders;                                       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7RangeValue                               mBaseDamageRange;                                 		// 0x0080 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      mAction;                                          		// 0x00A8 (0x0001) [0x0000000000000000]              
	TArray< class UH7Effect* >                         mEffects;                                         		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Effect*                                   mCurrentProcessedEffect;                          		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7EffectContainer*                          mContainer;                                       		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3284 ];

		return pClassPointer;
	};

	void Reset ( );
	void DebugLogSelf ( unsigned long showForEventHandlingLogs );
	void AddDefender ( class UH7IEffectTargetable* defender, unsigned long resetPool, unsigned long multipleInsert );
	void SetAttacker ( class UH7ICaster* attacker );
	void SetContainer ( class UH7EffectContainer* container );
	class UH7EffectContainer* GetContainer ( );
	class UH7Effect* GetFirstEffect ( );
	TArray< class UH7Effect* > GetEffects ( );
	void SetEffects ( TArray< class UH7Effect* > Effects );
	void SetCurrentEffect ( class UH7Effect* Effect );
	class UH7Effect* GetCurrentEffect ( );
	void SetBaseDamageRange ( struct FH7RangeValue damager );
	struct FH7RangeValue GetBaseDamageRange ( );
	int GetDefenderCount ( );
	unsigned char GetActionID ( );
	void SetActionId ( unsigned char Action );
	TArray< class UH7IEffectTargetable* > GetDefenders ( );
	class UH7IEffectTargetable* GetDefender ( int Idx );
	class UH7ICaster* GetAttacker ( );
};



// Class MMH7Game.H7CombatResult ( Property size: 4 iter: 56) 
// Class name index: 8072 
// 0x0FD4 (0x10A0 - 0x00CC)
class UH7CombatResult : public UH7CombatAction
{
public:
	struct FCRData                                     mResults[ 0x2A ];                                 		// 0x00CC (0x0FC0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FConditionalStatMod >               mConditionalStatMods;                             		// 0x108C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsForecast : 1;                                  		// 0x109C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mShowsSomething : 1;                              		// 0x109C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3286 ];

		return pClassPointer;
	};

	void MergeValueFromOther ( class UH7CombatResult* resa, unsigned long multipleDefenderInsert );
	void Reset ( );
	void DebugLogSelf ( unsigned long showForEventHandlingLogs );
	unsigned char GetFlankingTypeForTarget ( class UH7IEffectTargetable* Target );
	unsigned char GetFlankingType ( int Idx );
	void UpdateDamageRange ( int Idx );
	void CalcFinalDamageModifier ( int Idx );
	struct FH7TooltipMultiplier GetMultiplier ( unsigned char Type, int Idx );
	void RemoveMultiplier ( unsigned char Type, int Idx );
	void AddMultiplier ( unsigned char Type, float Value, int Idx );
	bool HasRetaliationSuppressEffect ( int defenderIdx );
	bool HasTriggeredEffectFromSource ( class UH7EffectContainer* searchSource, int defenderIdx );
	void ClearTriggeredEffects ( );
	void AddTriggeredEffect ( class UH7Effect* Effect, int defenderIdx );
	bool ShowRetaliationLine ( int defenderIdx );
	void AddEffectToTooltip ( class UH7Effect* Effect, int defenderIdx );
	bool DoSendAttackEvent ( int Idx );
	bool IsHeal ( int Idx );
	void SetShowsSomething ( unsigned long val );
	bool ShowsSomething ( );
	void SetMiss ( unsigned long Value, int Idx );
	bool didMiss ( int Idx );
	bool IsConstDamageRange ( int Idx );
	void SetIsConstDamagerRange ( unsigned long isConst, int Idx );
	bool isCovered ( int Idx );
	void SetIsCovered ( unsigned long isCovered, int Idx );
	TArray< class UH7Effect* > GetTriggeredEffects ( int Idx );
	TArray< class UH7Effect* > GetTooltipEffects ( int Idx );
	TArray< struct FH7TooltipMultiplier > GetMultipliers ( int Idx );
	bool GetTriggerEvents ( int Idx );
	void SetTriggerEvents ( unsigned long Value, int Idx );
	int GetDefensePower ( int Idx );
	void SetDefensePower ( int newPower, int Idx );
	int GetAttackPower ( int Idx );
	void SetAttackPower ( int newPower, int Idx );
	float GetFinalDamageModifier ( int Idx );
	int GetKills ( int Idx );
	void SetKills ( int Kills, int Idx );
	void SetKillRange ( int minKills, int maxKills, int Idx );
	int GetDamage ( int Idx );
	void SetDamage ( int newDamage, int Idx );
	void SetDamageRange ( float damageLow, float damageHigh, int Idx );
	float GetDamageHigh ( int Idx );
	float GetDamageLow ( int Idx );
	int GetKillsHigh ( int Idx );
	int GetKillsLow ( int Idx );
	void SetDamageSchool ( unsigned char school, int Idx );
	unsigned char GetDamageSchool ( int Idx );
	void ClearConditionalStatMods ( );
	void AddConditionalStatMod ( struct FConditionalStatMod cond );
	void ClearResult ( );
};



// Class MMH7Game.H7CombatConfiguration ( Property size: 25 iter: 46) 
// Class name index: 8074 
// 0x00A0 (0x02E0 - 0x0240)
class AH7CombatConfiguration : public AActor
{
public:
	int                                                mLuckMax;                                         		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mLuckMin;                                         		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMoraleMax;                                       		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMoraleMin;                                       		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMoraleBuffSameFactionUnits;                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMoraleDebuffEnemyFactionUnits;                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMoraleDebuffAlliedFactionUnits;                  		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMoraleDebuffOtherCase;                           		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mMoralOnAdditionalTurns : 1;                      		// 0x0260 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUsePlatoonStacks : 1;                            		// 0x0260 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mShowCoverSystemDebug : 1;                        		// 0x0260 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              mBadMoraleWaitTime;                               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7AiCombatMapConfig*                        mAiCombatMapConfig;                               		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mMaxWaitTimeParticles;                            		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCoverDamageReduction;                            		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FH7SiegeTownData                            mSiegeTownData;                                   		// 0x0278 (0x0044) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mSiegeDefaultLocalGuard;                          		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FULL_RANGE_MODIFIER;                              		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HALF_RANGE_MODIFIER;                              		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MELEE_PENALTY_MODIFIER;                           		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HIGHER_ATTACK_VALUE_SCALAR;                       		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LOWER_ATTACK_VALUE_SCALAR;                        		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MIN_ATTACK_MODIFIER_CAP;                          		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MAX_ATTACK_MODIFIER_CAP;                          		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMetamagicMax;                                    		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3288 ];

		return pClassPointer;
	};

	void SetMoraleDebuffOtherCase ( int moraleDebuffOtherCase );
	void SetMoraleDebuffAlliedFactionUnits ( int moraleDebuffAlliedFactionUnits );
	void SetMoraleDebuffEnemyFactionUnits ( int moraleDebuffEnemyFactionUnits );
	void SetMoraleBuffSameFactionUnits ( int moraleBuffSameFactionUnits );
	void SetMoraleMin ( int moraleMin );
	void SetMoraleMax ( int moraleMax );
	void SetLuckMin ( int luckMin );
	void SetLuckMax ( int luckMax );
	float GetMaxParticleWaitTime ( );
	bool IsShowCoverSystemDebug ( );
	bool IsUsingPlatoonStacks ( );
	int GetMetamagicMax ( );
	int GetDefaultLocGuardSlots ( );
	int GetMoraleDebuffOtherCase ( );
	int GetMoraleDebuffAlliedFactionUnits ( );
	int GetMoraleDebuffEnemyFactionUnits ( );
	int GetMoraleBuffSameFactionUnits ( );
	int GetMoraleMin ( );
	int GetMoraleMax ( );
	int GetLuckMin ( );
	int GetLuckMax ( );
};



// Class MMH7Game.H7CombatMapGrid ( Property size: 7 iter: 48) 
// Class name index: 8076 
// 0x0034 (0x0094 - 0x0060)
class UH7CombatMapGrid : public UObject
{
public:
	TArray< struct FGridColumns >                      mGridArray;                                       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapGridDebug*                       mDebug;                                           		// 0x0070 (0x0008) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mAttackPositionCache;                             		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mAttackPositionCacheDefenderID;                   		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                mAttackPositionCacheAttackerID;                   		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      mGridAllowsFlee : 1;                              		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mGridAllowsSurrender : 1;                         		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3290 ];

		return pClassPointer;
	};

	TArray< class UH7CombatMapCell* > GetNeighbourCells ( TArray< class UH7CombatMapCell* > targetCells );
	class UH7CombatMapCell* FindNearestCellInRange ( struct FIntPoint P, unsigned char Direction, int Distance );
	class UH7CombatMapCell* GetCellByPos ( int X, int Y );
	class UH7CombatMapCell* GetCellByIntPoint ( struct FIntPoint P );
	void GetAllAttackPositionsAgainst ( class UH7IEffectTargetable* defender, class AH7Unit* attacker, TArray< class UH7CombatMapCell* >* validPositions );
	void ResetAttackPositionCache ( );
	class UH7CombatMapCell* GetTargetMoveCell ( TArray< class UH7CombatMapCell* > hitCells );
	bool CanMoveTo ( TArray< class UH7CombatMapCell* > hitCells, class AH7CreatureStack* attacker );
	void GetCellsIfPlacedHere ( class UH7CombatMapCell* cell, class AH7CreatureStack* attacker, TArray< class UH7CombatMapCell* >* attackingStackCells );
	float CurrentStackMoveDistance ( class UH7CombatMapCell* cell, class AH7CreatureStack* selectedStack );
	bool CurrentStackCanMoveHere ( class UH7CombatMapCell* cell, class AH7CreatureStack* selectedStack );
	int GetAttackPositionRotation ( class UH7CombatMapCell* attackPosition, class UH7CombatMapCell* defendPosition, class AH7CreatureStack* attacker );
	class UH7CombatMapCell* GetNearestAttackPosition ( TArray< class UH7CombatMapCell* > attackPositions, int cursorRotation, struct FIntPoint defendPosition, class AH7CreatureStack* attacker );
	bool HasAdjacentCreature ( class AH7Unit* Unit, class AH7Unit* specificUnit, unsigned long checkAllegiance, TArray< class UH7CombatMapCell* > futureSpecificPosition );
	void GetAttackPosition ( class UH7CombatMapCell* hitCell, struct FVector HitLocation, class AH7CreatureStack* attacker, TArray< class UH7CombatMapCell* >* attackCells );
	bool UnitsInHalfRange ( class AH7Unit* stack0, class AH7Unit* stack1 );
	bool IsUnitIsInMoveRange ( class AH7Unit* Active, class AH7Unit* Target );
	bool AreInMeleeRange ( class AH7Unit* stack0, class UH7IEffectTargetable* Target );
	void ClearForeshadow ( );
	bool AreAllCells ( TArray< class UH7CombatMapCell* > Cells, unsigned long areNotNone, unsigned long areForeshadowed );
	void GetCellsOnEllipse ( class UH7CombatMapCell* targetCell, struct FIntPoint dim, TArray< class UH7CombatMapCell* >* Cells );
	void GetCellsFromDimensions ( class UH7CombatMapCell* targetCell, struct FIntPoint dim, unsigned char originSize, unsigned long filled, TArray< class UH7CombatMapCell* >* Cells );
	void GetCellsFromShape ( class UH7CombatMapCell* targetCell, TArray< struct FIntPoint > Shape, unsigned char originSize, TArray< class UH7CombatMapCell* >* Cells );
	void GetHitCells ( unsigned char creatureSize, class UH7CombatMapCell* targetCell, struct FVector pos, unsigned long onlyForeshadowCells, TArray< class UH7CombatMapCell* >* hitCells );
	void GetCellSurrounding ( class UH7CombatMapCell* targetCell, int Depth, unsigned char cellSize, TArray< class UH7CombatMapCell* >* surroundingCells );
	int GetAllPlaceableCells ( int tacticsPlaceableColumns, unsigned long ignoreUnits, TArray< class UH7CombatMapCell* >* Result );
	class UH7CombatMapCell* GetNeighbourCellInDirection ( class UH7CombatMapCell* cell, unsigned char Direction );
	int GetAllReachableCells ( class AH7CreatureStack* creatureStack, int movePoints, TArray< class UH7CombatMapCell* >* resultArray );
	void AddRowCell ( int Col, class UH7CombatMapCell* cell );
	void AddCol ( );
	class UH7CombatMapCell* GetCellFast ( int X, int Y );
	class UH7CombatMapCell* GetCell ( int X, int Y );
	int GetYSize ( );
	int GetXSize ( );
	void SetupDebug ( class AH7CombatMapGridController* gridController );
	class UH7CombatMapGridDebug* GetCombatGridDebug ( );
	TArray< struct FGridColumns > GetGridArray ( );
	bool GridAllowsSurrender ( );
	bool GridAllowsFlee ( );
	void SetGridAllowsSurrender ( unsigned long canSurrender );
	void SetGridAllowsFlee ( unsigned long canFlee );
};



// Class MMH7Game.H7CombatMapPathfinder ( Property size: 3 iter: 23) 
// Class name index: 8078 
// 0x001C (0x007C - 0x0060)
class UH7CombatMapPathfinder : public UObject
{
public:
	class AH7CreatureStack*                            mCreatureStack;                                   		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< struct FH7PathfinerGridColumns >           mCellDataArray;                                   		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mLastSetupDone;                                   		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3292 ];

		return pClassPointer;
	};

	void ForceUpdate ( );
	void DoSetupIfNeeded ( );
	int GetReachableCells ( int movementPoints, TArray< class UH7CombatMapCell* >* reachableCells );
	void RenderDebugPathfinderInfo ( class UCanvas* myCanvas );
	void Reorder ( class UH7CombatMapCell* targetCell, TArray< class UH7CombatMapCell* >* queue );
	bool CanMoveToCell ( class UH7CombatMapCell* targetCell );
	float GetPathLength ( TArray< class UH7CombatMapCell* > Path );
	float GetDistance ( class UH7CombatMapCell* originCell, class UH7CombatMapCell* destCell );
	void UpdateCells ( );
	void InitCells ( TArray< class UH7CombatMapCell* >* queue );
	bool GetShortestPath ( TArray< class UH7CombatMapCell* > targetCells, TArray< class UH7CombatMapCell* >* Path );
	bool GetPathByCell ( class UH7CombatMapCell* targetCell, TArray< class UH7CombatMapCell* >* Path );
	bool GetPath ( struct FIntPoint targetPos, TArray< class UH7CombatMapCell* >* Path );
	void Setup ( );
	void SetCellPrevious ( class UH7CombatMapCell* cell, class UH7CombatMapCell* newPrevious );
	class UH7CombatMapCell* GetCellPrevious ( class UH7CombatMapCell* cell );
	void SetCellDistance ( class UH7CombatMapCell* cell, float newDistance );
	float GetCellDistance ( class UH7CombatMapCell* cell );
	void InitPathfinderForStack ( class AH7CreatureStack* creatureStack );
};



// Class MMH7Game.H7Command ( Property size: 19 iter: 74) 
// Class name index: 8080 
// 0x00E8 (0x0148 - 0x0060)
class UH7Command : public UObject
{
public:
	unsigned char                                      mCommandType;                                     		// 0x0060 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCommandTag;                                      		// 0x0061 (0x0001) [0x0000000000000000]              
	unsigned char                                      mAbilityDirection;                                		// 0x0062 (0x0001) [0x0000000000000000]              
	class UH7ICaster*                                  mSource;                                          		// 0x0064 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x006C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UH7BaseCell* >                       mPath;                                            		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7BaseAbility*                              mAbility;                                         		// 0x0084 (0x0008) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mAbilityTarget;                                   		// 0x008C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0094 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned long                                      mDoMPSynchronization : 1;                         		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mDoOOSCheck : 1;                                  		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mReplaceFakeAttacker : 1;                         		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mInsertHead : 1;                                  		// 0x009C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mWasInterrupted : 1;                              		// 0x009C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mRunning : 1;                                     		// 0x009C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mInterruptOnNextUpdate : 1;                       		// 0x009C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mRaisedEvents : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000080] 
	int                                                mNumParam;                                        		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UH7CombatMapCell*                            mTrueHitCell;                                     		// 0x00A4 (0x0008) [0x0000000000000000]              
	struct FH7FXStruct                                 mFX;                                              		// 0x00AC (0x0094) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Faction*                                  mFaction;                                         		// 0x0140 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3294 ];

		return pClassPointer;
	};

	void DebugLogSelf ( );
	bool CmdInit_Upgrade ( );
	bool CmdInit_SkipTurn ( );
	bool CmdInit_Garrison ( );
	bool CmdInit_Meet ( );
	bool CmdInit_Recruit ( );
	bool CmdInit_Visit ( );
	bool CmdUpd_Ability ( );
	void OnStartAbility ( );
	void PlaySourceUnitAnimation ( class UH7BaseAbility* Ability );
	bool CmdInit_Ability ( );
	void OnRangeAttackShoot ( );
	void OnRangeAttackFinished ( );
	void StartRangedAttack ( );
	void OnRangeAttackFaceTargetDone ( );
	void OnAttackFinished ( );
	void OnAttackHit ( );
	void StartRetaliationAttack ( );
	void StartMeleeAttack ( );
	void OnAttackFaceTargetDone ( );
	bool CmdUpd_Move ( );
	void CmdInit_Move ( );
	bool CommandUpdate ( );
	void CommandFinish ( );
	void CommandStop ( );
	bool ShouldMakeTurn ( );
	void CommandPlay ( );
	void InitCommand ( class UH7ICaster* Source, unsigned char CommandType, unsigned char CommandTag, class UH7BaseAbility* Ability, class UH7IEffectTargetable* Target, TArray< class UH7BaseCell* > Path, unsigned long doMPSynchronizaton, unsigned char Direction, unsigned long ReplaceFakeAttacker, unsigned long InsertHead, int numParam, class UH7CombatMapCell* TrueHitCell, unsigned long doOOSCheck );
	class UH7Command* CreateCommand ( class UH7ICaster* caster, unsigned char CommandType, unsigned char CommandTag, class UH7BaseAbility* Ability, class UH7IEffectTargetable* Target, TArray< class UH7BaseCell* > Path, unsigned long doMPSynchronization, unsigned char Direction, unsigned long ReplaceFakeAttacker, unsigned long InsertHead, int numParam, class UH7CombatMapCell* TrueHitCell, unsigned long doOOSCheck );
	class UH7CombatMapCell* GetTrueHitCell ( );
	void SetHasRaisedEvents ( unsigned long hasRaised );
	bool HasRaisedEvents ( );
	void SetInterruptOnNextUpdate ( unsigned long Stop );
	bool ShouldInterruptOnNextUpdate ( );
	bool IsRunning ( );
	unsigned char GetAbilityDirection ( );
	class UH7IEffectTargetable* GetAbilityTarget ( );
	void SetAbilityTarget ( class UH7IEffectTargetable* Target );
	class UH7BaseAbility* GetAbility ( );
	void SetAbility ( class UH7BaseAbility* Ability );
	void SetInterrupted ( unsigned long val );
	bool WasInterrupted ( );
	void SetFX ( struct FH7FXStruct fx );
	struct FH7FXStruct GetFX ( );
	bool InsertHead ( );
	bool ReplaceFakeAttacker ( );
	bool GetDoOOSCheck ( );
	bool IsMPSynchronized ( );
	TArray< class UH7BaseCell* > GetPath ( );
	class UH7ICaster* GetCommandSource ( );
	void SetCommandSource ( class UH7ICaster* Unit );
	void SetCommandTag ( unsigned char Tag );
	unsigned char GetCommandTag ( );
	unsigned char GetCommand ( );
	int GetNumParam ( );
};



// Class MMH7Game.H7CommandQueue ( Property size: 8 iter: 31) 
// Class name index: 8082 
// 0x0070 (0x00D0 - 0x0060)
class UH7CommandQueue : public UObject
{
public:
	TArray< class UH7Command* >                        mCommandQueue;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Command*                                  mCurrentCommand[ 0x9 ];                           		// 0x0070 (0x0048) [0x0000000000000000]              
	unsigned char                                      mLastCommandExecuted;                             		// 0x00B8 (0x0001) [0x0000000000000000]              
	unsigned long                                      mWaitingForAnimEnd : 1;                           		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mReplaceFakeAttacker : 1;                         		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 
	class UH7CombatResult*                             mLastCommandResult;                               		// 0x00C0 (0x0008) [0x0000000000000000]              
	float                                              mDelayTimer;                                      		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              mDelayTime;                                       		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3296 ];

		return pClassPointer;
	};

	void Clear ( );
	bool IsEmpty ( );
	void InterruptCaster ( class UH7ICaster* caster );
	bool IsReadyToEndTurn ( );
	void StartUnitCommand ( int PlayerIndex );
	TArray< class UH7Command* > GetCmdsForCaster ( class UH7ICaster* caster );
	void RemoveCmdsForTarget ( class UH7IEffectTargetable* Target );
	void RemoveCmdsForCaster ( class UH7ICaster* caster );
	void Remove ( int Index );
	bool UpdateCommandByPlayerIndex ( int PlayerIndex );
	bool UpdateCommand ( );
	void StartNextCommand ( int PlayerIndex );
	class UH7Command* PopFrontQueue ( int PlayerIndex );
	class UH7Command* GetFrontQueue ( int PlayerIndex );
	bool Dequeue ( int PlayerIndex );
	class UH7Command* GetCurrentCommand ( );
	void Enqueue ( class UH7Command* Cmd );
	bool CanEnqueue ( );
	bool IsCommandRunningForCaster ( class UH7ICaster* caster );
	bool IsCommandRunningForAnyPlayer ( );
	bool IsCommandRunning ( );
	int GetQueueLength ( );
	void SetLastCommandExecuted ( unsigned char LastCommandExecuted );
};



// Class MMH7Game.H7ControllerManager ( Property size: 14 iter: 44) 
// Class name index: 8084 
// 0x0070 (0x02B0 - 0x0240)
class AH7ControllerManager : public AActor
{
public:
	class AH7BaseGameController*                       mBaseGameController;                              		// 0x0240 (0x0008) [0x0000000000000000]              
	class AH7CouncilManager*                           mCouncilManager;                                  		// 0x0248 (0x0008) [0x0000000000000000]              
	class AH7AdventureController*                      mAdventureController;                             		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7CameraActionController*                   mCameraActionController;                          		// 0x0258 (0x0008) [0x0000000000000000]              
	class AH7AdventureGridManager*                     mAdventureGridManager;                            		// 0x0260 (0x0008) [0x0000000000000000]              
	class AH7ScriptingController*                      mScriptingController;                             		// 0x0268 (0x0008) [0x0000000000000000]              
	class AH7CombatController*                         mCombatController;                                		// 0x0270 (0x0008) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mCombatGridController;                            		// 0x0278 (0x0008) [0x0000000000000000]              
	class AH7MainMenuController*                       mMainMenuController;                              		// 0x0280 (0x0008) [0x0000000000000000]              
	class AH7CombatMapStatusBarController*             mCombatBarController;                             		// 0x0288 (0x0008) [0x0000000000000000]              
	class AH7CreatureStackPlateController*             mCreaturePlateController;                         		// 0x0290 (0x0008) [0x0000000000000000]              
	class AH7FCTController*                            mFCTController;                                   		// 0x0298 (0x0008) [0x0000000000000000]              
	class UH7GUISoundPlayer*                           mGUISoundPlayer;                                  		// 0x02A0 (0x0008) [0x0000000000000000]              
	class UH7SoundController*                          mSoundController;                                 		// 0x02A8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3298 ];

		return pClassPointer;
	};

	void InitializeDelayed ( );
	void PostBeginPlay ( );
	class AH7CouncilManager* GetCouncilManager ( );
	void SetCouncilManager ( class AH7CouncilManager* newController );
	class AH7ScriptingController* GetScriptingController ( );
	void SetScriptingController ( class AH7ScriptingController* newController );
	class AH7AdventureGridManager* GetAdventureGridManager ( );
	void SetAdventureGridManager ( class AH7AdventureGridManager* newController );
	class UH7SoundController* GetSoundController ( );
	void SetSoundController ( class UH7SoundController* newController );
	class UH7GUISoundPlayer* GetGUISoundPlayer ( );
	void SetGUISoundPlayer ( class UH7GUISoundPlayer* newController );
	class AH7FCTController* GetFCTController ( );
	void SetFCTController ( class AH7FCTController* newController );
	class AH7CreatureStackPlateController* GetCreaturePlateController ( );
	void SetCreaturePlateController ( class AH7CreatureStackPlateController* newController );
	class AH7CombatMapStatusBarController* GetCombatBarController ( );
	void SetCombatBarController ( class AH7CombatMapStatusBarController* newController );
	class AH7MainMenuController* GetMainMenuController ( );
	void SetMainMenuController ( class AH7MainMenuController* newController );
	class AH7CombatMapGridController* GetCombatGridController ( );
	void SetCombatGridController ( class AH7CombatMapGridController* newController );
	class AH7CombatController* GetCombatController ( );
	void SetCombatController ( class AH7CombatController* newController );
	class AH7CameraActionController* GetCameraActionController ( );
	void SetCameraActionController ( class AH7CameraActionController* newController );
	class AH7AdventureController* GetAdventureController ( );
	void SetAdventureController ( class AH7AdventureController* newController );
	class AH7BaseGameController* GetBaseGameController ( );
	void SetBaseGameController ( class AH7BaseGameController* newController );
};



// Class MMH7Game.H7CreatureStackBaseMover ( Property size: 21 iter: 46) 
// Class name index: 8086 
// 0x00A8 (0x02E8 - 0x0240)
class AH7CreatureStackBaseMover : public AActor
{
public:
	int                                                MOVEMENT_DOTS_PER_CELL;                           		// 0x0240 (0x0004) [0x0000000000000000]              
	class AH7Unit*                                     mMovingStack;                                     		// 0x0244 (0x0008) [0x0000000000000000]              
	class AActor*                                      mMovingRepresentation;                            		// 0x024C (0x0008) [0x0000000000000000]              
	class AH7PlayerController*                         mPlayerController;                                		// 0x0254 (0x0008) [0x0000000000000000]              
	TArray< struct FH7PathPosition >                   mPath;                                            		// 0x025C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMoveTime;                                        		// 0x026C (0x0004) [0x0000000000000000]              
	struct FRotator                                    mStartRot;                                        		// 0x0270 (0x000C) [0x0000000000000000]              
	struct FVector                                     mStartPos;                                        		// 0x027C (0x000C) [0x0000000000000000]              
	class UH7BaseCell*                                 mDestinationCell;                                 		// 0x0288 (0x0008) [0x0000000000000000]              
	class UH7BaseCell*                                 mCurrentCell;                                     		// 0x0290 (0x0008) [0x0000000000000000]              
	int                                                mCurveMaxStepsAdv;                                		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                mCurveMaxStepsCombat;                             		// 0x029C (0x0004) [0x0000000000000000]              
	struct FVector                                     mLerpTargetLocation;                              		// 0x02A0 (0x000C) [0x0000000000000000]              
	float                                              mLerpTimer;                                       		// 0x02AC (0x0004) [0x0000000000000000]              
	unsigned long                                      mLerpToLocation : 1;                              		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mLerpToRotation : 1;                              		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FRotator                                    mLerpTargetRotation;                              		// 0x02B4 (0x000C) [0x0000000000000000]              
	float                                              mLerpTimerRotation;                               		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              mSecPerField;                                     		// 0x02C4 (0x0004) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mTarget;                                          		// 0x02C8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x02D0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnAttackStackFinishedFunc__Delegate;            		// 0x02D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x02DC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3300 ];

		return pClassPointer;
	};

	void eventLerpToRotation ( float DeltaTime );
	void eventLerpToLocation ( float DeltaTime );
	void SetLerpToRotation ( struct FRotator TargetRotation );
	void SetLerpToLocation ( struct FVector TargetLocation );
	void OpenGateOnTargetPos ( );
	struct FVector GetCellLocation ( class UH7BaseCell* cell );
	class UH7BaseCell* GetCellOfTarget ( class UH7IEffectTargetable* Target );
	struct FRotator GetOptimalTargetRotation ( struct FVector From, struct FVector to );
	struct FRotator GetTargetRotation ( int pathIndex );
	int DotIndexToCellIndex ( int dotIndex, int totalDots, int totalCells );
	TArray< struct FH7PathPosition > GetSmoothCombatPath ( TArray< class UH7BaseCell* > Path );
	TArray< struct FH7PathPosition > GetSmoothAdventurePath ( TArray< class UH7BaseCell* > Path );
	TArray< struct FH7PathPosition > GetSmoothPath ( TArray< class UH7BaseCell* > Path );
	void AddEnemyPositionToPath ( );
	void ClearPath ( );
	bool IsMoving ( );
	void UpdateRotation ( );
	void eventUpdateMovement ( float DeltaTime );
	void AttackStack ( class UH7IEffectTargetable* Target, struct FScriptDelegate onAttackStackFinished );
	void OnAttackStackFinishedFunc ( );
	void RotateStack ( struct FRotator targetRot );
	void MoveStack ( TArray< class UH7BaseCell* > Path, class UH7IEffectTargetable* targetUnit );
	float GetSecondsPerField ( );
	void Initialize ( class AH7Unit* Stack );
};



// Class MMH7Game.H7CreatureStackMovementControl ( Property size: 8 iter: 27) 
// Class name index: 8088 
// 0x0048 (0x0288 - 0x0240)
class AH7CreatureStackMovementControl : public AActor
{
public:
	class AH7CreatureStackMover*                       mWalkMover;                                       		// 0x0240 (0x0008) [0x0000000000000000]              
	class AH7CreatureStackFlyer*                       mFlyMover;                                        		// 0x0248 (0x0008) [0x0000000000000000]              
	class AH7CreatureStackTeleporter*                  mTeleportMover;                                   		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7CreatureStackGhostWalker*                 mGhostWalkMover;                                  		// 0x0258 (0x0008) [0x0000000000000000]              
	class AH7CreatureStackJumper*                      mJumpMover;                                       		// 0x0260 (0x0008) [0x0000000000000000]              
	class AH7CreatureStackBaseMover*                   mCurrentMover;                                    		// 0x0268 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mOwner;                                           		// 0x0270 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnAttackStackFinishedFunc__Delegate;            		// 0x0278 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x027C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3302 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void CalculateCurrentMover ( TArray< class UH7BaseCell* > Path );
	bool IsMoving ( );
	void AttackStack ( class UH7IEffectTargetable* Target, struct FScriptDelegate onAttackStackFinished );
	void OnAttackStackFinishedFunc ( );
	void LerpStackToRotation ( struct FRotator TargetRotation );
	void LerpStackToLocation ( struct FVector TargetLocation );
	void RotateStack ( struct FRotator targetRot );
	void MoveStack ( TArray< class UH7BaseCell* > Path, class UH7IEffectTargetable* Target );
	void Initialize ( class AH7Unit* Unit );
	class AH7CreatureStackGhostWalker* GetGhostMover ( );
	class AH7CreatureStackJumper* GetJumpMover ( );
	class AH7CreatureStackFlyer* GetFlyMover ( );
	class AH7CreatureStackBaseMover* GetCurrentMover ( );
};



// Class MMH7Game.H7CreatureVisuals ( Property size: 24 iter: 42) 
// Class name index: 8090 
// 0x0088 (0x00E8 - 0x0060)
class UH7CreatureVisuals : public UObject
{
public:
	class USkeletalMeshComponent*                      mSkeletalMesh;                                    		// 0x0060 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x0068 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              mArmyScale;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mParticleTransSortPrio;                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7CreatureEvent >                  mCreatureEvents;                                  		// 0x0078 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mFlyStartElevating;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFlyEndLanding;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFlyHeightOffset;                                 		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mGhostWalkCreatureOpacity;                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mGhostWalkFadeDuration;                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mMovementSpeed;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFlyingSpeed;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseFractureRemains : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mHideCorpseAfterDeath : 1;                        		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mUseDeathParticle : 1;                            		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mDeathRagdoll : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class UStaticMeshComponent*                        mCreatureRemains;                                 		// 0x00A8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFracturedStaticMeshComponent*               mFracturedCreatureRemains;                        		// 0x00B0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FH7DeathMaterialEffect >            mDeathMaterialEffects;                            		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mHideCorpseAfterDeathTime;                        		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mDeathParticle;                                   		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDeathParticleTime;                               		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mDeathParticleOffset;                             		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDeathRagdollTime;                                		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3304 ];

		return pClassPointer;
	};

	bool IsDeathRagDoll ( );
	struct FVector GetDeathParticleOffeset ( );
	class UParticleSystem* GetDeathParticle ( );
	float GetHideCorpseAfterDeathTime ( );
	bool GetHideCorpseAfterDeath ( );
	TArray< struct FH7DeathMaterialEffect > GetDeathMaterialEffects ( );
	class UStaticMeshComponent* GetCreatureRemains ( );
	float GetDeathRagDollTime ( );
	float GetDeathParticleTime ( );
	float GetGhostWalkFadeDuration ( );
	float GetFlyingSpeed ( );
	float GetMovementSpeed ( );
	float GetGhostWalkOpacity ( );
	TArray< struct FH7CreatureEvent > GetCreatureEvents ( );
	float GetFlyEndLanding ( );
	float GetFlyStartElevating ( );
	class UDynamicLightEnvironmentComponent* GetDynamicLightEnv ( );
	class USkeletalMeshComponent* GetSkeletalMesh ( );
};



// Class MMH7Game.H7DynGridObjInterface ( Property size: 0 iter: 0) 
// Class name index: 8092 
// 0x0000 (0x0060 - 0x0060)
class UH7DynGridObjInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3306 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7EditorAdventureGridManager ( Property size: 1 iter: 3) 
// Class name index: 8094 
// 0x0010 (0x0250 - 0x0240)
class AH7EditorAdventureGridManager : public AActor
{
public:
	TArray< class AH7AdventureMapGridController* >     mGridList;                                        		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3308 ];

		return pClassPointer;
	};

	void PerformFullScan ( );
	TArray< class AH7AdventureMapGridController* > GetGridList ( );
};



// Class MMH7Game.H7AdventureGridManager ( Property size: 16 iter: 82) 
// Class name index: 8096 
// 0x0060 (0x02B0 - 0x0250)
class AH7AdventureGridManager : public AH7EditorAdventureGridManager
{
public:
	unsigned long                                      cUseFogOfWar : 1;                                 		// 0x0250 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      cWinAllCombatCheat : 1;                           		// 0x0250 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      cTogglePlaneWithoutExploration : 1;               		// 0x0250 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      mIsTeleportPhase : 1;                             		// 0x0250 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mIsInitialized : 1;                               		// 0x0250 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                cPickupCost;                                      		// 0x0254 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UH7AdventureMapPathfinder*                   mPathfinder;                                      		// 0x0258 (0x0008) [0x0000000000000000]              
	class AH7AdventureMapPathPreviewer*                mPathPreviewer;                                   		// 0x0260 (0x0008) [0x0000000000000000]              
	class AActor*                                      mHitActor;                                        		// 0x0268 (0x0008) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mHoveredCell;                                     		// 0x0270 (0x0008) [0x0000000000000000]              
	unsigned char                                      mLastArmyAction;                                  		// 0x0278 (0x0001) [0x0000000000000000]              
	class AH7TownAsset*                                mLastHitAsset;                                    		// 0x027C (0x0008) [0x0000000000000000]              
	TArray< struct FH7AreaOfControlCells >             mAreaOfControls;                                  		// 0x0284 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureController*                      mAdventureController;                             		// 0x0294 (0x0008) [0x0000000000000000]              
	int                                                mCurrentGridIndex;                                		// 0x029C (0x0004) [0x0000000000000000]              
	TArray< class UParticleSystemComponent* >          mFogRevealPreviewParticles;                       		// 0x02A0 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3310 ];

		return pClassPointer;
	};

	void ClearFogRevealPreview ( );
	void UpdateFogRevealPreview ( );
	class AH7AdventureMapGridController* GetClosestGridToPosition ( struct FVector targetPos );
	void SetNextCurrentGrid ( );
	TArray< class AH7VisitableSite* > GetVisitableSites ( );
	void SetCurrentGridByPos ( struct FVector targetPos );
	void UpdateVisitableSiteRef ( class AH7VisitableSite* oldSite, class AH7VisitableSite* newSite );
	void RemoveVisitableSite ( class AH7VisitableSite* Site );
	void HandleTownHighlight ( );
	class AActor* GetMouseHitActorAndLocation ( struct FVector* HitLocation );
	void ShowFCTNoPath ( struct FVector TargetLocation, int pathLength, class AH7Player* Initiator, class UH7IEffectTargetable* Target, unsigned long Pickup );
	bool DoUpgradeVisit ( class AH7VisitableSite* targetSite, unsigned long forceExecution, unsigned long ignoreFoW );
	bool DoGarrisonVisit ( struct FVector targetPos, unsigned long forceExecution, unsigned long ignoreFoW );
	bool DoRecruitVisit ( struct FVector targetPos, unsigned long forceExecution );
	bool DoExplore ( class UH7AdventureMapCell* targetCell, unsigned long forceExecution, unsigned long ignoreFoW, unsigned long noCut );
	bool DoVisit ( class AH7VisitableSite* targetSite, unsigned long forceExecution, unsigned long ignoreFoW );
	bool DoMeetArmy ( struct FVector targetPos, unsigned long forceExecution );
	bool DoVisitByVector ( struct FVector targetPos, unsigned long forceExecution );
	void DoMoveByVector ( struct FVector targetPos, unsigned long forceExecution );
	bool DoMovePatrol ( class UH7AdventureMapCell* Target, unsigned long forceExecution );
	bool DoMoveToCell ( class UH7AdventureMapCell* Target, unsigned long forceExecution, unsigned long ignoreFoW );
	bool DoAttackArmy ( struct FVector targetPos, unsigned long forceExecution, unsigned long ignoreFoW );
	bool DoTradeWithArmy ( struct FVector targetPos, unsigned long forceExecution, unsigned long ignoreFoW );
	bool CheckPickup ( class UH7AdventureMapCell* Start, class AH7AdventureArmy* armyToAttack, class AH7AdventureHero* currentHero, TArray< class UH7AdventureMapCell* >* Path );
	void DoSelectArmy ( class AH7AdventureArmy* armyToSelect );
	void DoCurrentArmyActionByCell ( class UH7AdventureMapCell* cell );
	unsigned char GetArmyActionByVisitable ( class AH7VisitableSite* visitableSite, float* chanceOfAction );
	void DeleteLastHitActor ( );
	unsigned char GetArmyActionByHero ( class AH7AdventureHero* hitHero, float* chanceOfAction );
	bool IsUnderFog ( class UH7AdventureMapCell* cell );
	void HandleAbortManipulation ( );
	void DoLeaveShelter ( );
	void DoCurrentArmyActionByCursor ( unsigned long wasDoubleClick );
	unsigned char GetCurrentArmyAction ( class AH7AdventureArmy** mouserOverArmy, struct FVector* hitPosition, float* chanceOfAction, class AH7AdventureObject** HitObject, class AActor** HitActor );
	void eventUpdateHoverEffects ( );
	void SetHoverDotDelayed ( );
	TArray< class UH7AdventureMapCell* > GetCellsByWorldExtent ( struct FVector MinPos, struct FVector MaxPos );
	class UH7AdventureMapCell* GetCellByWorldLocation ( struct FVector pos );
	class UH7AdventureMapCell* GetCell ( int X, int Y, int GridIndex );
	void InitFOWControllers ( );
	void GetAoCPointsByIntPoint ( struct FIntPoint Point, int Index, TArray< struct FIntPoint >* Points );
	TArray< class UH7AdventureMapCell* > GetAoCCellsByIntPoint ( struct FIntPoint Point );
	int GetAoCIndexOfCell ( class UH7AdventureMapCell* cell );
	void MPSetPlayerReady ( );
	class AH7AdventureGridManager* GetInstance ( );
	void eventInit ( );
	void PostBeginPlay ( );
	void SetTogglePlaneWithoutExploration ( unsigned long val );
	void SetWinAllCheat ( unsigned long val );
	void ToggleFogOfWarUsed ( );
	void SetTeleportPhase ( unsigned long isPhase );
	void SetAdventureController ( class AH7AdventureController* advCtrl );
	bool IsInitialized ( );
	int GetCurrentGridIndex ( );
	TArray< class AH7AdventureMapGridController* > GetAllGrids ( );
	class AH7AdventureMapGridController* GetGridByIndex ( int Index );
	class AH7AdventureMapGridController* GetCurrentGrid ( );
	TArray< struct FH7AreaOfControlCells > GetAoCCells ( );
	class AActor* GetLastHitActor ( );
	bool IsTeleportPhase ( );
	class AH7AdventureMapPathPreviewer* GetPathPreviewer ( );
	class UH7AdventureMapPathfinder* GetPathfinder ( );
	int GetPickupCost ( );
	bool IsTogglePlaneWithoutExplorationCheatUsed ( );
	bool IsWinAllCheatUsed ( );
	bool IsFogOfWarUsed ( );
};



// Class MMH7Game.H7EditorContent ( Property size: 7 iter: 7) 
// Class name index: 8098 
// 0x0068 (0x00C8 - 0x0060)
class UH7EditorContent : public UObject
{
public:
	class AH7PlayerStart*                              mPlayerStart;                                     		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AH7EditorHero* >                     mCampaignHeroes;                                  		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7GroupedMeshes >                  mAdventureFoliage;                                		// 0x0078 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7GroupedMeshes >                  mCombatFoliage;                                   		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           mEditorObjects;                                   		// 0x0098 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           mAmbianceObjects;                                 		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7CombatObstacleObject* >           mCombatMapObstacles;                              		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3312 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7EditorMapGrid ( Property size: 7 iter: 12) 
// Class name index: 8100 
// 0x002C (0x026C - 0x0240)
class AH7EditorMapGrid : public AActor
{
public:
	int                                                mGridSizeX;                                       		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mGridSizeY;                                       		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Mid;                                              		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned long                                      mSynchLandscapeAndGridPosition : 1;               		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class ALandscape*                                  mLandscape;                                       		// 0x0250 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     mInitialLandscapePosition;                        		// 0x0258 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        mEditorPreviewMesh;                               		// 0x0264 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3314 ];

		return pClassPointer;
	};

	class AActor* GetMouseHitActorAndLocation ( struct FVector* HitLocation );
	struct FVector GetCenter ( );
	int GetGridSizeY ( );
	int GetGridSizeX ( );
};



// Class MMH7Game.H7EditorAdventureGrid ( Property size: 34 iter: 42) 
// Class name index: 8102 
// 0x00B8 (0x0324 - 0x026C)
class AH7EditorAdventureGrid : public AH7EditorMapGrid
{
public:
	TArray< struct FMapSizeDefinition >                MapSizeDefinitions;                               		// 0x026C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      mRecaptureMinimapOnSave : 1;                      		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mShowGameGrid : 1;                                		// 0x027C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mDebugGridActive : 1;                             		// 0x027C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mShowAocInEditor : 1;                             		// 0x027C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mShowAocInGame : 1;                               		// 0x027C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mAoCPreviewActive : 1;                            		// 0x027C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      mShowCombatListInEditor : 1;                      		// 0x027C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mShowCombatListInGame : 1;                        		// 0x027C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      mCombatListPreviewActive : 1;                     		// 0x027C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      mShowBlockingInEditor : 1;                        		// 0x027C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      mShowBlockingInGame : 1;                          		// 0x027C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      mBlockingPreviewActive : 1;                       		// 0x027C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      mShowFoWOverrideInEditor : 1;                     		// 0x027C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      mShowFoWOverrideInGame : 1;                       		// 0x027C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      mFoWOverridePreviewActive : 1;                    		// 0x027C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	class UTexture2D*                                  mMinimapCapture;                                  		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                cMinimumAdventureGridWidth;                       		// 0x0288 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	int                                                cMinimumAdventureGridHeight;                      		// 0x028C (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	int                                                cMaximumAdventureGridWidth;                       		// 0x0290 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	int                                                cMaximumAdventureGridHeight;                      		// 0x0294 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	int                                                cMaximumTileGradient;                             		// 0x0298 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	class UMaterialInstanceConstant*                   mDebugGridMaterialInstance;                       		// 0x029C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   mDebugAoCMaterialInstance;                        		// 0x02A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   mDebugCombatListMaterialInstance;                 		// 0x02AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   mDebugBlockingMaterialInstance;                   		// 0x02B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   mDebugFoWOverrideMaterialInstance;                		// 0x02BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UH7EditorCameraHeightTool*                   mCameraHeightTool;                                		// 0x02C4 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UH7AdventureMapCell* >               mAdventureCells;                                  		// 0x02CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mVisitableActorList;                              		// 0x02DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AreaOfControlSiteLord* >          mAreaOfControlLords;                              		// 0x02EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AreaOfControlSiteVassal* >        mAreaOfControlVassals;                            		// 0x02FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mUsedAreaOfControls;                              		// 0x030C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    mScanGridData;                                    		// 0x031C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3316 ];

		return pClassPointer;
	};

	unsigned char CalculateMapSize ( );
	void GetCameraHeightAt ( float worldPosX, float worldPosY, float* outHeight );
	bool IsCameraPosInsideGrid ( float worldPosX, float worldPosY );
	TArray< int > GetAoCArray ( );
	float GetHeight ( struct FVector pos );
	class UH7AdventureMapCell* GetCell ( int X, int Y );
	void UpdateTerrainData ( );
	void UpdateDebugGrid ( );
};



// Class MMH7Game.H7AdventureMapGridController ( Property size: 12 iter: 64) 
// Class name index: 8104 
// 0x006C (0x0390 - 0x0324)
class AH7AdventureMapGridController : public AH7EditorAdventureGrid
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x0324 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x032C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mIndex;                                           		// 0x0334 (0x0004) [0x0000000000000000]              
	class AH7FOWController*                            mFogOfWarController;                              		// 0x0338 (0x0008) [0x0000000000000000]              
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x0340 (0x0008) [0x0000000000000000]              
	class UH7BuffManager*                              mBuffManager;                                     		// 0x0348 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x0350 (0x0008) [0x0000000000000000]              
	class UH7EffectManager*                            mEffectManager;                                   		// 0x0358 (0x0008) [0x0000000000000000]              
	class UH7AuraManager*                              mAuraManager;                                     		// 0x0360 (0x0008) [0x0000000000000000]              
	TArray< struct FIntPoint >                         mUnFoggedTiles;                                   		// 0x0368 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2DDynamic*                           mDynamicAOCTexture;                               		// 0x0378 (0x0008) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mGridWayPoints;                                   		// 0x0380 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3318 ];

		return pClassPointer;
	};

	void GenerateAOCTexture ( );
	void RemoveVisitableSite ( class AH7VisitableSite* Site );
	void UpdateVisitableSiteRef ( class AH7VisitableSite* oldSite, class AH7VisitableSite* newSite );
	void eventTick ( float DeltaTime );
	void AddVisitableSiteToList ( class AH7VisitableSite* Site );
	void AddCellToItsAoC ( class UH7AdventureMapCell* cell );
	void InitCells ( );
	void eventDestroyed ( );
	void InitGrid ( int Index );
	void PostBeginPlay ( );
	TArray< int > GetCellsAsAoCMatrix ( );
	TArray< class UH7AdventureMapCell* > GetCellsFromShape ( class UH7AdventureMapCell* targetCell, TArray< struct FIntPoint > Shape, unsigned char originSize );
	void GetCellsFromDimensions ( class UH7AdventureMapCell* targetCell, struct FIntPoint dim, unsigned char originSize, unsigned long IsAreaFilled, TArray< class UH7AdventureMapCell* >* Cells );
	TArray< class UH7AdventureMapCell* > GetCellsByWorldExtent ( struct FVector MinPos, struct FVector MaxPos );
	class UH7AdventureMapCell* GetCellByWorldLocation ( struct FVector pos );
	class UH7AdventureMapCell* GetCell ( int X, int Y );
	int GetIndex ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	int GetHitPoints ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	class AH7CombatArmy* GetCombatArmy ( );
	class AH7Player* GetPlayer ( );
	class UH7BaseAbility* GetPreparedAbility ( );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	bool IsDefaultAttackActive ( );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetLocation ( );
	class UTexture2DDynamic* GetAOCTexture ( );
	class UH7AuraManager* GetAuraManager ( );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	unsigned char GetEntityType ( );
	void DataChanged ( struct FString cause );
	struct FString GetName ( );
	int GetID ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	TArray< class AH7VisitableSite* > GetVisitableSites ( );
	void SetFogOfWarController ( class AH7FOWController* fogController );
	class AH7FOWController* GetFOWController ( );
	class UH7ICaster* GetOriginal ( );
	TArray< struct FIntPoint > GetUnFoggedTiles ( );
};



// Class MMH7Game.H7EditorCombatGrid ( Property size: 26 iter: 36) 
// Class name index: 8106 
// 0x00F8 (0x0364 - 0x026C)
class AH7EditorCombatGrid : public AH7EditorMapGrid
{
public:
	int                                                mAdjustedGridSizeX;                               		// 0x026C (0x0004) [0x0000000000000000]              
	class UH7CombatMapGridDecalComponent*              mGridDecal;                                       		// 0x0270 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      mCanFlee : 1;                                     		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mCanSurrender : 1;                                		// 0x0278 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mUseCustomDecalColor : 1;                         		// 0x0278 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mIsShip : 1;                                      		// 0x0278 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FIntPoint                                   mAttackerHeroOffset;                              		// 0x027C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAttackerWarUnitOffset[ 0x3 ];                    		// 0x0284 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FIntPoint                                   mDefenderHeroOffset;                              		// 0x0290 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDefenderWarUnitOffset[ 0x3 ];                    		// 0x0298 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AH7CombatObstacleObject* >           mRandomObstacleList;                              		// 0x02A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7Obstacle >                       mObstacles;                                       		// 0x02B4 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class AH7SiegeMapDecoration* >             mDecorations;                                     		// 0x02C4 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                cMinimumCombatGridWidth;                          		// 0x02D4 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	int                                                cMinimumCombatGridHeight;                         		// 0x02D8 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	int                                                cMaximumCombatGridWidth;                          		// 0x02DC (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	int                                                cMaximumCombatGridHeight;                         		// 0x02E0 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	struct FLinearColor                                mCustomDecalColor;                                		// 0x02E4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSpecialMapMusic;                                 		// 0x02F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSpecialCombatMapAmbient;                         		// 0x02FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7CombatMapCell* >                  mCombatCells;                                     		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mObstaclePlacementCells;                          		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UStaticMeshComponent*                        mAttackerPreviewMesh;                             		// 0x0324 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        mDefenderPreviewMesh;                             		// 0x032C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        mAttackerWarUnitPreviewMesh[ 0x3 ];               		// 0x0334 (0x0018) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        mDefenderWarUnitPreviewMesh[ 0x3 ];               		// 0x034C (0x0018) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3320 ];

		return pClassPointer;
	};

	struct FVector GetDeploymentZoneCenter ( float val );
	struct FVector GetCenter ( );
	class UAkEvent* GetMapSpecialAmbient ( );
	class UAkEvent* GetMapSpecialMusic ( );
	struct FIntPoint GetDefenderHeroOffset ( );
	struct FIntPoint GetAttackerHeroOffset ( );
	int GetGridSizeY ( );
	int GetGridSizeX ( );
	class UH7CombatMapGridDecalComponent* GetDecal ( );
};



// Class MMH7Game.H7CombatMapGridController ( Property size: 36 iter: 178) 
// Class name index: 8108 
// 0x015C (0x04C0 - 0x0364)
class AH7CombatMapGridController : public AH7EditorCombatGrid
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x0364 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x036C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7CombatController*                         mCombatController;                                		// 0x0374 (0x0008) [0x0000000000000000]              
	class AH7CombatMapPathPreviewer*                   mPathPreviewer;                                   		// 0x037C (0x0008) [0x0000000000000000]              
	class AH7CreatureStack*                            mSelectedStack;                                   		// 0x0384 (0x0008) [0x0000000000000000]              
	class AH7WarUnit*                                  mSelectedWarUnit;                                 		// 0x038C (0x0008) [0x0000000000000000]              
	unsigned char                                      mSelectedCreatureSize;                            		// 0x0394 (0x0001) [0x0000000000000000]              
	class UH7CombatMapGrid*                            mGrid;                                            		// 0x0398 (0x0008) [0x0000000000000000]              
	class AH7FCTController*                            mFCT;                                             		// 0x03A0 (0x0008) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mMouseOverCells;                                  		// 0x03A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mReachableCells;                                  		// 0x03B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mReachableAltCells;                               		// 0x03C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mSelectedCells;                                   		// 0x03D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mAbilityHighlightCells;                           		// 0x03E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mNewAbilityHighlightCells;                        		// 0x03F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapCell*                            mCurrentMouseOverCell;                            		// 0x0408 (0x0008) [0x0000000000000000]              
	class UH7CombatMapCell*                            mCurrentMouseOverTrueCell;                        		// 0x0410 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mCurrentReachableAltCreature;                     		// 0x0418 (0x0008) [0x0000000000000000]              
	int                                                mTacticsPlaceableColumns;                         		// 0x0420 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsSiegeMap : 1;                                  		// 0x0424 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mCanForceUpdateGrid : 1;                          		// 0x0424 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mCouldAttackBefore : 1;                           		// 0x0424 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsDecalDirty : 1;                                		// 0x0424 (0x0004) [0x0000000000000000] [0x00000008] 
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x0428 (0x0008) [0x0000000000000000]              
	class UH7BuffManager*                              mBuffManager;                                     		// 0x0430 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x0438 (0x0008) [0x0000000000000000]              
	class UH7EffectManager*                            mEffectManager;                                   		// 0x0440 (0x0008) [0x0000000000000000]              
	class UH7AuraManager*                              mAuraManager;                                     		// 0x0448 (0x0008) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mCurrentHoverTarget;                              		// 0x0450 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0458 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UParticleSystemComponent* >          mParticleList;                                    		// 0x0460 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class AH7CreatureStack*                            mPreviousAttacker;                                		// 0x0470 (0x0008) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mCurrentAttackPosition;                           		// 0x0478 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            mTraceBufferActors;                               		// 0x0488 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           mTraceBufferLocations;                            		// 0x0498 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ADynamicSMActor_Spawnable*                   mConePreview;                                     		// 0x04A8 (0x0008) [0x0000000000000000]              
	TArray< class AH7CombatObstacleObject* >           mPlacedObstacles;                                 		// 0x04B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3322 ];

		return pClassPointer;
	};

	void SetArmyForeShadowedCells ( unsigned long ignoreUnits );
	void RefreshThreatMap ( );
	unsigned char DetermineFlankingType ( class UH7CombatMapCell* attackCell, class AH7CreatureStack* attackTarget );
	void BeginCombat ( );
	void BeginTactics ( unsigned long forAttacker, int numberColumns );
	class UH7IEffectTargetable* GetMouseOverTarget ( struct FVector* HitLocation );
	void UpdateNeighbours ( );
	void UpdateSiegeMapDecoration ( );
	void UpdateObstacles ( );
	void ResetTacticsGrid ( );
	bool CanPlaceRandomObstacle ( struct FIntPoint pos, int xSize, int ySize );
	void PlaceRandomObstacles ( );
	void MPSetPlayerReady ( );
	void CalculateIsSiegeMap ( );
	float GetDistanceTiles ( class AH7Unit* attacker, class AH7Unit* defender, unsigned long forecast, int Range );
	void CreateCombatControllerAndRNG ( );
	void CreateGrid ( );
	void UpdateCellSelectionTypes ( );
	void UnregisterEvents ( );
	void Init ( );
	void PostBeginPlay ( );
	void PlaceWarfareUnit ( struct FIntPoint gridPos, class AH7WarUnit* warUnit );
	void PlaceCreature ( struct FIntPoint gridPos, class AH7CreatureStack* Creature );
	void UpdateCreatureDeployment ( struct FIntPoint gridPos, class AH7CreatureStack* Creature );
	bool CanPlaceCreature ( struct FIntPoint gridPos, class AH7CreatureStack* creatureStack );
	void RaiseEventOnObstacles ( unsigned char Trigger, struct FH7EventContainerStruct container );
	void PlaceObstacle ( struct FIntPoint gridPos, class AH7CombatObstacleObject* theObstacle, struct FH7SiegeTownData siegeTownData );
	void InitCellsForObstaclePlacement ( );
	void DeleteTownDataRef ( );
	struct FH7SiegeTownData GetSiegeTownData ( );
	struct FVector GetCellLocation ( struct FIntPoint gridPos );
	struct FVector GetCenterPosForColCells ( int ColNum );
	void GetPostCellsForTsunami ( struct FIntPoint originPoint, int Rows, TArray< class UH7CombatMapCell* >* outCells );
	void GetPreCellsForTsunami ( struct FIntPoint originPoint, int Rows, TArray< class UH7CombatMapCell* >* outCells );
	void GetCellsInColumn ( class UH7CombatMapCell* cell, TArray< class UH7CombatMapCell* >* outCells );
	void GetCellsForTsunami ( struct FIntPoint originPoint, int Rows, TArray< class UH7CombatMapCell* >* outCells );
	void RemoveBlockedCellsFromLine ( TArray< class UH7CombatMapCell* >* Line );
	void GetCellsForSunburst ( struct FIntPoint originPoint, TArray< class UH7CombatMapCell* >* outCells, TArray< int >* indeces, TArray< struct FIntPoint >* targetPoints );
	void GetDoubleLineCellsIntersectingGrid ( class AH7CreatureStack* castingCreature, class UH7CombatMapCell* targetCell, TArray< class UH7CombatMapCell* >* outCells );
	void GetLineCellsIntersectingGrid ( struct FIntPoint lineOriginPoint, struct FIntPoint lineTargetPoint, TArray< class UH7CombatMapCell* >* outCells );
	int FindQuadrant ( class UH7CombatMapCell* casterPivot, class UH7CombatMapCell* targetPivot );
	void FindDoubleLinePositions ( struct FIntPoint rotationPos, int quadrant, unsigned long targetSizeIs2x2, struct FIntPoint* attackerPos1, struct FIntPoint* defenderPos1, struct FIntPoint* attackerPos2, struct FIntPoint* defenderPos2 );
	void RotateAround2x2 ( struct FIntPoint inPos, int quadrant, unsigned long reverse, unsigned long targetSizeIs2x2, struct FIntPoint* outPos );
	void GetCellsInCone ( class AH7CreatureStack* castingCreature, class UH7CombatMapCell* targetCell, class UH7BaseAbility* Ability, unsigned long PreviewCone, TArray< class UH7CombatMapCell* >* outCells );
	void GetAdjacentCellsInCone ( class AH7CreatureStack* castingCreature, class UH7CombatMapCell* targetCell, float Angle, TArray< class UH7CombatMapCell* >* outCells );
	TArray< class UH7IEffectTargetable* > GetTargetsOnMouseOverCells ( unsigned long Dead );
	class UH7CombatMapCell* GetMasterCellForObstacle ( class AH7CombatObstacleObject* theObstacle );
	class UH7CombatMapCell* GetCell ( struct FVector pos );
	bool CheckIfCellIsReachable ( class UH7CombatMapCell* cell, unsigned char cellSize );
	void GetReachableCellsFor ( class AH7CreatureStack* currentStack, int movePoints, TArray< class UH7CombatMapCell* >* Cells );
	void CalculateReachableCellsFor ( class AH7CreatureStack* currentStack, int movePoints );
	void RecalculateReachableCells ( );
	void SelectUnit ( class AH7Unit* Unit, unsigned long isCombatPhase );
	void StartUnitMovement ( class UH7CombatMapCell* hitCell, TArray< class UH7CombatMapCell* > hitCells, TArray< class UH7CombatMapCell* > Path, unsigned long isRealAttack );
	void ResetSelectedAndReachableCells ( unsigned long removeUnit );
	void ClearMouseOverCells ( );
	void UpdateAbilityHighlightCells ( );
	void UpdateMouseOverCells ( class UH7CombatMapCell* hitCell, TArray< class UH7CombatMapCell* > newHighlightCells, int isMouseOverMaster, class UH7CombatMapCell* masterCell, unsigned long highlightTargetCell, TArray< class UH7CombatMapCell* > casterCells );
	void DoMovement ( class UH7CombatMapCell* hitCell, TArray< class UH7CombatMapCell* > hitCells, unsigned long takeShortest, unsigned long isRealAttack );
	bool ShowPathPreview ( TArray< class UH7CombatMapCell* > hitCells, unsigned long takeShortest );
	void ShowHUDUnitOverEffects ( class AH7Unit* targetUnit );
	bool DoAttackAI ( class UH7CombatMapCell* hitCell, class UH7CombatMapCell* attackCell, unsigned char Direction );
	bool DoAbility ( class UH7CombatMapCell* hitCell, unsigned char Direction, class UH7CombatMapCell* TrueHitCell, TArray< class UH7CombatMapCell* > hitCells );
	void GetMovementPreviewCells ( TArray< class UH7CombatMapCell* >* outCells );
	bool GetMouseOverCell ( class UH7CombatMapCell** hitCell, TArray< class UH7CombatMapCell* >* hitCells, struct FVector* HitLocation, unsigned char* hitDirection, class UH7CombatMapCell** TrueHitCell, class UH7IEffectTargetable** Target );
	void ClearCurrentAttackPosition ( );
	TArray< class UH7CombatMapCell* > GetCurrentAttackPosition ( );
	bool IsUnitInFarRange ( class AH7Unit* Active, class AH7Unit* Target );
	bool IsUnitIsInMoveRange ( class AH7Unit* Active, class AH7Unit* Target );
	bool IsTargetInMeleeRange ( class AH7Unit* Active, class UH7IEffectTargetable* Target );
	void DisplayHeroHoverEffect ( class UH7CombatMapCell* hitCell, TArray< class UH7CombatMapCell* > hitCells, struct FVector HitLocation, class UH7CombatMapCell* TrueHitCell );
	void DisplayHoverEffect ( class UH7CombatMapCell* hitCell, TArray< class UH7CombatMapCell* > hitCells );
	TArray< class UH7IEffectTargetable* > GetTargetsFromCombatCells ( TArray< class UH7CombatMapCell* > Cells );
	class AActor* GetMouseHitActor ( struct FName classTypeName );
	class AActor* GetMouseHitActorAndLocationIgnoringClass ( struct FName classTypeNameToIgnore, struct FVector* HitLocation );
	class AActor* GetMouseHitActorAndLocation ( struct FVector* HitLocation );
	void InitTraceBuffer ( );
	void UpdateGridState ( class UH7CombatMapCell* hitCell, TArray< class UH7CombatMapCell* > hitCells, struct FVector HitLocation, class UH7CombatMapCell* TrueHitCell );
	void TacticsStoreUnitOnBar ( );
	void TacticsReleaseUnit ( unsigned long releasedOnBar );
	void TacticsPickUnit ( class AH7CreatureStack* creatureStack );
	void DoCurrentUnitAction ( );
	void UpdateReachableAltCells ( class UH7IEffectTargetable* Target );
	void ForceGridStateUpdate ( );
	void UpdateHoverEffects ( );
	void ClearParticles ( );
	void AddParticleSystemToMonitorList ( class UParticleSystemComponent* newParticle );
	void eventTick ( float DeltaTime );
	struct FIntPoint GetDefenderWarUnitPosition ( unsigned char Id );
	struct FIntPoint GetAttackerWarUnitPosition ( unsigned char Id );
	struct FIntPoint GetDefenderPosition ( );
	struct FIntPoint GetAttackerPosition ( );
	class AH7CombatObstacleObject* GetObstacle ( int Id );
	bool HasReachableCells ( class AH7CreatureStack* Stack );
	void SetAbilityHighlightCells ( TArray< class UH7CombatMapCell* > Cells );
	void AddAbilityHighlightCells ( class UH7CombatMapCell* cell );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	class AH7CombatMapGridController* GetInstance ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	int GetHitPoints ( );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	bool IsShip ( );
	class UH7IEffectTargetable* GetCurrentHoverTarget ( );
	class AH7CombatArmy* GetCombatArmy ( );
	class AH7Player* GetPlayer ( );
	class UH7BaseAbility* GetPreparedAbility ( );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	bool IsDefaultAttackActive ( );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetLocation ( );
	class UH7AuraManager* GetAuraManager ( );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	unsigned char GetEntityType ( );
	TArray< class AH7CombatObstacleObject* > GetObstacles ( );
	void DataChanged ( struct FString cause );
	struct FString GetName ( );
	int GetID ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	class UH7ICaster* GetOriginal ( );
	bool IsSiegeMap ( );
	class AH7CombatMapPathPreviewer* GetPathPreviewer ( );
	class UH7CombatMapCell* GetCurrentMouseOverCell ( );
	TArray< class UH7CombatMapCell* > GetMouseOverCells ( );
	class AH7CreatureStack* GetSelectedStack ( );
	class UH7CombatMapGrid* GetCombatGrid ( );
	void SetCombatController ( class AH7CombatController* combatController );
	bool IsDecalDirty ( );
	void SetDecalDirty ( unsigned long isDirty );
};



// Class MMH7Game.H7EditorMapObject ( Property size: 9 iter: 17) 
// Class name index: 8110 
// 0x0034 (0x02E4 - 0x02B0)
class AH7EditorMapObject : public ASkeletalMeshActorMAT
{
public:
	struct FPointer                                    VfTable_IH7IThumbnailable;                        		// 0x02B0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UAnimNode*                                   AnimNodeSeqComp;                                  		// 0x02B8 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMeshComponent*                        mMesh;                                            		// 0x02C0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    mFX;                                              		// 0x02C8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x02D0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      mSnapToGroundType;                                		// 0x02D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mSnapType;                                        		// 0x02D9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mTerrainOffset;                                   		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mHideMeshAndFX : 1;                               		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3324 ];

		return pClassPointer;
	};

	class UParticleSystemComponent* GetFX ( );
	void SetVisibility ( unsigned long show );
	void ToggleVisibility ( );
	void SetShouldHideMeshAndFX ( unsigned long NewValue );
	void SetMesh ( class UStaticMesh* dasMesh );
	class UStaticMeshComponent* GetMeshComp ( );
	class UStaticMesh* GetMesh ( );
};



// Class MMH7Game.H7AdventureObject ( Property size: 8 iter: 26) 
// Class name index: 8112 
// 0x002C (0x0310 - 0x02E4)
class AH7AdventureObject : public AH7EditorMapObject
{
public:
	struct FPointer                                    VfTable_IH7IQuestTarget;                          		// 0x02E4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              frameCount;                                       		// 0x02EC (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsFloating : 1;                                  		// 0x02F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              mFloatRotationIntensity;                          		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFloatSwayIntensity;                              		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPassabilityType;                                 		// 0x02FC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Mid;                                              		// 0x0300 (0x0004) [0x0000000000000000]              
	struct FVector                                     mOriginalLocation;                                		// 0x0304 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3326 ];

		return pClassPointer;
	};

	void OnDoubleClick ( );
	void OnRightClick ( );
	void OnLeftClick ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool IsMovable ( );
	bool IsHidden ( );
	class UH7AdventureMapCell* GetCurrentPosition ( );
	int GetQuestTargetID ( );
	void UpdateFloating ( float DeltaTime );
	void SetFloating ( unsigned long newFloating, float floatRot, float floatSway );
	void PostBeginPlay ( );
	void GetCellsUnderMe ( TArray< class UH7AdventureMapCell* >* outCells );
	void ReferenceSelfToCells ( );
	void eventInitAdventureObject ( );
	struct FString eventGetName ( );
	bool IsFloating ( );
	void AddQuestFlag ( );
	void ClearQuestFlag ( );
};



// Class MMH7Game.H7RandomCreatureStack ( Property size: 24 iter: 36) 
// Class name index: 8114 
// 0x0068 (0x0378 - 0x0310)
class AH7RandomCreatureStack : public AH7AdventureObject
{
public:
	struct FPointer                                    VfTable_IH7IRandomSpawnable;                      		// 0x0310 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mPlayerNumber;                                    		// 0x0318 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mFactionType;                                     		// 0x0319 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mCreatureUpgrades;                                		// 0x031A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mDiplomaticDisposition;                           		// 0x031B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinStackNumber;                                  		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxStackNumber;                                  		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7Faction* >                        mAllowedFactions;                                 		// 0x0324 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7AreaOfControlSiteLord*                    mReferenceLord;                                   		// 0x0334 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseCreatureLevel : 1;                            		// 0x033C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUseXPStrength : 1;                               		// 0x033C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mChooseRandomCreatures : 1;                       		// 0x033C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mChooseSameFaction : 1;                           		// 0x033C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mLimitLevelsFromXP : 1;                           		// 0x033C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mAiIsBorderControl : 1;                           		// 0x033C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mAiOnIgnore : 1;                                  		// 0x033C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mOverrideRandomIndex : 1;                         		// 0x033C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FH7BooleanStruct                            mAllowedLevels[ 0x5 ];                            		// 0x0340 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	int                                                mXPStrength;                                      		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinStackSize;                                    		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxStackSize;                                    		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mGrowthratePercent;                               		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            mDispositionTowardsPlayers;                       		// 0x0364 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mOverridenRandomIndex;                            		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3328 ];

		return pClassPointer;
	};

	void AddRandomCreaturestackToArmy ( class AH7AdventureArmy* Army, class UH7Faction* Faction, int Amount, unsigned char Tier );
	class AH7AdventureArmy* HatchRandomCreatureStack ( );
	void eventRegisterArmy ( class AH7AdventureArmy* Army );
	void SetFactionType ( unsigned char factionType );
	void SetRandomPlayerNumber ( unsigned char Number );
	class AH7AreaOfControlSite* GetSpawnedSite ( );
	class UH7Faction* eventGetChosenFaction ( );
	void eventHatchRandomSpawnable ( );
	void eventDisposeShell ( );
	void InitFromStruct ( struct FRandomLordDefenseData Data );
	unsigned char GetFactionType ( );
};



// Class MMH7Game.H7TargetableSite ( Property size: 8 iter: 27) 
// Class name index: 8116 
// 0x004C (0x035C - 0x0310)
class AH7TargetableSite : public AH7AdventureObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x0310 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mFetchedID : 1;                                   		// 0x0318 (0x0004) [0x0000000000000000] [0x00000001] 
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x031C (0x0008) [0x0000000000000000]              
	class UH7BuffManager*                              mBuffManager;                                     		// 0x0324 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x032C (0x0008) [0x0000000000000000]              
	class UH7EffectManager*                            mEffectManager;                                   		// 0x0334 (0x0008) [0x0000000000000000]              
	struct FString                                     mName;                                            		// 0x033C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mNameInst;                                        		// 0x034C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3330 ];

		return pClassPointer;
	};

	void DataChanged ( struct FString cause );
	int GetHitPoints ( );
	int GetStackSize ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	class AH7Player* GetPlayer ( );
	unsigned char GetEntityType ( );
	struct FIntPoint GetGridPosition ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	void LocalizeName ( );
	struct FString GetName ( );
	void InitTargetableSite ( );
	void eventInitAdventureObject ( );
	int GetQuestTargetID ( );
	int GetID ( );
};



// Class MMH7Game.H7VisitableSite ( Property size: 30 iter: 96) 
// Class name index: 8118 
// 0x00E8 (0x03F8 - 0x0310)
class AH7VisitableSite : public AH7AdventureObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x0310 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IEditorTerrainScan;                    		// 0x0318 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x0320 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0328 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsUnblockingEntrance : 1;                        		// 0x0330 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUseCustomName : 1;                               		// 0x0330 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mAiOnIgnore : 1;                                  		// 0x0330 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mReachabilityCheckDone : 1;                       		// 0x0330 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mInitDone : 1;                                    		// 0x0330 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mInitNameDone : 1;                                		// 0x0330 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FVector2D                                   mEntranceOffset;                                  		// 0x0334 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7GlobalName*                               mGlobalName;                                      		// 0x033C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mName;                                            		// 0x0344 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mCustomTooltipKey;                                		// 0x0354 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mMinimapIcon;                                     		// 0x0364 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mAiBaseUtility;                                   		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mCustomNameInst;                                  		// 0x0370 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USpriteComponent*                            mEntranceSprite;                                  		// 0x0380 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UH7BuffManager*                              mBuffManager;                                     		// 0x0388 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x0390 (0x0008) [0x0000000000000000]              
	class UH7EffectManager*                            mEffectManager;                                   		// 0x0398 (0x0008) [0x0000000000000000]              
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x03A0 (0x0008) [0x0000000000000000]              
	class UH7HeroEventParam*                           mHeroEventParam;                                  		// 0x03A8 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mVisitingArmy;                                    		// 0x03B0 (0x0008) [0x0000000000000000]              
	TArray< class AH7Flag* >                           mBuffFlags;                                       		// 0x03B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Flag*                                     mQuestFlag;                                       		// 0x03C8 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mCliffMat;                                        		// 0x03D0 (0x0008) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mEntranceCell;                                    		// 0x03D8 (0x0008) [0x0000000000000000]              
	struct FVector                                     mSavedLocation;                                   		// 0x03E0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mSavedRotation;                                   		// 0x03EC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3332 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	struct FString GetVisitString ( unsigned long Visited );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	struct FColor GetColor ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	class UH7AdventureMapCell* GetEntranceCell ( );
	void AddQuestFlag ( );
	void ClearQuestFlag ( );
	void AddBuffFlag ( class UH7BaseBuff* newBuff );
	void ReorderBuffFlags ( class UH7BaseBuff* buff );
	struct FVector eventGetHeightAsVector ( float Offset );
	void UnregisterEventManageable ( );
	void eventDestroyed ( );
	void eventInitAdventureObject ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	bool SpendPickupCostsOnVisit ( class AH7AdventureHero* visitingHero );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	bool IsMovable ( );
	bool IsHidden ( );
	class UH7AdventureMapCell* GetCurrentPosition ( );
	int GetHitPoints ( );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	struct FVector GetWorldEntranceNative ( );
	class UH7ICaster* GetOriginal ( );
	class AH7Player* GetPlayer ( );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetLocation ( );
	bool IsDefaultAttackActive ( );
	class UH7AbilityManager* GetAbilityManager ( );
	class AH7CombatArmy* GetCombatArmy ( );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	unsigned char GetEntityType ( );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	TArray< class AH7Flag* > GetBuffFlags ( );
	void LocalizeCustomName ( );
	struct FString GetCustomName ( );
	struct FString eventGetName ( );
	bool IsNeutral ( );
	void OverrideName ( struct FString NewName );
	void SetAiOnIgnore ( unsigned long val );
	void SetAiUtilityValue ( float val );
	bool IsUnblockingEntrance ( );
	bool GetAiOnIgnore ( );
	float GetAiBaseUtility ( );
	int GetID ( );
	struct FVector2D GetEntranceOffset ( );
	void SetVisitingArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetVisitingArmy ( );
	struct FString GetFlashMinimapPath ( );
	class UTexture2D* GetMinimapIcon ( );
	bool GetHasMinimap ( );
	void OnTerrainChange ( class ULandscapeLayerInfoObject* newLayer, class ALandscapeProxy* newLandscape );
};



// Class MMH7Game.H7AreaOfControlSite ( Property size: 22 iter: 87) 
// Class name index: 8120 
// 0x0094 (0x048C - 0x03F8)
class AH7AreaOfControlSite : public AH7VisitableSite
{
public:
	struct FPointer                                    VfTable_IH7IDefendable;                           		// 0x03F8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IOwnable;                              		// 0x0400 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0408 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mSiteOwner;                                       		// 0x0410 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSightRadius;                                     		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mEditorArmy;                                      		// 0x0418 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7DwellingCreatureData >           mLocalGuard;                                      		// 0x0420 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mUseXPStrength : 1;                               		// 0x0430 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mHasMinimapIcon : 1;                              		// 0x0430 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mInInit : 1;                                      		// 0x0430 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mHiddenBuilding : 1;                              		// 0x0430 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                mXPStrength;                                      		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7Faction* >                        mLocalGuardFactions;                              		// 0x0438 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7Faction*                                  mFaction;                                         		// 0x0448 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mIcon;                                            		// 0x0450 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnVisitSound;                                    		// 0x0458 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnTakeOverSound;                                 		// 0x0460 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnRepairSound;                                   		// 0x0468 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CaravanArmy*                              mCaravanArmy;                                     		// 0x0470 (0x0008) [0x0000000000000000]              
	class AH7Flag*                                     mFlag;                                            		// 0x0478 (0x0008) [0x0000000000000000]              
	float                                              mAiThreatLevel;                                   		// 0x0480 (0x0004) [0x0000000000000000]              
	class AH7AdventureArmy*                            mAiThreateningArmy;                               		// 0x0484 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3334 ];

		return pClassPointer;
	};

	TArray< struct FH7ResourceQuantity > GetUpgradeInfo ( unsigned long isVisitingArmy, class UH7BaseCreatureStack* Creature, int slotID, unsigned long lockNum, int* numOfUpgCreatures, TArray< struct FH7ResourceQuantity >* singleUpgCost );
	void eventPostSerialize ( );
	bool IsInScoutingRangeOfLocalPlayer ( );
	void Reveal ( );
	void Hide ( );
	bool HasStandingLocalGuard ( );
	void ClearLocalGuardReserve ( );
	TArray< class UH7BaseCreatureStack* > eventGetLocalGuardAsBaseCreatureStacks ( );
	void UpdateLocalGuardByCreature ( class AH7Creature* Creature, int diff );
	void UpdateLocalGuardReserve ( struct FH7DwellingCreatureData Data, int maxReserve );
	int GetGuardIncomeFor ( struct FH7DwellingCreatureData Data );
	int GetGuardCapacityFor ( struct FH7DwellingCreatureData Data );
	void ProduceDayUnits ( );
	float GetStrengthValue ( );
	TArray< struct FH7DwellingCreatureData > GetLocalGuard ( );
	int GetFreeStackSlots ( );
	float CheckPathToSite ( class AH7AreaOfControlSite* Site );
	struct FString GetRecruitAllBlockReason ( int freeSlots );
	TArray< struct FH7RecruitmentInfo > GetRecruitAllData ( unsigned long checkGarrison, int freeSlots, class AH7AdventureArmy* aiArmy );
	void OnVisit ( class AH7AdventureHero** Hero );
	struct FColor GetColor ( );
	void ProduceUnits ( );
	class AH7Flag* GetFlag ( );
	void SpawnFlag ( );
	struct FVector GetHeightPos ( float Offset );
	void CreateEmptyCaravan ( );
	void eventInitAdventureObject ( );
	void ChangeFlag ( );
	void Conquer ( class AH7AdventureHero* conqueror );
	void HandleSightRadius ( unsigned long isInit );
	void SetSiteOwner ( unsigned char NewOwner, unsigned long showMessage );
	void CalculateThreat ( );
	void InitSiteOwner ( unsigned char initialOwner );
	void HandleOwnership ( class AH7AdventureHero* visitingHero );
	void RenderDebugInfo ( class UCanvas* myCanvas );
	struct FString GetFlashIconPath ( );
	class AH7VisitableSite* GetSite ( );
	struct FString GetFlashMinimapPath ( );
	class UTexture2D* GetMinimapIcon ( );
	bool GetHasMinimap ( );
	void SetGuardingArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetGuardingArmy ( );
	void SetGarrisonArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* eventGetGarrisonArmy ( );
	void RemoveCaravanArmy ( );
	void SetCaravanArmy ( class AH7CaravanArmy* Army );
	class AH7CaravanArmy* GetCaravanArmy ( );
	unsigned char GetPlayerNumber ( );
	int GetLevel ( );
	class UTexture2D* GetIcon ( );
	struct FString GetIconPath ( );
	void SetFaction ( class UH7Faction* fac );
	class UH7Faction* GetFaction ( );
	void SetAiThreatLevel ( float F );
	float GetAiThreatLevel ( );
	void SetInitState ( unsigned long val );
	bool GetInitState ( );
	void CreateEmptyGarrison ( );
	bool TransferHeroComplete ( unsigned char fromArmy, unsigned char toArmy );
	void TransferHero ( unsigned char fromArmy, unsigned char toArmy );
	bool MergeArmiesComplete ( unsigned char fromArmy, unsigned char toArmy );
	void MergeArmies ( unsigned char fromArmy, unsigned char toArmy );
	bool IsHiddenX ( );
	class AH7Player* GetPlayer ( );
	void OnTerrainChange ( class ULandscapeLayerInfoObject* newLayer, class ALandscapeProxy* newLandscape );
};



// Class MMH7Game.H7AreaOfControlSiteLord ( Property size: 13 iter: 100) 
// Class name index: 8122 
// 0x00C8 (0x0554 - 0x048C)
class AH7AreaOfControlSiteLord : public AH7AreaOfControlSite
{
public:
	TArray< class AH7AreaOfControlSiteVassal* >        mVassals;                                         		// 0x048C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mAreaOfControlID;                                 		// 0x049C (0x0004) [0x0000000000000000]              
	TArray< struct FArrivedCaravan >                   mArrivedCaravans;                                 		// 0x04A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mCanCreateCaravanThisTurn : 1;                    		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mHasUncheckedCaravans : 1;                        		// 0x04B0 (0x0004) [0x0000000000000000] [0x00000002] 
	class AH7AdventureArmy*                            mGarrisonArmy;                                    		// 0x04B4 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mGuardingArmy;                                    		// 0x04BC (0x0008) [0x0000000000000000]              
	TArray< struct FH7DwellingCreatureData >           mAoCCreaturePool;                                 		// 0x04C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mRecruitmentCostModifier;                         		// 0x04D4 (0x0004) [0x0000000000000000]              
	TArray< class AH7Creature* >                       mHasRequiredDwellingFor;                          		// 0x04D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRandomLordDefenseData                      mDefenseData;                                     		// 0x04E8 (0x0058) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7AdventureMapCell* >               mBorderCells;                                     		// 0x0540 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mLevel;                                           		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3336 ];

		return pClassPointer;
	};

	void OnVisit ( class AH7AdventureHero** Hero );
	void UpdateLocalGuardGUI ( );
	void DowngradeLocalGuard ( class UH7TownGuardBuilding* responsibleBuilding, class UH7TownGuardGrowthEnhancer* guardEnhancer );
	void CalculateLocalGuard ( class UH7TownGuardBuilding* responsibleBuilding );
	void AiPickupCreatures ( );
	void AiUpgradeCreatures ( );
	void DbgDumpArmies ( );
	void DeleteCaravan ( int caravanIndex );
	bool IsCaravanEmpty ( int caravanIndex );
	class UH7BaseCreatureStack* GetStrongestStack ( struct FArrivedCaravan aCaravan );
	bool UnloadCaravan ( struct FArrivedCaravan caravan, unsigned long automatic );
	void UnloadCaravans ( );
	void SetArrivedCaravanStacks ( int Index, TArray< class UH7BaseCreatureStack* > stacks );
	struct FArrivedCaravan GetArrivedCaravanByIndexReadOnly ( int Index );
	bool CanAcceptCaravan ( class AH7AreaOfControlSiteLord* sourceLord );
	bool CanHaveCaravan ( );
	bool CanCreateCaravan ( );
	void CreateNewCaravan ( );
	void CaravanLeaveTown ( );
	void HandleOwnership ( class AH7AdventureHero* visitingHero );
	void Conquer ( class AH7AdventureHero* conqueror );
	void CalculateRecruitmentCosts ( class AH7Creature* Creature, int Count, unsigned long Upgrade, class AH7Creature* baseCreature, TArray< struct FH7ResourceQuantity >* Costs );
	int GetPossibleRecruitCount ( class AH7Creature* Creature, class UH7ResourceSet* resourceSet, int maxCount );
	bool HasRequiredDwellingTier ( unsigned char Tier );
	bool HasRequiredDwelling ( class AH7Creature* upgradedCreature );
	void UpgradeUnitComplete ( int slotID, unsigned long isVisitingArmy, int Count );
	bool UpgradeUnitAI ( class AH7AdventureArmy* Army, class UH7BaseCreatureStack* crStack, unsigned long doSynchronise );
	void UpgradeUnit ( int slotID, unsigned long isVisitingArmy, int Count );
	TArray< struct FH7ResourceQuantity > GetUpgradeInfo ( unsigned long isVisitingArmy, class UH7BaseCreatureStack* Creature, int slotID, unsigned long lockNum, int* numOfUpgCreatures, TArray< struct FH7ResourceQuantity >* singleUpgCost );
	class AH7Creature* GetUpgradedCreature ( struct FString creatureName );
	void AIRecruitAllFromDwelling ( class AH7Dwelling* Dwelling );
	void AIRecruitAllFromTownIntoCaravan ( class AH7AreaOfControlSite* caravanTarget );
	void AIRecruitAllFromTown ( );
	void RecruitAll ( unsigned long fromAoC, unsigned long toDwellingVisitor, TArray< int >* recruitmentSlotIndixes, TArray< unsigned char >* reenforcedArmies );
	void getRecruitAllDataFromTownForCaravan ( unsigned long recruitBaseVersion, class UH7ResourceSet** resourceSet, int* freeSlots, TArray< struct FH7RecruitmentInfo >* recruitmentInfos );
	bool isRecruitingCreatureAlready ( TArray< struct FH7RecruitmentInfo > recruitmentInfos, class AH7Creature* Creature );
	bool isRecruitingUpgradedVersionFromDwelling ( TArray< struct FH7RecruitmentInfo > recruitmentInfos, struct FH7RecruitmentInfo recruitmentInfoToTest, unsigned long checkDwelling );
	void sortRecDataInArray ( struct FH7RecruitmentInfo recData, TArray< struct FH7RecruitmentInfo >* tempRecInfo );
	void getAllCreaturesFromVassels ( TArray< struct FH7RecruitmentInfo >* tempRecInfo );
	void getAllCreaturesFromTown ( TArray< struct FH7RecruitmentInfo >* tempRecInfo );
	void writeActualRecruitmentDataForCaravan ( TArray< struct FH7RecruitmentInfo > tempRecInfos, class UH7ResourceSet* resourceSet, int freeSlots, TArray< struct FH7RecruitmentInfo >* actualRecruitmentData );
	void writeActualRecuitmentData ( TArray< struct FH7RecruitmentInfo > tempRecInfos, class UH7ResourceSet* resourceSet, int freeSlots, unsigned long checkGarrisonArmy, TArray< struct FH7RecruitmentInfo >* actualRecruitmentData );
	struct FString GetRecruitAllBlockReasonForCaravan ( );
	TArray< struct FH7RecruitmentInfo > GetRecruitAllDataForCaravan ( );
	struct FString GetRecruitAllBlockReason ( int freeSlots );
	TArray< struct FH7RecruitmentInfo > GetRecruitAllData ( unsigned long checkGarrison, int freeSlots, class AH7AdventureArmy* aiArmy );
	int GetFreeStackSlots ( );
	bool RecruitComplete ( struct FString creatureName, int Count, unsigned long isHiringFromAoC, class AH7Dwelling* OriginDwelling, unsigned long recruitToCaravan, unsigned long recruitToDwellingVisitor, class AH7AreaOfControlSite* caravanTarget, int* TargetIndex, unsigned char* targetArmy );
	void Recruit ( struct FString creatureName, int Count, unsigned long isHiringFromAoC, class AH7Dwelling* OriginDwelling, unsigned long recruitToCaravan, unsigned long recruitToDwellingVisitor, class AH7AreaOfControlSite* caravanTarget, unsigned long updateGui );
	int GetFreeSlotIndexOfArmy ( class AH7AdventureArmy* targetArmy, class UH7BaseCreatureStack* transferStack );
	int GetUniqueStackTypeCount ( class AH7AdventureArmy* army1, class AH7AdventureArmy* army2 );
	int SortStackPoolMerge ( class UH7BaseCreatureStack* A, class UH7BaseCreatureStack* B );
	bool MergeArmiesComplete ( unsigned char fromArmy, unsigned char toArmy );
	void MergeArmies ( unsigned char fromArmy, unsigned char toArmy );
	bool TransferHeroComplete ( unsigned char fromArmy, unsigned char toArmy );
	void TransferHero ( unsigned char fromArmy, unsigned char toArmy );
	class UH7BaseCreatureStack* GetLocalCreatureStackByIndex ( int Index );
	TArray< class UH7BaseCreatureStack* > GetLocalStacks ( );
	void CreateDefaultGarrison ( );
	void CreateEmptyGarrison ( );
	void SpawnGarrisonedArmy ( );
	void SetSiteOwner ( unsigned char NewOwner, unsigned long showPopup );
	TArray< class UH7BaseCreatureStack* > GetGarrisonStacks ( );
	TArray< class UH7BaseCreatureStack* > GetVisitorStacks ( );
	void RenderDebugInfo ( class UCanvas* myCanvas );
	TArray< class AH7Dwelling* > GetOutsideDwellings ( );
	TArray< struct FH7DwellingCreatureData > GetAoCCreaturePool ( );
	void InitBorderCells ( );
	void eventInitAdventureObject ( );
	bool SpendPickupCostsOnVisit ( class AH7AdventureHero* visitingHero );
	void SetArmy ( class AH7AdventureArmy* Army );
	void SetGuardingArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetGuardingArmy ( );
	void SetGarrisonArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* eventGetGarrisonArmy ( );
	void SetUncheckedCaravans ( unsigned long val );
	bool HasUncheckedCaravans ( );
	void AddArrivedCaravan ( struct FArrivedCaravan Value );
	TArray< struct FArrivedCaravan > GetArrivedCaravans ( );
	bool HasWaitingCaravans ( );
	float GetRecruitmentCostModifier ( );
	void SetRecruitmentCostModifier ( float Modifier );
	TArray< struct FH7DwellingCreatureData > GetCreaturePool ( );
	int GetAreaOfControlID ( );
	TArray< class AH7AreaOfControlSiteVassal* > GetVassals ( );
	void SetLevel ( int Level );
	int GetLevel ( );
};



// Class MMH7Game.H7Fort ( Property size: 36 iter: 81) 
// Class name index: 8124 
// 0x0130 (0x0684 - 0x0554)
class AH7Fort : public AH7AreaOfControlSiteLord
{
public:
	struct FString                                     mCombatMapName;                                   		// 0x0554 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMesh*                                 mMeshRuined;                                      		// 0x0564 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mMeshRuinedScale;                                 		// 0x056C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mFXRuined;                                        		// 0x0578 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   mMaterialRuined;                                  		// 0x0580 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mFXRuinedScale;                                   		// 0x0588 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsFractured : 1;                                 		// 0x0594 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsDestroying : 1;                                		// 0x0594 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsRebuilding : 1;                                		// 0x0594 (0x0004) [0x0000000000000000] [0x00000004] 
	class UParticleSystem*                             mRebuildEffect;                                   		// 0x0598 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mDestroyEffect;                                   		// 0x05A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ResourceQuantity >               mRebuildCost;                                     		// 0x05A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mDestroySpeed;                                    		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    mDestroyRotation;                                 		// 0x05BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDestroyRotationTimePct;                          		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mRebuildSpeed;                                    		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFXRebuildTime;                                   		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapTower*                           mSiegeObstacleTower;                              		// 0x05D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapWall*                            mSiegeObstacleWall;                               		// 0x05DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapMoat*                            mSiegeObstacleMoat;                               		// 0x05E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapGate*                            mSiegeObstacleGate;                               		// 0x05EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7EditorSiegeDecoration >          mSiegeDecorationList;                             		// 0x05F4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMesh*                                 mOriginalMesh;                                    		// 0x0604 (0x0008) [0x0000000000000000]              
	struct FVector                                     mOriginalMeshScale;                               		// 0x060C (0x000C) [0x0000000000000000]              
	struct FVector                                     mOriginalMeshTranslation;                         		// 0x0618 (0x000C) [0x0000000000000000]              
	struct FVector                                     mOriginalFXScale;                                 		// 0x0624 (0x000C) [0x0000000000000000]              
	struct FVector                                     mOriginalFXTranslation;                           		// 0x0630 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mOriginalMeshRotation;                            		// 0x063C (0x000C) [0x0000000000000000]              
	struct FRotator                                    mOriginalFXRotation;                              		// 0x0648 (0x000C) [0x0000000000000000]              
	class UParticleSystem*                             mOriginalFX;                                      		// 0x0654 (0x0008) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         mRebuildMats;                                     		// 0x065C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mDestroyedPercent;                                		// 0x066C (0x0004) [0x0000000000000000]              
	float                                              mRebuildPercent;                                  		// 0x0670 (0x0004) [0x0000000000000000]              
	float                                              mOriginalFloatScale;                              		// 0x0674 (0x0004) [0x0000000000000000]              
	float                                              mOriginalFXFloatScale;                            		// 0x0678 (0x0004) [0x0000000000000000]              
	class AH7AdventureHero*                            mVisitingHero;                                    		// 0x067C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3338 ];

		return pClassPointer;
	};

	void ProduceDayUnits ( );
	void SetNewName ( class UH7Faction* newFaction );
	void FinishRebuilding ( );
	void StartRebuilding ( );
	void FinishDestruction ( );
	void StartDestruction ( );
	void SimpleDestruction ( );
	void UpdateMesh ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void SetSiteOwner ( unsigned char NewOwner, unsigned long showPopup );
	void Visit ( class AH7AdventureHero** Hero );
	void CancelRebuild ( );
	void ConfirmRebuildComplete ( );
	void ConfirmRebuild ( );
	void Conquer ( class AH7AdventureHero* conqueror );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool CanAffordRebuild ( class AH7Player* Player );
	void eventTick ( float DeltaTime );
	void eventInitAdventureObject ( );
	void DelCombatMapGateRef ( );
	class AH7CombatMapGate* GetCombatMapGate ( );
	void DelCombatMapMoatRef ( );
	class AH7CombatMapMoat* GetCombatMapMoat ( );
	void DelCombatMapWallRef ( );
	class AH7CombatMapWall* GetCombatMapWall ( );
	void DelCombatMapTowerRef ( );
	class AH7CombatMapTower* GetCombatMapTower ( );
	TArray< struct FH7EditorSiegeDecoration > GetCombatMapDecoList ( );
	struct FString GetCombatMapName ( );
	void SetRuined ( );
	bool IsRuined ( );
	float GetFXRebuildTime ( );
	float GetRebuildSpeed ( );
	float GetDestroyRotationTime ( );
	struct FRotator GetDestroyRotation ( );
	float GetDestroySpeed ( );
	TArray< struct FH7ResourceQuantity > GetRebuildCost ( );
	class UParticleSystem* GetDestroyFX ( );
	class UParticleSystem* GetRebuildFX ( );
	struct FVector GetFXRuinedScale ( );
	class UMaterialInstanceConstant* GetMaterialRuined ( );
	class UParticleSystem* GetFXRuined ( );
	struct FVector GetMeshRuinedScale ( );
	class UStaticMesh* GetMeshRuined ( );
	unsigned char GetEntityType ( );
};



// Class MMH7Game.H7RandomFort ( Property size: 8 iter: 17) 
// Class name index: 8126 
// 0x0088 (0x070C - 0x0684)
class AH7RandomFort : public AH7Fort
{
public:
	struct FPointer                                    VfTable_IH7IRandomSpawnable;                      		// 0x0684 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mFactionType;                                     		// 0x068C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7AreaOfControlSiteLord*                    mSiteLord;                                        		// 0x0690 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7Faction* >                        mForbiddenFactions;                               		// 0x0698 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mEditFactionSite : 1;                             		// 0x06A8 (0x0004) [0x0000000000022000] [0x00000001] ( CPF_Transient | CPF_EditConst )
	class UMaterialInstanceConstant*                   mPlayerColorMaterials[ 0xA ];                     		// 0x06AC (0x0050) [0x0000000000000000]              
	class AH7Fort*                                     mSpawnedSite;                                     		// 0x06FC (0x0008) [0x0000000000000000]              
	class UH7Faction*                                  mChosenFaction;                                   		// 0x0704 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3340 ];

		return pClassPointer;
	};

	void TransferFortData ( class AH7Fort* fort );
	void eventHatchFort ( class UH7Faction* Faction );
	void eventHatchRandomSpawnable ( );
	void SetFactionType ( unsigned char factionType );
	void SetRandomPlayerNumber ( unsigned char Number );
	void eventDisposeShell ( );
	class UH7Faction* eventGetChosenFaction ( );
	unsigned char GetFactionType ( );
	class AH7AreaOfControlSite* GetSpawnedSite ( );
};



// Class MMH7Game.H7Town ( Property size: 63 iter: 256) 
// Class name index: 8128 
// 0x01D8 (0x072C - 0x0554)
class AH7Town : public AH7AreaOfControlSiteLord
{
public:
	struct FPointer                                    VfTable_IH7ILocaParamizable;                      		// 0x0554 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mCombatMapName;                                   		// 0x055C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7TownBuildingData >               mBuildingTemplates;                               		// 0x056C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mLocalGuardSlots;                                 		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureHero*                            mGovernor;                                        		// 0x0580 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mPredefinedGovernor;                              		// 0x0588 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7HeroAbility* >                    mPredefinedMagicGuildSpells;                      		// 0x0590 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPrefab*                                     mFactionTownScreen;                               		// 0x05A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7CameraProperties*                         mTownCameraProperties;                            		// 0x05A8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     mGUIconfig;                                       		// 0x05B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mFactionBannerIcon;                               		// 0x05C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionBGTownHall;                               		// 0x05C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionWatermark;                                		// 0x05D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionTownPortalFrame;                          		// 0x05D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionWallsImage;                               		// 0x05E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionTowerImage;                               		// 0x05E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionGateImage;                                		// 0x05F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 mTier1Mesh;                                       		// 0x05F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 mTier2Mesh;                                       		// 0x0600 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 mTier3Mesh;                                       		// 0x0608 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 mTier4Mesh;                                       		// 0x0610 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mTier1FX;                                         		// 0x0618 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mTier2FX;                                         		// 0x0620 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mTier3FX;                                         		// 0x0628 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mTier4FX;                                         		// 0x0630 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapTower*                           mSiegeObstacleTower;                              		// 0x0638 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapWall*                            mSiegeObstacleWall;                               		// 0x0640 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapMoat*                            mSiegeObstacleMoat;                               		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapGate*                            mSiegeObstacleGate;                               		// 0x0650 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7EditorSiegeDecoration >          mSiegeDecorationList;                             		// 0x0658 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mAiInHibernation : 1;                             		// 0x0668 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mAiEnableDevelopTown : 1;                         		// 0x0668 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mAiEnableRecruitment : 1;                         		// 0x0668 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mAiEnableTrade : 1;                               		// 0x0668 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mAiEnableHireHeroes : 1;                          		// 0x0668 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mAiIsMain : 1;                                    		// 0x0668 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mAiIsCrusadeTarget : 1;                           		// 0x0668 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mHasBuilt : 1;                                    		// 0x0668 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mHasDestroyed : 1;                                		// 0x0668 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mGuildSpecialized : 1;                            		// 0x0668 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mAiDone : 1;                                      		// 0x0668 (0x0004) [0x0000000000000000] [0x00000400] 
	float                                              mReserveMultiplier;                               		// 0x066C (0x0004) [0x0000000000000000]              
	TArray< struct FH7TownBuildingData >               mDwellings;                                       		// 0x0670 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7TownBuildingData >               mBuildings;                                       		// 0x0680 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7TownBuildingData >               mBuildingTreeTemplate;                            		// 0x0690 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7TownMagicGuild* >                 mMagicGuilds;                                     		// 0x06A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7TownGuardBuilding*                        mBestGuardBuilding;                               		// 0x06B0 (0x0008) [0x0000000000000000]              
	class UH7TownGuardGrowthEnhancer*                  mGuardGrowthEnhancer;                             		// 0x06B8 (0x0008) [0x0000000000000000]              
	unsigned char                                      mPredefinedMagicGuildSpec;                        		// 0x06C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mGuildSpecialisation;                             		// 0x06C1 (0x0001) [0x0000000000000000]              
	int                                                mBuildingsBuiltToday;                             		// 0x06C4 (0x0004) [0x0000000000000000]              
	int                                                mMaxBuildingsPerDay;                              		// 0x06C8 (0x0004) [0x0000000000000000]              
	float                                              mIncomeModifier;                                  		// 0x06CC (0x0004) [0x0000000000000000]              
	float                                              mBuildingCostModifier;                            		// 0x06D0 (0x0004) [0x0000000000000000]              
	int                                                mTownNameIndex;                                   		// 0x06D4 (0x0004) [0x0000000000000000]              
	class UH7Resource*                                 mIncomeResource;                                  		// 0x06D8 (0x0008) [0x0000000000000000]              
	TArray< struct FH7ResourceQuantity >               mRefundBuffer;                                    		// 0x06E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mRefundPercentage;                                		// 0x06F0 (0x0004) [0x0000000000000000]              
	class UH7ICaster*                                  mRefundHero;                                      		// 0x06F4 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x06FC (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                mHasForceReapplyAura;                             		// 0x0704 (0x0004) [0x0000000000000000]              
	struct FH7TownBuildingData                         mCurrentlyDestroyingBuilding;                     		// 0x0708 (0x000C) [0x0000000000000000]              
	TArray< class AH7Town* >                           mCurrentCaravanSources;                           		// 0x0714 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Town*                                     mCurrentCaravanTarget;                            		// 0x0724 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3342 ];

		return pClassPointer;
	};

	void DumpCurrentState ( );
	void eventPostSerialize ( );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	struct FString GetIconPath ( );
	void Reveal ( );
	void Hide ( );
	void UnLoadTownAssets ( );
	void LoadTownAssets ( unsigned long delayed );
	void Conquer ( class AH7AdventureHero* conqueror );
	void SetCurrentCaravanTarget ( class AH7Town* Town );
	class AH7Town* GetCurrentCaravanTarget ( );
	void ClearCaravanSources ( );
	void AddCaravanSource ( class AH7Town* Town );
	TArray< class AH7Town* > GetCurrentCaravanSources ( );
	bool RecruitHeroComplete ( int heroId );
	bool RecruitHero ( int heroId );
	bool CanRecruitHero ( class AH7EditorArmy* armyToRecruit );
	bool HasRequiredDwelling ( class AH7Creature* upgradedCreature );
	TArray< struct FH7DwellingCreatureData > GetCreaturePool ( );
	int GetGrowthBonus ( class AH7Creature* Creature, class UH7TownDwelling* townDwelling, TArray< struct FH7TooltipModifierInfo >* Modifiers );
	TArray< class UH7TownGuardGrowthEnhancer* > GetGuardGrowthBuildings ( );
	TArray< struct FH7TownBuildingData > GetGrowthBuildings ( );
	void GetDwellings ( TArray< struct FH7TownBuildingData >* dwellings );
	bool ProducesTier ( unsigned char Tier );
	bool ProducesUnit ( class AH7Creature* Creature );
	void ProduceUnits ( );
	void OpenTownScreenForMe ( );
	void SetSiteOwner ( unsigned char NewOwner, unsigned long showPopup );
	void LearnSpells ( class AH7AdventureHero* Hero );
	void OnLeave ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void AiSelectSchool ( );
	TArray< class UH7TownDwelling* > DoSabotage ( );
	void OnDoubleClick ( );
	void OnRightClick ( );
	void UpdateLocalGuardGUI ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool HasResourcesToBuild ( );
	bool IsFullyBuilt ( );
	struct FString GetInfoIconPath ( struct FString* ToolTip );
	bool AiAutotradeResources ( class UH7Resource* needResource );
	void AiDoTrade ( struct FString resourceToSell, int amountToSell, struct FString resourceToBuy, int amountToBuy );
	float AiCalculateTradeRateFactor ( unsigned long tradingPostBuff );
	int AiGetAmountMarketPlaces ( );
	int GetIncomeByResource ( class UH7Resource* resourceType );
	void ModifyPlayerIncome ( unsigned long addIncome );
	struct FString GetIncomeIcon ( );
	class UH7Resource* GetIncomeResource ( );
	bool AlreadyHasSpell ( class UH7HeroAbility* spell, TArray< class UH7HeroAbility* > existing );
	TArray< class UH7HeroAbility* > GetAvailableSpells ( );
	struct FH7TownBuildingData GetBestDwelling ( struct FH7TownBuildingData baseBuilding );
	struct FH7TownBuildingData GetBestBuilding ( struct FH7TownBuildingData baseBuilding );
	void UpdateMagicGuildMessage ( );
	void InitMagicGuilds ( );
	void BuildBuildingComplete ( struct FString buildingID, unsigned long spendResources );
	bool ConsumeTearOfAsha ( );
	bool BuildBuilding ( struct FString buildingID );
	void SetReserveMultiplier ( float M );
	bool BuildBuildingForced ( struct FString buildingName );
	class UH7TownBuilding* GetUpgradeBase ( class UH7TownBuilding* Building, unsigned long useExistingBuildingList );
	bool IsBuildingBuiltByClass ( class UClass* dasClass );
	bool IsBuildingBuiltByName ( struct FString buildingName, struct FH7TownBuildingData* Data );
	bool IsDwellingBuilt ( class UH7TownBuilding* Building, unsigned long returnTrueIfUpgradeIsBuilt, unsigned long returnTrueIfAlternateIsBuilt, struct FH7TownBuildingData* Data );
	bool IsBuildingBuilt ( class UH7TownBuilding* Building, unsigned long returnTrueIfUpgradeIsBuilt, unsigned long returnTrueIfAlternateIsBuilt, struct FH7TownBuildingData* Data );
	bool CheckBuildingRequirements ( class UH7TownBuilding* Building );
	bool IsTownPortalBuilt ( );
	class UH7TownHall* GetCapitol ( );
	bool IsCapitolBuilt ( );
	bool IsBuildingEqual ( class UH7TownBuilding* building1, class UH7TownBuilding* building2 );
	bool CanAffordBuilding ( class UH7TownBuilding* Building );
	void FindBuildingsOfType ( class UClass* comparisonClass, TArray< class UH7TownBuilding* >* resultList );
	TArray< class UH7TownBuilding* > GetBuildingsByAssetType ( struct FString assetType );
	class UH7TownBuilding* GetBuildingByAssetType ( struct FString assetType );
	class UH7TownBuilding* GetBuildingByAsset_BROKEN ( class AH7TownAsset* assetInstance );
	class UH7TownBuilding* GetBaseBuilding ( class UH7TownBuilding* upgradeBuilding );
	class AH7TownAsset* GetBestAssetForSlot ( class UH7TownBuilding* Building, class AH7TownAsset* Asset );
	class UH7TownBuilding* GetBuildingByPrefabAsset ( class AH7TownAsset* prefabAsset );
	struct FH7TownBuildingData GetBestBuildingByBuilding ( class UH7TownBuilding* Building );
	int GetBuildingLevelByType ( class UClass* buildingType );
	TArray< struct FH7TownBuildingData > GetBuildingsByType ( class UClass* C );
	struct FH7TownBuildingData GetBuildingDataByType ( class UClass* C );
	void DisableBuilding ( class UH7TownBuilding* Building );
	TArray< struct FH7TownBuildingData > GetBuildingTemplatesByType ( class UClass* C );
	bool IsHavenTown ( );
	struct FH7TownBuildingData GetBuildingTemplateByType ( class UClass* C );
	class UH7TownUtilityUnitDwelling* GetBuildingWarfare ( unsigned long attackHybrid );
	class UH7TownBuilding* GetBuildingByType ( class UClass* C );
	TArray< struct FH7TownBuildingData > GetBuildingTree ( );
	bool HasOutSideDwellingsBelongingToOwner ( );
	bool HasOutSideDwellings ( );
	bool HasChampionDwellingBuilt ( );
	int GetGuardIncomeFor ( struct FH7DwellingCreatureData Data );
	int GetGuardCapacityFor ( struct FH7DwellingCreatureData Data );
	void DumpTownBuildings ( );
	void UpdateTownMesh ( );
	void DestroyBuildingsOfLevelComplete ( int Level, unsigned long simulate );
	void DestroyBuildingsOfLevel ( int Level );
	void RefundBuildingCost ( class UH7TownBuilding* Building, int percentage, unsigned long isSimulated );
	class UH7ICaster* GetRefundHero ( );
	void SetRefundHero ( class UH7ICaster* Hero );
	void DeleteRefundBuffer ( );
	TArray< struct FH7ResourceQuantity > GetRefundBuffer ( );
	int GetRefundPercentage ( );
	void AddToRefundBuffer ( struct FH7ResourceQuantity newEntry );
	void DestroyBuildingByIndex ( int Index, unsigned long simulate );
	bool IsOnlyTownHallBuilt ( );
	int GetHighestBuildingLevel ( );
	void SwitchGUICoords ( class UH7TownBuilding* From, class UH7TownBuilding* to );
	bool IsAvailable ( class UH7TownBuilding* Building );
	class UH7TownBuilding* CreateBuilding ( class UH7TownBuilding* buildingArchetype, unsigned long isForced );
	void eventInitAdventureObject ( );
	float GetBaseStatByID ( unsigned char desiredStat );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat );
	float GetAddBoniOnStatByID ( unsigned char desiredStat );
	float GetModifiedStatByID ( unsigned char desiredStat );
	int GetCurrencyIncome ( );
	void UpdateGovernorAuras ( );
	void SetGovernorComplete ( class AH7AdventureHero* governor );
	void SetGovernor ( class AH7AdventureHero* governor );
	void OnBeginDay ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void SetBuiltToday ( unsigned long bu );
	bool IsAiDone ( );
	void SetAiDone ( unsigned long Done );
	void SetAiIsCrusadeTarget ( unsigned long State );
	bool GetAiIsCrusadeTarget ( );
	void SetAiIsMain ( unsigned long State );
	bool GetAiIsMain ( );
	void SetAiEnableHireHeroes ( unsigned long State );
	bool GetAiEnableHireHeroes ( );
	void SetAiEnableTrade ( unsigned long State );
	bool GetAiEnableTrade ( );
	void SetAiEnableRecruitment ( unsigned long State );
	bool GetAiEnableRecruitment ( );
	void SetAiEnableDevelopTown ( unsigned long State );
	bool GetAiEnableDevelopTown ( );
	void SetAiHibernationState ( unsigned long State );
	bool GetAiHibernationState ( );
	void CanBuildCaravanThisTurn ( unsigned long Value );
	struct FString GetCombatMapName ( );
	unsigned char GetPredefinedMagicGuildSpecialisation ( );
	void SetSpecialisation ( unsigned char school );
	void SetMageGuildSpecialisationStatus ( unsigned long Value );
	unsigned char GetSpecialisation ( );
	bool GetMageGuildSpecialisationStatus ( );
	void SetMaxBuildingsPerDay ( int Amount );
	void MulBuildingCostModifier ( float Modifier );
	float GetBuildingCostModifier ( );
	void SetDestroyedToday ( unsigned long boool );
	bool HasDestroyedToday ( );
	void SetGUIconfig ( struct FString val );
	struct FString GetGUIconfig ( );
	int GetLocalGuardSlots ( );
	class UH7CameraProperties* GetTownCameraProperties ( );
	bool CouldUpdateAuras ( );
	bool HasBuiltToday ( );
	class AH7AdventureHero* GetGovernor ( );
	TArray< struct FH7TownBuildingData > GetBuildings ( );
	int GetLevel ( );
	void DelFactionTownScreenRef ( );
	class UPrefab* GetTownScreen ( );
	void DelFactionTownPortalFrameRef ( );
	struct FString GetFactionPortalFramePath ( );
	void DelFactionTowerImageRef ( );
	struct FString GetTowerIconPath ( );
	void DelFactionGateImageRef ( );
	struct FString GetGateIconPath ( );
	void DelFactionWallsImageRef ( );
	struct FString GetWallsIconPath ( );
	void DelFactionWatermarkRef ( );
	struct FString GetFactionWatermarkPath ( );
	void DelFactionBGTownHallRef ( );
	struct FString GetFactionBGTownHallPath ( );
	void DelFactionBannerIconRef ( );
	struct FString GetFactionBannerIconPath ( );
	class AH7Town* GetArchetype ( );
	void DelCombatMapDecoListRef ( );
	TArray< struct FH7EditorSiegeDecoration > GetCombatMapDecoList ( );
	void DelCombatMapGateRef ( );
	class AH7CombatMapGate* GetCombatMapGate ( );
	void DelCombatMapMoatRef ( );
	class AH7CombatMapMoat* GetCombatMapMoat ( );
	void DelCombatMapWallRef ( );
	class AH7CombatMapWall* GetCombatMapWall ( );
	void DelCombatMapTowerRef ( );
	class AH7CombatMapTower* GetCombatMapTower ( );
	struct FString GetGenericName ( );
	struct FString GetName ( );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char checkForOperation1, unsigned char checkForOperation2, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	void UpdateMeshes ( );
	unsigned char GetEntityType ( );
};



// Class MMH7Game.H7RandomTown ( Property size: 8 iter: 19) 
// Class name index: 8130 
// 0x0088 (0x07B4 - 0x072C)
class AH7RandomTown : public AH7Town
{
public:
	struct FPointer                                    VfTable_IH7IRandomSpawnable;                      		// 0x072C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mFactionType;                                     		// 0x0734 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7AreaOfControlSiteLord*                    mSiteLord;                                        		// 0x0738 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7Faction* >                        mForbiddenFactions;                               		// 0x0740 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mEditFactionSite : 1;                             		// 0x0750 (0x0004) [0x0000000000022000] [0x00000001] ( CPF_Transient | CPF_EditConst )
	class UMaterialInstanceConstant*                   mPlayerColorMaterials[ 0xA ];                     		// 0x0754 (0x0050) [0x0000000000000000]              
	class AH7Town*                                     mSpawnedSite;                                     		// 0x07A4 (0x0008) [0x0000000000000000]              
	class UH7Faction*                                  mChosenFaction;                                   		// 0x07AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3344 ];

		return pClassPointer;
	};

	void TransferTownData ( class AH7Town* Town );
	void eventHatchTown ( class UH7Faction* Faction );
	void SetChoosenFaction ( class UH7Faction* Faction );
	void eventHatchRandomSpawnable ( );
	void SetFactionType ( unsigned char factionType );
	void SetRandomPlayerNumber ( unsigned char Number );
	void OnTerrainChange ( class ULandscapeLayerInfoObject* newLayer, class ALandscapeProxy* newLandscape );
	void eventDisposeShell ( );
	class UH7Faction* eventGetChosenFaction ( );
	unsigned char GetFactionType ( );
	class AH7AreaOfControlSite* GetSpawnedSite ( );
};



// Class MMH7Game.H7AreaOfControlSiteVassal ( Property size: 1 iter: 6) 
// Class name index: 8132 
// 0x0008 (0x0494 - 0x048C)
class AH7AreaOfControlSiteVassal : public AH7AreaOfControlSite
{
public:
	class AH7AreaOfControlSiteLord*                    mLord;                                            		// 0x048C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3346 ];

		return pClassPointer;
	};

	void RenderDebugInfo ( class UCanvas* myCanvas );
	void HandleOwnership ( class AH7AdventureHero* visitingHero );
	bool SpendPickupCostsOnVisit ( class AH7AdventureHero* visitingHero );
	void OnVisit ( class AH7AdventureHero** Hero );
	class AH7AreaOfControlSiteLord* GetLord ( );
};



// Class MMH7Game.H7AreaOfControlBuffSite ( Property size: 6 iter: 16) 
// Class name index: 8134 
// 0x0028 (0x04BC - 0x0494)
class AH7AreaOfControlBuffSite : public AH7AreaOfControlSiteVassal
{
public:
	class UH7BaseBuff*                                 mBuff;                                            		// 0x0494 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPlunderingDelay;                                 		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7Flag*                                     mPlunderFlag;                                     		// 0x04A0 (0x0008) [0x0000000000000000]              
	int                                                mDelay;                                           		// 0x04A8 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    mOnCaptureSound;                                  		// 0x04AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAlreadyVisitedSound;                             		// 0x04B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3348 ];

		return pClassPointer;
	};

	void UpdatePlunderDelay ( );
	void RemoveBuffofAllPlayerHeroes ( class AH7Player* Player );
	void ProvideBuffToAllPlayerHeroes ( class AH7Player* Player );
	void SetSiteOwner ( unsigned char NewOwner, unsigned long showPopup );
	bool CanBeVisitedByPlayer ( class AH7Player* Player );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void eventInitAdventureObject ( );
	void RemovePlunderFlag ( );
	void AddPlunderFlag ( );
	void OnVisit ( class AH7AdventureHero** Hero );
};



// Class MMH7Game.H7Dwelling ( Property size: 6 iter: 47) 
// Class name index: 8136 
// 0x0038 (0x04CC - 0x0494)
class AH7Dwelling : public AH7AreaOfControlSiteVassal
{
public:
	TArray< struct FH7DwellingCreatureData >           mCreaturePool;                                    		// 0x0494 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mIsUpgraded : 1;                                  		// 0x04A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsProductive : 1;                                		// 0x04A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FH7ResourceQuantity >               mUpgradeCost;                                     		// 0x04A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    mDailyGrowthBuffer;                               		// 0x04B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mGrowthCycle;                                     		// 0x04C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3350 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void Conquer ( class AH7AdventureHero* conqueror );
	class AH7Creature* GetBaseCreature ( struct FString creatureName, int* indexSource );
	void HireUnits ( struct FString creatureName, int Count );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char checkForOperation1, unsigned char checkForOperation2, class AH7Creature* specificCreature, TArray< struct FH7MeModifiesStat >* outStats );
	float GetBaseStatByID ( unsigned char desiredStat, class AH7Creature* Creature );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat, class AH7Creature* Creature );
	float GetAddBoniOnStatByID ( unsigned char desiredStat, class AH7Creature* Creature );
	float GetModifiedStatByID ( unsigned char desiredStat, class AH7Creature* Creature );
	int GetCreatureIncome ( class AH7Creature* Creature );
	void ProduceUnits ( );
	int GetPossibleRecruitCount ( class AH7Creature* Creature, class UH7ResourceSet* resourceSet, int maxCount );
	int creatureStrength ( struct FH7RecruitmentInfo info1, struct FH7RecruitmentInfo info2 );
	TArray< struct FH7RecruitmentInfo > GetRecruitAllDataSub ( class UH7ResourceSet* resourceSet, unsigned long recruitBaseCreature );
	int GetFreeStackSlots ( );
	bool isRecruitingUpgradedVersionAlready ( TArray< struct FH7RecruitmentInfo > filteredRecruitmentInfo, class AH7Creature* Creature );
	struct FString GetRecruitAllBlockReason ( int freeSlots );
	TArray< struct FH7RecruitmentInfo > GetRecruitAllData ( unsigned long checkGarrison, int freeSlots, class AH7AdventureArmy* aiArmy );
	void RecruitAll ( );
	bool Recruit ( struct FString creatureName, int Count, int* TargetIndex );
	void RecruitDirect ( struct FString creatureName, int Amount );
	void UpgradeComplete ( );
	void Upgrade ( );
	int GetGrowthBonus ( class AH7Creature* Creature, TArray< struct FH7TooltipModifierInfo >* Modifiers );
	bool CreatureIsInPool ( class AH7Creature* Creature );
	void UpgradeUnitComplete ( int slotID, unsigned long isVisitingArmy, int Count );
	void UpgradeUnit ( int slotID, unsigned long isVisitingArmy, int Count );
	TArray< struct FH7ResourceQuantity > GetUpgradeInfo ( unsigned long isVisitingArmy, class UH7BaseCreatureStack* Creature, int slotID, unsigned long lockNum, int* numOfUpgCreatures, TArray< struct FH7ResourceQuantity >* singleUpgCost );
	bool UpgradeUnitAI ( class AH7AdventureArmy* Army, class UH7BaseCreatureStack* crStack, unsigned long doSynchronise );
	void AiUpgradeCreatures ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void HandleOwnership ( class AH7AdventureHero* visitingHero );
	void eventInitAdventureObject ( );
	bool ProducesUnit ( class AH7Unit* Unit );
	unsigned char GetEntityType ( );
	void SetProductive ( unsigned long productive );
	TArray< struct FH7ResourceQuantity > GetUpgradeCost ( );
	bool IsUpgraded ( );
	void InitIsUpgraded ( unsigned long IsUpgraded );
	void SetCreaturePool ( TArray< struct FH7DwellingCreatureData > pool );
	TArray< struct FH7DwellingCreatureData > GetCreaturePool ( );
};



// Class MMH7Game.H7CustomNeutralDwelling ( Property size: 3 iter: 20) 
// Class name index: 8138 
// 0x0030 (0x04FC - 0x04CC)
class AH7CustomNeutralDwelling : public AH7Dwelling
{
public:
	TArray< float >                                    mWeeklyGrowthBuffer;                              		// 0x04CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mVisitedHeroes;                                   		// 0x04DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Faction* >                        mAllowedFactions;                                 		// 0x04EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3352 ];

		return pClassPointer;
	};

	int GetPossibleRecruitCount ( class AH7Creature* Creature, class UH7ResourceSet* resourceSet, int maxCount );
	TArray< struct FH7RecruitmentInfo > GetRecruitAllData ( unsigned long checkGarrison, int freeSlots, class AH7AdventureArmy* aiArmy );
	TArray< struct FH7RecruitmentInfo > GetRecruitAllDataSub ( class UH7ResourceSet* resourceSet, unsigned long recruitBaseCreature );
	int GetFreeStackSlots ( );
	bool Recruit ( struct FString creatureName, int Count, int* TargetIndex );
	void RecruitDirect ( struct FString creatureName, int Amount );
	class AH7Creature* GetBaseCreature ( struct FString creatureName, int* indexSource );
	void ProduceUnits ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void RecruitAll ( );
	bool WillBenefitFromVisit ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool HasVisited ( class AH7AdventureHero* Hero );
	bool HasCreature ( class AH7Creature* Creature );
	void eventInitAdventureObject ( );
	void SetCreaturePool ( TArray< struct FH7DwellingCreatureData > pool );
	TArray< struct FH7DwellingCreatureData > GetCreaturePool ( );
};



// Class MMH7Game.H7RandomDwelling ( Property size: 13 iter: 24) 
// Class name index: 8140 
// 0x008C (0x0558 - 0x04CC)
class AH7RandomDwelling : public AH7Dwelling
{
public:
	struct FPointer                                    VfTable_IH7IRandomSpawnable;                      		// 0x04CC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mFactionPlayer;                                   		// 0x04D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mFactionType;                                     		// 0x04D5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mDwellingType;                                    		// 0x04D6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mDwellingLevel;                                   		// 0x04D7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mChampionChoice;                                  		// 0x04D8 (0x0001) [0x0000000000000000]              
	class AH7AreaOfControlSiteLord*                    mSiteLord;                                        		// 0x04DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7Faction* >                        mForbiddenFactions;                               		// 0x04E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mEditFactionPlayer : 1;                           		// 0x04F4 (0x0004) [0x0000000000022000] [0x00000001] ( CPF_Transient | CPF_EditConst )
	unsigned long                                      mEditFactionSite : 1;                             		// 0x04F4 (0x0004) [0x0000000000022000] [0x00000002] ( CPF_Transient | CPF_EditConst )
	class UMaterialInstanceConstant*                   mPlayerColorMaterials[ 0xA ];                     		// 0x04F8 (0x0050) [0x0000000000000000]              
	class AH7Dwelling*                                 mSpawnedSite;                                     		// 0x0548 (0x0008) [0x0000000000000000]              
	class UH7Faction*                                  mChosenFaction;                                   		// 0x0550 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3354 ];

		return pClassPointer;
	};

	void eventHatchDwelling ( class UH7Faction* Faction );
	void eventHatchRandomSpawnable ( );
	void TransferDwellingData ( class AH7Dwelling* Dwelling );
	void SetFactionType ( unsigned char factionType );
	void SetRandomPlayerNumber ( unsigned char Number );
	void OnTerrainChange ( class ULandscapeLayerInfoObject* newLayer, class ALandscapeProxy* newLandscape );
	void eventDisposeShell ( );
	unsigned char eventGetChosenChampionDwelling ( );
	class UH7Faction* eventGetChosenFaction ( );
	unsigned char GetFactionType ( );
	class AH7AreaOfControlSite* GetSpawnedSite ( );
};



// Class MMH7Game.H7Mine ( Property size: 10 iter: 39) 
// Class name index: 8142 
// 0x0040 (0x04D4 - 0x0494)
class AH7Mine : public AH7AreaOfControlSiteVassal
{
public:
	class UH7Resource*                                 mResource;                                        		// 0x0494 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mIncome;                                          		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPlunderGainModifier;                             		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPlunderingDelay;                                 		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7Flag*                                     mPlunderFlag;                                     		// 0x04A8 (0x0008) [0x0000000000000000]              
	int                                                mDelay;                                           		// 0x04B0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    mOnPlunderSound;                                  		// 0x04B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAlreadyVisitedSound;                             		// 0x04BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureHero*                            mPendingPlunderingHero;                           		// 0x04C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AH7Player*                                   mPendingPlunderingPlayer;                         		// 0x04CC (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3356 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void SetSiteOwner ( unsigned char NewOwner, unsigned long showPopup );
	void ChangeFlag ( );
	void UpdatePlunderDelay ( );
	void AddPlunderBuff ( unsigned long fromSave );
	void PlunderComplete ( class AH7AdventureHero* Hero, class AH7Player* plunderingPlayer );
	void PlunderConfirm ( );
	void PlunderFromMission ( class AH7Player* plunderingPlayer );
	void Plunder ( class AH7AdventureHero* plunderingHero );
	void ProduceResource ( );
	void eventInitAdventureObject ( );
	bool CanBePlunderedByPlayer ( class AH7Player* Player );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char checkForOperation1, unsigned char checkForOperation2, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	float GetBaseStatByID ( unsigned char desiredStat );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat );
	float GetAddBoniOnStatByID ( unsigned char desiredStat );
	float GetModifiedStatByID ( unsigned char desiredStat );
	int GetPlunderGainModifier ( );
	int GetIncome ( );
	void RemovePlunderFlag ( );
	void AddPlunderFlag ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool ProducesResource ( class UH7Resource* Resource );
	void SetIncome ( int Income );
	void SetResource ( class UH7Resource* res );
	class UH7Resource* GetResource ( );
	bool IsPlundered ( );
	unsigned char GetEntityType ( );
};



// Class MMH7Game.H7Garrison ( Property size: 14 iter: 54) 
// Class name index: 8144 
// 0x007C (0x0508 - 0x048C)
class AH7Garrison : public AH7AreaOfControlSite
{
public:
	struct FPointer                                    VfTable_IH7IStackContainer;                       		// 0x048C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IDestructible;                         		// 0x0494 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureArmy*                            mGarrisonArmy;                                    		// 0x049C (0x0008) [0x0000000000000000]              
	struct FString                                     mCombatMapName;                                   		// 0x04A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mFactionBannerIcon;                               		// 0x04B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AH7DestructibleObjectManipulator* >  mManipulators;                                    		// 0x04BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mDestructionSteps;                                		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapTower*                           mSiegeObstacleTower;                              		// 0x04D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapWall*                            mSiegeObstacleWall;                               		// 0x04D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapMoat*                            mSiegeObstacleMoat;                               		// 0x04E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapGate*                            mSiegeObstacleGate;                               		// 0x04E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7EditorSiegeDecoration >          mSiegeDecorationList;                             		// 0x04F0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mCurrentDestructionSteps;                         		// 0x0500 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsDestroying : 1;                                		// 0x0504 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3358 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	int SortStackPoolMerge ( class UH7BaseCreatureStack* A, class UH7BaseCreatureStack* B );
	int GetUniqueStackTypeCount ( class AH7AdventureArmy* army1, class AH7AdventureArmy* army2 );
	bool TransferHeroComplete ( unsigned char fromArmy, unsigned char toArmy );
	void TransferHero ( unsigned char fromArmy, unsigned char toArmy );
	void SetSiteOwner ( unsigned char NewOwner, unsigned long showPopup );
	void Conquer ( class AH7AdventureHero* conqueror );
	void HandleOwnership ( class AH7AdventureHero* visitingHero );
	void SpawnGarrisonedArmy ( );
	void CreateEmptyGarrison ( );
	void OpenTownScreenForMe ( );
	void OnDoubleClick ( );
	void OnRightClick ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	int GetCreatureAmount ( class AH7Creature* Creature );
	int GetCreatureAmountTotal ( );
	void SetGarrisonArmy ( class AH7AdventureArmy* Army );
	void DelFactionBannerIconRef ( );
	struct FString GetFactionBannerIconPath ( );
	class AH7AdventureArmy* eventGetGarrisonArmy ( );
	class UH7Faction* GetFaction ( );
	struct FString GetCombatMapName ( );
	TArray< class AH7DestructibleObjectManipulator* > GetManipulators ( );
	void SetRepairing ( unsigned long V );
	void SetDestroying ( unsigned long V );
	bool IsRepairing ( );
	bool IsDestroying ( );
	bool IsDestroyed ( );
	void RepairDestructibleObject ( );
	void DestroyDestructibleObject ( );
	void DelCombatMapGateRef ( );
	class AH7CombatMapGate* GetCombatMapGate ( );
	void DelCombatMapMoatRef ( );
	class AH7CombatMapMoat* GetCombatMapMoat ( );
	void DelCombatMapWallRef ( );
	class AH7CombatMapWall* GetCombatMapWall ( );
	void DelCombatMapTowerRef ( );
	class AH7CombatMapTower* GetCombatMapTower ( );
	TArray< struct FH7EditorSiegeDecoration > GetCombatMapDecoList ( );
};



// Class MMH7Game.H7ItemPile ( Property size: 7 iter: 23) 
// Class name index: 8146 
// 0x003C (0x0434 - 0x03F8)
class AH7ItemPile : public AH7VisitableSite
{
public:
	struct FPointer                                    VfTable_IH7IPickable;                             		// 0x03F8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0400 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UH7HeroItem* >                       mItems;                                           		// 0x0408 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mItemRefs;                                        		// 0x0418 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mLooted : 1;                                      		// 0x0428 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsHidden : 1;                                    		// 0x0428 (0x0004) [0x0000000000000000] [0x00000002] 
	class UAkEvent*                                    mOnPickUpSound;                                   		// 0x042C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3360 ];

		return pClassPointer;
	};

	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	struct FColor GetColor ( );
	void DestroySecure ( );
	void Pickup ( class AH7AdventureHero* lootingHero, unsigned char lootType, unsigned long doMultiplayerSynchro );
	void OnVisit ( class AH7AdventureHero** Hero );
	void UpdateFloating ( float DeltaTime );
	void eventInitAdventureObject ( );
	void eventPostSerialize ( );
	void UpdateProperties ( );
	void AddItem ( class UH7HeroItem* Item );
	TArray< class UH7HeroItem* > GetItems ( );
	bool IsLooted ( );
	struct FString GetFlashMinimapPath ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7RandomArtifact ( Property size: 8 iter: 20) 
// Class name index: 8148 
// 0x0020 (0x0454 - 0x0434)
class AH7RandomArtifact : public AH7ItemPile
{
public:
	struct FPointer                                    VfTable_IH7IRandomSpawnable;                      		// 0x0434 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mUseSpecificSet : 1;                              		// 0x043C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mMinorAllowed : 1;                                		// 0x043C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mMajorAllowed : 1;                                		// 0x043C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mRelicAllowed : 1;                                		// 0x043C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class UH7ItemSet*                                  mSpecificSet;                                     		// 0x0440 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7ItemPile*                                 mDefaultArtifactArchetype;                        		// 0x0448 (0x0008) [0x0000000000000000]              
	float                                              mAiUtilityValue;                                  		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3362 ];

		return pClassPointer;
	};

	void eventHatchRandomSpawnable ( );
	void HatchArtifact ( class UH7HeroItem* heroItem );
	class UH7HeroItem* GetRandomHeroItemFromSet ( class UH7ItemSet* specificSet );
	class UH7HeroItem* GetRandomHeroItemFromPool ( );
	void ResetGlobalList ( );
	void InitGlobalList ( );
	unsigned char GetFactionType ( );
	void SetFactionType ( unsigned char factionType );
	void SetRandomPlayerNumber ( unsigned char Number );
	void eventDisposeShell ( );
	class AH7AreaOfControlSite* GetSpawnedSite ( );
	class UH7Faction* eventGetChosenFaction ( );
};



// Class MMH7Game.H7Keymaster ( Property size: 2 iter: 6) 
// Class name index: 8150 
// 0x000C (0x0404 - 0x03F8)
class AH7Keymaster : public AH7VisitableSite
{
public:
	unsigned char                                      mKeyColor;                                        		// 0x03F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mVisitingSound;                                   		// 0x03FC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3364 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool HasVisited ( class AH7Player* dasPlayer );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool IsNeutral ( );
};



// Class MMH7Game.H7KeymasterGate ( Property size: 4 iter: 10) 
// Class name index: 8152 
// 0x0018 (0x0410 - 0x03F8)
class AH7KeymasterGate : public AH7VisitableSite
{
public:
	unsigned char                                      mKeyColor;                                        		// 0x03F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mUnlockedParticle;                                		// 0x03FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUnlocked : 1;                                    		// 0x0404 (0x0004) [0x0000000000000000] [0x00000001] 
	class UAkEvent*                                    mOnVisitSound;                                    		// 0x0408 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3366 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool CanUnlock ( class AH7Player* dasPlayer );
	bool CanPass ( class AH7Player* dasPlayer );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool IsNeutral ( );
};



// Class MMH7Game.H7NeutralSite ( Property size: 6 iter: 24) 
// Class name index: 8154 
// 0x002C (0x0424 - 0x03F8)
class AH7NeutralSite : public AH7VisitableSite
{
public:
	struct FPointer                                    VfTable_IH7IDefendable;                           		// 0x03F8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureArmy*                            mEditorArmy;                                      		// 0x0400 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnVisitSound;                                    		// 0x0408 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mHasMinimapIcon : 1;                              		// 0x0410 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0414 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mGuardingArmy;                                    		// 0x041C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3368 ];

		return pClassPointer;
	};

	struct FColor GetNotVisitedColor ( );
	struct FColor GetVisitedColor ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void SpawnGarrisonedArmy ( );
	void eventInitAdventureObject ( );
	bool SpendPickupCostsOnVisit ( class AH7AdventureHero* visitingHero );
	void RenderDebugInfo ( class UCanvas* myCanvas );
	class AH7VisitableSite* GetSite ( );
	void SetGarrisonArmy ( class AH7AdventureArmy* Army );
	bool IsNeutral ( );
	void SetGuardingArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetGuardingArmy ( );
	class AH7AdventureArmy* eventGetGarrisonArmy ( );
	struct FString GetFlashMinimapPath ( );
	class UTexture2D* GetMinimapIcon ( );
	bool GetHasMinimap ( );
	void SetArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetArmy ( );
};



// Class MMH7Game.H7ArcaneAcademy ( Property size: 4 iter: 18) 
// Class name index: 8156 
// 0x002C (0x0450 - 0x0424)
class AH7ArcaneAcademy : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x042C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mIsHidden : 1;                                    		// 0x043C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      mHeroesVisitedList;                               		// 0x0440 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3370 ];

		return pClassPointer;
	};

	void Reveal ( );
	void Hide ( );
	bool HasVisited ( class AH7AdventureHero* Hero );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool CanAffordTicket ( class AH7AdventureHero* Hero );
	bool CanNotImproveAnyMagicSkill ( class AH7AdventureHero* Hero );
	bool WillBenefitFromVisit ( class AH7AdventureHero* Hero );
	class UH7Skill* LearnRandomSkill ( class AH7AdventureHero* Hero );
	bool FulfillRequirements ( class AH7AdventureHero* Hero );
	void PayPrice ( );
	void Accept ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7ArcaneLibrary ( Property size: 12 iter: 27) 
// Class name index: 8158 
// 0x0058 (0x047C - 0x0424)
class AH7ArcaneLibrary : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsHidden : 1;                                    		// 0x042C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mUseCustomList : 1;                               		// 0x042C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mOnlyOneSpellPerSchool : 1;                       		// 0x042C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mSpellDefined : 1;                                		// 0x042C (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< class UH7BaseAbility* >                    mCustomAbilities;                                 		// 0x0430 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mRank;                                            		// 0x0440 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mNumberOfAbilities;                               		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseAbility* >                    mGlobalMapAbilities;                              		// 0x0448 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7BaseAbility* >                    mChosenAbilities;                                 		// 0x0458 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mRandomAbilityRoll;                               		// 0x0468 (0x0004) [0x0000000000000000]              
	TArray< int >                                      mHeroesVisitedList;                               		// 0x046C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3372 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	struct FString GetAbilityColor ( class AH7AdventureHero* Hero, class UH7BaseAbility* Ability );
	void GetLearnableAbilities ( class AH7AdventureHero* Hero, TArray< class UH7BaseAbility* >* learnableAbilities );
	void LearnTheAbility ( class AH7AdventureHero* Hero );
	bool CheckHeroAbilities ( class AH7AdventureHero* Hero );
	bool CheckSkillRequirements ( class AH7AdventureHero* Hero );
	bool WillBenefitFromVisit ( class AH7AdventureHero* Hero );
	bool HasVisited ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	void ChooseAbilities ( );
	void eventInitAdventureObject ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7BattleSite ( Property size: 26 iter: 57) 
// Class name index: 8160 
// 0x00F4 (0x0518 - 0x0424)
class AH7BattleSite : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIgnoredByAI : 1;                                 		// 0x042C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mWeeklyGrowth : 1;                                		// 0x042C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mUseCustomPosition : 1;                           		// 0x042C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mMultiHero : 1;                                   		// 0x042C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mDisableQuickCombat : 1;                          		// 0x042C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mCreateAmbush : 1;                                		// 0x042C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mGlobalItemList : 1;                              		// 0x042C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x042C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mIsVisited : 1;                                   		// 0x042C (0x0004) [0x0000000000000000] [0x00000100] 
	struct FString                                     mCombatMapName;                                   		// 0x0430 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mDescription;                                     		// 0x0440 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FH7BattleSiteArmySetupData >        mArmySetup;                                       		// 0x0450 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorWarUnit* >                  mWarUnitSetup;                                    		// 0x0460 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x0470 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mResourceReward;                                  		// 0x0480 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mItemReward;                                      		// 0x0490 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7RewardData >                     mRandomItemDefinition;                            		// 0x04A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mNumberofItemRewards;                             		// 0x04B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7MeModifiesStat >                 mStatModReward;                                   		// 0x04B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mVisitedArmies;                                   		// 0x04C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     mHeroMsgOffset;                                   		// 0x04D4 (0x000C) [0x0000000000000000]              
	class AH7AdventureArmy*                            mDefenderArmy;                                    		// 0x04E0 (0x0008) [0x0000000000000000]              
	TArray< class UH7HeroItem* >                       mItems;                                           		// 0x04E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mGlobalItemNumbers;                               		// 0x04F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mRandomItemRewards;                               		// 0x0508 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3374 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void OnLeave ( );
	bool WasLootedByCurrentHero ( );
	bool HasVisited ( class AH7AdventureHero* Hero );
	void GetStatModReward ( class AH7AdventureHero* Hero );
	void GetItemReward ( class AH7AdventureHero* Hero );
	void GetResourceReward ( class AH7AdventureHero* Hero );
	void GetReward ( class AH7AdventureHero* Hero );
	void WeeklyBattleSideArmyGrowth ( );
	void CreateDefenderAdventureArmy ( );
	void PayBattleSiteCosts ( class AH7AdventureHero* Hero );
	void OnCancel ( );
	void OnAccept ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	struct FString GetDescription ( );
	void eventInitAdventureObject ( );
	bool IsMultiHero ( );
	bool IsLooted ( );
	class AH7AdventureArmy* GetDefenderArmy ( );
	struct FString GetCombatMapName ( );
	bool IsLootableDefined ( );
	TArray< struct FH7MeModifiesStat > GetStatModRewardSetup ( );
	TArray< class UH7HeroItem* > GetItemRewardSetup ( );
	TArray< struct FH7ResourceQuantity > GetResourceRewardSetup ( );
	TArray< struct FH7ResourceQuantity > GetCostsSetup ( );
	TArray< struct FH7BattleSiteArmySetupData > GetArmySetup ( );
	bool GetIsIgnoredByAI ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7BlindBrotherMonastery ( Property size: 5 iter: 16) 
// Class name index: 8162 
// 0x003C (0x0460 - 0x0424)
class AH7BlindBrotherMonastery : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FH7ResourceQuantity                         mCost;                                            		// 0x042C (0x0018) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0444 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      mHeroesVisitedList;                               		// 0x0448 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7HeroAbility*                              mRandomlyChoosenAbility;                          		// 0x0458 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3376 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void AddRandomSkillAbility ( );
	void OnAccept ( );
	bool HasVisited ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	struct FH7ResourceQuantity GetCost ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7BuffSite ( Property size: 4 iter: 15) 
// Class name index: 8164 
// 0x0014 (0x0438 - 0x0424)
class AH7BuffSite : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7BaseAbility*                              mAbility;                                         		// 0x042C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mDisablePickupCosts : 1;                          		// 0x0434 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0434 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3378 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FColor GetColor ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extended );
	TArray< class UH7EffectContainer* > GetBuffArchetypes ( );
	bool HasAllBuffsFromHere ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool SpendPickupCostsOnVisit ( class AH7AdventureHero* visitingHero );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7Cartographer ( Property size: 5 iter: 15) 
// Class name index: 8166 
// 0x0030 (0x0454 - 0x0424)
class AH7Cartographer : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsHidden : 1;                                    		// 0x042C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x0430 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mType;                                            		// 0x0440 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            mRevealedPlayers;                                 		// 0x0444 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3380 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void RevealMap ( );
	void ConfirmRevealMap ( );
	void AlreadyVisited ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool HasVisited ( unsigned char PlayerNumber );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7DenOfThieves ( Property size: 6 iter: 18) 
// Class name index: 8168 
// 0x001C (0x0440 - 0x0424)
class AH7DenOfThieves : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mInstantSpyMissions;                              		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mInstantSpyMissionsRemaining;                     		// 0x0430 (0x0004) [0x0000000000000000]              
	class AH7Player*                                   mWeeklyOwner;                                     		// 0x0434 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsHidden : 1;                                    		// 0x043C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsVisited : 1;                                   		// 0x043C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3382 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void WeeklyReset ( );
	void OnLeave ( );
	void SpyUsed ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool IsHiddenX ( );
	int GetInstantSpyMissionRemaining ( );
	int GetInstantSpyMission ( );
};



// Class MMH7Game.H7DestructibleObjectManipulator ( Property size: 25 iter: 53) 
// Class name index: 8170 
// 0x00B8 (0x04DC - 0x0424)
class AH7DestructibleObjectManipulator : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class AH7GameplayFracturedMeshActor* >     mTargetObjects;                                   		// 0x042C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IDestructible* >                  mTargetDestructibles;                             		// 0x043C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x044C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mDestructionCosts;                                		// 0x045C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mRepairDuration;                                  		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDestroyDuration;                                 		// 0x0470 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mKeepMovementPointsOnDestroy : 1;                 		// 0x0474 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDisableRepair : 1;                               		// 0x0474 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mDisableCameraEvent : 1;                          		// 0x0474 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mIsDestroyed : 1;                                 		// 0x0474 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mManipulationInitiated : 1;                       		// 0x0474 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mIsDestroying : 1;                                		// 0x0474 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mIsRepairing : 1;                                 		// 0x0474 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mInformedGUI : 1;                                 		// 0x0474 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mHideRepairTooltip : 1;                           		// 0x0474 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      mHideDestroyTooltip : 1;                          		// 0x0474 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0474 (0x0004) [0x0000000000000000] [0x00000400] 
	int                                                mManipulationCounter;                             		// 0x0478 (0x0004) [0x0000000000000000]              
	TArray< class AH7DestructibleObjectManipulator* >  mManipulators;                                    		// 0x047C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TT_REPAIR_DESC;                                   		// 0x048C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TT_DESTROY_DESC;                                  		// 0x049C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TT_DESTROY;                                       		// 0x04AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TT_REPAIR;                                        		// 0x04BC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TT_TURNS;                                         		// 0x04CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3384 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	bool IsHiddenX ( );
	bool CanBeRepaired ( class AH7AdventureHero* Hero );
	bool CanBeDestroyed ( class AH7AdventureHero* Hero );
	class AH7DestructibleObjectManipulator* GetObjectByArmy ( class AH7AdventureArmy* Army );
	void AbortManipulation ( class AH7AdventureArmy* Army );
	void CountDownForAll ( );
	void AbortMyManipulation ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void StartDestructionOrReparationComplete ( );
	void StartDestructionOrReparation ( );
	void BeginCountDown ( );
	int GetProgressPercent ( );
	void ManipulateObjects ( );
	void Leave ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void RebuildStatus ( );
	void ViewObjects ( );
	void CountDown ( );
	void eventInitAdventureObject ( );
	void CheckHUD ( );
	void SetVisitingArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetVisitingArmy ( );
	bool IsManipulationInitiated ( );
	void AddDestructibleObjectByInterface ( class UH7IDestructible* Obj );
	void AddDestructibleObject ( class AH7GameplayFracturedMeshActor* Obj );
};



// Class MMH7Game.H7FortuneTeller ( Property size: 2 iter: 8) 
// Class name index: 8172 
// 0x000C (0x0430 - 0x0424)
class AH7FortuneTeller : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsHidden : 1;                                    		// 0x042C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3386 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7Merchant ( Property size: 9 iter: 29) 
// Class name index: 8174 
// 0x0060 (0x0484 - 0x0424)
class AH7Merchant : public AH7NeutralSite
{
public:
	struct FH7MultiRewardData                          mOfferData;                                       		// 0x0424 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mRefreshOffers;                                   		// 0x0434 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mEnableForbiddenItemTypeList : 1;                 		// 0x0438 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< unsigned char >                            mForbiddenItemType;                               		// 0x043C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mBuyPriceMultiplicator;                           		// 0x044C (0x0004) [0x0000000000000000]              
	float                                              mSellPriceMultiplicator;                          		// 0x0450 (0x0004) [0x0000000000000000]              
	TArray< int >                                      mItemRandValues;                                  		// 0x0454 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mCurrentItems;                                    		// 0x0464 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned long >                            mUniqueItemSold;                                  		// 0x0474 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3388 ];

		return pClassPointer;
	};

	float GetBaseStatByID ( unsigned char desiredStat );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat );
	float GetAddBoniOnStatByID ( unsigned char desiredStat );
	float GetModifiedStatByID ( unsigned char desiredStat );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void CheckForUniqueItem ( class UH7HeroItem* Item );
	class UH7HeroItem* BuyItemByID ( int Id );
	class UH7HeroItem* GetItemByID ( int Id );
	void OnVisit ( class AH7AdventureHero** Hero );
	TArray< class UH7HeroItem* > DefineItemTier ( unsigned char ItemTier );
	void SetCurrentItems ( );
	void eventInitAdventureObject ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char checkForOperation1, unsigned char checkForOperation2, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	unsigned char GetEntityType ( );
	float GetSellPriceMultiplicator ( );
	float GetBuyPriceMultiplicator ( );
	void SetSellPriceMultiplicator ( float val );
	void SetBuyPriceMultiplicator ( float val );
	TArray< class UH7HeroItem* > GetCurrentlyAvailableItems ( );
};



// Class MMH7Game.H7Observatory ( Property size: 5 iter: 20) 
// Class name index: 8176 
// 0x003C (0x0460 - 0x0424)
class AH7Observatory : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mRadius;                                          		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7ObservatoryHQ*                            mHeadquarters;                                    		// 0x0430 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsHidden : 1;                                    		// 0x0438 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                mRevealedForPlayer[ 0x9 ];                        		// 0x043C (0x0024) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3390 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	void FocusCameraHereAndReveal ( );
	void SetFocusAndRevealTimer ( float Time );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool IsRevealed ( unsigned char PlayerNumber );
	void RevealFog ( unsigned char PlayerNumber );
	void AlreadyVisited ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	class AH7ObservatoryHQ* GetHeadquarters ( );
	int GetRadius ( );
	class AH7ObservatoryHQ* GetHQ ( );
	void SetHQ ( class AH7ObservatoryHQ* hq );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7ObservatoryHQ ( Property size: 8 iter: 22) 
// Class name index: 8178 
// 0x006C (0x0490 - 0x0424)
class AH7ObservatoryHQ : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsHidden : 1;                                    		// 0x042C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class AH7Observatory* >                    mLinkedObservatories;                             		// 0x0430 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x0440 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mRevealTimer;                                     		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            mVisitedPlayers;                                  		// 0x0454 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mRevealedForPlayer[ 0x9 ];                        		// 0x0464 (0x0024) [0x0000000000000000]              
	class AH7AdventureHero*                            mLastHeroVisited;                                 		// 0x0488 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3392 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void FocusCameraHere ( );
	void SetCameraFocusTimersForReveal ( );
	bool CheckVisited ( );
	void ConfirmReveal ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool CanAffordIt ( class AH7Player* Player );
	bool IsRevealed ( unsigned char PlayerNumber );
	class AH7AdventureHero* GetLastHeroVisited ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7PermanentBonusSite ( Property size: 9 iter: 27) 
// Class name index: 8180 
// 0x0054 (0x0478 - 0x0424)
class AH7PermanentBonusSite : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7MeModifiesStat >                 mStatModifiers;                                   		// 0x042C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mIsHidden : 1;                                    		// 0x043C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mHeroDidReallyVisit : 1;                          		// 0x043C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mPlayerChoice;                                    		// 0x0440 (0x0004) [0x0000000000000000]              
	TArray< int >                                      mChoiceStatMod;                                   		// 0x0444 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mLvDepStatModNum;                                 		// 0x0454 (0x0004) [0x0000000000000000]              
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x0458 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mVisitedHeroes;                                   		// 0x0468 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3394 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FColor GetColor ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	int LevelDependantStatMod ( class AH7AdventureHero* Hero, TArray< struct FH7LevelScalingRange > LevelScalingStatModArray );
	void ChoiceTwo ( );
	void ChoiceOne ( );
	void Leave ( );
	void Buy ( );
	TArray< struct FH7ResourceQuantity > CalculateShrineOfSeventhDragonCosts ( class AH7AdventureHero* AdvHero, struct FH7MeModifiesStat StatMod );
	int CalculateShrineOfSeventhDragonReward ( class AH7AdventureHero* AdvHero );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool CanAffordIt ( class AH7AdventureHero* Hero );
	bool HasVisited ( class AH7AdventureHero* Hero );
	void eventInitAdventureObject ( );
	TArray< struct FH7MeModifiesStat > GetStatModifiers ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7RandomItemSite ( Property size: 10 iter: 21) 
// Class name index: 8182 
// 0x0048 (0x046C - 0x0424)
class AH7RandomItemSite : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7HeroItem*                                 mSpecificReward;                                  		// 0x042C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseBuff*                                 mBuff;                                            		// 0x0434 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mBuffDuration;                                    		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0440 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsChoosen : 1;                                   		// 0x0440 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsVisited : 1;                                   		// 0x0440 (0x0004) [0x0000000000000000] [0x00000004] 
	class UH7HeroItem*                                 mItemReward;                                      		// 0x0444 (0x0008) [0x0000000000000000]              
	struct FString                                     mItemRewardRef;                                   		// 0x044C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mVisitedHeroes;                                   		// 0x045C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3396 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void Leave ( );
	void AcceptComplete ( );
	void Accept ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void DefineItemReward ( );
	void eventInitAdventureObject ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7ResourceDepot ( Property size: 3 iter: 12) 
// Class name index: 8184 
// 0x0014 (0x0438 - 0x0424)
class AH7ResourceDepot : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7BaseAbility*                              mAbility;                                         		// 0x042C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0434 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3398 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool CanBeVisited ( );
	void AlreadyVisited ( class AH7AdventureHero* Hero );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7SchoolOfWar ( Property size: 4 iter: 19) 
// Class name index: 8186 
// 0x002C (0x0450 - 0x0424)
class AH7SchoolOfWar : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x042C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mIsHidden : 1;                                    		// 0x043C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      mHeroesVisitedList;                               		// 0x0440 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3400 ];

		return pClassPointer;
	};

	void Reveal ( );
	void Hide ( );
	bool HasUnskilledMightSkills ( class AH7AdventureHero* Hero );
	bool HasVisited ( class AH7AdventureHero* Hero );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool WillBenefitFromVisit ( class AH7AdventureHero* Hero );
	class UH7Skill* LearnRandomSkill ( class AH7AdventureHero* Hero );
	bool CanAffordTicket ( class AH7AdventureHero* Hero );
	bool FulfillRequirements ( class AH7AdventureHero* Hero );
	void Leave ( );
	void PayPrice ( );
	void Accept ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7Shelter ( Property size: 3 iter: 14) 
// Class name index: 8188 
// 0x0014 (0x0438 - 0x0424)
class AH7Shelter : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsHidden : 1;                                    		// 0x042C (0x0004) [0x0000000000000000] [0x00000001] 
	class AH7AdventureArmy*                            mShelteredArmy;                                   		// 0x0430 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3402 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void SetShelteredArmy ( class AH7AdventureArmy* Army );
	void ExpelArmy ( );
	void EnterShelter ( );
	bool IsUnoccupied ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7Shipyard ( Property size: 9 iter: 26) 
// Class name index: 8190 
// 0x003C (0x0460 - 0x0424)
class AH7Shipyard : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x042C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7Ship*                                     mShip;                                            		// 0x043C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   mSpawnOffset;                                     		// 0x0444 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USpriteComponent*                            mShipSpawnSprite;                                 		// 0x044C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UH7AdventureMapCell*                         mShipSpawnPosition;                               		// 0x0454 (0x0008) [0x0000000000000000]              
	unsigned long                                      mResourcesReady : 1;                              		// 0x045C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mFreeWaterTile : 1;                               		// 0x045C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsHidden : 1;                                    		// 0x045C (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3404 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void SetShipSpawnPosition ( );
	struct FVector GetShipPos ( );
	void Leave ( );
	void BuildComplete ( );
	void Build ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool WillBenefitFromVisit ( class AH7AdventureHero* Hero );
	bool CanPlaceShip ( );
	TArray< struct FH7ResourceQuantity > GetCosts ( );
	void eventInitAdventureObject ( );
	class UH7AdventureMapCell* GetShipSpawnPosition ( );
	struct FVector2D GetSpawnOffset ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7SignPostBuoy ( Property size: 6 iter: 14) 
// Class name index: 8192 
// 0x004C (0x0470 - 0x0424)
class AH7SignPostBuoy : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mHeadline;                                        		// 0x042C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mMessage;                                         		// 0x043C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      mIsHidden : 1;                                    		// 0x044C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     mHeadlineInst;                                    		// 0x0450 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mMessageInst;                                     		// 0x0460 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3406 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void OnVisit ( class AH7AdventureHero** Hero );
	struct FString GetMessage ( );
	struct FString GetHeadline ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7Teleporter ( Property size: 12 iter: 35) 
// Class name index: 8194 
// 0x0048 (0x046C - 0x0424)
class AH7Teleporter : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IDestructible;                         		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x042C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Teleporter*                               mTargetTeleporter;                                		// 0x0434 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mColor;                                           		// 0x043C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mTeleportParticle;                                		// 0x0440 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AH7DestructibleObjectManipulator* >  mManipulators;                                    		// 0x0448 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7AdventureMapCell*                         mTargetCell;                                      		// 0x0458 (0x0008) [0x0000000000000000]              
	class AH7AdventureGridManager*                     mGridManager;                                     		// 0x0460 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsDestroyed : 1;                                 		// 0x0468 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsDestroying : 1;                                		// 0x0468 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsRepairing : 1;                                 		// 0x0468 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsHidden : 1;                                    		// 0x0468 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3408 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool EnterTeleporterCheck ( class UH7AdventureMapCell* currentCell, class UH7AdventureMapCell* nextCell, unsigned long activateParticle, class AH7AdventureArmy* Army );
	void PlayTeleportParticle ( class AH7Teleporter* Target );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventDestroyed ( );
	bool IsBlockedByArmy ( class AH7Player* forPlayer );
	void eventInitAdventureObject ( );
	void ClearTargetTeleporter ( );
	class AH7Teleporter* GetTargetTeleporter ( );
	class UH7AdventureMapCell* GetTargetCell ( );
	TArray< class AH7DestructibleObjectManipulator* > GetManipulators ( );
	void SetRepairing ( unsigned long V );
	void SetDestroying ( unsigned long V );
	bool IsRepairing ( );
	bool IsDestroying ( );
	bool IsDestroyed ( );
	void RepairDestructibleObject ( );
	void DestroyDestructibleObject ( );
	void Reveal ( );
	void Hide ( );
	bool SpendPickupCostsOnVisit ( class AH7AdventureHero* visitingHero );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7DimensionChannel ( Property size: 1 iter: 4) 
// Class name index: 8196 
// 0x0008 (0x0474 - 0x046C)
class AH7DimensionChannel : public AH7Teleporter
{
public:
	class AH7DimensionChannelExit*                     mTargetDimensionChannelExit;                      		// 0x046C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3410 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void ClearTargetTeleporter ( );
	class AH7Teleporter* GetTargetTeleporter ( );
};



// Class MMH7Game.H7DimensionChannelExit ( Property size: 0 iter: 2) 
// Class name index: 8198 
// 0x0000 (0x046C - 0x046C)
class AH7DimensionChannelExit : public AH7Teleporter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3412 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	class AH7Teleporter* GetTargetTeleporter ( );
};



// Class MMH7Game.H7DimensionPortal ( Property size: 1 iter: 4) 
// Class name index: 8200 
// 0x0008 (0x0474 - 0x046C)
class AH7DimensionPortal : public AH7Teleporter
{
public:
	class AH7DimensionPortal*                          mTargetDimensionPortal;                           		// 0x046C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3414 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void ClearTargetTeleporter ( );
	class AH7Teleporter* GetTargetTeleporter ( );
};



// Class MMH7Game.H7Stairway ( Property size: 1 iter: 4) 
// Class name index: 8202 
// 0x0008 (0x0474 - 0x046C)
class AH7Stairway : public AH7Teleporter
{
public:
	class AH7Stairway*                                 mTargetStairway;                                  		// 0x046C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3416 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void ClearTargetTeleporter ( );
	class AH7Teleporter* GetTargetTeleporter ( );
};



// Class MMH7Game.H7Whirlpool ( Property size: 1 iter: 6) 
// Class name index: 8204 
// 0x0008 (0x0474 - 0x046C)
class AH7Whirlpool : public AH7Teleporter
{
public:
	class AH7Whirlpool*                                mTargetWhirlpool;                                 		// 0x046C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3418 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void SetVisibility ( unsigned long show );
	void ToggleVisibility ( );
	void ClearTargetTeleporter ( );
	class AH7Teleporter* GetTargetTeleporter ( );
};



// Class MMH7Game.H7TrainingGrounds ( Property size: 4 iter: 13) 
// Class name index: 8206 
// 0x0018 (0x043C - 0x0424)
class AH7TrainingGrounds : public AH7NeutralSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0424 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mUpgradeCostModifier;                             		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0430 (0x0004) [0x0000000000000000] [0x00000001] 
	class AH7AdventureArmy*                            mTrainingGroundsArmy;                             		// 0x0434 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3420 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void UpgradeUnitComplete ( int slotID, unsigned long isVisitingArmy, int Count );
	void UpgradeUnit ( int slotID, unsigned long isVisitingArmy, int Count );
	TArray< struct FH7ResourceQuantity > GetUpgradeInfo ( unsigned long isVisitingArmy, class UH7BaseCreatureStack* Creature, int slotID, class AH7AdventureArmy* remoteArmy, int* numOfUpgCreatures, TArray< struct FH7ResourceQuantity >* singleUpgCost );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7Obelisk ( Property size: 1 iter: 8) 
// Class name index: 8208 
// 0x0008 (0x0400 - 0x03F8)
class AH7Obelisk : public AH7VisitableSite
{
public:
	class UAkEvent*                                    mVisitingSound;                                   		// 0x03F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3422 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	bool HasVisited ( class AH7Player* dasPlayer );
	int GetPiecesRevealedForNextVisit ( class AH7Player* dasPlayer );
	int GetPiecesRevealed ( class AH7Player* dasPlayer, unsigned long forecast );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	bool IsNeutral ( );
};



// Class MMH7Game.H7ResourcePile ( Property size: 13 iter: 49) 
// Class name index: 8210 
// 0x0048 (0x0440 - 0x03F8)
class AH7ResourcePile : public AH7VisitableSite
{
public:
	struct FPointer                                    VfTable_IH7IPickable;                             		// 0x03F8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0400 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7ResourceQuantity >               mResourceGains;                                   		// 0x0408 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mExp;                                             		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsChest : 1;                                     		// 0x041C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUseContainerMesh : 1;                            		// 0x041C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mLooted : 1;                                      		// 0x041C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsHidden : 1;                                    		// 0x041C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mUseRandom : 1;                                   		// 0x041C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class UH7Resource*                                 mContainerResource;                               		// 0x0420 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnPickUpSound;                                   		// 0x0428 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnGainXPSound;                                   		// 0x0430 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPopUpRequestSound;                               		// 0x0438 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3424 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void LocalizeCustomName ( );
	struct FString GetCustomName ( );
	struct FString GetName ( );
	void Reveal ( );
	void Hide ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	int GetGoldGain ( class AH7Player* looterPlayer, unsigned long modified );
	struct FString GetModifierString ( class AH7Player* looterPlayer );
	void DestroySecure ( );
	void Pickup ( class AH7AdventureHero* lootingHero, unsigned char lootType, unsigned long doMultiplayerSynchro );
	void ClosePopupChosen ( );
	void PickUpXPChosen ( );
	void PickUpGoldChosen ( );
	void PickUpRequested ( );
	void PickUpGold ( class AH7AdventureHero* Hero );
	void PickUpXP ( class AH7AdventureHero* Hero );
	TArray< int > GetResourceAmounts ( );
	TArray< class UH7Resource* > GetResources ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	int GetExp ( );
	bool isChest ( );
	void SetXp ( int XP );
	void SetIsChest ( unsigned long isChest );
	bool SpendPickupCostsOnVisit ( class AH7AdventureHero* visitingHero );
	bool IsLooted ( );
	class UAkEvent* GetPickUpSound ( );
	class UAkEvent* GetGainXPSound ( );
	void SetContainerResource ( class UH7Resource* Resource );
	class UH7Resource* GetContainerResource ( );
	void SetUseContainerMesh ( unsigned long UseContainerMesh );
	bool UseContainerMesh ( );
	void AddResource ( class UH7Resource* Resource, int Quantity );
	void UpdateProperties ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7RandomResource ( Property size: 9 iter: 23) 
// Class name index: 8212 
// 0x0038 (0x0478 - 0x0440)
class AH7RandomResource : public AH7ResourcePile
{
public:
	struct FPointer                                    VfTable_IH7IRandomSpawnable;                      		// 0x0440 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UH7Resource* >                       mAllowedResources;                                		// 0x0448 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mMinimalBonus;                                    		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaximalBonus;                                    		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mGoldRoundValue;                                  		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinimalGoldBonus;                                		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaximalGoldBonus;                                		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mAiUtilityValue;                                  		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7Resource*                                 mCurrencyResource;                                		// 0x0470 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3426 ];

		return pClassPointer;
	};

	void UpdatePileMeshes ( class AH7ResourcePile* resourcePile );
	void SetFactionType ( unsigned char factionType );
	void SetRandomPlayerNumber ( unsigned char Number );
	class AH7AreaOfControlSite* GetSpawnedSite ( );
	class UH7Faction* eventGetChosenFaction ( );
	void eventDisposeShell ( );
	void eventHatchRandomSpawnable ( );
	void HatchResource ( );
	void HatchRandomResource ( );
	int GetRandomGoldAmount ( );
	int GetRandomAmount ( );
	class UH7Resource* GetRandomResource ( );
	void InitCurrencyResource ( );
	unsigned char GetFactionType ( );
};



// Class MMH7Game.H7PickableRandomResource ( Property size: 7 iter: 7) 
// Class name index: 8214 
// 0x0004 (0x047C - 0x0478)
class AH7PickableRandomResource : public AH7RandomResource
{
public:
	unsigned long                                      mGold : 1;                                        		// 0x0478 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mWood : 1;                                        		// 0x0478 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mOre : 1;                                         		// 0x0478 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mDragonBloodCrystal : 1;                          		// 0x0478 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mDragonSteel : 1;                                 		// 0x0478 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mShadowSteel : 1;                                 		// 0x0478 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mStarSilver : 1;                                  		// 0x0478 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3428 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RandomCampfire ( Property size: 5 iter: 7) 
// Class name index: 8216 
// 0x002C (0x04A4 - 0x0478)
class AH7RandomCampfire : public AH7RandomResource
{
public:
	TArray< class UH7Resource* >                       mCampfireResources;                               		// 0x0478 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7Resource* >                       mCampfireRareResources;                           		// 0x0488 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mMinimalRareBonus;                                		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaximalRareBonus;                                		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mRareResourceChance;                              		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3430 ];

		return pClassPointer;
	};

	int GetRandomRareAmount ( );
	void HatchRandomResource ( );
};



// Class MMH7Game.H7PickableCampfire ( Property size: 0 iter: 0) 
// Class name index: 8218 
// 0x0000 (0x04A4 - 0x04A4)
class AH7PickableCampfire : public AH7RandomCampfire
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3432 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RandomTreasureChest ( Property size: 1 iter: 4) 
// Class name index: 8220 
// 0x0010 (0x0488 - 0x0478)
class AH7RandomTreasureChest : public AH7RandomResource
{
public:
	TArray< struct FH7TreasureChestRewards >           mChestRewards;                                    		// 0x0478 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3434 ];

		return pClassPointer;
	};

	void HatchRandomResource ( );
	struct FH7TreasureChestRewards GetRandomReward ( );
};



// Class MMH7Game.H7PickableChest ( Property size: 1 iter: 1) 
// Class name index: 8222 
// 0x0018 (0x04A0 - 0x0488)
class AH7PickableChest : public AH7RandomTreasureChest
{
public:
	struct FH7TreasureChestRewards                     mSetups[ 0x3 ];                                   		// 0x0488 (0x0018) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3436 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7Ship ( Property size: 10 iter: 29) 
// Class name index: 8224 
// 0x0050 (0x0448 - 0x03F8)
class AH7Ship : public AH7VisitableSite
{
public:
	struct FPointer                                    VfTable_IH7DynGridObjInterface;                   		// 0x03F8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0400 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UStaticMeshComponent*                        mSailMesh1;                                       		// 0x0408 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        mSailMesh2;                                       		// 0x0410 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AH7Player*                                   mPlayer;                                          		// 0x0418 (0x0008) [0x0000000000000000]              
	unsigned char                                      mPlayerNumber;                                    		// 0x0420 (0x0001) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0424 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsHidden : 1;                                    		// 0x042C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     mSaveLocation;                                    		// 0x0430 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mSaveRotation;                                    		// 0x043C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3438 ];

		return pClassPointer;
	};

	bool IsHiddenX ( );
	void Reveal ( );
	void Hide ( );
	void eventPostSerialize ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void SetVisibility ( unsigned long show );
	void ToggleVisibility ( );
	void eventInitAdventureObject ( );
	struct FColor GetColor ( );
	void SetPlayer ( class AH7Player* Player );
	void OnVisit ( class AH7AdventureHero** Hero );
	bool IsH7Hidden ( );
	struct FString GetFlashMinimapPath ( );
	unsigned char GetPlayerNumber ( );
	class AH7Player* GetPlayer ( );
	class AH7AdventureArmy* GetArmy ( );
	void SetArmy ( class AH7AdventureArmy* Army );
	class UH7AdventureMapCell* GetEntranceCell ( );
};



// Class MMH7Game.H7VisitingShell ( Property size: 9 iter: 21) 
// Class name index: 8226 
// 0x0064 (0x045C - 0x03F8)
class AH7VisitingShell : public AH7VisitableSite
{
public:
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x03F8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0400 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsActive : 1;                                    		// 0x0400 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UStaticMesh*                                 mAppearance;                                      		// 0x0404 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mDescription;                                     		// 0x040C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mDescriptionInactive;                             		// 0x041C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UH7IProgressable*                            mProgressable;                                    		// 0x042C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0434 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FString                                     mDescriptionInst;                                 		// 0x043C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mDescriptionInactiveInst;                         		// 0x044C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3440 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	void Reveal ( );
	void Hide ( );
	struct FString GetDescriptionInactive ( );
	struct FString GetDescription ( );
	void SetActive ( unsigned long val );
	bool IsActive ( );
	void OnTerrainChange ( class ULandscapeLayerInfoObject* newLayer, class ALandscapeProxy* newLandscape );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7Area ( Property size: 6 iter: 7) 
// Class name index: 8228 
// 0x002C (0x0310 - 0x02E4)
class AH7Area : public AH7EditorMapObject
{
public:
	struct FString                                     mName;                                            		// 0x02E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mSizeX;                                           		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSizeY;                                           		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSizeZ;                                           		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawBoxComponent*                           mPreviewBox;                                      		// 0x0300 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        mPreviewStaticMeshComponent;                      		// 0x0308 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3442 ];

		return pClassPointer;
	};

	bool IsInside ( struct FVector Loc );
};



// Class MMH7Game.H7CombatObstacleObject ( Property size: 29 iter: 89) 
// Class name index: 8230 
// 0x00BC (0x03A0 - 0x02E4)
class AH7CombatObstacleObject : public AH7EditorMapObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x02E4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x02EC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x02F4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mShowPreviewBox : 1;                              		// 0x02FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDestructible : 1;                                		// 0x02FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mRemoveWhenDestroyed : 1;                         		// 0x02FC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mApplyCover : 1;                                  		// 0x02FC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIsSiegeMachineTarget : 1;                        		// 0x02FC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mOnlySpawnIfMoats : 1;                            		// 0x02FC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mIsHovering : 1;                                  		// 0x02FC (0x0004) [0x0000000000000000] [0x00000040] 
	class UDrawBoxComponent*                           mPreviewBox;                                      		// 0x0300 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     mObstacleName;                                    		// 0x0308 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                mBaseSizeX;                                       		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mBaseSizeY;                                       		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mType;                                            		// 0x0320 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mHitpoints;                                       		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseAbility* >                    mAbilities;                                       		// 0x0328 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mObstacleNameInst;                                		// 0x0338 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mCurrentHitpoints;                                		// 0x0348 (0x0004) [0x0000000000000000]              
	struct FIntPoint                                   mGridPos;                                         		// 0x034C (0x0008) [0x0000000000000000]              
	int                                                Mid;                                              		// 0x0354 (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           mCorners;                                         		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7BuffManager*                              mBuffManager;                                     		// 0x0368 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x0370 (0x0008) [0x0000000000000000]              
	class UH7EffectManager*                            mEffectManager;                                   		// 0x0378 (0x0008) [0x0000000000000000]              
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x0380 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mDestroySound;                                    		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mHitSound;                                        		// 0x0390 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mIdleSound;                                       		// 0x0398 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3444 ];

		return pClassPointer;
	};

	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	TArray< struct FVector > GetCorners ( );
	TArray< class UH7CombatMapCell* > eventGetCells ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	void DehighlightObstacle ( );
	void HighlightObstacle ( );
	float GetHeight ( );
	struct FVector GetHeightPos ( float Offset );
	struct FVector GetMeshCenter ( );
	void DataChanged ( struct FString caller );
	unsigned char GetLevel ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void SetAbilities ( TArray< class UH7BaseAbility* > Abilities );
	class AH7CombatObstacleObject* PlaceObstacle ( struct FH7SiegeTownData siegeTownData, struct FVector SpawnLocation );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void Init ( );
	void LocalizeName ( );
	struct FString GetName ( );
	unsigned char GetEntityType ( );
	bool IsSiegeMachineTarget ( );
	bool eventIsApplyCover ( );
	class UStaticMeshComponent* GetMeshComponent ( );
	int GetID ( );
	struct FIntPoint GetGridPos ( );
	void SetGridPos ( struct FIntPoint gp );
	void SetIsHovering ( unsigned long isHovering );
	bool isHovering ( );
	void ModifyHitpoints ( int modval );
	int GetHitPoints ( );
	int GetMaxHitpoints ( );
	bool IsDestructible ( );
	unsigned char GetObstacleType ( );
	void SetDestructible ( unsigned long val );
	int GetObstacleBaseSizeY ( );
	int GetObstacleBaseSizeX ( );
	class UH7ICaster* GetOriginal ( );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	struct FVector GetProjectileImpactPos ( );
	class UH7BaseAbility* GetPreparedAbility ( );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	bool IsDefaultAttackActive ( );
	struct FVector GetLocation ( );
	class AH7CombatArmy* GetCombatArmy ( );
	class AH7Player* GetPlayer ( );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	struct FIntPoint GetGridPosition ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
};



// Class MMH7Game.H7CombatMapMoat ( Property size: 0 iter: 2) 
// Class name index: 8232 
// 0x0000 (0x03A0 - 0x03A0)
class AH7CombatMapMoat : public AH7CombatObstacleObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3446 ];

		return pClassPointer;
	};

	class AH7CombatObstacleObject* PlaceObstacle ( struct FH7SiegeTownData siegeTownData, struct FVector SpawnLocation );
	class AH7Player* GetPlayer ( );
};



// Class MMH7Game.H7CombatObstacleFracturedObject ( Property size: 8 iter: 16) 
// Class name index: 8234 
// 0x0038 (0x03D8 - 0x03A0)
class AH7CombatObstacleFracturedObject : public AH7CombatObstacleObject
{
public:
	class AFracturedStaticMeshActor_Spawnable*         mFracturedStaticMeshArchetype;                    		// 0x03A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mFallingPiecesFXArchetype;                        		// 0x03A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    mFallingPiecesFX;                                 		// 0x03B0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AFracturedStaticMeshActor_Spawnable*         mSpawnedFracturedMeshActor;                       		// 0x03B8 (0x0008) [0x0000000000000000]              
	struct FVector                                     mLastImpactPos;                                   		// 0x03C0 (0x000C) [0x0000000000000000]              
	float                                              mImpulseStrength;                                 		// 0x03CC (0x0004) [0x0000000000000000]              
	float                                              mImpulseRadiusNormal;                             		// 0x03D0 (0x0004) [0x0000000000000000]              
	float                                              mImpulseRadiusDestroyed;                          		// 0x03D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3448 ];

		return pClassPointer;
	};

	void RemoveTopPieces ( );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	struct FVector GetProjectileImpactPos ( );
	void SetVisibility ( unsigned long show );
	void ToggleVisibility ( );
	float GetHeight ( );
	struct FVector GetHeightPos ( float Offset );
	void Init ( );
};



// Class MMH7Game.H7CombatMapGate ( Property size: 18 iter: 32) 
// Class name index: 8236 
// 0x007C (0x0454 - 0x03D8)
class AH7CombatMapGate : public AH7CombatObstacleFracturedObject
{
public:
	class UParticleSystem*                             mGateFX;                                          		// 0x03D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mDamagedGateFX;                                   		// 0x03E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mDestroyedGateFX;                                 		// 0x03E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7FracturedMeshActor*                       mFracturedStaticMeshArchetypeLeft;                		// 0x03F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mLeftGateOffset;                                  		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7FracturedMeshActor*                       mFracturedStaticMeshArchetypeRight;               		// 0x03FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mRightGateOffset;                                 		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mGateOpen;                                        		// 0x0408 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mGateClose;                                       		// 0x0410 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    mCurrentGateFX;                                   		// 0x0418 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AH7FracturedMeshActor*                       mFracturedStaticMeshLeft;                         		// 0x0420 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7FracturedMeshActor*                       mFracturedStaticMeshRight;                        		// 0x0428 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mLerpTimer;                                       		// 0x0430 (0x0004) [0x0000000000000000]              
	struct FRotator                                    mTargetRotLeft;                                   		// 0x0434 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mTargetRotRight;                                  		// 0x0440 (0x000C) [0x0000000000000000]              
	unsigned long                                      mIsOpening : 1;                                   		// 0x044C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsClosing : 1;                                   		// 0x044C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mHitsTaken;                                       		// 0x0450 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3450 ];

		return pClassPointer;
	};

	void CheckDeadStacks ( unsigned long opening );
	void TryCloseGate ( );
	void TryOpenGate ( );
	struct FVector GetProjectileImpactPos ( );
	void eventDestroyed ( );
	void ModifyHitpoints ( int modval );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	class AH7CombatObstacleObject* PlaceObstacle ( struct FH7SiegeTownData siegeTownData, struct FVector SpawnLocation );
	void eventPostBeginPlay ( );
	class AH7FracturedMeshActor* GetFracturedStaticMeshRight ( );
	class AH7FracturedMeshActor* GetFracturedStaticMeshLeft ( );
};



// Class MMH7Game.H7CombatMapWall ( Property size: 0 iter: 2) 
// Class name index: 8238 
// 0x0000 (0x03D8 - 0x03D8)
class AH7CombatMapWall : public AH7CombatObstacleFracturedObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3452 ];

		return pClassPointer;
	};

	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	class AH7CombatObstacleObject* PlaceObstacle ( struct FH7SiegeTownData siegeTownData, struct FVector SpawnLocation );
};



// Class MMH7Game.H7EditorArmy ( Property size: 29 iter: 122) 
// Class name index: 8240 
// 0x00B0 (0x0394 - 0x02E4)
class AH7EditorArmy : public AH7EditorMapObject
{
public:
	struct FPointer                                    VfTable_IH7DynGridObjInterface;                   		// 0x02E4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IOwnable;                              		// 0x02EC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x02F4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mCustomizeHeroArchetype : 1;                      		// 0x02FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDisableFleeSurrender : 1;                        		// 0x02FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mIsAmbush : 1;                                    		// 0x02FC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mIsNPC : 1;                                       		// 0x02FC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIsTalking : 1;                                   		// 0x02FC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mForceManualCombat : 1;                           		// 0x02FC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mIsStarterHero : 1;                               		// 0x02FC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mUseXPStrength : 1;                               		// 0x02FC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      mOnlyDynamicLights : 1;                           		// 0x02FC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      mAiIsBorderControl : 1;                           		// 0x02FC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	class AH7EditorHero*                               mHeroArchetype;                                   		// 0x0300 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCreatureStackProperties >          mCreatureStackProperties;                         		// 0x0308 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorWarUnit* >                  mWarUnitTemplates;                                		// 0x0318 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                cMaxArmySize;                                     		// 0x0328 (0x0004) [0x0000000000024001]              ( CPF_Edit | CPF_Config | CPF_EditConst )
	unsigned char                                      mPlayerNumber;                                    		// 0x032C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      mHorseMesh;                                       		// 0x0330 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        mWeaponMesh;                                      		// 0x0338 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mWeaponSkMesh;                                    		// 0x0340 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          mEmitterPoolParticleComps;                        		// 0x0348 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class USkeletalMesh*                               mLlamaMesh;                                       		// 0x0358 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    mLlamaAnims;                                      		// 0x0360 (0x0008) [0x0000000000000000]              
	TArray< class UH7BaseCreatureStack* >              mBaseCreatureStacks;                              		// 0x0368 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Deployment*                               mDeployment;                                      		// 0x0378 (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mPlayer;                                          		// 0x0380 (0x0008) [0x0000000000000000]              
	class AH7EditorWarUnit*                            mSiegeUnit;                                       		// 0x0388 (0x0008) [0x0000000000000000]              
	int                                                mXPStrength;                                      		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3454 ];

		return pClassPointer;
	};

	void PrintStateToLog ( struct FString armyName );
	void eventCleanupEmitterPools ( );
	void RecyclePooledEmitter ( class UParticleSystemComponent* PSC );
	void OnPooledAttachedParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void AllocatePooledEmitter ( class UParticleSystemComponent* PSC );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	bool eventUseLlamaMesh ( );
	int GetRandomCreatureStackSize ( class AH7Creature* Creature, float xpToUse );
	void InitRandomValues ( );
	bool SplitCreatureStackToEmptySlotComplete ( class AH7EditorArmy* sourceArmy, class AH7EditorArmy* altArmy, int indexSource, int splitCount, unsigned long forceTransferToTargetArmy, int* TargetIndex );
	void SplitCreatureStackToEmptySlot ( class AH7EditorArmy* sourceArmy, class AH7EditorArmy* targetArmy, int SourceIndex, int splitCount, int TargetIndex, unsigned long forceTransferToTargetArmy );
	bool TransferCreatureStacksByArmyComplete ( class AH7EditorArmy* sourceArmy, class AH7EditorArmy* targetArmy, int indexSource, int indexTarget, int splitAmount );
	void TransferCreatureStacksByArmy ( class AH7EditorArmy* requesterArmy, class AH7EditorArmy* sourceArmy, class AH7EditorArmy* targetArmy, int indexSource, int indexTarget, int splitAmount, unsigned long forceTransferToTargetArmy );
	float GetHeroStrengthValue ( int HeroLevel );
	float GetStrengthValue ( unsigned long withHero, TArray< class UH7BaseCreatureStack* > additionalStacks );
	int GetIndexOfStack ( class UH7BaseCreatureStack* compareStack );
	class UH7BaseCreatureStack* GetStackByIDString ( struct FString creatureName );
	class UH7BaseCreatureStack* GetStackByName ( struct FString creatureName );
	bool CheckFreeArmySlot ( );
	float GetCreaturePropertyStrength ( struct FCreatureStackProperties stackProperty );
	class AH7Creature* GetStrongestPropertyCreature ( );
	class AH7Creature* GetStrongestCreature ( );
	void CacheAnimNodes ( );
	int GetCreatureAmountOfTier ( unsigned char Tier );
	int GetCreatureAmountTotal ( );
	int GetCreatureAmount ( class AH7Creature* Creature );
	void PruneStackProperties ( );
	void CreateBaseCreatureStack ( );
	struct FCreatureStackProperties CreateStackPropertyFromBase ( class UH7BaseCreatureStack* Stack );
	void CreateCreatureStackProperies ( );
	void SyncBaseStackStartingSizeToCurrentSize ( );
	void eventInit ( class AH7Player* PlayerOwner, class UH7AdventureMapCell* StartPos, struct FVector garrisonLocation, unsigned long pruneStacks );
	void eventPostBeginPlay ( );
	void SetCell ( class UH7AdventureMapCell* newCellPos, unsigned long updateHeroWorldLocation, unsigned long registerCell, unsigned long isInit );
	void PostCreateHero ( );
	void CreateHero ( struct FSavegameHeroStruct SaveGameData );
	class AH7CombatArmy* CreateCombatArmyUsingAdventureArmy ( class AH7AdventureArmy* Army, unsigned long IsAttacker, unsigned long isForQuickCombat );
	int GetExperienceForDefeating ( );
	class AH7CombatArmy* CreateCombatArmy ( );
	int PutCreatureStackToEmptySlot ( class UH7BaseCreatureStack* Stack );
	void OverrideDeploymentFromBaseStacks ( unsigned long markAllStacksAsUndeployed );
	int GetNumberOfFilledSlots ( );
	float GetHeroPower ( );
	void SetBaseCreatureStacks ( TArray< class UH7BaseCreatureStack* > stacks );
	void SetBaseCreatureStacksToCopy ( TArray< class UH7BaseCreatureStack* > stacks );
	bool HasHybridWarUnit ( );
	void RemoveWarUnit ( class AH7EditorWarUnit* warUnit );
	void AddWarUnit ( class AH7EditorWarUnit* warUnit );
	class AH7EditorWarUnit* GetWarUnitByType ( unsigned char unitClass );
	bool HasWarUnitType ( unsigned char unitClass );
	void SetAiIsBorderControl ( unsigned long Enable );
	bool GetAiIsBorderControl ( );
	class AH7EditorHero* GetEditorHero ( );
	unsigned char GetPlayerNumber ( );
	void AddWarUnitTemplate ( class AH7EditorWarUnit* warUnit );
	void SetWarUnitTemplates ( TArray< class AH7EditorWarUnit* > warUnitTemplates );
	TArray< class AH7EditorWarUnit* > GetWarUnitTemplates ( );
	void AddCreatureStack ( class UH7BaseCreatureStack* Stack, unsigned long isInit );
	void InsertCreatureStack ( int Index, class UH7BaseCreatureStack* Stack );
	void SetDeployment ( class UH7Deployment* Value );
	class UH7Deployment* GetDeployment ( );
	class AH7EditorHero* eventGetHeroTemplateSource ( );
	class AH7EditorHero* GetHeroTemplate ( );
	void SetHeroTemplate ( class AH7EditorHero* Hero );
	void SetPlayer ( class AH7Player* NewPlayer );
	class AH7Player* GetPlayer ( );
	int eventGetNumberOfMeleeStacks ( );
	TArray< class UH7BaseCreatureStack* > GetBaseCreatureStacksDereferenced ( );
	void EnsureBaseStackSlotExistence ( int Index );
	int GetBaseCreatureStackLength ( );
	class UH7BaseCreatureStack* GetBaseStackBySourceSlotId ( int Id );
	TArray< class UH7BaseCreatureStack* > GetBaseCreatureStacks ( );
	int GetBaseCreatureStackIndex ( class UH7BaseCreatureStack* Stack );
	int GetMaxArmySize ( );
	void ClearCreatureStackProperties ( );
	TArray< struct FCreatureStackProperties > GetCreatureStackProperties ( );
	void SetCreatureStackProperties ( TArray< struct FCreatureStackProperties > stackProperties );
	void SetArmyIsAmbush ( unsigned long Value );
	void SetForcingManualCombat ( unsigned long Value );
	bool IsForcingManualCombat ( );
	void SetTalking ( unsigned long IsTalking );
	void SetNPC ( unsigned long IsNPC );
	bool IsTalking ( );
	bool IsNPC ( );
	bool CanFleeOrSurrender ( );
	void SetStarterHero ( unsigned long NewValue );
	bool IsStarterHero ( );
	void CleanComponents ( );
	void UpdateWeaponAttachments ( );
	void UpdateMeshes ( class AH7Creature* Creature );
	void LoadMeshes ( unsigned long useStrongestCreature );
	void ClearMeshData ( );
};



// Class MMH7Game.H7AdventureArmy ( Property size: 46 iter: 216) 
// Class name index: 8242 
// 0x0314 (0x06A8 - 0x0394)
class AH7AdventureArmy : public AH7EditorArmy
{
public:
	struct FPointer                                    VfTable_IH7IQuestTarget;                          		// 0x0394 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IStackContainer;                       		// 0x039C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ILocaParamizable;                      		// 0x03A4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mName;                                            		// 0x03AC (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      mUseCustomName : 1;                               		// 0x03BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsCustomNameAvailable : 1;                       		// 0x03BC (0x0004) [0x0000000000022000] [0x00000002] ( CPF_Transient | CPF_EditConst )
	unsigned long                                      mIsHidden : 1;                                    		// 0x03BC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mReachabilityCheckDone : 1;                       		// 0x03BC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mIsAttacker : 1;                                  		// 0x03BC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mIsDefender : 1;                                  		// 0x03BC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mLocked : 1;                                      		// 0x03BC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mIsDead : 1;                                      		// 0x03BC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mIsInCombat : 1;                                  		// 0x03BC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mIsBeingRemoved : 1;                              		// 0x03BC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mSuppressCritterGrowth : 1;                       		// 0x03BC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      mIsChilling : 1;                                  		// 0x03BC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mAiOnIgnore : 1;                                  		// 0x03BC (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	struct FString                                     mCustomNameInst;                                  		// 0x03C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UH7AdventureMapCell*                         mCell;                                            		// 0x03D0 (0x0008) [0x0000000000000000]              
	class AH7VisitableSite*                            mGarrisonedSite;                                  		// 0x03D8 (0x0008) [0x0000000000000000]              
	struct FAdventureMapCellCoords                     mCellCoords;                                      		// 0x03E0 (0x000C) [0x0000000000000000]              
	struct FString                                     mHeroArchetypeReference;                          		// 0x03EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRotator                                    mSaveRotation;                                    		// 0x03FC (0x000C) [0x0000000000000000]              
	struct FSavegameHeroStruct                         mHeroStruct;                                      		// 0x0408 (0x01B0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7AdventureMapCell* >               mDangerCells;                                     		// 0x05B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mReachableSites;                                  		// 0x05C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mReachableArmies;                                 		// 0x05D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mReachableSitesDistances;                         		// 0x05E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mReachableArmiesDistances;                        		// 0x05F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureHero*                            mHero;                                            		// 0x0608 (0x0008) [0x0000000000000000]              
	class AH7Ship*                                     mShip;                                            		// 0x0610 (0x0008) [0x0000000000000000]              
	class AH7VisitableSite*                            mVisitableSite;                                   		// 0x0618 (0x0008) [0x0000000000000000]              
	class AH7Flag*                                     mFlag;                                            		// 0x0620 (0x0008) [0x0000000000000000]              
	int                                                mNumTimesAlreadyRetreated;                        		// 0x0628 (0x0004) [0x0000000000000000]              
	int                                                mGrowthOverwrite;                                 		// 0x062C (0x0004) [0x0000000000000000]              
	TArray< struct FNegotiationData >                  mNegotiatedArmies;                                		// 0x0630 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7HeroEventParam*                           mHeroEventParam;                                  		// 0x0640 (0x0008) [0x0000000000000000]              
	class UH7PlayerEventParam*                         mPlayerEventParam;                                		// 0x0648 (0x0008) [0x0000000000000000]              
	unsigned char                                      mDiplomaticDisposition;                           		// 0x0650 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            mDispositionTowardsPlayers;                       		// 0x0654 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7BaseCreatureStack* >              mTempStackArray;                                  		// 0x0664 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7MergePool >                      mMergePools;                                      		// 0x0674 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mAiStayInAoC;                                     		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    mAiTension;                                       		// 0x0688 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7ResourceSet*                              mAIReplenishResouceStash;                         		// 0x0698 (0x0008) [0x0000000000000000]              
	class AH7Flag*                                     mQuestFlag;                                       		// 0x06A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3456 ];

		return pClassPointer;
	};

	void DumpCurrentState ( );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	TArray< class AH7EditorWarUnit* > GetWarUnitKillListWhenBuying ( unsigned long attackHybrid, class AH7Town* Town );
	void EnableAdventureIdleBridge ( );
	int SortStackPoolByCreaturePower ( class UH7BaseCreatureStack* A, class UH7BaseCreatureStack* B );
	int SortStackPoolMerge ( class UH7BaseCreatureStack* A, class UH7BaseCreatureStack* B );
	void MergeArmiesAIComplete ( class AH7AdventureArmy* receivingArmy, int Threshold );
	void MergeArmiesAI ( class AH7AdventureArmy* receivingArmy );
	void HandleAddToMap ( );
	int CreateMergePool ( struct FString PoolKey );
	int GetMergePoolIndex ( struct FString PoolKey );
	void UpdateMergePool ( struct FString PoolKey, TArray< class UH7BaseCreatureStack* > PoolStacks );
	int GetPoolCount ( );
	struct FH7MergePool GetAMergePool ( );
	void DeleteMergePool ( struct FString PoolKey );
	void CleanAllCombatMergePools ( );
	void AddStackToMergePool ( class UH7BaseCreatureStack* addedStack, struct FString PoolKey );
	bool CanRetreat ( );
	void JoinArmyComplete ( class AH7AdventureArmy* armyJoiner, unsigned long join, unsigned long canMerge );
	void JoinArmy ( class AH7AdventureArmy* armyJoiner, unsigned long join, unsigned long canMerge );
	float GetHeroPower ( );
	bool IsAllyOf ( class AH7Player* ply );
	bool IsEnemyOf ( class AH7Player* ply );
	void SortArmyListByStrength ( TArray< class AH7AdventureArmy* >* alist );
	void RemoveArmyAfterCombat ( );
	void StartRemoveEffect ( );
	TArray< class UH7BaseCreatureStack* > GetBaseCreatureStacksAfterCombat ( class AH7CombatArmy* combatArmy, unsigned char enemyPlayer, TArray< struct FH7CreatureCounter >* creatureLosses, int* losses );
	int UpdateAfterCombat ( class AH7CombatArmy* combatArmy, unsigned char enemyPlayer, unsigned long isQuickCombat );
	int GetEmptySlotIndex ( );
	bool HasEmptySlot ( );
	void RemoveCreatureStackByIndexComplete ( int Index );
	void RemoveCreatureStackByIndex ( int Index );
	void RemoveAllCreatureStacksComplete ( );
	void RemoveAllCreatureStacks ( );
	void ResetAllCreatureStack ( );
	void AddStack ( int Index, class UH7BaseCreatureStack* Stack );
	void AddRestUnits ( class UH7BaseCreatureStack* Stack, int Value );
	void DistributeUnits ( class UH7BaseCreatureStack* Stack );
	class UH7BaseCreatureStack* GetStackByIndex ( int Index );
	int GetStackCount ( class UH7BaseCreatureStack* Stack );
	int GetFreeSlotCount ( );
	int GetStackTypeIndex ( class UH7BaseCreatureStack* Stack );
	bool HasStackType ( class UH7BaseCreatureStack* Stack );
	void MergeArmy ( class AH7AdventureArmy* Army, unsigned long transferOnly );
	bool CanMergeArmy ( class AH7AdventureArmy* Army );
	bool HasCreature ( class AH7Creature* Creature );
	void PackStacks ( );
	void UnifyStacksComplete ( );
	void UnifyStacks ( );
	void MergeStacks ( TArray< class UH7BaseCreatureStack* > stacks );
	bool CanMergeStacks ( TArray< class UH7BaseCreatureStack* > stacks );
	bool IsTheFirstStackOfItsKind ( class UH7BaseCreatureStack* Stack );
	void MergeToTargetStackCount ( int Count );
	void eventDestroyed ( );
	void SetIsDead ( unsigned long newIsDead, unsigned long spamEvent, unsigned long clearArmyStacks );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void eventPostSerialize ( );
	void eventRestoreTransform ( );
	void eventSaveTransform ( );
	void GrowEveryCritterArmy ( );
	void ClearAllArmyNegotiationData ( );
	void GrowCritterArmy ( );
	bool HasUnits ( unsigned long excludeLocalGuard );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void EnqueueInterruptCommand ( );
	void OnRotateArmy ( class UH7SeqAct_RotateArmy* Action );
	void OnStartNpcScene ( class UH7SeqAct_StartNpcScene* Action );
	void OnInterruptAction ( class UH7SeqAct_InterruptAction* Action );
	void OnInteractWithBuilding ( class UH7SeqAct_InteractWithBuilding* Action );
	void OnAttackArmy ( class UH7SeqAct_AttackArmy* Action );
	void OnMoveToBuilding ( class UH7SeqAct_MoveToBuilding* Action );
	void OnMoveToArmy ( class UH7SeqAct_MoveToArmy* Action );
	void OnMoveToTile ( class UH7SeqAct_MoveToTile* Action );
	void HandleVisitSlotLeaving ( );
	void OnMoveTo ( class UH7AdventureMapCell* Target, unsigned long UseMovementPoints, unsigned long Teleport, unsigned long moveNear, unsigned long camFollow );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void SetCell ( class UH7AdventureMapCell* newCellPos, unsigned long updateHeroWorldLocation, unsigned long registerCell, unsigned long isInit );
	void eventHandleScouting ( int R, class UH7AdventureMapCell* cell, unsigned long isInit );
	void SetHoverHighlight ( unsigned long Active );
	void Select ( unsigned long doSelect, unsigned long doFocus );
	void SetNPC ( unsigned long IsNPC );
	void ChangeFlag ( );
	struct FVector eventGetHeroFlagLocation ( );
	void SpawnHeroFlag ( );
	void PostCreateHero ( );
	void CreateHero ( struct FSavegameHeroStruct SaveGameData );
	void SetVisibility ( unsigned long show );
	void ToggleVisibility ( );
	void AddQuestFlag ( );
	void ClearQuestFlag ( );
	void eventUpdateArmyCameraFocus ( );
	void SwitchToBoatVisuals ( );
	void HideArmy ( unsigned long noHero );
	void ShowArmy ( );
	TArray< struct FH7ResourceQuantity > GetArmyCost ( float mod );
	int GetAreaOfControlID ( );
	void PostBeginPlay ( );
	void eventInit ( class AH7Player* PlayerOwner, class UH7AdventureMapCell* StartPos, struct FVector garrisonLocation, unsigned long pruneStacks );
	bool IsInScoutingRangeOfLocalPlayer ( );
	void GetPlayerDispositions ( TArray< unsigned char >* playerDisposition );
	bool HasNegotiatedWith ( class AH7AdventureArmy* Army, int* lastNegotiationResult );
	void AddNegotiatedArmy ( struct FNegotiationData Data );
	void ClearNegotiationData ( );
	unsigned char GetDiplomaticDisposition ( );
	void SetDiplomaticDisposition ( unsigned char Value );
	bool IsMovable ( );
	bool IsHidden ( );
	class UH7AdventureMapCell* GetCurrentPosition ( );
	int GetQuestTargetID ( );
	class AH7EditorHero* GetEditorHero ( );
	bool eventIsACaravan ( );
	bool IsDead ( );
	class AH7AdventureHero* GetHero ( );
	class AH7Flag* GetFlag ( );
	class UH7AdventureMapCell* GetCell ( );
	void SetArmyLocked ( unsigned long Value );
	bool IsLocked ( );
	void SetShip ( class AH7Ship* shippity );
	bool HasShip ( );
	class AH7Ship* GetShip ( );
	void UnGarrison ( );
	bool HasLocalGuardBacking ( );
	bool IsGarrisonedButOutside ( );
	void TransferItems ( class AH7AdventureArmy* receivingArmy );
	bool IsGarrisoned ( );
	void SetGarrisonedSite ( class AH7VisitableSite* Value );
	class AH7VisitableSite* GetGarrisonedSite ( );
	struct FString GetGarrisonedSiteIconPath ( );
	bool IsInShelter ( );
	void SetIsInCombat ( unsigned long Value );
	bool IsInCombat ( );
	void SetIsDefender ( unsigned long Value );
	bool IsDefender ( );
	void SetIsAttacker ( unsigned long Value );
	bool IsAttacker ( );
	void SetIsBeingRemoved ( unsigned long Value );
	bool IsBeingRemoved ( );
	void SetVisitableSite ( class AH7VisitableSite* Site );
	class AH7VisitableSite* GetVisitableSite ( );
	void SetReachableArmiesDistances ( TArray< float > armies );
	void SetReachableSitesDistances ( TArray< float > sites );
	TArray< float > GetReachableArmiesDistances ( );
	TArray< float > GetReachableSitesDistances ( );
	void SetReachableArmies ( TArray< class AH7AdventureArmy* > armies );
	void SetReachableSites ( TArray< class AH7VisitableSite* > sites );
	TArray< class AH7AdventureArmy* > GetReachableArmies ( );
	TArray< class AH7VisitableSite* > GetReachableSites ( );
	void LocalizeName ( );
	struct FString GetName ( );
	void SetPlayer ( class AH7Player* NewPlayer );
	void ResetNumTimesAlreadyRetreated ( );
	void IncNumTimesAlreadyRetreated ( );
	void SetAiTensionValue ( unsigned char aid, float val );
	void ModAiTensionValue ( unsigned char aid, struct FH7AiTensionParameter tp );
	float GetAiTensionValue ( unsigned char aid );
	void ResetAIReplenishStash ( );
	class UH7ResourceSet* GetAIReplenishStash ( );
	void SetChilling ( unsigned long val );
	bool IsChilling ( );
	void SetAiStayInAoC ( int val );
	int GetAiStayInAoC ( );
	void SetAiOnIgnore ( unsigned long val );
	bool GetAiOnIgnore ( );
};



// Class MMH7Game.H7CaravanArmy ( Property size: 6 iter: 29) 
// Class name index: 8244 
// 0x0028 (0x06D0 - 0x06A8)
class AH7CaravanArmy : public AH7AdventureArmy
{
public:
	unsigned long                                      mIsInLord : 1;                                    		// 0x06A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsBlocked : 1;                                   		// 0x06A8 (0x0004) [0x0000000000000000] [0x00000002] 
	class AH7AreaOfControlSiteLord*                    mSourceLord;                                      		// 0x06AC (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSiteLord*                    mTargetLord;                                      		// 0x06B4 (0x0008) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mTargetLocation;                                  		// 0x06BC (0x0008) [0x0000000000000000]              
	struct FAdventureMapCellCoords                     mTargetCoordinates;                               		// 0x06C4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3458 ];

		return pClassPointer;
	};

	struct FVector GetHeroFlagLocation ( );
	void StartCaravanComplete ( class AH7AreaOfControlSiteLord* lord );
	void StartCaravan ( class AH7AreaOfControlSiteLord* lord );
	int GetETA ( );
	bool AreLordsNotOwnedByCaravanOwner ( class AH7AreaOfControlSiteLord* Target, class AH7AreaOfControlSiteLord* Source );
	TArray< class UH7AdventureMapCell* > MoveToTown ( TArray< class UH7AdventureMapCell* > endCellBuffer );
	void PlaceOnMap ( );
	bool CanMoveToAOCLord ( class AH7AreaOfControlSiteLord* lord );
	bool CreateCaravan ( );
	void CaravanArrived ( );
	void CreateHero ( struct FSavegameHeroStruct SaveGameData );
	void eventInit ( class AH7Player* PlayerOwner, class UH7AdventureMapCell* StartPos, struct FVector caravanLocation, unsigned long pruneStacks );
	class AH7Caravan* GetCaravan ( );
	void SetTargetLordLocation ( class UH7AdventureMapCell* cell );
	class UH7AdventureMapCell* GetTargetLordLocation ( );
	bool eventIsACaravan ( );
	void SetTargetLord ( class AH7AreaOfControlSiteLord* Value );
	class AH7AreaOfControlSiteLord* GetTargetLord ( );
	void SetSourceLord ( class AH7AreaOfControlSiteLord* Value );
	class AH7AreaOfControlSiteLord* GetSourceLord ( );
	void SetIsInLord ( unsigned long Value );
	bool IsInTown ( );
	bool IsGarrisoned ( );
};



// Class MMH7Game.H7CombatArmy ( Property size: 15 iter: 102) 
// Class name index: 8246 
// 0x00A8 (0x043C - 0x0394)
class AH7CombatArmy : public AH7EditorArmy
{
public:
	class AH7CombatHero*                               mHero;                                            		// 0x0394 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mAdvHero;                                         		// 0x039C (0x0008) [0x0000000000000000]              
	TArray< class AH7CreatureStack* >                  mCreatureStacks;                                  		// 0x03A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7WarUnit* >                        mWarUnits;                                        		// 0x03B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsAttacker : 1;                                  		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsForQuickCombat : 1;                            		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mWonBattle : 1;                                   		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< class UH7Faction* >                        mFactionsInArmy;                                  		// 0x03C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7TowerUnit* >                      mTowers;                                          		// 0x03D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIntPoint >                         AmbushDeployRelativeCellOffset_1x1;               		// 0x03E8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                mInitialTotalLife;                                		// 0x03F8 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __CreatureRangedFirstSort__Delegate;              		// 0x03FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0400 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SortPointsByAngle12OClock__Delegate;            		// 0x040C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0410 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SortPointsByDistance__Delegate;                 		// 0x041C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0420 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __CreatureVerticalPositionSort__Delegate;         		// 0x042C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0430 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3460 ];

		return pClassPointer;
	};

	int GetArmyMeleeDamage ( );
	int GetArmyRangedDamage ( );
	int GetArmyDamagePool ( );
	void RemoveDeadCreatureStackDeploymentSlotID ( );
	int GetPercentTotalLife ( unsigned long inverted );
	void CalculateInitialTotalLife ( );
	void eventDestroyed ( );
	int GetTotalHealth ( );
	float GetStackPower ( class AH7CreatureStack* Stack );
	void RemoveTower ( class AH7TowerUnit* tower );
	int CreatureVerticalPositionSort ( class AH7CreatureStack* A, class AH7CreatureStack* B );
	void UpdateCreatureStacksGUI ( );
	void SaveTacticsDeployment ( );
	void UpdateCreaturesDeployedState ( unsigned long removeUndeployed );
	struct FRotator GetStackOrientation ( );
	void UpdateHealthpoints ( );
	void PositionStacks ( struct FIntPoint* stackPositions, int VerticalOffset );
	void InitStacksHeroEffects ( );
	class AH7CreatureStack* SpawnStack ( class UH7BaseCreatureStack* templateStack );
	void CreateStacks ( TArray< class UH7BaseCreatureStack* > baseStacks );
	void RemoveStacks ( TArray< class UH7BaseCreatureStack* > baseStacks );
	TArray< struct FSAmbushDeploymentCircle > GenerateClockwiseCirclesFromArea ( int* Size );
	int SortPointsByDistance ( struct FSClockwiseCircleDetectionPoint P1, struct FSClockwiseCircleDetectionPoint P2 );
	int SortPointsByAngle12OClock ( struct FSClockwiseCircleDetectionPoint P1, struct FSClockwiseCircleDetectionPoint P2 );
	bool Check2x2CellIdxValid ( int x_topleft, int y_topleft, int W, int H );
	TArray< struct FIntPoint > GenerateAmbushDeployCellOffset2x2 ( int W, int H );
	void PlaceCreaturesBeingAmbushed ( );
	void SetOccupation2x2 ( int X, int Y, int W, class AH7CreatureStack* Stack, TArray< class AH7CreatureStack* >* occupation );
	bool CheckOccupationFree2x2 ( int X, int Y, int W, TArray< class AH7CreatureStack* >* occupation );
	void SetCreatureStackCell ( class AH7CreatureStack* Stack, int cellX, int cellY );
	int CreatureRangedFirstSort ( class AH7CreatureStack* A, class AH7CreatureStack* B );
	void PlaceCreaturesAmbush ( );
	void AutodeployCreatures ( );
	class AH7CreatureStack* GetCreatureStackFromDeployment ( struct FH7StackDeployment deploymentStack );
	void ResetCreatureDeployPos ( class UH7BaseCreatureStack* Stack );
	void DeployCreatures ( );
	void RemoveStackFromGrid ( int slotID );
	bool PlaceStackOnGrid ( int slotID );
	struct FName GetWarUnitTag ( );
	struct FName GetHeroTag ( );
	void SpawnWarfareUnit ( class AH7CombatMapGridController* Grid, class AH7EditorWarUnit* Template );
	void PlaceWarUnits ( );
	void PlaceHero ( );
	bool AutoplaceUnitsAmbush ( );
	bool AutoplaceUnits ( );
	void DestroyStackGhosts ( );
	void CleanAllUnitsAbilitiesAfterCombat ( );
	void TeleportSpellWasCanceled ( );
	bool RefreshAllUnits ( );
	void TurnChanged ( );
	void ShowStacks ( unsigned long updateHealthAfterCombatStart );
	void HideStacks ( );
	void KillRemainingStacks ( );
	int GetKilledCreaturesXP ( );
	void GetKilledCreatureStacks ( TArray< class AH7CreatureStack* >* killedStacks );
	void GetSurvivingCreatureStacks ( TArray< class AH7CreatureStack* >* livingStacks );
	int GetSurrenderPrice ( );
	void DoVictory ( );
	bool AreAllCreaturesDead ( );
	void UpdatedAlliesAndEnemies ( );
	bool IsOwnedByPlayerMP ( );
	class AH7EditorHero* GetEditorHero ( );
	class UH7BaseCreatureStack* GetBaseStackBySpawnedStack ( class AH7CreatureStack* spawnedStack );
	class AH7CreatureStack* GetStackBySourceSlotId ( int baseStackindex );
	TArray< class AH7CreatureStack* > GetDeployedCreatureStacks ( );
	void SetCreatureStacks ( TArray< class AH7CreatureStack* > stacks );
	void AddCreatureStackOnMap ( class AH7CreatureStack* Stack );
	int GetCreatureStackIndex ( class AH7CreatureStack* Stack );
	TArray< class AH7CreatureStack* > GetCreatureStacks ( );
	int GetFactionsInArmyCount ( unsigned long checkForDeployed );
	TArray< class AH7TowerUnit* > GetTowers ( );
	void AddTower ( class AH7TowerUnit* tower );
	void SetWonBattle ( unsigned long Value );
	bool WonBattle ( );
	TArray< class AH7WarUnit* > GetWarUnits ( );
	void SetAdventureHero ( class AH7AdventureHero* Value );
	class AH7AdventureHero* GetAdventureHero ( );
	void SetHero ( class AH7CombatHero* Value );
	class AH7CombatHero* GetHero ( );
	class AH7CombatHero* GetCombatHero ( );
	bool isForQuickCombat ( );
	void SetIsForQuickCombat ( unsigned long val );
	bool IsAttacker ( );
	void SetIsAttacker ( unsigned long IsAttacker );
	int GetInitialTotalLife ( );
};



// Class MMH7Game.H7PlayerStart ( Property size: 5 iter: 8) 
// Class name index: 8248 
// 0x0068 (0x034C - 0x02E4)
class AH7PlayerStart : public AH7EditorMapObject
{
public:
	struct FPointer                                    VfTable_IH7DynGridObjInterface;                   		// 0x02E4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IOwnable;                              		// 0x02EC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mPlayer;                                          		// 0x02F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   mPlayerColorMaterials[ 0xA ];                     		// 0x02F8 (0x0050) [0x0000000000000000]              
	unsigned long                                      mIsValid : 1;                                     		// 0x0348 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3462 ];

		return pClassPointer;
	};

	void Hatch ( );
	void SetPlayerNumber ( unsigned char PlayerNumber );
	unsigned char GetPlayerNumber ( );
};



// Class MMH7Game.H7EffectContainer ( Property size: 34 iter: 144) 
// Class name index: 8250 
// 0x0168 (0x01C8 - 0x0060)
class UH7EffectContainer : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEventManagingObject;                  		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mName;                                            		// 0x0070 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mNameInst;                                        		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mTooltip;                                         		// 0x0090 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mComment;                                         		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mTooltipLocalized;                                		// 0x00B0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTexture2D*                                  mIcon;                                            		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsDisplayed : 1;                                 		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mInstanciatedEffectsByTooltip : 1;                		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mInstanciatedEffectsDone : 1;                     		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mProducesResources : 1;                           		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mEventuallySuppressesRetaliation : 1;             		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mEventuallySuppressesRetaliationChecked : 1;      		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      mAbilitySchool;                                   		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mSkillType;                                       		// 0x00CD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRankOverride;                                    		// 0x00CE (0x0001) [0x0000000000000000]              
	TArray< struct FH7DamageEffect >                   mDamageEffects;                                   		// 0x00D0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7StatEffect >                     mStatModEffects;                                  		// 0x00E0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResistanceEffect >               mResistanceEffects;                               		// 0x00F0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7SpellEffect >                    mSpellEffects;                                    		// 0x0100 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7CommandEffect >                  mCommandEffects;                                  		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7SpecialEffect >                  mSpecialEffects;                                  		// 0x0120 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7AudioVisualEffect >              mAudioVisualEffects;                              		// 0x0130 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7TooltipReplacementEntry >        mTooltipMapping;                                  		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7TooltipLogEntry >                mTooltipLog;                                      		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IEffectTargetable* >              mTargets;                                         		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7ICaster*                                  mCaster;                                          		// 0x0170 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0178 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UH7UnitSnapShot*                             mCasterSnapShot;                                  		// 0x0180 (0x0008) [0x0000000000000000]              
	class UH7ICaster*                                  mOwner;                                           		// 0x0188 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0190 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UH7EffectContainer*                          mSourceContainer;                                 		// 0x0198 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x01A0 (0x0008) [0x0000000000000000]              
	TArray< struct FVector >                           mTargetVectors;                                   		// 0x01A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Effect* >                         mInstanciatedEffects;                             		// 0x01B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3464 ];

		return pClassPointer;
	};

	class UH7EventManager* GetEventManager ( );
	bool TargetIsImmuneToAllExecutingEffects ( class UH7IEffectTargetable* Target );
	bool TargetIsImmuneToAllEffects ( class UH7IEffectTargetable* Target );
	bool HasPositiveEffect ( class UH7IEffectTargetable* Target );
	bool HasNegativeEffect ( );
	void GetShieldEffects ( TArray< class UH7EffectSpecialShieldEffect* >* Effects );
	bool CanAffectDead ( );
	bool CanAffectEnemy ( );
	bool CanAffectAlly ( );
	void GetPersistentResistanceEffects ( TArray< class UH7EffectOnResistance* >* Effects );
	void GetPermanentStatMods ( class UH7IEffectTargetable* Target, TArray< struct FH7MeModifiesStat >* outStats );
	class UH7EffectWithSpells* GetBuffEffect ( class UH7ICaster* caster, int* Number );
	class UH7EffectDamage* GetDamageEffect ( class UH7ICaster* caster, int* Number );
	struct FH7DamageEffect GetEffectDamage ( );
	struct FName GetClassNameBySelector ( struct FString selector );
	bool FullfillsSpecialSelectorCondition ( struct FString selector, class UH7Effect* Effect );
	class UH7Effect* GetEffectBySelector ( struct FString selector, class UH7ICaster* caster, int Group, unsigned char considerOnlyEffectsOfRank, int* Number );
	int GetNumGroups ( struct FName effectClassName );
	struct FString GetTooltipEffectLists ( unsigned long allRanks );
	unsigned char GetCorrespondingRank ( );
	int GetEffectsLength ( );
	TArray< class UH7Effect* > GetAllEffects ( );
	struct FString GetTimeEntityByEvent ( unsigned char Event );
	struct FString GetEffectOnRankAsLine ( unsigned char Rank );
	TArray< class UH7Effect* > GetEffectOnRank ( unsigned char Rank );
	void GetEffects ( class UH7ICaster* caster, TArray< class UH7Effect* >* Effects );
	int GetTeleportEffectRange ( );
	TArray< class UH7Effect* > GetEffectsOfType ( struct FName Typename );
	void GetProductionEffectSpecials ( TArray< class UH7EffectSpecialAddResources* >* produc );
	void InstanciateEffectsFromStructData ( unsigned long registerEffects );
	void DeleteAllInstanciatedEffects ( );
	struct FString GetSchoolColor ( unsigned char school );
	struct FString GetSchoolDamageName ( unsigned char school );
	struct FString GetSchoolName ( unsigned char school );
	struct FString GetSchoolFlashPath ( unsigned char school );
	int TooltipMappingCompare ( struct FH7TooltipReplacementEntry A, struct FH7TooltipReplacementEntry B );
	void SortTooltipMapping ( );
	struct FString GetTooltip ( unsigned long extendedVersion, struct FString overwriteBaseString, unsigned char considerOnlyEffectsOfRank, unsigned long resetRankOverride );
	TArray< struct FString > GetPlaceholders ( struct FString Str );
	TArray< struct FString > GetPlaceholdersNew ( struct FString Str );
	bool IsAllowedChar ( struct FString _char );
	void SplitPlaceholder ( struct FString placeholder, struct FString* selector, int* Group, struct FString* prop );
	struct FString ResolvePlaceholder ( struct FString placeholder, unsigned long shouldReturn, unsigned char considerOnlyEffectsOfRank, class UH7UnitSnapShot* myCaster );
	struct FString ResolveIconPlaceholder ( struct FString selector );
	void AddPlaceholdersToReplBuffer ( struct FString stringContainingPlaceholders, unsigned char considerOnlyEffectsOfRank, class UH7UnitSnapShot* myCaster );
	bool IsLocaKey ( struct FString Unknown );
	bool IsArchetype ( );
	void AddRepl ( struct FString placeholder, struct FString Value );
	void AddLog ( unsigned char Type, float Value );
	struct FH7RangeValue GetDamageRange ( struct FH7SpellValue Damage, class AH7Unit* castingUnit, unsigned char forceRankValue );
	float DoOperation ( unsigned char Op, float baseValue, float modificator );
	bool IsEqual ( class UH7EffectContainer* container );
	struct FString GetLocaNameForStat ( unsigned char Stat, unsigned long forHero );
	struct FString GetStringForOperation ( unsigned char Op, float Value );
	struct FString GetTooltipModifierList ( );
	struct FH7SpellEffect GetArchetypeEffect ( class UClass* effectClass, unsigned char triggerType );
	bool HasStatModFor ( unsigned char Stat );
	void GetModifiedStatsAndValues ( TArray< unsigned char >* modifiedStats, TArray< float >* Values );
	class UH7ICaster* GetCaster ( );
	void OverrideCaster ( class UH7ICaster* caster );
	void SetCaster ( class UH7ICaster* caster );
	bool HasInitiator ( );
	bool CanRemoveStasis ( );
	bool HasStasisEffect ( );
	class UH7ICaster* GetInitiator ( );
	void LocalizeName ( );
	struct FString eventGetName ( );
	struct FString GetNameNative ( );
	struct FString GetTooltipLocalized ( class UH7ICaster* Initiator );
	struct FString ApplyHelperReplacements ( struct FString baseLocalizedString );
	class UTexture2D* GetIcon ( );
	bool IsMight ( );
	class UH7EffectContainer* GetSourceEffect ( );
	void SetSourceEffect ( class UH7EffectContainer* EffectContainer );
	unsigned char GetRankOverride ( );
	void SetRankOverride ( unsigned char Rank );
	struct FString GetDebugName ( );
	struct FString GetArchetypeID ( );
	int GetID ( );
	void ClearSpellEffects ( );
	void AddSpellEffect ( struct FH7SpellEffect spellEffect );
	TArray< struct FH7SpellEffect > GetSpellEffects ( );
	bool HasStatModEffects ( );
	void SetStatModEffects ( TArray< struct FH7StatEffect > Effects );
	bool IsHeroItem ( );
	bool IsSkill ( );
	bool IsBuff ( );
	bool IsAbility ( );
	bool DidInstanciateEffects ( );
	void SetDisplayed ( unsigned long Display );
	bool IsDisplayed ( );
	unsigned char GetSkillType ( );
	unsigned char GetSchool ( );
	class UH7ICaster* GetCasterOriginal ( );
	void SetTargetVector ( struct FVector vec );
	struct FVector GetTargetVector ( );
	void SetTargetVectors ( TArray< struct FVector > vecs );
	TArray< struct FVector > GetTargetVectors ( );
	void SetTarget ( class UH7IEffectTargetable* Target );
	class UH7IEffectTargetable* GetTarget ( );
	void SetTargets ( TArray< class UH7IEffectTargetable* > Targets );
	TArray< class UH7IEffectTargetable* > GetTargets ( );
	void SetOwner ( class UH7ICaster* Owner );
	class UH7ICaster* GetOwner ( );
	void SetProducesResources ( unsigned long boool );
	bool ProducesResources ( );
	bool ProvidesCover ( );
	bool GetEffectFunctionProvider ( class UH7IEffectDelegate* effectDelegate, class UH7IEffectDelegate** Instance );
	bool TargetIsImmuneToAllExecutingEffectsOnArchetype ( class UH7IEffectTargetable* Target, class UH7ICaster* Initiator, class UH7ICaster* Owner, class UH7ICaster* caster, struct FH7EventContainerStruct eventContainer, unsigned long targetCheckOnly, unsigned long isStatEffect, unsigned long isPersistentStatEffect, unsigned long isTeleportSpell, int teleportSpellRange, class UH7EffectContainer* EffectContainer, TArray< unsigned char > tags, unsigned char abilitySchool );
};



// Class MMH7Game.H7BaseAbility ( Property size: 74 iter: 188) 
// Class name index: 8252 
// 0x03EC (0x05B4 - 0x01C8)
class UH7BaseAbility : public UH7EffectContainer
{
public:
	struct FString                                     mTooltipMagicGuild;                               		// 0x01C8 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mTooltipMagicGuildRankLine;                       		// 0x01D8 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mTooltipUpgraded;                                 		// 0x01E8 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mTooltipMagicGuildLocalized;                      		// 0x01F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mTooltipUpgradedLocalized;                        		// 0x0208 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mTooltipMagicGuildRankLineLocalized;              		// 0x0218 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mIsPassive : 1;                                   		// 0x0228 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsGovernorEffect : 1;                            		// 0x0228 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mIsRanged : 1;                                    		// 0x0228 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mMoveToTarget : 1;                                		// 0x0228 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIsDirectionalCast : 1;                           		// 0x0228 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mIsTeleportSpell : 1;                             		// 0x0228 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mDisableFleeSurrender : 1;                        		// 0x0228 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mOncePerCombat : 1;                               		// 0x0228 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      mIsAreaFilled : 1;                                		// 0x0228 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      mCasterNoDuplicateFXS : 1;                        		// 0x0228 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      mTurnToTarget : 1;                                		// 0x0228 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      mUseCameraShake : 1;                              		// 0x0228 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      mUseCoolCam : 1;                                  		// 0x0228 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      mTargetSelectionArea : 1;                         		// 0x0228 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      mTargetSelectionShape : 1;                        		// 0x0228 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      mTargetSelectionCone : 1;                         		// 0x0228 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      mIsCasting : 1;                                   		// 0x0228 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      mWasProjectileCreated : 1;                        		// 0x0228 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      mUnlearnAfterActivation : 1;                      		// 0x0228 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      mCastedOnce : 1;                                  		// 0x0228 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      mIsHeal : 1;                                      		// 0x0228 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      mIsSummoningSpell : 1;                            		// 0x0228 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      mIsDivingAttack : 1;                              		// 0x0228 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      mQuickCombatTargetType : 1;                       		// 0x0228 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	TArray< unsigned char >                            mTags;                                            		// 0x022C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mPowerValue;                                      		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FH7AuraStruct                               mAuraData;                                        		// 0x0240 (0x004C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7BaseAbility*                              mUpradeAbility;                                   		// 0x028C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mTargetType;                                      		// 0x0294 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAnimation;                                       		// 0x0295 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAiTargetStatPrimary;                             		// 0x0296 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAiTargetStatSecondary;                           		// 0x0297 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAbilityDirection;                                		// 0x0298 (0x0001) [0x0000000000000000]              
	unsigned char                                      mTargetTypeOverride;                              		// 0x0299 (0x0001) [0x0000000000000000]              
	struct FString                                     mTargetClassSpecifier;                            		// 0x029C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mTsunamiRows;                                     		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FIntPoint                                   mAreaOfEffectSize;                                		// 0x02B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FIntPoint >                         mTargetShape;                                     		// 0x02B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7ConeStruct                               mTargetCone;                                      		// 0x02C8 (0x0014) [0x0000000000080001]              ( CPF_Edit | CPF_Component )
	class UAkEvent*                                    mProjectileHitSound;                              		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mProjectileFiringSound;                           		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FH7FXStruct                                 mCasterFXS;                                       		// 0x02EC (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mTimerSpawnProjectile;                            		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mTimerRaiseEvents;                                		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7USSProjectile*                            mProjectile;                                      		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mTimerSpawnCritProjectile;                        		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7USSProjectile*                            mCritProjectile;                                  		// 0x0394 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FH7FXStruct                                 mImpactFXS;                                       		// 0x039C (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7FXStruct                                 mHitTargetFXS;                                    		// 0x0430 (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mCameraShakeDelay;                                		// 0x04C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCoolCamDuration;                                 		// 0x04C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                mCameraShake;                                     		// 0x04CC (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              mAiGeneralUtility;                                		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAbilityID;                                       		// 0x04D8 (0x0004) [0x0000000000000000]              
	struct FH7EventContainerStruct                     mEventContainerActivateAbility;                   		// 0x04DC (0x005C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     mImpactTargetPos;                                 		// 0x0538 (0x000C) [0x0000000000000000]              
	int                                                mSuppressCounter;                                 		// 0x0544 (0x0004) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mOriginalPrimaryTarget;                           		// 0x0548 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0550 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class AH7USSProjectile*                            mValidProjectile;                                 		// 0x0558 (0x0008) [0x0000000000000000]              
	float                                              mValidTimerSpawnProjectile;                       		// 0x0560 (0x0004) [0x0000000000000000]              
	TArray< int >                                      mSunburstIndeces;                                 		// 0x0564 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIntPoint >                         mSunburstTargetPoints;                            		// 0x0574 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mSunburstOriginalTargets;                         		// 0x0584 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mQuickCombatNumOfTargets;                         		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mQuickCombatNumOfTargetsUpgraded;                 		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FQuickCombatImpact >                mQuickCombatSubstitute;                           		// 0x059C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mCurrentCharges;                                  		// 0x05AC (0x0004) [0x0000000000000000]              
	int                                                mNumCharges;                                      		// 0x05B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3466 ];

		return pClassPointer;
	};

	int GetFogRevealRadius ( class AH7AdventureHero* Hero );
	bool RevealsFog ( );
	unsigned char GetCreatureAnimation ( );
	unsigned char GetHeroAnimation ( );
	struct FString GetTooltip ( unsigned long extendedVersion, struct FString overwriteBaseString, unsigned char considerOnlyEffectsOfRank, unsigned long resetRankOverride );
	struct FString GetEffectOnRankAsLine ( unsigned char Rank );
	struct FString GetTooltipUpgradedLocalized ( );
	struct FString GetTooltipMagicGuildLocalized ( );
	struct FString GetTooltipMagicGuildRankLineLocalized ( );
	bool IsInMagicGuild ( );
	bool IsUpgraded ( class UH7ICaster* Initiator );
	struct FString GetTooltipLocalized ( class UH7ICaster* Initiator );
	struct FString GetTooltipForCaster ( class UH7ICaster* caster, unsigned long resetRankOverride, unsigned char effectOfRanks );
	void InstanciateEffectsFromStructData ( unsigned long registerEffects );
	void OnInit ( class UH7ICaster* caster, struct FH7EventContainerStruct container, int abilityID );
	void GetPath ( TArray< class UH7CombatMapCell* >* Path );
	void ModifyAttackDamage ( float* attackDamage );
	void Abort ( );
	void RaiseActivateAbilityEvents ( );
	void RaiseGetImpactEvent ( );
	void RaiseImpactEventAndFinish ( );
	bool IsFromScroll ( );
	void Finish ( );
	void HitUnit ( class UH7IEffectTargetable* Target );
	bool eventDoParticleFXCaster ( class UH7ICaster* caster );
	bool DoHitTargetFX ( struct FVector TargetLocation, class UH7IEffectTargetable* Target );
	void PlayCameraShakeDelayed ( );
	bool DoParticleFXImpact ( struct FVector TargetLocation, class UH7IEffectTargetable* Target );
	struct FRotator GetRotatorForDirection ( unsigned char Dir );
	void DoSunburstBeams ( );
	bool DoProjectileAbility ( struct FVector targetPos, class UH7ICaster* Owner );
	struct FVector GetProjectileTargetLocation ( struct FVector targetPos, class UH7IEffectTargetable* Target );
	void GetAllTags ( TArray< unsigned char >* allTags );
	void DelayedDoProjectile ( );
	void CalculateTargets ( class UH7IEffectTargetable* Target, unsigned long ignoreImmunity, class UH7CombatMapCell* TrueHitCell, unsigned long skipEffectFilter, TArray< class UH7IEffectTargetable* >* Targets, struct FVector* targetPos );
	TArray< class UH7IEffectTargetable* > AICalculateAllPossibleTargets ( );
	bool CheckValidTargets ( class UH7IEffectTargetable* Target, TArray< class UH7IEffectTargetable* > Targets, unsigned long isSimulated );
	void PlayHitTargetFX ( );
	class UH7CombatResult* Activate ( class UH7IEffectTargetable* primaryTargetable, unsigned long isSimulated, unsigned char Direction, class UH7CombatMapCell* TrueHitCell );
	bool CanAffectAtLeastOneTarget ( TArray< class UH7IEffectTargetable* > Targets );
	class UH7CombatResult* GenerateCombatAction ( struct FH7EventContainerStruct eventContainer );
	bool CanDiveAttackTo ( TArray< class UH7CombatMapCell* > targetCells );
	bool CanCastOnTargetActor ( class UH7IEffectTargetable* Targetable );
	bool HighlightsRed ( class UH7IEffectTargetable* Targetable );
	bool IsActiveAura ( );
	bool HasTag ( unsigned char SearchTag, unsigned long checkAllEffectsToo );
	TArray< unsigned char > GetTags ( );
	float GetAiGeneralUtility ( );
	unsigned char GetAiTargetStatSecondary ( );
	unsigned char GetAiTargetStatPrimary ( );
	bool IsHeal ( );
	bool IsDirectionalCast ( );
	bool UseCameraShake ( );
	void SetAreaFilled ( unsigned long isFilled );
	bool IsAreaFilled ( );
	void SetTargetArea ( struct FIntPoint aoe );
	struct FIntPoint GetTargetArea ( );
	int GetPowerValue ( );
	bool CanCast ( struct FString* blockReason );
	struct FString GetFlashIconPath ( );
	struct FString GetTargetClassSpecifier ( );
	unsigned char GetTargetType ( );
	int GetID ( );
	void SetCasting ( unsigned long IsCasting );
	bool IsCasting ( );
	bool IsGovernorEffect ( );
	bool IsPassive ( );
	bool IsAbility ( );
	bool IsSpell ( );
	class UStaticMeshComponent* GetConePreview ( );
	struct FH7AuraStructProperties GetAuraProperties ( );
	bool eventHasCasterFX ( );
	bool GetDisableFleeSurrender ( );
	struct FVector GetImpactTargetPos ( );
	int GetTsunamiRows ( );
	bool IsDivingAttack ( );
	bool IsSummoningSpell ( );
	bool isTeleportSpell ( );
	void SetUnlearnAfterActivation ( unsigned long A );
	bool UnlearnAfterActivation ( );
	void SetNumCharges ( int NewValue );
	void SetCurrentCharges ( int NewValue );
	int GetNumCharges ( );
	int GetCurrentCharges ( );
	class UH7IEffectTargetable* GetOriginalPrimaryTarget ( );
	void SetTargetCone ( struct FH7ConeStruct Cone );
	unsigned char GetAbilityDirection ( );
	bool GetConeDebug ( );
	int GetConeRange ( );
	float GetConeAngle ( );
	int GetAuraDuration ( );
	void SetAuraDuration ( int Duration );
	bool IsAura ( );
	struct FH7AuraStruct GetAuraData ( );
	void Suppress ( unsigned long boool );
	bool IsSuppressed ( );
	void SetTargetType ( unsigned char Type );
	bool IsTsunami ( );
	bool IsArea ( );
	bool IsCustom ( );
	void SetShape ( TArray< struct FIntPoint > Shape );
	TArray< struct FIntPoint > GetShape ( );
	bool ShouldTurnTowardsTarget ( );
	bool ShouldMoveToTarget ( );
	bool IsRanged ( );
	unsigned char GetAnimation ( );
	struct FName GetCasterFXSocket ( );
	class AH7USSProjectile* GetProjectile ( );
	int GetQuickCombatNumOfTargetsUpgraded ( );
	int GetQuickCombatNumOfTargets ( );
	TArray< struct FQuickCombatImpact > GetQuickCombatSubstitutes ( );
	bool GetQuickCombatTargetType ( );
	void OverrideTargetType ( unsigned char T );
	struct FH7EventContainerStruct GetEventContainerActivateAbility ( );
};



// Class MMH7Game.H7CreatureAbility ( Property size: 4 iter: 7) 
// Class name index: 8254 
// 0x032C (0x08E0 - 0x05B4)
class UH7CreatureAbility : public UH7BaseAbility
{
public:
	unsigned long                                      mHasCharges : 1;                                  		// 0x05B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mAlwaysCastable : 1;                              		// 0x05B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FH7ChargeEffect                             mCharge;                                          		// 0x05B8 (0x0320) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkEvent*                                    mAbilitySound;                                    		// 0x08D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3468 ];

		return pClassPointer;
	};

	void ExecuteCreatureAbility ( );
	bool CanCast ( struct FString* blockReason );
	void OnInit ( class UH7ICaster* caster, struct FH7EventContainerStruct container, int abilityID );
};



// Class MMH7Game.H7HeroItem ( Property size: 27 iter: 61) 
// Class name index: 8256 
// 0x009C (0x0264 - 0x01C8)
class UH7HeroItem : public UH7EffectContainer
{
public:
	struct FPointer                                    VfTable_IH7IThumbnailable;                        		// 0x01C8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ILocaParamizable;                      		// 0x01D0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mType;                                            		// 0x01D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mTier;                                            		// 0x01D9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UH7ItemSet*                                  mSet;                                             		// 0x01DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsStackable : 1;                                 		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mCannotUnequip : 1;                               		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mIsCampaignPersistent : 1;                        		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mIsUPlayReward : 1;                               		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIsStoryitem : 1;                                 		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mIsExchangeable : 1;                              		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mIsEquipped : 1;                                  		// 0x01E4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mIgnoreCustomBonusEffectInfo : 1;                 		// 0x01E4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                mSellPrice;                                       		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mBuyPrice;                                        		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7Faction* >                        mForbiddenFactions;                               		// 0x01F0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            mForbiddenAffinity;                               		// 0x0200 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7BaseAbility* >                    mImprintedAbilities;                              		// 0x0210 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                Mid;                                              		// 0x0220 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        mMesh;                                            		// 0x0224 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    mFX;                                              		// 0x022C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x0234 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTexture2D*                                  mMinimapIcon;                                     		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnPickUpSound;                                   		// 0x0244 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mPowerValueMight;                                 		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mPowerValueMagic;                                 		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCustomArtefactBonusEffectInfo >    mCustomBonusEffectInfo;                           		// 0x0254 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3470 ];

		return pClassPointer;
	};

	void eventCheckSetitem ( unsigned char Trigger );
	struct FString GetTooltip ( unsigned long extendedVersion, struct FString overwriteBaseString, unsigned char considerOnlyEffectsOfRank, unsigned long resetRankOverride );
	struct FString GetTooltipLocalized ( class UH7ICaster* Initiator );
	struct FString GetTooltipForOwner ( class AH7EditorHero* Hero, unsigned long extendedVersion, struct FString overwriteBaseString, unsigned char considerOnlyEffectsOfRank );
	void Init ( int overwriteId );
	class UH7HeroItem* eventCreateItem ( class UH7HeroItem* itemArchetype, int overwriteId );
	bool eventCheckRestricted ( class AH7AdventureHero* currentHero );
	bool IsHeroItem ( );
	void MarkForKill ( );
	bool CanConsume ( );
	void Consume ( );
	void SetEquipped ( unsigned long val, class AH7EditorHero* owningHero );
	struct FString GetColoredName ( );
	struct FString GetTierColorHTML ( unsigned long considerQuestItemColor );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	struct FString GetFlashIconPath ( );
	bool IsStoryItem ( );
	bool IsUPlayReward ( );
	bool IsCampaignPersistent ( );
	bool IsEquipped ( );
	bool IsExchangeable ( );
	bool IsStackable ( );
	bool CannotUnequip ( );
	float GetPowerValueMagic ( );
	float GetPowerValueMight ( );
	class UH7ItemSet* GetItemSet ( );
	TArray< class UH7BaseAbility* > GetImprintedAbilities ( );
	int GetSellPrice ( );
	int GetBuyPrice ( );
	unsigned char GetTier ( );
	int GetID ( );
	struct FString GetTypeLoca ( );
	unsigned char GetType ( );
};



// Class MMH7Game.H7TearOfAsha ( Property size: 0 iter: 0) 
// Class name index: 8258 
// 0x0000 (0x0264 - 0x0264)
class UH7TearOfAsha : public UH7HeroItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3472 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ItemSet ( Property size: 2 iter: 8) 
// Class name index: 8260 
// 0x0020 (0x01E8 - 0x01C8)
class UH7ItemSet : public UH7EffectContainer
{
public:
	TArray< class UH7HeroItem* >                       mItems;                                           		// 0x01C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7SetBonus >                       mSetBonus;                                        		// 0x01D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3474 ];

		return pClassPointer;
	};

	TArray< class UH7HeroAbility* > GetSetBonusAbilities ( int EquippedItems, unsigned long Removeable );
	struct FString GetTooltip ( unsigned long extendedVersion, struct FString overwriteBaseString, unsigned char considerOnlyEffectsOfRank, unsigned long resetRankOverride );
	void GetBoniForItemAmount ( int Amount, TArray< struct FH7MeModifiesStat >* boni );
	struct FString GetName ( );
	TArray< struct FH7SetBonus > GetBonus ( );
	TArray< class UH7HeroItem* > GetItems ( );
};



// Class MMH7Game.H7EffectManager ( Property size: 11 iter: 36) 
// Class name index: 8262 
// 0x0058 (0x00B8 - 0x0060)
class UH7EffectManager : public UObject
{
public:
	class AH7Creature*                                 mCreature;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< struct FH7FXStruct >                       mEffectQueue;                                     		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7FXStruct >                       mPermanentFX;                                     		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UParticleSystemComponent* >          mPermanentComponents;                             		// 0x0088 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystemComponent*                    mCurrentParticleSystem;                           		// 0x0098 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AActor*                                      mOwner;                                           		// 0x00A0 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mUnitOwner;                                       		// 0x00A8 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsInCombatMap : 1;                               		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIgnoreCurrentParticle : 1;                       		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsPlayingMaterialFX : 1;                         		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              mCurrentParticleMaxLifespan;                      		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3476 ];

		return pClassPointer;
	};

	bool IsPlaying ( );
	void eventUpdate ( );
	void RemoveAllPermanentFX ( );
	void RemovePermanentSpeedEffect ( struct FH7FXStruct Effect );
	void RemovePermanentFXByEffect ( class UH7Effect* Effect );
	void eventRemovePermanentFXBySource ( class UH7EffectContainer* Effect );
	void UseBeam ( class UParticleSystemComponent* comp, struct FH7FXStruct fx );
	void PlaySFX ( struct FH7FXStruct effectToPlay );
	void Play ( struct FH7FXStruct instantEffect );
	void PlayNext ( );
	class UParticleSystemComponent* PlayVFX ( class UParticleSystem* Particle, unsigned char pos, struct FString SocketName, float Scale, struct FVector targetPos, struct FRotator Rotation );
	void ResetFX ( );
	void ClearFXQueue ( );
	void AddPermanentEffect ( struct FH7FXStruct Effect );
	void AddToFXQueue ( struct FH7FXStruct Effect, class UH7Effect* Source, unsigned long isBeam, struct FVector Src, struct FVector Target, unsigned long playInstant, struct FRotator Rotation );
	void ChangeAnimationSpeed ( struct FH7FXStruct Effect );
	void StartFXAnimations ( struct FH7FXStruct Effect );
	void StartMaterialFX ( struct FH7FXStruct Effect );
	bool HasDuplicate ( struct FH7FXStruct Effect );
	void NotifyMaterialFXCompleted ( );
	void Init ( class AActor* Unit );
	bool IsAllEffectsFinished ( float* currLifeSpan );
	void SetIgnoreCurrentParticle ( unsigned long Value );
	bool GetIgnoreCurrentParticle ( );
};



// Class MMH7Game.H7EnumDisplayNameHelper ( Property size: 9 iter: 9) 
// Class name index: 8264 
// 0x0009 (0x0069 - 0x0060)
class UH7EnumDisplayNameHelper : public UObject
{
public:
	unsigned char                                      mPlayerNumberProperty;                            		// 0x0060 (0x0001) [0x0000000000000000]              
	unsigned char                                      mSkillRankProperty;                               		// 0x0061 (0x0001) [0x0000000000000000]              
	unsigned char                                      mPlayerTargetType;                                		// 0x0062 (0x0001) [0x0000000000000000]              
	unsigned char                                      mMovementType;                                    		// 0x0063 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCompareOp;                                       		// 0x0064 (0x0001) [0x0000000000000000]              
	unsigned char                                      mHeroWithStat;                                    		// 0x0065 (0x0001) [0x0000000000000000]              
	unsigned char                                      mHeroAffinity;                                    		// 0x0066 (0x0001) [0x0000000000000000]              
	unsigned char                                      mQuestOrObjectiveStatus;                          		// 0x0067 (0x0001) [0x0000000000000000]              
	unsigned char                                      mEventStatus;                                     		// 0x0068 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3478 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7EventManager ( Property size: 197 iter: 400) 
// Class name index: 8266 
// 0x0C44 (0x0CA4 - 0x0060)
class UH7EventManager : public UObject
{
public:
	unsigned char                                      mCurrentEvent;                                    		// 0x0060 (0x0001) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   OnSelfActivate;                                   		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAnyActivate;                                    		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAfterAnyActivate;                               		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnImpact;                                         		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnFinish;                                         		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnInit;                                           		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGetAttacked;                                    		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAnyGetAttacked;                                 		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGetDamage;                                      		// 0x00E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGetBuffed;                                      		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAddBuff;                                        		// 0x0104 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnDoDamage;                                       		// 0x0114 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPostDoDamage;                                   		// 0x0124 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnDoCrit;                                         		// 0x0134 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnStartCombat;                                    		// 0x0144 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEndCombat;                                      		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEndQuickCombat;                                 		// 0x0164 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnCombatTurnStart;                                		// 0x0174 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnCombatTurnEnd;                                  		// 0x0184 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPreRetaliation;                                 		// 0x0194 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPostRetaliation;                                		// 0x01A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnUnitTurnStart;                                  		// 0x01B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnUnitTurnEnd;                                    		// 0x01C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBeginOfDay;                                     		// 0x01D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEndOfDay;                                       		// 0x01E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBeginOfWeek;                                    		// 0x01F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEndOfWeek;                                      		// 0x0204 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnCreatureDie;                                    		// 0x0214 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAnyCreatureDie;                                 		// 0x0224 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnKillCreature;                                   		// 0x0234 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEndOfEveryCreaturesTurn;                        		// 0x0244 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBeginOfEveryUnitsTurn;                          		// 0x0254 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGoodLuck;                                       		// 0x0264 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBadLuck;                                        		// 0x0274 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGoodMoral;                                      		// 0x0284 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAnyGoodMoral;                                   		// 0x0294 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBadMoral;                                       		// 0x02A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnDoAttack;                                       		// 0x02B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnMoralTurnStart;                                 		// 0x02C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnMoralTurnEnd;                                   		// 0x02D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGetImpact;                                      		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnWaveImpact;                                     		// 0x02F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnMoveAttackStart;                                		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPreCommand;                                     		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPostCommand;                                    		// 0x0324 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBuffExpire;                                     		// 0x0334 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAbilityPrepare;                                 		// 0x0344 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAbilityUnprepare;                               		// 0x0354 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAuraInit;                                       		// 0x0364 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAuraDestroy;                                    		// 0x0374 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnApplyAura;                                      		// 0x0384 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnRemoveAura;                                     		// 0x0394 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEnterCell;                                      		// 0x03A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnLeaveCell;                                      		// 0x03B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBuildingBuilt;                                  		// 0x03C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBuildingDestroy;                                		// 0x03D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBuildingChangeOwner;                            		// 0x03E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGovernorAssign;                                 		// 0x03F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGovernorUnassign;                               		// 0x0404 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnVisit;                                          		// 0x0414 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPostVisit;                                      		// 0x0424 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnLeave;                                          		// 0x0434 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnMeet;                                           		// 0x0444 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAnyActivateByAny;                               		// 0x0454 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnMove;                                           		// 0x0464 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnHeroDie;                                        		// 0x0474 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBuildingConquered;                              		// 0x0484 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGetTargeted;                                    		// 0x0494 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnTargetAbilityActivated;                         		// 0x04A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPrePostCommand;                                 		// 0x04B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnBattleWon;                                      		// 0x04C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnJumpPitch;                                      		// 0x04D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnDoCriticalDamage;                               		// 0x04E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnReceiveItem;                                    		// 0x04F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnLoseItem;                                       		// 0x0504 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnConsumeItem;                                    		// 0x0514 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnGridPositionChanged;                            		// 0x0524 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAnyCreatureMove;                                		// 0x0534 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnSkillLevelUp;                                   		// 0x0544 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnMagicSynergyTriggered;                          		// 0x0554 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnCombatXPGain;                                   		// 0x0564 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAfterXPGain;                                    		// 0x0574 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnOpenTresureChest;                               		// 0x0584 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnCloseTresureChest;                              		// 0x0594 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEquipItem;                                      		// 0x05A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnUnequipItem;                                    		// 0x05B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnTriggerRetaliation;                             		// 0x05C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnEmbark;                                         		// 0x05D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnDisembark;                                      		// 0x05E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnSummonEnter;                                    		// 0x05F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnHeroRecruit;                                    		// 0x0604 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPassThrough;                                    		// 0x0614 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnLordConquered;                                  		// 0x0624 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPreNextCommand;                                 		// 0x0634 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnOtherBuildingBuilt;                             		// 0x0644 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnPostBuildingProduction;                         		// 0x0654 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnCaravanCreated;                                 		// 0x0664 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   OnAfterBuffAdd;                                   		// 0x0674 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOnSelfActivate__Delegate;                     		// 0x0684 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0688 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAnyActivate__Delegate;                      		// 0x0694 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0698 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAfterAnyActivate__Delegate;                 		// 0x06A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x06A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBeginOfDay__Delegate;                       		// 0x06B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x06B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEndOfDay__Delegate;                         		// 0x06C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x06C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnUnitTurnStart__Delegate;                    		// 0x06D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x06D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnUnitTurnEnd__Delegate;                      		// 0x06E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x06E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnDoCrit__Delegate;                           		// 0x06F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x06F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnCombatTurnStart__Delegate;                  		// 0x0704 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x0708 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnCombatTurnEnd__Delegate;                    		// 0x0714 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x0718 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPreRetaliation__Delegate;                   		// 0x0724 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData10[ 0x4 ];                             		// 0x0728 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPostRetaliation__Delegate;                  		// 0x0734 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData11[ 0x4 ];                             		// 0x0738 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnImpact__Delegate;                           		// 0x0744 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData12[ 0x4 ];                             		// 0x0748 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnFinish__Delegate;                           		// 0x0754 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData13[ 0x4 ];                             		// 0x0758 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGetAttacked__Delegate;                      		// 0x0764 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData14[ 0x4 ];                             		// 0x0768 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAnyGetAttacked__Delegate;                   		// 0x0774 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData15[ 0x4 ];                             		// 0x0778 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGetDamage__Delegate;                        		// 0x0784 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData16[ 0x4 ];                             		// 0x0788 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnDoDamage__Delegate;                         		// 0x0794 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData17[ 0x4 ];                             		// 0x0798 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPostDoDamage__Delegate;                     		// 0x07A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData18[ 0x4 ];                             		// 0x07A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnInit__Delegate;                             		// 0x07B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData19[ 0x4 ];                             		// 0x07B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGetBuffed__Delegate;                        		// 0x07C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData20[ 0x4 ];                             		// 0x07C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAddBuff__Delegate;                          		// 0x07D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData21[ 0x4 ];                             		// 0x07D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnStartCombat__Delegate;                      		// 0x07E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData22[ 0x4 ];                             		// 0x07E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEndCombat__Delegate;                        		// 0x07F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData23[ 0x4 ];                             		// 0x07F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEndQuickCombat__Delegate;                   		// 0x0804 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData24[ 0x4 ];                             		// 0x0808 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBeginOfWeek__Delegate;                      		// 0x0814 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData25[ 0x4 ];                             		// 0x0818 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEndOfWeek__Delegate;                        		// 0x0824 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData26[ 0x4 ];                             		// 0x0828 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnCreatureDie__Delegate;                      		// 0x0834 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData27[ 0x4 ];                             		// 0x0838 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAnyCreatureDie__Delegate;                   		// 0x0844 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData28[ 0x4 ];                             		// 0x0848 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnKillCreature__Delegate;                     		// 0x0854 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData29[ 0x4 ];                             		// 0x0858 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEndOfEveryCreaturesTurn__Delegate;          		// 0x0864 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData30[ 0x4 ];                             		// 0x0868 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBeginOfEveryUnitsTurn__Delegate;            		// 0x0874 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData31[ 0x4 ];                             		// 0x0878 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGoodLuck__Delegate;                         		// 0x0884 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData32[ 0x4 ];                             		// 0x0888 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBadLuck__Delegate;                          		// 0x0894 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData33[ 0x4 ];                             		// 0x0898 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGoodMoral__Delegate;                        		// 0x08A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData34[ 0x4 ];                             		// 0x08A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAnyGoodMoral__Delegate;                     		// 0x08B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData35[ 0x4 ];                             		// 0x08B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBadMoral__Delegate;                         		// 0x08C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData36[ 0x4 ];                             		// 0x08C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnDoAttack__Delegate;                         		// 0x08D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData37[ 0x4 ];                             		// 0x08D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnMoralTurnStart__Delegate;                   		// 0x08E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData38[ 0x4 ];                             		// 0x08E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnMoralTurnEnd__Delegate;                     		// 0x08F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData39[ 0x4 ];                             		// 0x08F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGetImpact__Delegate;                        		// 0x0904 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData40[ 0x4 ];                             		// 0x0908 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnWaveImpact__Delegate;                       		// 0x0914 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData41[ 0x4 ];                             		// 0x0918 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnMoveAttackStart__Delegate;                  		// 0x0924 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData42[ 0x4 ];                             		// 0x0928 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPreCommand__Delegate;                       		// 0x0934 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData43[ 0x4 ];                             		// 0x0938 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPostCommand__Delegate;                      		// 0x0944 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData44[ 0x4 ];                             		// 0x0948 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBuffExpire__Delegate;                       		// 0x0954 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData45[ 0x4 ];                             		// 0x0958 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAbilityPrepare__Delegate;                   		// 0x0964 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData46[ 0x4 ];                             		// 0x0968 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAbilityUnprepare__Delegate;                 		// 0x0974 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData47[ 0x4 ];                             		// 0x0978 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAuraInit__Delegate;                         		// 0x0984 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData48[ 0x4 ];                             		// 0x0988 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAuraDestroy__Delegate;                      		// 0x0994 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData49[ 0x4 ];                             		// 0x0998 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnApplyAura__Delegate;                        		// 0x09A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData50[ 0x4 ];                             		// 0x09A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnRemoveAura__Delegate;                       		// 0x09B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData51[ 0x4 ];                             		// 0x09B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEnterCell__Delegate;                        		// 0x09C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData52[ 0x4 ];                             		// 0x09C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnLeaveCell__Delegate;                        		// 0x09D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData53[ 0x4 ];                             		// 0x09D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBuildingBuilt__Delegate;                    		// 0x09E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData54[ 0x4 ];                             		// 0x09E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBuildingDestroy__Delegate;                  		// 0x09F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData55[ 0x4 ];                             		// 0x09F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBuildingChangeOwner__Delegate;              		// 0x0A04 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData56[ 0x4 ];                             		// 0x0A08 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGovernorAssign__Delegate;                   		// 0x0A14 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData57[ 0x4 ];                             		// 0x0A18 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGovernorUnassign__Delegate;                 		// 0x0A24 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData58[ 0x4 ];                             		// 0x0A28 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnVisit__Delegate;                            		// 0x0A34 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData59[ 0x4 ];                             		// 0x0A38 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPostVisit__Delegate;                        		// 0x0A44 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData60[ 0x4 ];                             		// 0x0A48 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnLeave__Delegate;                            		// 0x0A54 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData61[ 0x4 ];                             		// 0x0A58 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnMeet__Delegate;                             		// 0x0A64 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData62[ 0x4 ];                             		// 0x0A68 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAnyActivateByAny__Delegate;                 		// 0x0A74 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData63[ 0x4 ];                             		// 0x0A78 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnMove__Delegate;                             		// 0x0A84 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData64[ 0x4 ];                             		// 0x0A88 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnHeroDie__Delegate;                          		// 0x0A94 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData65[ 0x4 ];                             		// 0x0A98 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBuildingConquered__Delegate;                		// 0x0AA4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData66[ 0x4 ];                             		// 0x0AA8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGetTargeted__Delegate;                      		// 0x0AB4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData67[ 0x4 ];                             		// 0x0AB8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnTargetAbilityActivated__Delegate;           		// 0x0AC4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData68[ 0x4 ];                             		// 0x0AC8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPrePostCommand__Delegate;                   		// 0x0AD4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData69[ 0x4 ];                             		// 0x0AD8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnBattleWon__Delegate;                        		// 0x0AE4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData70[ 0x4 ];                             		// 0x0AE8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnJumpPitch__Delegate;                        		// 0x0AF4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData71[ 0x4 ];                             		// 0x0AF8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnDoCriticalDamage__Delegate;                 		// 0x0B04 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData72[ 0x4 ];                             		// 0x0B08 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnReceiveItem__Delegate;                      		// 0x0B14 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData73[ 0x4 ];                             		// 0x0B18 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnLoseItem__Delegate;                         		// 0x0B24 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData74[ 0x4 ];                             		// 0x0B28 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnConsumeItem__Delegate;                      		// 0x0B34 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData75[ 0x4 ];                             		// 0x0B38 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnGridPositionChanged__Delegate;              		// 0x0B44 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData76[ 0x4 ];                             		// 0x0B48 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAnyCreatureMove__Delegate;                  		// 0x0B54 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData77[ 0x4 ];                             		// 0x0B58 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnSkillLevelUp__Delegate;                     		// 0x0B64 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData78[ 0x4 ];                             		// 0x0B68 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnMagicSynergyTriggered__Delegate;            		// 0x0B74 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData79[ 0x4 ];                             		// 0x0B78 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnCombatXPGain__Delegate;                     		// 0x0B84 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData80[ 0x4 ];                             		// 0x0B88 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnOpenTresureChest__Delegate;                 		// 0x0B94 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData81[ 0x4 ];                             		// 0x0B98 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnCloseTresureChest__Delegate;                		// 0x0BA4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData82[ 0x4 ];                             		// 0x0BA8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAfterXPGain__Delegate;                      		// 0x0BB4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData83[ 0x4 ];                             		// 0x0BB8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEquipItem__Delegate;                        		// 0x0BC4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData84[ 0x4 ];                             		// 0x0BC8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnUnequipItem__Delegate;                      		// 0x0BD4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData85[ 0x4 ];                             		// 0x0BD8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnTriggerRetaliation__Delegate;               		// 0x0BE4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData86[ 0x4 ];                             		// 0x0BE8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnEmbark__Delegate;                           		// 0x0BF4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData87[ 0x4 ];                             		// 0x0BF8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnDisembark__Delegate;                        		// 0x0C04 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData88[ 0x4 ];                             		// 0x0C08 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnSummonEnter__Delegate;                      		// 0x0C14 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData89[ 0x4 ];                             		// 0x0C18 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnHeroRecruit__Delegate;                      		// 0x0C24 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData90[ 0x4 ];                             		// 0x0C28 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPassThrough__Delegate;                      		// 0x0C34 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData91[ 0x4 ];                             		// 0x0C38 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnLordConquered__Delegate;                    		// 0x0C44 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData92[ 0x4 ];                             		// 0x0C48 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPreNextCommand__Delegate;                   		// 0x0C54 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData93[ 0x4 ];                             		// 0x0C58 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnOtherBuildingBuilt__Delegate;               		// 0x0C64 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData94[ 0x4 ];                             		// 0x0C68 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnPostBuildingProduction__Delegate;           		// 0x0C74 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData95[ 0x4 ];                             		// 0x0C78 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnCaravanCreated__Delegate;                   		// 0x0C84 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData96[ 0x4 ];                             		// 0x0C88 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnOnAfterBuffAdd__Delegate;                     		// 0x0C94 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData97[ 0x4 ];                             		// 0x0C98 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3480 ];

		return pClassPointer;
	};

	void UnregisterBySource ( class UH7EffectContainer* container, unsigned char Event );
	void UnregisterAll ( class UH7Effect* Effect );
	void UnregisterListener ( class UH7Effect* Effect, unsigned char Event );
	void RegisterListener ( class UH7Effect* Effect, unsigned char Event );
	void Raise ( unsigned char Event, unsigned long simulate, struct FH7EventContainerStruct container );
	void DebugLogSelf ( struct FH7EventContainerStruct container );
	unsigned char GetCurrentEvent ( );
	void OnOnAfterBuffAddNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCaravanCreatedNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostBuildingProductionNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnOtherBuildingBuiltNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPreNextCommandNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLordConqueredNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPassThroughNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnHeroRecruitNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnSummonEnterNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDisembarkNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEmbarkNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnTriggerRetaliationNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnUnequipItemNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEquipItemNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAfterXPGainNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCloseTresureChestNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnOpenTresureChestNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCombatXPGainNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMagicSynergyTriggeredNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnSkillLevelUpNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyCreatureMoveNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGridPositionChangedNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnConsumeItemNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLoseItemNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnReceiveItemNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoCriticalDamageNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnJumpPitchNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBattleWonNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPrePostCommandNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnTargetAbilityActivatedNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetTargetedNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingConqueredNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnHeroDieNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMoveNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyActivateByAnyNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMeetNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLeaveNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostVisitNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnVisitNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGovernorUnassignNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGovernorAssignNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingChangeOwnerNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingDestroyNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingBuiltNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLeaveCellNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEnterCellNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnRemoveAuraNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnApplyAuraNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAuraDestroyNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAuraInitNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAbilityUnprepareNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAbilityPrepareNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuffExpireNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostCommandNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPreCommandNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMoveAttackStartNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnWaveImpactNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetImpactNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMoralTurnEndNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMoralTurnStartNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoAttackNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBadMoralNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyGoodMoralNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGoodMoralNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBadLuckNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGoodLuckNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBeginOfEveryUnitsTurnNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndOfEveryCreaturesTurnNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnKillCreatureNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyCreatureDieNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCreatureDieNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndOfWeekNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBeginOfWeekNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndQuickCombatNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndCombatNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnStartCombatNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAddBuffNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetBuffedNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnInitNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostDoDamageNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoDamageNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetDamageNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyGetAttackedNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetAttackedNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnFinishNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnImpactNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostRetaliationNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPreRetaliationNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCombatTurnEndNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCombatTurnStartNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoCritNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnUnitTurnEndNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnUnitTurnStartNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndOfDayNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBeginOfDayNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAfterAnyActivateNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyActivateNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnSelfActivateNative ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAfterBuffAdd ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCaravanCreated ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostBuildingProduction ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnOtherBuildingBuilt ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPreNextCommand ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLordConquered ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPassThrough ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnHeroRecruit ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnSummonEnter ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDisembark ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEmbark ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnTriggerRetaliation ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnUnequipItem ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEquipItem ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAfterXPGain ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCloseTresureChest ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnOpenTresureChest ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCombatXPGain ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMagicSynergyTriggered ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnSkillLevelUp ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyCreatureMove ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGridPositionChanged ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnConsumeItem ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLoseItem ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnReceiveItem ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoCriticalDamage ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnJumpPitch ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBattleWon ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPrePostCommand ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnTargetAbilityActivated ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetTargeted ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingConquered ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnHeroDie ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMove ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyActivateByAny ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMeet ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLeave ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostVisit ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnVisit ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGovernorUnassign ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGovernorAssign ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingChangeOwner ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingDestroy ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuildingBuilt ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnLeaveCell ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEnterCell ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnRemoveAura ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnApplyAura ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAuraDestroy ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAuraInit ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAbilityUnprepare ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAbilityPrepare ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBuffExpire ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostCommand ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPreCommand ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMoveAttackStart ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnWaveImpact ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetImpact ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMoralTurnEnd ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnMoralTurnStart ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoAttack ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBadMoral ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyGoodMoral ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGoodMoral ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBadLuck ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGoodLuck ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBeginOfEveryUnitsTurn ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndOfEveryCreaturesTurn ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnKillCreature ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyCreatureDie ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCreatureDie ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndOfWeek ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBeginOfWeek ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndQuickCombat ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndCombat ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnStartCombat ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAddBuff ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetBuffed ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnInit ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostDoDamage ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoDamage ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetDamage ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyGetAttacked ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnGetAttacked ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnFinish ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnImpact ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPostRetaliation ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnPreRetaliation ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCombatTurnEnd ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnCombatTurnStart ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnDoCrit ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnUnitTurnEnd ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnUnitTurnStart ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnEndOfDay ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnBeginOfDay ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAfterAnyActivate ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnAnyActivate ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
	void OnOnSelfActivate ( class UObject* Sender, unsigned long arg1, struct FH7EventContainerStruct arg2 );
};



// Class MMH7Game.H7EventParam ( Property size: 0 iter: 0) 
// Class name index: 8268 
// 0x0000 (0x0060 - 0x0060)
class UH7EventParam : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3482 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7HeroEventParam ( Property size: 18 iter: 18) 
// Class name index: 8270 
// 0x006C (0x00CC - 0x0060)
class UH7HeroEventParam : public UH7EventParam
{
public:
	class AH7EditorHero*                               mEventHeroTemplate;                               		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      mEventPlayerNumber;                               		// 0x0068 (0x0001) [0x0000000000000000]              
	unsigned char                                      mEventEnemyPlayerNumber;                          		// 0x0069 (0x0001) [0x0000000000000000]              
	unsigned char                                      mEventSkillRank;                                  		// 0x006A (0x0001) [0x0000000000000000]              
	unsigned char                                      mShipInteraction;                                 		// 0x006B (0x0001) [0x0000000000000000]              
	class AH7VisitableSite*                            mEventSite;                                       		// 0x006C (0x0008) [0x0000000000000000]              
	int                                                mEventHeroLevel;                                  		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                mEventOldHeroLevel;                               		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                mEventMovementPoints;                             		// 0x007C (0x0004) [0x0000000000000000]              
	class UH7Skill*                                    mEventSkill;                                      		// 0x0080 (0x0008) [0x0000000000000000]              
	class UH7HeroAbility*                              mEventLearnedAbility;                             		// 0x0088 (0x0008) [0x0000000000000000]              
	class UH7HeroAbility*                              mEventCastedAbility;                              		// 0x0090 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mEventTargetArmy;                                 		// 0x0098 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mEventVictoriousArmy;                             		// 0x00A0 (0x0008) [0x0000000000000000]              
	struct FString                                     mCombatMapName;                                   		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7AdventureMapCell*                         mBeforeBattleCell;                                		// 0x00B8 (0x0008) [0x0000000000000000]              
	int                                                mCombatCurrentTurn;                               		// 0x00C0 (0x0004) [0x0000000000000000]              
	class AH7BattleSite*                               mBattleSite;                                      		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3484 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7MapEventParam ( Property size: 1 iter: 1) 
// Class name index: 8272 
// 0x0004 (0x0064 - 0x0060)
class UH7MapEventParam : public UH7EventParam
{
public:
	unsigned long                                      mActivePlayerWon : 1;                             		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3486 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7PlayerEventParam ( Property size: 6 iter: 6) 
// Class name index: 8274 
// 0x0038 (0x0098 - 0x0060)
class UH7PlayerEventParam : public UH7EventParam
{
public:
	unsigned char                                      mEventPlayerNumber;                               		// 0x0060 (0x0001) [0x0000000000000000]              
	int                                                mGridIndex;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mGridCoordinates;                                 		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7TownBuilding*                             mTownbuilding;                                    		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FString                                     mPopupName;                                       		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7EditorHero*                               mRecruitedHero;                                   		// 0x0090 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3488 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TimerEventParam ( Property size: 1 iter: 1) 
// Class name index: 8276 
// 0x0008 (0x0068 - 0x0060)
class UH7TimerEventParam : public UH7EventParam
{
public:
	class UH7SeqAct_StartTimer*                        mStartTimer;                                      		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3490 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7Faction ( Property size: 51 iter: 133) 
// Class name index: 8278 
// 0x01B8 (0x0218 - 0x0060)
class UH7Faction : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mFactionName;                                     		// 0x0068 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      mColor;                                           		// 0x0078 (0x0004) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized )
	TArray< class UH7Faction* >                        mAlliedFactions;                                  		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7Faction* >                        mEnemyFactions;                                   		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mFactionFortName;                                 		// 0x009C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mFactionArmyName;                                 		// 0x00AC (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UTexture2D*                                  mFactionIcon;                                     		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionSymbol;                                   		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionBanner;                                   		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionBannerStripes;                            		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionMarker;                                   		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mTownBuildTreeLayout;                             		// 0x00E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mFactionBannerIcon;                               		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mStainedGlassGrid;                                		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mStainedGlassHighlight;                           		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mStainedGlassBase;                                		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCouncilLeftStainedGlassGrid;                     		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCouncilLeftStainedGlassHighlight;                		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCouncilLeftStainedGlassBase;                     		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCouncilRightStainedGlassGrid;                    		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCouncilRightStainedGlassHighlight;               		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCouncilRightStainedGlassBase;                    		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDecalOuter;                                      		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDecalInner;                                      		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDecalOuterUPLAY;                                 		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDecalInnerUPLAY;                                 		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle1;                                         		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle2;                                         		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle3;                                         		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle4;                                         		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle5;                                         		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle6;                                         		// 0x018C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle7;                                         		// 0x0194 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPuzzle8;                                         		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroVisuals*                              mCaravanVisuals;                                  		// 0x01A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPreferredAbilitySchool;                          		// 0x01AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mForbiddenAbilitySchool;                          		// 0x01AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorWarUnit*                            mDefaultSiegeWarUnit;                             		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorWarUnit*                            mDefaultAttackWarUnit;                            		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorWarUnit*                            mDefaultSupportWarUnit;                           		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorWarUnit*                            mDefaultHybridWarUnit;                            		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Town*                                     mStartTown;                                       		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Fort*                                     mLevel1Fort;                                      		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Dwelling*                                 mCoreDwelling;                                    		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Dwelling*                                 mEliteDwelling;                                   		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Dwelling*                                 mChampionDwelling1;                               		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Dwelling*                                 mChampionDwelling2;                               		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mDefaultGarrisonArmyTown;                         		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mDefaultGarrisonArmyFort;                         		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          mLoadScreenBackground;                            		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3492 ];

		return pClassPointer;
	};

	void SetTownBuildTreeLayout ( struct FString layout );
	void DelStartDwelling ( unsigned char Type, unsigned char championChoice );
	class AH7Dwelling* GetStartDwelling ( unsigned char Type, unsigned char championChoice );
	void DelStartFort ( );
	class AH7Fort* GetStartFort ( );
	void DelStartTown ( );
	class AH7Town* GetStartTown ( );
	void DelDecalInnerTextureUPLAY ( );
	class UTexture2D* GetDecalInnerTextureUPLAY ( );
	void DelDecalOuterTextureUPLAY ( );
	class UTexture2D* GetDecalOuterTextureUPLAY ( );
	void DelDecalInnerTexture ( );
	class UTexture2D* GetDecalInnerTexture ( );
	void DelDecalOuterTexture ( );
	class UTexture2D* GetDecalOuterTexture ( );
	void DelPuzzle8 ( );
	void DelPuzzle7 ( );
	void DelPuzzle6 ( );
	void DelPuzzle5 ( );
	void DelPuzzle4 ( );
	void DelPuzzle3 ( );
	void DelPuzzle2 ( );
	void DelPuzzle1 ( );
	struct FString GetPuzzle8 ( );
	struct FString GetPuzzle7 ( );
	struct FString GetPuzzle6 ( );
	struct FString GetPuzzle5 ( );
	struct FString GetPuzzle4 ( );
	struct FString GetPuzzle3 ( );
	struct FString GetPuzzle2 ( );
	struct FString GetPuzzle1 ( );
	void DelCouncilRightStainedGlassBase ( );
	struct FString GetCouncilRightStainedGlassBase ( );
	void DelCouncilRightStainedGlassHighlight ( );
	struct FString GetCouncilRightStainedGlassHighlight ( );
	void DelCouncilRightStainedGlassGrid ( );
	struct FString GetCouncilRightStainedGlassGrid ( );
	void DelCouncilLeftStainedGlassBase ( );
	struct FString GetCouncilLeftStainedGlassBase ( );
	void DelCouncilLeftStainedGlassHighlight ( );
	struct FString GetCouncilLeftStainedGlassHighlight ( );
	void DelCouncilLeftStainedGlassGrid ( );
	struct FString GetCouncilLeftStainedGlassGrid ( );
	void DelStainedGlassBase ( );
	struct FString GetStainedGlassBase ( );
	void DelStainedGlassHighlight ( );
	struct FString GetStainedGlassHighlight ( );
	void DelStainedGlassGrid ( );
	struct FString GetStainedGlassGrid ( );
	class UMaterialInterface* GetLoadscreenBackground ( );
	class UH7HeroVisuals* GetCaravanVisuals ( );
	unsigned char GetForbiddenAbilitySchool ( );
	unsigned char GetPreferredAbilitySchool ( );
	bool IsEnemyFaction ( class UH7Faction* Faction );
	bool IsAlliedFaction ( class UH7Faction* Faction );
	TArray< class UH7Faction* > GetEnemyFactions ( );
	TArray< class UH7Faction* > GetAlliedFactions ( );
	struct FString GetTownBuildTreeLayout ( );
	struct FString GetFactionBannerStripesPath ( );
	class UTexture2D* GetFactionBannerStripes ( );
	struct FString GetFactionBannerPath ( );
	class UTexture2D* GetFactionBanner ( );
	struct FString GetFactionSepiaIconPath ( );
	class UTexture2D* GetFactionSepiaIcon ( );
	struct FString GetFactionColorIconPath ( );
	class UTexture2D* GetFactionColorIcon ( );
	struct FString GetFactionMarkerIconPath ( );
	class UTexture2D* GetFactionMarkerIcon ( );
	struct FString GetNumberedArmyName ( int nr );
	struct FString GetDefaultFortName ( );
	struct FColor GetColor ( );
	struct FString GetName ( );
	class AH7EditorWarUnit* GetDefaultHybridWarUnit ( );
	class AH7EditorWarUnit* GetDefaultSupportWarUnit ( );
	class AH7EditorWarUnit* GetDefaultAttackWarUnit ( );
	class AH7EditorWarUnit* GetDefaultSiegeWarUnit ( );
	class AH7AdventureArmy* GetDefaultGarrisonFort ( );
	class AH7AdventureArmy* GetDefaultGarrisonTown ( );
	class AH7EditorWarUnit* GetDefaultWarUnitByType ( unsigned char Type );
	struct FString GetArchetypeID ( );
	void DelFactionBannerIconRef ( );
	struct FString GetFactionBannerIconPath ( );
};



// Class MMH7Game.H7FCTController ( Property size: 3 iter: 13) 
// Class name index: 8280 
// 0x001C (0x025C - 0x0240)
class AH7FCTController : public AActor
{
public:
	TArray< class UH7FCTElement* >                     mActiveFCTs;                                      		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7FCTMappingProperties*                     mFCTType2IconMapping;                             		// 0x0250 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsHighlighting : 1;                              		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3494 ];

		return pClassPointer;
	};

	void Render ( class UCanvas* myCanvas );
	void eventTick ( float DeltaTime );
	bool IsConflicting ( struct FVector A, struct FVector B );
	float GetLastConflictingFloatOffset ( struct FVector NewPos );
	class UH7FCTElement* StartFCTReal ( unsigned char Type, struct FVector StartPosition, struct FString Text, struct FColor TextColor, class UTexture2D* Icon );
	class UH7FCTElement* StartFCT ( unsigned char Type, struct FVector StartPosition, class AH7Player* Initiator, struct FString Text, struct FColor TextColor, class UTexture2D* Icon );
	void PostBeginPlay ( );
	class AH7FCTController* GetInstance ( );
	bool HasActiveHighlights ( );
	void SetHighlighting ( unsigned long isHighlighting );
};



// Class MMH7Game.H7Flag ( Property size: 25 iter: 46) 
// Class name index: 8282 
// 0x0094 (0x02D4 - 0x0240)
class AH7Flag : public AActor
{
public:
	class AH7AdventureController*                      mAdventureController;                             		// 0x0240 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    mFlagEmitter;                                     		// 0x0248 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             mFlagParticleSystem;                              		// 0x0250 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mFlagMat;                                         		// 0x0258 (0x0008) [0x0000000000000000]              
	class UCylinderComponent*                          mCollider;                                        		// 0x0260 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              mColliderRadius;                                  		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              mColliderHeight;                                  		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              mScale;                                           		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              mCurrentScale;                                    		// 0x0274 (0x0004) [0x0000000000000000]              
	float                                              mDefaultScale;                                    		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              mTimer;                                           		// 0x027C (0x0004) [0x0000000000000000]              
	unsigned char                                      mZoomDir;                                         		// 0x0280 (0x0001) [0x0000000000000000]              
	float                                              mRatio;                                           		// 0x0284 (0x0004) [0x0000000000000000]              
	struct FVector                                     mOriginalRelativeLocation;                        		// 0x0288 (0x000C) [0x0000000000000000]              
	float                                              mCurrentZoom;                                     		// 0x0294 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsMainFlag : 1;                                  		// 0x0298 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mPlayAnim : 1;                                    		// 0x0298 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mForceHide : 1;                                   		// 0x0298 (0x0004) [0x0000000000000000] [0x00000004] 
	class AH7Player*                                   mLocalPlayer;                                     		// 0x029C (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mOwningPlayer;                                    		// 0x02A4 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mOwningArmy;                                      		// 0x02AC (0x0008) [0x0000000000000000]              
	class AH7VisitableSite*                            mOwningSite;                                      		// 0x02B4 (0x0008) [0x0000000000000000]              
	class AH7PlayerController*                         mPlayerController;                                		// 0x02BC (0x0008) [0x0000000000000000]              
	class AH7Camera*                                   mCamera;                                          		// 0x02C4 (0x0008) [0x0000000000000000]              
	class UH7BaseBuff*                                 mBuff;                                            		// 0x02CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3496 ];

		return pClassPointer;
	};

	void ShowAnim ( unsigned long permanent );
	void StopAnim ( );
	void eventPlayAnim ( float DeltaTime, float growSize );
	void AdaptFlagSizeAndHeight ( );
	void PostBeginPlay ( );
	void SetScale ( float Scale );
	void setColor ( struct FColor playerColor );
	void SetFaction ( class UH7Faction* Faction );
	void SetSymbol ( class UTexture2D* Icon );
	void InitAsBuffIcon ( class UH7BaseBuff* buff );
	void InitAsQuestTargetFlag ( );
	void InitAsNPCFlag ( );
	void InitLocation ( struct FVector NewLocation );
	bool GetMainFlag ( );
	void SetMainFlag ( unsigned long isMainFlag );
	void SetOwningPlayer ( class AH7Player* NewPlayer );
	class UH7BaseBuff* GetBuff ( );
	void ForceFlagHide ( unsigned long Hidden );
};



// Class MMH7Game.H7FlashMovieCntl ( Property size: 11 iter: 70) 
// Class name index: 8284 
// 0x003C (0x0220 - 0x01E4)
class UH7FlashMovieCntl : public UGFxMoviePlayer
{
public:
	class AH7PlayerController*                         mPlayerController;                                		// 0x01E4 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           mLocaSection;                                     		// 0x01EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  mRootMC;                                          		// 0x01FC (0x0008) [0x0000000000000000]              
	class UH7GFxFlashController*                       mFlashController;                                 		// 0x0204 (0x0008) [0x0000000000000000]              
	int                                                mFlashWidth;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                mFlashHeight;                                     		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      mWasInitialized : 1;                              		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsDragginUnit : 1;                               		// 0x0214 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsShowingBlocklayer : 1;                         		// 0x0214 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mWasCanceled : 1;                                 		// 0x0214 (0x0004) [0x0000000000000000] [0x00000008] 
	class UH7ContainerCntl*                            mContainer;                                       		// 0x0218 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3498 ];

		return pClassPointer;
	};

	bool IsRemoveWhenClicked ( struct FString containerName, struct FString ElementName );
	void HighlightClicked ( struct FString containerName, struct FString ElementName );
	class UGFxObject* GetAttributeIconStrings ( );
	bool IsMovieSkippedLastFrame ( );
	void AnyKeyReleased ( struct FString unrealKeyName, int flashKeyCode, int flashCharCode, unsigned long Shift, unsigned long Control, unsigned long Alt );
	void AnyKeyPressed ( struct FString unrealKeyName, int flashKeyCode, int flashCharCode, unsigned long Shift, unsigned long Control, unsigned long Alt );
	void ClosePopup ( );
	struct FVector2D UnrealPixels2FlashPixels ( struct FVector2D unrealPixels );
	struct FIntPoint GetFlashSize ( );
	struct FVector2D FlashPixels2UnrealPixels ( struct FVector2D flashPixels );
	void SetConstraints ( int MinX, int MinY, int MaxX, int MaxY );
	void OpenHeropediaWithCreature ( struct FString stringID );
	void OpenHeropediaWithHero ( struct FString archetypeID );
	struct FString UnrealColorToHex ( struct FColor unrealColor );
	struct FString UnrealColorToHTMLColor ( struct FColor unrealColor );
	struct FString UnrealColorToFlashColor ( struct FColor unrealColor );
	bool IsDraggingUnit ( );
	bool Unreal ( );
	void Log ( struct FString Message );
	struct FString GetSettingEnum ( struct FString Key );
	float GetSettingNumber ( struct FString Key );
	bool GetSettingBool ( struct FString Key );
	struct FString FlashLocalize ( struct FString locaKey, struct FString keybindingCommand, unsigned long replaceIcons );
	struct FString GetGUIColor ( );
	struct FString GetAssetPath ( struct FString Key );
	struct FString GetFlashPath ( class UTexture2D* Asset );
	struct FString GetMagicTierSymbol ( int Tier );
	struct FString GetRadioButtonSymbolPath ( int Id );
	void PlayGUISound ( struct FString Str );
	void CaptureMouseWheel ( unsigned long val );
	bool IsRightClickThisFrame ( );
	bool IsShiftDown ( );
	bool IsRightMouseDown ( class UGFxObject* Object );
	void MouseOut ( );
	void MouseOver ( );
	void EnableMouse ( );
	void DisableMouse ( unsigned long showBlockLayer );
	void WaiveRealFocus ( );
	void RequestRealFocus ( );
	void WaiveFocus ( );
	void RequestFocus ( );
	void RequestUnBlockBelow ( );
	void RequestBlockBelow ( );
	void StartAdvance ( );
	void StopInput ( );
	void StopAdvanceReally ( );
	void StopAdvance ( );
	bool CanBeStopped ( );
	bool Initialize ( );
	void AdvanceDebug ( float Time );
	bool Start ( unsigned long StartPaused );
	class AH7Hud* GetHUD ( );
	class UH7GFxFlashController* GetFlashController ( unsigned long verbose );
	class UH7ContainerCntl* GetContainer ( );
	void SetPlayerOwner ( class AH7PlayerController* Player );
	void SetWasCanceled ( unsigned long canceled );
	void SetInitialized ( );
	bool WasInitialized ( );
	class UGFxObject* GetRoot ( );
};



// Class MMH7Game.H7DuelSetupWindowCntl ( Property size: 14 iter: 71) 
// Class name index: 8286 
// 0x0068 (0x0288 - 0x0220)
class UH7DuelSetupWindowCntl : public UH7FlashMovieCntl
{
public:
	struct FPointer                                    VfTable_IH7ContentScannerListener;                		// 0x0220 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7GFxDuelSetupWindow*                       mDuelSetup;                                       		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxHeroSelection*                         mHeroSelection;                                   		// 0x0230 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnBack;                                         		// 0x0238 (0x0008) [0x0000000000000000]              
	class UH7GFxLog*                                   mChatWindow;                                      		// 0x0240 (0x0008) [0x0000000000000000]              
	class UH7Log*                                      mChatLog;                                         		// 0x0248 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsLoadedGame : 1;                                		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsHotSeat : 1;                                   		// 0x0250 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mHeroSelectionVisible : 1;                        		// 0x0250 (0x0004) [0x0000000000000000] [0x00000004] 
	class UH7ListingCombatMap*                         mCombatMapScanner;                                		// 0x0254 (0x0008) [0x0000000000000000]              
	TArray< struct FH7ContentScannerCombatMapData >    mMapHeaders;                                      		// 0x025C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Texture2DStreamLoad*                      mMapThumbnail;                                    		// 0x026C (0x0008) [0x0000000000000000]              
	unsigned char                                      mPendingKickAI;                                   		// 0x0274 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnKickDoneDelegate__Delegate;                   		// 0x0278 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x027C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3500 ];

		return pClassPointer;
	};

	void AddChatLine ( struct FString Line, struct FString PlayerName );
	void SendChatLine ( struct FString Line );
	void GetHeroInfo ( struct FString heroArchetypeID );
	TArray< struct FString > GetHeroesEnumList ( int PlayerIndex, unsigned long showHeroSelectionPopUp, class UH7Faction* Faction );
	TArray< struct FH7DropDownEntry > GetEnumListByObject ( int enumMax, class UObject* enumObject );
	TArray< struct FH7DropDownEntry > GetColorEnumList ( );
	void AddEntry ( struct FString Caption, int Data, unsigned long Enabled, struct FString strData, struct FString Icon, TArray< struct FH7DropDownEntry >* List );
	TArray< struct FH7DropDownEntry > GetEnumList ( struct FString enumName, int PlayerIndex );
	void ClosePopupForReal ( );
	void CloseHeroSelection ( );
	void ClosePopup ( );
	void btnBackClick ( struct FEventData Data );
	void SetPlayerFaction ( int PlayerIndex, struct FString factionArchetypeID );
	void SetPlayerHero ( int PlayerIndex, struct FString heroArchetypeID );
	void SetPlayerReady ( int PlayerIndex, unsigned long IsReady );
	void SetPlayerColor ( int PlayerIndex, int selectedColorEnum );
	void SetPlayerArmy ( int PlayerIndex, int armyIndex );
	void SetHeroSelectionVisible ( unsigned long Visible );
	void SetNewList ( struct FString dropDownName, TArray< struct FH7DropDownEntry > List, int PlayerIndex, unsigned long blockSendingToUnreal );
	void UpdateAfterPlayerLeaving ( int PlayerIndex );
	void KickDone ( );
	void KickAIDone ( );
	void KickConfirm ( );
	void KickPlayerPopup ( int PlayerIndex, struct FScriptDelegate Callback );
	void KickPlayer ( int PlayerIndex );
	void SetPlayerSlot ( int PlayerIndex, int slotType );
	void SetPlayerPosition ( int PlayerIndex, int positionEnum );
	void SetCombatTimer ( int Value );
	void SetSpeedCombat ( float val );
	void SetMap ( struct FString MapFilename );
	struct FString GetGameType ( );
	void TrackGameStart ( );
	void StartGame ( );
	bool CanStartDuel ( struct FString* blockReason );
	void CheckStartConditions ( );
	void DisplayPlayerSettings ( int PlayerIndex, struct FPlayerLobbySelectedSettings PlayerData );
	void DisplayAllPlayerSettings ( );
	void DisplayGameSettings ( struct FH7LobbyDataGameSettings* GameSettings );
	void updateThumbnail ( );
	void LoadThumbnail ( struct FH7ContentScannerCombatMapData MapData );
	void DisplayMapSettings ( struct FH7LobbyDataMapSettings* mapSettings );
	struct FH7ContentScannerCombatMapData GetMapHeader ( struct FString MapFilename );
	void processMap ( struct FH7ContentScannerCombatMapData CombatData );
	void ProcessMaps ( );
	void eventOnScanned_Campaign ( struct FH7ContentScannerCampaignData* CampaignData );
	void eventOnScanned_CombatMap ( struct FH7ContentScannerCombatMapData* CombatData );
	void eventOnScanned_AdventureMap ( struct FH7ContentScannerAdventureMapData* AdvData );
	void OpenPopup ( unsigned long HOTSEAT );
	bool IsHotSeat ( );
	bool Initialize ( );
	bool IsHeroSelectionVisible ( );
	bool isMaster ( );
	bool IsLAN ( );
	bool isMultiplayer ( );
	class UH7GFxDuelSetupWindow* GetDuelWindow ( );
	class UH7DuelSetupWindowCntl* GetInstance ( );
	void OnKickDoneDelegate ( );
};



// Class MMH7Game.H7MapSelectCntl ( Property size: 10 iter: 36) 
// Class name index: 8288 
// 0x0040 (0x0260 - 0x0220)
class UH7MapSelectCntl : public UH7FlashMovieCntl
{
public:
	struct FPointer                                    VfTable_IH7ContentScannerListener;                		// 0x0220 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7GfxMapList*                               mMapSelection;                                    		// 0x0228 (0x0008) [0x0000000000000000]              
	TArray< struct FH7ContentScannerAdventureMapData > mFoundMaps;                                       		// 0x0230 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CampaignDefinition* >             mFoundCampaigns;                                  		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mLoadingThumb : 1;                                		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsMultiplayer : 1;                               		// 0x0250 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsHotSeat : 1;                                   		// 0x0250 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsLAN : 1;                                       		// 0x0250 (0x0004) [0x0000000000000000] [0x00000008] 
	class UH7Texture2DStreamLoad*                      mMapThumbnail;                                    		// 0x0254 (0x0008) [0x0000000000000000]              
	int                                                mCurrentCampaignMap;                              		// 0x025C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3502 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void BtnBackClicked ( );
	void DisplayDifficulty ( );
	void SetDifficulty ( int Index, int Value );
	void SetCustomDifficulty ( struct FString enumName, int Value );
	TArray< struct FH7DropDownEntry > GetEnumList ( struct FString enumName );
	void BtnContinueClicked ( int selectedListIndex, unsigned long isCampaign );
	void MapClicked ( int clickedMapIndex );
	void updateThumbnail ( );
	void StopScanner ( );
	void AddMap ( struct FH7ContentScannerAdventureMapData AdvData );
	bool CanBeMultiplayer ( struct FH7ContentScannerAdventureMapData MapData );
	bool CanBeSingleplayer ( struct FH7ContentScannerAdventureMapData MapData );
	void eventOnScanned_Campaign ( struct FH7ContentScannerCampaignData* CampaignData );
	void eventOnScanned_CombatMap ( struct FH7ContentScannerCombatMapData* CombatData );
	void eventOnScanned_AdventureMap ( struct FH7ContentScannerAdventureMapData* AdvData );
	struct FString GetCampaignMapFileName ( int campaignIndex, int mapNumber );
	void CampaignClicked ( int clickedListIndex );
	void SetCurrentCampaignMap ( int Number );
	void AddCampaign ( struct FH7ContentScannerCampaignData CampaignData );
	void AddInitialCustomCampaigns ( );
	class UH7CampaignDefinition* ConvertDataToDefinition ( struct FH7ContentScannerCampaignData CampaignData );
	void Update ( unsigned long forMultiplayer, unsigned long forLAN, unsigned long HOTSEAT );
	bool Initialize ( );
	class UH7MapSelectCntl* GetInstance ( );
	class UH7GfxMapList* GetMapList ( );
};



// Class MMH7Game.H7FOWController ( Property size: 25 iter: 59) 
// Class name index: 8290 
// 0x00D8 (0x0318 - 0x0240)
class AH7FOWController : public AActor
{
public:
	unsigned long                                      cUseTrueFogOfWar : 1;                             		// 0x0240 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      mPlayerChanged : 1;                               		// 0x0240 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsLerpingUp : 1;                                 		// 0x0240 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mNeedsLerp : 1;                                   		// 0x0240 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mRefreshMe : 1;                                   		// 0x0240 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      mLoadGameKeepAlive : 1;                           		// 0x0240 (0x0004) [0x0000000000000000] [0x00000020] 
	TArray< struct FPlayerFogInfo >                    mPlayerFogInfos;                                  		// 0x0244 (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FPlayerFogInfo                              mNextPlayerInfo;                                  		// 0x0254 (0x0054) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class URenderTargetMaterialEffect*                 mFOWPPBlur;                                       		// 0x02A8 (0x0008) [0x0000000000000000]              
	class UMaterialEffect*                             mFOWPP;                                           		// 0x02B0 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mFOWPPBlurMat;                                    		// 0x02B8 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mFOWPPMat;                                        		// 0x02C0 (0x0008) [0x0000000000000000]              
	int                                                mCellCount;                                       		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                mCellSize;                                        		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                mGridIndex;                                       		// 0x02D0 (0x0004) [0x0000000000000000]              
	class AH7AdventureGridManager*                     mGridManager;                                     		// 0x02D4 (0x0008) [0x0000000000001000]              ( CPF_Native )
	int                                                mCurrentPlayerNumber;                             		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              mBufferingDelta;                                  		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              mBlendingTime;                                    		// 0x02E4 (0x0004) [0x0000000000000000]              
	class UTexture2DDynamic*                           mDynamicFogTexture;                               		// 0x02E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            mPixelData;                                       		// 0x02F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mNumOfTilesX;                                     		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                mNumOfTilesY;                                     		// 0x0304 (0x0004) [0x0000000000000000]              
	class UH7PlayerEventParam*                         mPlayerEventParam;                                		// 0x0308 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           mPostProcessFOW;                                  		// 0x0310 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3504 ];

		return pClassPointer;
	};

	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void eventPostSerialize ( );
	void Deserialize ( class UJsonObject* Data );
	void GetFogInfoArray ( int PlayerIndex, TArray< int >* outArray );
	struct FString Serialize ( );
	void Tick ( float DeltaTime );
	void ExploreFog ( unsigned long Cover );
	void ExploreFogNative ( unsigned long Cover );
	void eventNative_ExploreFog ( );
	void UpdateFogVisibility ( );
	void ComputeAll ( );
	void UpdateFog ( TArray< int > handledTiles, unsigned long Cover );
	void UpdateDrawing ( );
	void eventDestroyed ( );
	void HandleInitSightRadius ( );
	void Init ( int GridIndex, unsigned long fromSave );
	class UTexture2DDynamic* GetFogTexture ( );
	TArray< class UPrimitiveComponent* > GetIntersectingPrimitivesByBox ( struct FBox Boxer );
	TArray< class UPrimitiveComponent* > GetPrimitivesAtCell ( class UH7AdventureMapCell* cell );
	void RevealFog ( );
	bool HandleExploredTiles ( int PlayerNumber, TArray< struct FIntPoint > exploredPoints, unsigned long Init, unsigned long Cover );
	bool CheckExploredTile ( int PlayerNumber, struct FIntPoint Point );
	int GetNumberOfExploredTilesFor ( int dasPlayer );
	void RestoreNextPlayer ( );
	void OverrideNextPlayer ( unsigned char PlayerNumber );
	int GetPlayerFogInfoIndexByPlayer ( int PlayerNumber );
	TArray< int > GetExploredTilesForPlayer ( int PlayerID );
	class UMaterialInstanceConstant* GetFogMaterial ( );
	void ResetHandledTiles ( int dasPlayer );
	int GetGridIndex ( );
	int GetGridSizeY ( );
	int GetGridSizeX ( );
	void MarkForDeletion ( unsigned long val );
	bool IsMarkedForDeletion ( );
};



// Class MMH7Game.H7FracturedMeshActor ( Property size: 6 iter: 15) 
// Class name index: 8292 
// 0x003C (0x0310 - 0x02D4)
class AH7FracturedMeshActor : public AFracturedStaticMeshActor
{
public:
	TArray< class AFracturedStaticMeshPart* >          FracParts;                                        		// 0x02D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7FracturedMeshActor*                       FracActor;                                        		// 0x02E4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsClone : 1;                                     		// 0x02EC (0x0004) [0x0000000000000000] [0x00000001] 
	class UDynamicLightEnvironmentComponent*           mLightEnv;                                        		// 0x02F0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     mOriginalMeshLoc;                                 		// 0x02F8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mOriginalMeshRot;                                 		// 0x0304 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3506 ];

		return pClassPointer;
	};

	void eventRestoreTransform ( );
	void eventDestroyed ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventFracture ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventPostBeginPlay ( );
	void SetOriginalTransform ( struct FVector NewLocation, struct FRotator NewRotation );
	void SetIsClone ( unsigned long IsClone );
	bool IsClone ( );
};



// Class MMH7Game.H7GameplayFracturedMeshActor ( Property size: 18 iter: 35) 
// Class name index: 8294 
// 0x0074 (0x0384 - 0x0310)
class AH7GameplayFracturedMeshActor : public AH7FracturedMeshActor
{
public:
	class UPrimitiveComponent*                         ChangingTerrainArea;                              		// 0x0310 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class AH7DestructibleObjectManipulator* >  mManipulators;                                    		// 0x0318 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mIsFractured : 1;                                 		// 0x0328 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mInInit : 1;                                      		// 0x0328 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsDestroying : 1;                                		// 0x0328 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsSinking : 1;                                   		// 0x0328 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mIsRepairing : 1;                                 		// 0x0328 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mIsFXRepairing : 1;                               		// 0x0328 (0x0004) [0x0000000000000000] [0x00000020] 
	class UParticleSystem*                             mRepairEffect;                                    		// 0x032C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mSinkTime;                                        		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mRepairSpeed;                                     		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDestroySoundEvent;                               		// 0x033C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mRepairSoundEvent;                                		// 0x0344 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7AdventureMapCell* >               OnBreak_CellsToChange;                            		// 0x034C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            OnBreak_CellsToChangeInitialModifiers;            		// 0x035C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      OnBreak_NewMovementModifier;                      		// 0x036C (0x0001) [0x0000000000000000]              
	float                                              mRepairPercent;                                   		// 0x0370 (0x0004) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         mRebuildMats;                                     		// 0x0374 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3508 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	TArray< class AH7DestructibleObjectManipulator* > GetManipulators ( );
	void SetRepairing ( unsigned long IsRepairing );
	bool IsRepairing ( );
	void SetDestroying ( unsigned long IsDestroying );
	bool IsDestroying ( );
	void RebuildFX ( );
	bool IsArmyOnTiles ( );
	void OnUnblock ( );
	void UnBlockTiles ( );
	void OnBlock ( );
	void BlockTiles ( );
	void eventTick ( float DeltaTime );
	void eventInit ( );
	void eventPostBeginPlay ( );
	void SetFractured ( unsigned long IsFractured );
	bool IsFractured ( );
};



// Class MMH7Game.H7FracturedWalkableObject ( Property size: 6 iter: 14) 
// Class name index: 8296 
// 0x002C (0x03B0 - 0x0384)
class AH7FracturedWalkableObject : public AH7GameplayFracturedMeshActor
{
public:
	struct FPointer                                    VfTable_IH7WalkableInterface;                     		// 0x0384 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x038C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IThumbnailable;                        		// 0x0394 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UPrimitiveComponent*                         ScanOverride_Collider;                            		// 0x039C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UH7AdventureLayerCellProperty*               ScanOverride_LayerCellModifier;                   		// 0x03A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mLoadGameKeepAlive : 1;                           		// 0x03AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3510 ];

		return pClassPointer;
	};

	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void Deserialize ( class UJsonObject* Data );
	struct FString Serialize ( );
	void PostBeginPlay ( );
	class UH7AdventureLayerCellProperty* GetScanOverrideModifier ( );
	class UPrimitiveComponent* GetScanOverrideCollider ( );
	void MarkForDeletion ( unsigned long val );
	bool IsMarkedForDeletion ( );
};



// Class MMH7Game.H7GameData ( Property size: 23 iter: 64) 
// Class name index: 8298 
// 0x0198 (0x01F8 - 0x0060)
class UH7GameData : public UObject
{
public:
	TArray< class UH7CampaignDefinition* >             mCampaigns;                                       		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7Faction* >                        mFactions;                                        		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7Faction*                                  mNeutralFaction;                                  		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mHubMapName;                                      		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7ArtifactCollection                       mArtifactPool[ 0x6 ];                             		// 0x0098 (0x0060) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7FactionCreatureData >            mCreatureLists;                                   		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mHeroPool;                                        		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mExclusiveHeroesSkirmish;                         		// 0x0118 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mHeropediaHeroes;                                 		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mPrivilegHeroesSkirmish;                          		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mPrivilegHeroesDuel;                              		// 0x0148 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mRandomHeroPool;                                  		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mSpells;                                          		// 0x0168 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7ResourceSet*                              mResourceSet;                                     		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7GenericTownNames* >               mGenericTownNames;                                		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorArmy* >                     mDuelArmies;                                      		// 0x0190 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mDuelHeroes;                                      		// 0x01A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7EditorArmy*                               mRandomDuelArmy;                                  		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7GeneralLoreEntry* >               mGeneralLore;                                     		// 0x01B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorWarUnit* >                  mWarUnits;                                        		// 0x01C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7Faction*                                  mRandomFaction;                                   		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorHero*                               mRandomHero;                                      		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           mUsedGenericTownNames;                            		// 0x01E8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3512 ];

		return pClassPointer;
	};

	TArray< class AH7EditorArmy* > GetDuelArmies ( class UH7Faction* Faction );
	class AH7EditorArmy* GetRandomArmy ( class UH7Faction* Faction );
	int GetDuelArmyIndex ( class AH7EditorArmy* Army, class UH7Faction* Faction );
	class AH7EditorArmy* GetDuelArmy ( int I, class UH7Faction* Faction );
	class UH7CampaignDefinition* GetCampaignOfMap ( struct FString MapFilename );
	class UH7CampaignDefinition* GetCampaignByCouncilor ( class AH7EditorHero* councilor );
	class UH7CampaignDefinition* GetCampaignByID ( struct FString campaignID, unsigned long ignoreFilter );
	struct FString GetHubMapName ( );
	class UH7Faction* GetFactionByArchetypeID ( struct FString factionAID );
	void GetHeropediaHeroes ( TArray< class AH7EditorHero* >* Heroes );
	TArray< class UH7HeroItem* > GetItemList ( unsigned char ItemTier, unsigned long ForbiddedItems );
	class AH7EditorHero* GetHeroByArchetypeID ( struct FString heroAID );
	bool eventIsRewardEnabled ( class UH7HeroItem* Item );
	struct FString GetGenericTownName ( class UH7Faction* Faction, int* nameIndex );
	struct FString GetGenericTownNameByIndex ( class UH7Faction* Faction, int nameIndex );
	class AH7Creature* GetCreatureByIDString ( struct FString idString );
	void ClearUsedGenericTownNames ( );
	class UH7Faction* GetFaction ( int I );
	class AH7EditorHero* GetRandomHero ( );
	class UH7Faction* GetRandomFaction ( );
	TArray< class AH7EditorWarUnit* > GetWarfareUnits ( );
	TArray< class UH7GeneralLoreEntry* > GetGeneralLore ( );
	class AH7EditorArmy* GetRandomDuelArmy ( );
	void GetDuelHeroes ( unsigned long ignorePrivileges, TArray< class AH7EditorHero* >* Heroes );
	class UH7ResourceSet* GetResourceSet ( );
	class UH7Faction* GetNeutralFaction ( );
	TArray< class UH7HeroAbility* > GetSpells ( );
	void GetPrivilegHeroesDuel ( unsigned long ignorePrivileges, TArray< class AH7EditorHero* >* privilegHeroes );
	void GetPrivilegHeroesSkirmish ( unsigned long ignorePrivileges, TArray< class AH7EditorHero* >* privilegHeroes );
	void GetRandomHeroes ( unsigned long ignorePrivileges, TArray< class AH7EditorHero* >* randomHeroes );
	void GetExclusiveHeroesSkirmish ( unsigned long ignorePrivileges, TArray< class AH7EditorHero* >* Heroes );
	void GetMapHeroes ( TArray< class AH7EditorHero* >* Heroes );
	void GetHeroes ( unsigned long ignorePrivileges, TArray< class AH7EditorHero* >* Heroes );
	void GetCreatureLists ( TArray< struct FH7FactionCreatureData >* Creatures );
	void GetArtifacts ( TArray< struct FH7ArtifactCollection >* Artifacts );
	void GetFactions ( unsigned long ignorePrivileges, TArray< class UH7Faction* >* factions );
	void GetCampaigns ( TArray< class UH7CampaignDefinition* >* campaigns );
	struct FString GetRevisionStr ( );
	struct FString GetBuildStr ( );
	int GetSourceVersion ( );
	class UH7GameData* GetInstance ( );
};



// Class MMH7Game.H7GameProcessor ( Property size: 6 iter: 37) 
// Class name index: 8300 
// 0x0028 (0x0088 - 0x0060)
class UH7GameProcessor : public UObject
{
public:
	class UH7CombatResult*                             mLastAttackResult;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	class UH7CombatResult*                             mCurrentProcessingResult;                         		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                mCurrentProcessingID;                             		// 0x0070 (0x0004) [0x0000000000000000]              
	class UH7CombatResult*                             mMainResult;                                      		// 0x0074 (0x0008) [0x0000000000000000]              
	int                                                mCurrentProcessingMainID;                         		// 0x007C (0x0004) [0x0000000000000000]              
	class UH7UnitSnapShot*                             mCurrentAttackerSnapshot;                         		// 0x0080 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3514 ];

		return pClassPointer;
	};

	void ClearResults ( );
	bool WillSomeoneRetaliate ( class UH7CombatResult* containerResult );
	int SpellScaling ( struct FH7SpellScaling spellScalingStruct, class UH7ICaster* caster );
	void SpellScalingDamage ( int resultIdx, class UH7CombatResult** Result );
	void SpellScalingDamage_NonStatic ( int resultIdx, class UH7CombatResult** Result );
	void SimulateDamageEffect ( int resultIdx, class UH7CombatResult** Result );
	void SpellScalingEffetDuration ( class UH7CombatResult** Result );
	void SpellScalingEffetOnStat ( class UH7CombatResult** Result );
	bool DamageEffectAttack_X2C ( unsigned long forecast, int resultIdx, class UH7CombatResult** Result );
	void ApplyMoral ( int resultIdx, class UH7CombatResult** Result );
	bool Calculate_EffectDuration ( class UH7CombatResult** Result );
	bool Calculate_EffectOnStats ( class UH7CombatResult** Result );
	bool MultiEffectAttack_X2C ( unsigned long forecast, int resultIdx, class UH7CombatResult** Result );
	bool SpellEffectAttack_X2C ( unsigned long forecast, int resultIdx, class UH7CombatResult** Result );
	void ApplyRanged ( int resultIdx, class UH7CombatResult** Result );
	void ApplyMelee ( int resultIdx, unsigned long forecast, class UH7CombatResult** Result );
	bool CanApplyBuff ( class UH7BaseBuff* buff, class UH7IEffectTargetable* defender, class UH7ICaster* caster, struct FH7EventContainerStruct container );
	void ApplyResistance ( int resultIdx, class UH7CombatResult** Result );
	void ApplyPower ( int resultIdx, class UH7CombatResult** Result );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, class UH7IEffectTargetable* Target );
	bool ResolveCombatSingle ( unsigned long forecast, int resultIdx, unsigned long isMainResult, class UH7CombatResult** Result );
	void CalculateDamage ( int resultIdx, unsigned long forecast, class UH7CombatResult** Result );
	bool OnDoAttackRaiseCheck ( class UH7CombatResult* Result, int Idx );
	bool ResolveCombat ( unsigned long forecast, unsigned long isMainResult, class UH7CombatResult** Result );
	void Init ( );
	void AddTriggeredEffectToMainResult ( class UH7Effect* triggeredEffect );
	int GetCurrentResultMainId ( );
	int GetCurrentResultId ( );
	class UH7CombatResult* GetMainResult ( );
	class UH7CombatResult* GetCurrentResult ( );
	class UH7CombatResult* GetLastAttackResult ( );
};



// Class MMH7Game.H7GameTypes ( Property size: 0 iter: 0) 
// Class name index: 8302 
// 0x0000 (0x0060 - 0x0060)
class UH7GameTypes : public UGameTypes
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3516 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7GameUtility ( Property size: 0 iter: 37) 
// Class name index: 8304 
// 0x0000 (0x0060 - 0x0060)
class UH7GameUtility : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3518 ];

		return pClassPointer;
	};

	class UH7Faction* GetSiteFaction ( class AH7AreaOfControlSiteLord* siteLord, TArray< class UH7Faction* > ForbiddenFactions );
	class UH7Faction* GetARandomFaction ( TArray< class UH7Faction* > ForbiddenFactions );
	class UH7Faction* GetChosenFaction ( class UH7Faction* chosenFaction, unsigned char factionType, unsigned char siteOwner, class AH7AreaOfControlSiteLord* siteLord, TArray< class UH7Faction* > ForbiddenFactions );
	struct FColor GetEditorColor ( unsigned char editorColor );
	struct FColor GetColor ( unsigned char playerColorID );
	int PlayerNumberToPlayerNumberWithoutNeutral ( unsigned char pn );
	int PlayerNumberWithoutNeutralToPlayerNumber ( unsigned char pnwn );
	int DirectionToOpposingAngle ( unsigned char Direction );
	int DirectionToAngle ( unsigned char Direction );
	void CalculateCreatureCosts ( class AH7Creature* Creature, int Count, unsigned long Upgrade, class AH7Creature* baseCreature, float currencyModifier, class UH7Resource* currencyResource, TArray< struct FH7ResourceQuantity >* Costs );
	TArray< class AH7Unit* > Concatenate_Units ( TArray< class AH7Unit* > list1, TArray< class AH7Unit* > list2, unsigned long invertAdd );
	TArray< class UH7IEffectTargetable* > Concatenate_UnitsToTargets ( TArray< class AH7Unit* > list1, TArray< class AH7Unit* > list2 );
	TArray< class UH7IEffectTargetable* > Concatenate_Targets ( TArray< class UH7IEffectTargetable* > list1, TArray< class UH7IEffectTargetable* > list2 );
	int UnitCompareASC ( class AH7Unit* A, class AH7Unit* B );
	int UnitCompareIndexDESC ( class AH7Unit* A, class AH7Unit* B );
	int UnitCompare_NextASC ( class AH7Unit* A, class AH7Unit* B );
	int UnitCompareDESC ( class AH7Unit* A, class AH7Unit* B );
	void Sort_TurnSort ( int Low, int High, TArray< class UH7IEffectTargetable* >* List );
	struct FString FloatToString ( float Value, unsigned long addPlusIfPositive );
	struct FString FloatToPercent ( float Value );
	void LogArray ( TArray< class UH7IEffectTargetable* > arr, struct FString Caption );
	void LogUSSConditional ( struct FString msg );
	struct FString GetFunctionName ( int parentCount );
	struct FString GetFuncDebthString ( );
	bool IsInFuncDebth ( struct FString Search );
	int GetFuncDebth ( );
	TArray< unsigned char > GetSkirmishColors ( );
	void CopyAllProperties ( class UObject* SourceObject, class UObject* DestObject, class UClass* ChildOfProp );
	bool IsCombatMapObject ( class UObject* Obj );
	struct FString GetAdventureMapName ( );
	class UMapInfo* GetAdventureMapMapInfo ( );
	struct FBox GetMeshComponentsBoundingBox ( class AActor* Actor, unsigned long bNonColliding );
	bool CellsContainIntPoint ( TArray< struct FIntPoint > Points, struct FIntPoint Checkpoint );
	struct FString GetArchetypePath ( class UObject* Obj );
	bool IsDefaultObject ( class UObject* Obj );
	bool IsArchetype ( class UObject* Obj );
	bool IsCheatsForced ( );
};



// Class MMH7Game.H7GameViewportClient ( Property size: 23 iter: 31) 
// Class name index: 8306 
// 0x00C8 (0x0268 - 0x01A0)
class UH7GameViewportClient : public UGameViewportClient
{
public:
	int                                                mCursorType;                                      		// 0x01A0 (0x0004) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFont;                               		// 0x01A4 (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontINT;                            		// 0x01AC (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontCHN;                            		// 0x01B4 (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontCHT;                            		// 0x01BC (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontCZE;                            		// 0x01C4 (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontDEU;                            		// 0x01CC (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontESN;                            		// 0x01D4 (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontFRA;                            		// 0x01DC (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontHUN;                            		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontITA;                            		// 0x01EC (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontKOR;                            		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontPOL;                            		// 0x01FC (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontPTB;                            		// 0x0204 (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontRUM;                            		// 0x020C (0x0008) [0x0000000000000000]              
	class UFont*                                       mLoadingScreenFontRUS;                            		// 0x0214 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          mMainBackground;                                  		// 0x021C (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          mCombatBackground;                                		// 0x0224 (0x0008) [0x0000000000000000]              
	struct FString                                     mCurrentHint;                                     		// 0x022C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           mGameHints;                                       		// 0x023C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     mHintSize;                                        		// 0x024C (0x000C) [0x0000000000000000]              
	class UMaterialInterface*                          mWheelMat;                                        		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7LoadingHints*                             mHintsArchetype;                                  		// 0x0260 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3520 ];

		return pClassPointer;
	};

	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	void SetVSync ( unsigned long IsEnabled );
	bool IsVSync ( );
	void LoadLanguageFont ( );
	void InitLoadscreen ( class UMaterialInterface* newBackground, unsigned long IsCombat );
	struct FString LoadRandomHint ( );
	void DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message );
	void SetCursor ( unsigned char cursorNum );
};



// Class MMH7Game.H7GlobalName ( Property size: 2 iter: 3) 
// Class name index: 8308 
// 0x0020 (0x0080 - 0x0060)
class UH7GlobalName : public UObject
{
public:
	struct FString                                     mName;                                            		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mNameInst;                                        		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3522 ];

		return pClassPointer;
	};

	struct FString GetName ( );
};



// Class MMH7Game.H7GUIGeneralProperties ( Property size: 67 iter: 197) 
// Class name index: 8310 
// 0x00C0 (0x0120 - 0x0060)
class UH7GUIGeneralProperties : public UObject
{
public:
	unsigned long                                      mDevHardwareCursor : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      mReleaseHardwareCursor : 1;                       		// 0x0060 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      mFlashMouse : 1;                                  		// 0x0060 (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      mCanvasMouse : 1;                                 		// 0x0060 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      mSmartOverlayUpdate : 1;                          		// 0x0060 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      mDamageTooltipEffects : 1;                        		// 0x0060 (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      mClickedTutorial : 1;                             		// 0x0060 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      mClickedLostTales : 1;                            		// 0x0060 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      mClickedLostTales2 : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      mCombatGridVisible : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x00000200] ( CPF_Edit | CPF_Config )
	unsigned long                                      mUnlimitedMovement : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x00000400] ( CPF_Edit | CPF_Config )
	unsigned long                                      mUnlimitedMana : 1;                               		// 0x0060 (0x0004) [0x0000000000004001] [0x00000800] ( CPF_Edit | CPF_Config )
	unsigned long                                      mUnlimitedBuilding : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x00001000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mGameplayWaitsForAnim : 1;                        		// 0x0060 (0x0004) [0x0000000000004001] [0x00002000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mRightMouseRotatingEnabled : 1;                   		// 0x0060 (0x0004) [0x0000000000004001] [0x00004000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mAutogeneratedTooltipExtension : 1;               		// 0x0060 (0x0004) [0x0000000000004001] [0x00008000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mAmbientOcclusion : 1;                            		// 0x0060 (0x0004) [0x0000000000004001] [0x00010000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mLogState : 1;                                    		// 0x0060 (0x0004) [0x0000000000004001] [0x00020000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mWeeklyEffectPopup : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x00040000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mShowBuildTreeAll : 1;                            		// 0x0060 (0x0004) [0x0000000000004001] [0x00080000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mHoverDecalEnabled : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x00100000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mAutoPlayDialogs : 1;                             		// 0x0060 (0x0004) [0x0000000000004001] [0x00200000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mNoteBarStatus : 1;                               		// 0x0060 (0x0004) [0x0000000000004001] [0x00400000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mTurnOverPopupEnabled : 1;                        		// 0x0060 (0x0004) [0x0000000000004001] [0x00800000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mAutosaveEnabled : 1;                             		// 0x0060 (0x0004) [0x0000000000004001] [0x01000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mColorCodeModels : 1;                             		// 0x0060 (0x0004) [0x0000000000004001] [0x02000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mQALogState : 1;                                  		// 0x0060 (0x0004) [0x0000000000004001] [0x04000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mShowHiddenBuffs : 1;                             		// 0x0060 (0x0004) [0x0000000000004001] [0x08000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mShowHiddenBuffsLog : 1;                          		// 0x0060 (0x0004) [0x0000000000004001] [0x10000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mShowHiddenEffects : 1;                           		// 0x0060 (0x0004) [0x0000000000004001] [0x20000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mSkipTactics : 1;                                 		// 0x0060 (0x0004) [0x0000000000004001] [0x40000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mDebugCheats : 1;                                 		// 0x0060 (0x0004) [0x0000000000004001] [0x80000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      mDebugWindow : 1;                                 		// 0x0064 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      mDebugOptions : 1;                                		// 0x0064 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      mDebugControls : 1;                               		// 0x0064 (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      mDemoDuels : 1;                                   		// 0x0064 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      mShowLocaKeys : 1;                                		// 0x0064 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      mCampaignsEnabled : 1;                            		// 0x0064 (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      mSkirmishEnabled : 1;                             		// 0x0064 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      mDuelEnabled : 1;                                 		// 0x0064 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      mChatEnabled : 1;                                 		// 0x0064 (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      mCoolCamCombatActionAllowed : 1;                  		// 0x0064 (0x0004) [0x0000000000004001] [0x00000200] ( CPF_Edit | CPF_Config )
	float                                              mFCTDuration;                                     		// 0x0068 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              mFCTFadeDelay;                                    		// 0x006C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                mFCTEndAlpha;                                     		// 0x0070 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                mFCTHeight;                                       		// 0x0074 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FH7MinimapOption >                  mMinimapOptions;                                  		// 0x0078 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              mSideBarLiveTime;                                 		// 0x0088 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              mSideBarCollapseTime;                             		// 0x008C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              mTooltipDelayTime;                                		// 0x0090 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              mTooltipCooldownTime;                             		// 0x0094 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FString                                     mCurrentLanguageExt;                              		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mCurrentAudioLanguageExt;                         		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mCoolCamChance;                                   		// 0x00B8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              mCoolCamGameSpeed;                                		// 0x00BC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UH7MagicSchoolIcons*                         mMagicSchoolIcons;                                		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7StatIcons*                                mStatIcons;                                       		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7StatIcons*                                mStatIconsInText;                                 		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CouncilMapping*                           mCouncilMapping;                                  		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7ButtonIcons*                              mButtonIcons;                                     		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7MessageMapping*                           mMessageMapping;                                  		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7APRColorMapping*                          mAPRColorMapping;                                 		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7TextColors*                               mTextColors;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7CheatData*                                mCheatData;                                       		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mIconWall;                                        		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mIconTower;                                       		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mIconGate;                                        		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3524 ];

		return pClassPointer;
	};

	void ResetOptions ( );
	void SetMinimapOption ( struct FString categoryID, unsigned long Value );
	bool GetMinimapOption ( struct FString categoryID, unsigned long defaultVisible );
	struct FString GetIconHTMLByIcon ( class UTexture2D* Icon );
	struct FString GetIconHTMLByPath ( struct FString IconPath );
	struct FString GetIconPath ( class UTexture2D* Icon );
	struct FString GetCurrencyIconHTML ( );
	void SetAmbientOcclusionNative ( class UGameViewportClient* Viewport, unsigned long bVal );
	void SetAmbientOcclusion ( unsigned long bVal );
	bool GetAmbientOcclusionNative ( class UGameViewportClient* Viewport );
	bool GetAmbientOcclusion ( );
	class UGameViewportClient* GetViewport ( );
	TArray< struct FString > GetTextureQualityList ( );
	void eventSetTextureQuality ( int texq );
	int GetTextureQuality ( );
	void QuitGameConfirm ( );
	void Resume ( );
	void SetSubtitelEnabled ( unsigned long val );
	bool GetSubtitelEnabled ( );
	TArray< struct FString > GetAudioLanguageList ( );
	int GetAudioLanguageExt ( );
	void SetAudioLanguageExt ( int langListIndex );
	TArray< struct FString > GetLanguageList ( );
	void SetLanguageExt ( int langListIndex );
	int GetLanguageExt ( );
	bool GetAvailableAndCurrentResolutions ( int windowMode, unsigned long includeCurrentResolution, TArray< struct FFullscreenResolution >* resolutions );
	TArray< struct FString > GetResolutionListForWindowMode ( int windowMode, unsigned long includeCurrentResolution );
	TArray< struct FString > GetResolutionList ( );
	struct FString GetAspectRatio ( struct FFullscreenResolution resolution );
	TArray< struct FString > GetGraphicsCardList ( );
	int GetGraphicsCard ( );
	void SetGraphicsCard ( int I );
	void SetResolution ( int resIndex );
	int GetResolutionIndexInList ( int windowMode );
	int GetResolution ( );
	void SetUnlimitedBuilding ( unsigned long val );
	bool IsUnlimitedBuilding ( );
	void SetUnlimitedMana ( unsigned long val );
	bool GetUnlimitedMana ( );
	void SetUnlimitedMovement ( unsigned long val );
	bool GetUnlimitedMovement ( );
	void SetNoteBarStatus ( unsigned long val );
	bool GetNoteBarStatus ( );
	void SetOptionSideBarCollapseTime ( float val );
	float GetOptionSideBarCollapseTime ( );
	void SetSkipTactics ( unsigned long val );
	bool GetSkipTactics ( );
	void SetAutoTooltipState ( unsigned long val );
	bool GetAutoTooltipState ( );
	void SetQALogStatus ( unsigned long val );
	bool GetQALogStatus ( );
	void SetLogStatus ( unsigned long val );
	bool GetLogStatus ( );
	void SetHoverDecalEnabled ( unsigned long val );
	bool GetHoverDecalEnabled ( );
	struct FVector2D GetTooltipCooldownTimeConstraints ( );
	struct FVector2D GetSideBarCollapseConstraints ( );
	struct FVector2D GetSideBarAliveConstraints ( );
	void SetRightMouseRotatingEnabled ( unsigned long val );
	bool GetRightMouseRotatingEnabled ( );
	bool IsUsingModelColoring ( );
	void SetOptionColorCodeModels ( unsigned long val );
	bool GetOptionColorCodeModels ( );
	void SetGameplayWaitsForAnim ( unsigned long val );
	bool GetGameplayWaitsForAnim ( );
	void SetOptionAutosaveEnabled ( unsigned long val );
	bool GetOptionAutosaveEnabled ( );
	void SetDemoDuels ( unsigned long val );
	bool GetDemoDuels ( );
	void SetOptionDamageTooltipEffectsEnabled ( unsigned long val );
	bool GetOptionDamageTooltipEffectsEnabled ( );
	void SetOptionChatEnabled ( unsigned long val );
	bool GetOptionChatEnabled ( );
	void SetOptionDuelEnabled ( unsigned long val );
	bool GetOptionDuelEnabled ( );
	void SetOptionSkirmishEnabled ( unsigned long val );
	bool GetOptionSkirmishEnabled ( );
	void SetOptionCampaignsEnabled ( unsigned long val );
	bool GetOptionCampaignsEnabled ( );
	void SetOptionShowLocaKeys ( unsigned long val );
	bool GetOptionShowLocaKeys ( );
	void SetOptionTooltipDelayTime ( float val );
	float GetOptionTooltipDelayTime ( );
	void SetDebugControls ( unsigned long val );
	void SetDebugOptions ( unsigned long val );
	void SetDebugWindow ( unsigned long val );
	void SetDebugCheats ( unsigned long val );
	void SetOptionAutoPlayDialogs ( unsigned long val );
	void SetCoolCamCombatActionAllowed ( unsigned long val );
	void SetCoolCamGameSpeed ( float NewSpeed );
	void SetCoolCamChanceFloat ( float newChance );
	void SetCoolCamChance ( int newChance );
	void SetOptionBuildTreeShowAll ( unsigned long val );
	void SetOptionTooltipCooldownTime ( float val );
	void SetOptionSideBarLiveTime ( float val );
	void SetOptionHiddenEffects ( unsigned long val );
	void SetOptionHiddenBuffsLog ( unsigned long val );
	void SetOptionHiddenBuffs ( unsigned long val );
	void SetOptionWeeklyPopup ( unsigned long val );
	void SetOptionTurnOverPopup ( unsigned long val );
	void SetOptionCanvasCursor ( unsigned long val );
	void SetOptionFlashCursor ( unsigned long val );
	bool GetDebugControls ( );
	bool GetDebugOptions ( );
	bool GetDebugWindow ( );
	bool GetDebugCheats ( );
	struct FString GetIconTowerPath ( );
	struct FString GetIconGatePath ( );
	struct FString GetIconWallPath ( );
	bool GetOptionAutoPlayDialogs ( );
	class UH7CheatData* GetCheatData ( );
	bool GetOptionBuildTreeShowAll ( );
	bool GetCoolCamCombatActionAllowed ( );
	float GetCoolCamGameSpeed ( );
	float GetCoolCamChanceFloat ( );
	int GetCoolCamChance ( );
	float GetOptionTooltipCooldownime ( );
	float GetOptionSideBarLiveTime ( );
	bool GetOptionHiddenEffects ( );
	bool GetOptionHiddenBuffsLog ( );
	bool GetOptionHiddenBuffs ( );
	bool GetOptionWeeklyPopup ( );
	bool GetOptionTurnOverPopup ( );
	bool GetOptionCanvasCursor ( );
	bool GetOptionFlashCursor ( );
	class UH7GUIGeneralProperties* GetInstance ( );
};



// Class MMH7Game.H7HallOfHeroesManager ( Property size: 3 iter: 18) 
// Class name index: 8312 
// 0x0028 (0x0088 - 0x0060)
class UH7HallOfHeroesManager : public UObject
{
public:
	TArray< struct FPlayerHeroesPoolData >             mPlayerHeroesPools;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRandomHeroData >                   mRandomHeroes;                                    		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureController*                      mAdventureController;                             		// 0x0080 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3526 ];

		return pClassPointer;
	};

	void UpdateAllHeroCosts ( class AH7Player* Owner );
	int CalculateHeroCost ( int HeroLevel, unsigned long isNewHero, class AH7Player* ownerPlayer );
	void InsertHeroAnyFaction ( class AH7Player* thePlayer );
	void InsertHeroSameFaction ( class AH7Player* thePlayer );
	int GetNumNewHeroes ( int Index );
	void UpdateWeeklyNewHeroes ( );
	void UpdateEndDay ( unsigned long isStartWeek );
	void SimulateAddNewHero ( class AH7EditorHero* Hero, class AH7Player* PlayerOwner );
	void AddDefeatedHero ( class AH7AdventureArmy* Army );
	void AddNewHero ( int RandomHeroesIndex, class AH7Player* PlayerOwner );
	class AH7AdventureArmy* RecruitHero ( class AH7Player* PlayerOwner, class AH7Town* Town, int heroId );
	TArray< struct FRecruitHeroData > GetHeroesPool ( class AH7Player* PlayerOwner, class AH7Town* Town );
	void InitNative ( TArray< class AH7Player* > Players, class AH7AdventureController* adventureController );
	bool IsHeroAlreadyInUse ( class AH7EditorHero* Hero );
	void Init ( TArray< class AH7Player* > Players, class AH7AdventureController* adventureController );
};



// Class MMH7Game.H7HeroAnimControl ( Property size: 9 iter: 33) 
// Class name index: 8314 
// 0x011C (0x035C - 0x0240)
class AH7HeroAnimControl : public AActor
{
public:
	struct FAnimationData                              mAnimations[ 0x8 ];                               		// 0x0240 (0x00C0) [0x0000000000000000]              
	class AH7EditorHero*                               mOwner;                                           		// 0x0300 (0x0008) [0x0000000000000000]              
	TArray< struct FH7HeroEvent >                      mHeroEvents;                                      		// 0x0308 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsOnShip : 1;                                    		// 0x0318 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mHeroIdleSoundPlayed : 1;                         		// 0x0318 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class UAnimNodePlayCustomAnim* >           mAnimNodes;                                       		// 0x031C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USkelControlSingleBone* >            mBigHeadNodes;                                    		// 0x032C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFinishedAnimFunc__Delegate;                   		// 0x033C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0340 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnHitFunc__Delegate;                            		// 0x034C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0350 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3528 ];

		return pClassPointer;
	};

	float GetEventTime ( unsigned char EventType );
	void OnAttackHit ( );
	float GetCurrentAnimNodeTimeLeft ( );
	bool IsPlayingAnim ( );
	void StopCustomAnimOnAll ( unsigned char animId, float BlendOutTime );
	void ModifyRateCurrentAnimation ( float NewRate );
	void PlayCustomAnimOnAll ( unsigned char animId, float Rate, float BlendInTime, float BlendOutTime, unsigned long doLooping, unsigned long doOverride );
	void PlayAnim ( unsigned char heroAnimation, struct FScriptDelegate onFinishedAnim, struct FScriptDelegate onHit );
	void OnHitFunc ( );
	void OnFinishedAnimFunc ( );
	void AddWeaponAttachments ( class AH7EditorHero* heroOwner, class USkeletalMeshComponent* baseComp, TArray< struct FH7WeaponAttachment > weaponAttachments, class UDynamicLightEnvironmentComponent* dynamicLightEnv );
	void SetIdleBridgeFrequency ( );
	void CheckMovementType ( );
	void Init ( class AH7EditorHero* heroOwner );
	TArray< class USkelControlSingleBone* > GetBigHeadNodes ( );
	TArray< class UAnimNodePlayCustomAnim* > GetAnimNodes ( );
};



// Class MMH7Game.H7HeroClass ( Property size: 13 iter: 19) 
// Class name index: 8316 
// 0x00D8 (0x0138 - 0x0060)
class UH7HeroClass : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7BaseAbility*                              mAttackAbilityTemplate;                           		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMight;                                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDefense;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMagic;                                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSpirit;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mLeadership;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDestiny;                                         		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mName;                                            		// 0x0088 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UH7HeroClassProgress*                        mClassProgress;                                   		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FH7ClassSkillData                           mEditorSkills[ 0xA ];                             		// 0x00A0 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ClassSkillData >                 mSkills;                                          		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7HeroSkill >                      mPreSkills;                                       		// 0x0128 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3530 ];

		return pClassPointer;
	};

	void InitializeClassSkills ( class AH7EditorHero* Hero );
	void Init ( class AH7EditorHero* Hero );
	TArray< struct FH7ClassSkillData > GetEditorSkills ( );
	TArray< struct FH7ClassSkillData > GetSkills ( );
	class UH7HeroClassProgress* GetClassProgress ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7HeroEquipment ( Property size: 25 iter: 64) 
// Class name index: 8318 
// 0x00E8 (0x0148 - 0x0060)
class UH7HeroEquipment : public UObject
{
public:
	class UH7HeroItem*                                 mHelmet;                                          		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mWeapon;                                          		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mChestArmor;                                      		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mGloves;                                          		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mShoes;                                           		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mNecklace;                                        		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mRing1;                                           		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mCape;                                            		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mHelmetRef;                                       		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mWeaponRef;                                       		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mChestArmorRef;                                   		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mGlovesRef;                                       		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mShoesRef;                                        		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mNecklaceRef;                                     		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mRing1Ref;                                        		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mCapeRef;                                         		// 0x0110 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mHelmetID;                                        		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                mWeaponID;                                        		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                mChestArmorID;                                    		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                mGlovesID;                                        		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                mShoesID;                                         		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                mNecklaceID;                                      		// 0x0134 (0x0004) [0x0000000000000000]              
	int                                                mRing1ID;                                         		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                mCapeID;                                          		// 0x013C (0x0004) [0x0000000000000000]              
	class AH7EditorHero*                               mOwner;                                           		// 0x0140 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3532 ];

		return pClassPointer;
	};

	void DumpCurrentState ( );
	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void Deserialize ( class UJsonObject* Data );
	void eventPostSerialize ( );
	class UJsonObject* Serialize ( );
	void UnequipAll ( );
	struct FString GetRingSlot ( class UH7HeroItem* Item );
	void RemoveItemComplete ( class UH7HeroItem* Item );
	void RemoveItem ( class UH7HeroItem* Item );
	void eventSetItemComplete ( class UH7HeroItem* Item );
	void SetItem ( class UH7HeroItem* Item, unsigned long updateGui );
	class UH7HeroItem* eventGetItemByType ( unsigned char Type );
	class UH7HeroItem* GetItemByID ( int ItemId, unsigned long suppressWarning );
	void GetResourceProducingItems ( TArray< class UH7EffectSpecialAddResources* >* produc );
	int HasSetItemsEquipped ( class UH7ItemSet* Set );
	bool HasItemEquipped ( class UH7HeroItem* Item, unsigned long checkForInstance );
	int CountItem ( class UH7HeroItem* Item, unsigned long checkForInstance );
	void GetItemsAsArray ( TArray< class UH7HeroItem* >* Items );
	void eventraiseEvent ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	void SetEquipmentOwner ( class AH7EditorHero* Owner );
	bool IsArchetype ( );
	void Init ( unsigned long fromSave );
	void CleanItemsAfterCombat ( );
	void SetCape ( class UH7HeroItem* Item );
	void SetRing1 ( class UH7HeroItem* Item );
	void SetNecklace ( class UH7HeroItem* Item );
	void SetShoes ( class UH7HeroItem* Item );
	void SetGloves ( class UH7HeroItem* Item );
	void SetChestArmor ( class UH7HeroItem* Item );
	void SetWeapon ( class UH7HeroItem* Item );
	void SetHelmet ( class UH7HeroItem* Item );
	class UH7HeroItem* GetCape ( );
	class UH7HeroItem* GetRing1 ( );
	class UH7HeroItem* GetNecklace ( );
	class UH7HeroItem* GetShoes ( );
	class UH7HeroItem* GetGloves ( );
	class UH7HeroItem* GetChestArmor ( );
	class UH7HeroItem* GetWeapon ( );
	class UH7HeroItem* GetHelmet ( );
};



// Class MMH7Game.H7HeroVisuals ( Property size: 8 iter: 14) 
// Class name index: 8320 
// 0x0048 (0x00A8 - 0x0060)
class UH7HeroVisuals : public UObject
{
public:
	class USkeletalMeshComponent*                      mHeroSkeletalMesh;                                		// 0x0060 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mHorseSkeletalMesh;                               		// 0x0068 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x0070 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 mAttachmentMesh;                                  		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mArmyScale;                                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7HeroEvent >                      mHeroEvents;                                      		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     mHorseRiderOffset;                                		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMinimapIcon;                                     		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3534 ];

		return pClassPointer;
	};

	class UTexture2D* GetMinimapIcon ( );
	struct FVector GetHorseRiderOffset ( );
	TArray< struct FH7HeroEvent > GetHeroEvents ( );
	class UDynamicLightEnvironmentComponent* GetDynamicLightEnv ( );
	class USkeletalMeshComponent* GetHorseSkeletalMesh ( );
	class USkeletalMeshComponent* GetHeroSkeletalMesh ( );
};



// Class MMH7Game.H7IActionable ( Property size: 0 iter: 1) 
// Class name index: 8322 
// 0x0000 (0x0060 - 0x0060)
class UH7IActionable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3536 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7IAliasable ( Property size: 0 iter: 0) 
// Class name index: 8324 
// 0x0000 (0x0060 - 0x0060)
class UH7IAliasable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3538 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7IConditionable ( Property size: 0 iter: 1) 
// Class name index: 8326 
// 0x0000 (0x0060 - 0x0060)
class UH7IConditionable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3540 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7IDefendable ( Property size: 0 iter: 5) 
// Class name index: 8328 
// 0x0000 (0x0060 - 0x0060)
class UH7IDefendable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3542 ];

		return pClassPointer;
	};

	class AH7VisitableSite* GetSite ( );
	void SetGuardingArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetGuardingArmy ( );
	void SetGarrisonArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* eventGetGarrisonArmy ( );
};



// Class MMH7Game.H7IDestructible ( Property size: 0 iter: 8) 
// Class name index: 8330 
// 0x0000 (0x0060 - 0x0060)
class UH7IDestructible : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3544 ];

		return pClassPointer;
	};

	TArray< class AH7DestructibleObjectManipulator* > GetManipulators ( );
	void SetRepairing ( unsigned long V );
	void SetDestroying ( unsigned long V );
	bool IsRepairing ( );
	bool IsDestroying ( );
	bool IsDestroyed ( );
	void RepairDestructibleObject ( );
	void DestroyDestructibleObject ( );
};



// Class MMH7Game.H7IEventManagingObject ( Property size: 0 iter: 3) 
// Class name index: 8332 
// 0x0000 (0x0060 - 0x0060)
class UH7IEventManagingObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3546 ];

		return pClassPointer;
	};

	int GetID ( );
	struct FString GetName ( );
	class UH7EventManager* GetEventManager ( );
};



// Class MMH7Game.H7ICaster ( Property size: 0 iter: 25) 
// Class name index: 8334 
// 0x0000 (0x0060 - 0x0060)
class UH7ICaster : public UH7IEventManagingObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3548 ];

		return pClassPointer;
	};

	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	class UH7ICaster* GetOriginal ( );
	class AH7Player* GetPlayer ( );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetLocation ( );
	bool IsDefaultAttackActive ( );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	class AH7CombatArmy* GetCombatArmy ( );
	unsigned char GetEntityType ( );
	void DataChanged ( struct FString cause );
	class UH7EventManager* GetEventManager ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7IEffectTargetable ( Property size: 0 iter: 14) 
// Class name index: 8336 
// 0x0000 (0x0060 - 0x0060)
class UH7IEffectTargetable : public UH7IEventManagingObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3550 ];

		return pClassPointer;
	};

	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	class AH7Player* GetPlayer ( );
	unsigned char GetEntityType ( );
	int GetHitPoints ( );
	int GetStackSize ( );
	void DataChanged ( struct FString cause );
	struct FIntPoint GetGridPosition ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7IHeroReplaceable ( Property size: 0 iter: 0) 
// Class name index: 8338 
// 0x0000 (0x0060 - 0x0060)
class UH7IHeroReplaceable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3552 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7IHideable ( Property size: 0 iter: 3) 
// Class name index: 8340 
// 0x0000 (0x0060 - 0x0060)
class UH7IHideable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3554 ];

		return pClassPointer;
	};

	void Reveal ( );
	void Hide ( );
	bool IsHiddenX ( );
};



// Class MMH7Game.H7ILocaParamizable ( Property size: 0 iter: 0) 
// Class name index: 8342 
// 0x0000 (0x0060 - 0x0060)
class UH7ILocaParamizable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3556 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7InitiativeQueue ( Property size: 10 iter: 43) 
// Class name index: 8344 
// 0x0084 (0x00E4 - 0x0060)
class UH7InitiativeQueue : public UObject
{
public:
	TArray< class AH7Unit* >                           mActiveList;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Unit* >                           mInitiativeQueue;                                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Unit* >                           mFinishedActingUnits;                             		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7UnitCounter >                    mActedCountingTable;                              		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Unit* >                           mWaitingUnitsStack;                               		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Unit* >                           mWaitingHeroList;                                 		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Unit* >                           mPrevQueue;                                       		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Unit*                                     mHeroOverride;                                    		// 0x00D0 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mPrevUnit;                                        		// 0x00D8 (0x0008) [0x0000000000000000]              
	int                                                mActiveUnitInitialInitiative;                     		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3558 ];

		return pClassPointer;
	};

	void DebugLogSelf ( );
	bool IsLastUnitOfTurn ( );
	bool IsLastUnitOfPlayer ( class AH7Unit* Unit );
	TArray< class AH7Unit* > SortArray ( TArray< class AH7Unit* > units );
	int UnitCompare_NextASC ( class AH7Unit* A, class AH7Unit* B );
	int UnitCompareASC ( class AH7Unit* A, class AH7Unit* B );
	int UnitCompareDESC ( class AH7Unit* A, class AH7Unit* B );
	void Sort ( unsigned long sendToFlash );
	void InitializeQueue ( unsigned long previousQueue );
	bool NeedNextTurn ( );
	void RemoveFromCurrentTurn ( class AH7Unit* Unit );
	bool IsLast ( class AH7Unit* Unit );
	int GetActedCount ( class AH7Unit* Unit );
	void Acted ( class AH7Unit* actedUnit );
	void CheckMarkedForSkipTurnUnits ( );
	void SkipUnitTurn ( class AH7Unit* Unit );
	void Waited ( class AH7Unit* Unit );
	void SetOverrideActiveUnitWithHero ( class AH7Unit* Hero );
	bool IsHeroQueued ( class AH7Unit* Hero );
	void SetHeroesFirst ( class AH7CombatHero* attacker, class AH7CombatHero* defender );
	void removeUnit ( class AH7Unit* Unit );
	void AddUnitToIndex ( class AH7Unit* Unit, int Index );
	void AddUnit ( class AH7Unit* Unit, unsigned long doSort );
	bool IsAWaitingUnit ( class AH7Unit* Unit );
	bool IsARemainingUnit ( class AH7Unit* Unit );
	int GetIndexForUnit ( class AH7Unit* Unit );
	class AH7Unit* GetActiveUnit ( unsigned long withOutHero );
	class AH7Unit* GetUnit ( int Idx );
	TArray< class AH7Unit* > GetActiveList ( );
	TArray< class AH7Unit* > GetPrevQueue ( );
	TArray< class AH7Unit* > GetActiveHeroList ( );
	TArray< class AH7Unit* > GetWaitingUnitStack ( );
	TArray< class AH7Unit* > GetInitiativeQueue ( );
};



// Class MMH7Game.H7InterpActor ( Property size: 1 iter: 1) 
// Class name index: 8346 
// 0x0004 (0x02E0 - 0x02DC)
class AH7InterpActor : public AInterpActor
{
public:
	unsigned long                                      mIsHidden : 1;                                    		// 0x02DC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3560 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7Inventory ( Property size: 6 iter: 37) 
// Class name index: 8348 
// 0x0058 (0x00B8 - 0x0060)
class UH7Inventory : public UObject
{
public:
	TArray< class UH7HeroItem* >                       mItems;                                           		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mItemsRefs;                                       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mItemIDs;                                         		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIntPoint >                         mItemPositions;                                   		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7EditorHero*                               mOwner;                                           		// 0x00A0 (0x0008) [0x0000000000000000]              
	TArray< class UH7HeroItem* >                       mConsumablesUsedInCombat;                         		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3562 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	struct FIntPoint GetItemPosByItem ( class UH7HeroItem* Item );
	TArray< class UH7HeroItem* > getItemsByPosition ( int X, int Y );
	class UH7HeroItem* GetItemByPosition ( int X, int Y );
	class UH7HeroItem* GetItemByName ( struct FString ItemName );
	bool HasItem ( class UH7HeroItem* Item );
	int CountItem ( class UH7HeroItem* Item );
	void eventRemoveItemComplete ( class UH7HeroItem* Item );
	void RemoveItem ( class UH7HeroItem* Item );
	void RemoveItemByID ( int ItemId );
	void RemoveItemStackByID ( int ItemId );
	void AddItemToInventoryComplete ( class UH7HeroItem* Item, int PosX, int PosY );
	void AddItemToInventory ( class UH7HeroItem* Item, int PosX, int PosY );
	void eventSetItemPosComplete ( int ItemId, int X, int Y );
	void SetItemPos ( int ItemId, int X, int Y, unsigned long ignoreReplication );
	void SetItemPosStack ( int ItemId, int X, int Y );
	int GetTotalCountOfScrollsOnPosition ( class UH7HeroItem* scroll, struct FIntPoint scrollPos );
	int GetTotalCountOfScroll ( class UH7HeroItem* scroll );
	class UH7HeroItem* GetItemByID ( int Id, unsigned long suppressWarning );
	class UH7HeroItem* GetItem ( class UH7HeroItem* Item );
	void Init ( class AH7EditorHero* NewOwner, unsigned long fromSave );
	void CleanItemsAfterCombat ( );
	void DeleteUsedConsumables ( );
	void AddUsedConsumable ( class UH7HeroItem* Item );
	TArray< class UH7HeroItem* > GetUsedConsumable ( );
	struct FIntPoint GetItemPosByIndex ( int Index );
	TArray< struct FIntPoint > GetItemPoses ( );
	TArray< class UH7HeroItem* > GetItems ( );
};



// Class MMH7Game.H7IOwnable ( Property size: 0 iter: 0) 
// Class name index: 8350 
// 0x0000 (0x0060 - 0x0060)
class UH7IOwnable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3564 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7IPickable ( Property size: 0 iter: 2) 
// Class name index: 8352 
// 0x0000 (0x0060 - 0x0060)
class UH7IPickable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3566 ];

		return pClassPointer;
	};

	bool IsLooted ( );
	void Pickup ( class AH7AdventureHero* lootingHero, unsigned char lootType, unsigned long doMultiplayerSynchro );
};



// Class MMH7Game.H7IQuestTarget ( Property size: 0 iter: 6) 
// Class name index: 8354 
// 0x0000 (0x0060 - 0x0060)
class UH7IQuestTarget : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3568 ];

		return pClassPointer;
	};

	void AddQuestFlag ( );
	void ClearQuestFlag ( );
	bool IsMovable ( );
	bool IsHidden ( );
	class UH7AdventureMapCell* GetCurrentPosition ( );
	int GetQuestTargetID ( );
};



// Class MMH7Game.H7IRandomPropertyOwner ( Property size: 0 iter: 1) 
// Class name index: 8356 
// 0x0000 (0x0060 - 0x0060)
class UH7IRandomPropertyOwner : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3570 ];

		return pClassPointer;
	};

	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
};



// Class MMH7Game.H7IRandomSpawnable ( Property size: 0 iter: 7) 
// Class name index: 8358 
// 0x0000 (0x0060 - 0x0060)
class UH7IRandomSpawnable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3572 ];

		return pClassPointer;
	};

	class UH7Faction* eventGetChosenFaction ( );
	unsigned char GetFactionType ( );
	void SetFactionType ( unsigned char factionType );
	void SetRandomPlayerNumber ( unsigned char Number );
	void eventDisposeShell ( );
	class AH7AreaOfControlSite* GetSpawnedSite ( );
	void eventHatchRandomSpawnable ( );
};



// Class MMH7Game.H7IStackContainer ( Property size: 0 iter: 2) 
// Class name index: 8360 
// 0x0000 (0x0060 - 0x0060)
class UH7IStackContainer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3574 ];

		return pClassPointer;
	};

	int GetCreatureAmount ( class AH7Creature* Creature );
	int GetCreatureAmountTotal ( );
};



// Class MMH7Game.H7IThumbnailable ( Property size: 0 iter: 0) 
// Class name index: 8362 
// 0x0000 (0x0060 - 0x0060)
class UH7IThumbnailable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3576 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ITriggerable ( Property size: 0 iter: 1) 
// Class name index: 8364 
// 0x0000 (0x0060 - 0x0060)
class UH7ITriggerable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3578 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7IVoiceable ( Property size: 0 iter: 0) 
// Class name index: 8366 
// 0x0000 (0x0060 - 0x0060)
class UH7IVoiceable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3580 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7Loca ( Property size: 0 iter: 24) 
// Class name index: 8368 
// 0x0000 (0x0060 - 0x0060)
class UH7Loca : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3582 ];

		return pClassPointer;
	};

	struct FString ResolveIconPlaceholders ( struct FString Text );
	struct FString LocalizeSave ( struct FString locaKey, struct FString Section, struct FString Filename );
	bool IsLocaKey ( struct FString Unknown );
	bool LocalizeFailed ( struct FString localizedValue );
	struct FString GetArrayFieldName ( struct FString arrayFieldName, int arrayFieldIndex );
	struct FString GetMapFileNameByPath ( struct FString filepath );
	struct FString GetMapName ( class UObject* Source );
	struct FString GetMapFileName ( struct FString MapName );
	bool IsLocaParamsEmpty ( struct FH7LocaParams Params );
	struct FString LocalizePlayerName ( unsigned char PlayerNumber );
	struct FString LocalizeFieldParams ( struct FH7LocaParams Params );
	struct FString LocalizeFieldInternal ( struct FString Section, struct FString Filename, struct FString Key, struct FString editorName, struct FString langExt, unsigned char* wasLocalized );
	struct FString LocalizeField ( struct FString Section, struct FString Filename, struct FString Key, struct FString editorName );
	struct FString GetSectionByInfoNumber ( int infoNumber, unsigned long CombatMap );
	struct FString GetSectionByObject ( class UObject* infoName );
	struct FString GetSectionByInfoName ( struct FString infoName, unsigned long CombatMap );
	struct FString GetMapSection ( class UObject* Source );
	struct FString GetSection ( class UObject* Source );
	struct FString LocalizeMapInfoObjectByName ( struct FString infoName, struct FString MapFilename, struct FString VarName, struct FString fallbackName, unsigned long CombatMap );
	struct FString LocalizeMapInfoObject ( class UObject* Source, struct FString FieldName, struct FString editorName );
	struct FString LocalizeCouncilObject ( class USequenceObject* Source, struct FString FieldName, struct FString editorName );
	struct FString LocalizeKismetObject ( class USequenceObject* Source, struct FString FieldName, struct FString editorName );
	struct FString LocalizeMapObject ( class UObject* Source, struct FString FieldName, struct FString editorName );
	struct FString LocalizeContent ( class UObject* Source, struct FString FieldName, struct FString editorName, struct FString langExt );
};



// Class MMH7Game.H7MapInfoBase ( Property size: 5 iter: 10) 
// Class name index: 8370 
// 0x003C (0x009C - 0x0060)
class UH7MapInfoBase : public UMapInfo
{
public:
	unsigned char                                      mIsOfficial;                                      		// 0x0060 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     mName;                                            		// 0x0064 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mDescription;                                     		// 0x0074 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mAuthor;                                          		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mThumbnailTexture;                                		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3584 ];

		return pClassPointer;
	};

	struct FString GetAuthor ( );
	struct FString GetDescription ( );
	struct FString GetName ( );
	struct FString GetNameUnlocalized ( );
	bool IsOfficial ( );
};



// Class MMH7Game.H7MapInfo ( Property size: 50 iter: 68) 
// Class name index: 8372 
// 0x0C24 (0x0CC0 - 0x009C)
class UH7MapInfo : public UH7MapInfoBase
{
public:
	class USeqAct_Interp*                              mEndMapMatinee;                                   		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mNextMap;                                         		// 0x00A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mPreviouslyOn;                                    		// 0x00B4 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      mMapType;                                         		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mMapSize;                                         		// 0x00C5 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      mWinConditionType;                                		// 0x00C6 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      mWinConditionAccumulateCreatureTier;              		// 0x00C7 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      mLoseConditionType;                               		// 0x00C8 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                mStartDay;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mStartWeek;                                       		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mStartMonth;                                      		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mStartYear;                                       		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mWaterHeight;                                     		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mUndergroundWaterHeight;                          		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7ResourceSet*                              mResourceSet;                                     		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7TearOfAsha*                               mTearOfAshaTemplate;                              		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroAbility*                              mTearOfAshaSpellTemplate;                         		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FMapInfoPlayerProperty                      mPlayerProperties[ 0xA ];                         		// 0x00FC (0x0780) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mPlayerAmount;                                    		// 0x087C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      mRandomStartPositionAvailable : 1;                		// 0x0880 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      mLoadingWaitingForKey : 1;                        		// 0x0880 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mInitedWeeklyEvents : 1;                          		// 0x0880 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mLockVictoryConditions : 1;                       		// 0x0880 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIncludeStandardWinConditions : 1;                		// 0x0880 (0x0004) [0x0000000000020001] [0x00000010] ( CPF_Edit | CPF_EditConst )
	struct FString                                     mLoadingTitle;                                    		// 0x0884 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mLoadingText;                                     		// 0x0894 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mLoadingImageOption;                              		// 0x08A4 (0x0004) [0x0000000000000000]              
	struct FString                                     mLoadingImagePath;                                		// 0x08A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Week* >                           mWeeklyEvents;                                    		// 0x08B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            mAvailableVictoryConditions;                      		// 0x08C8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     mWinConditionArmyToDefeat;                        		// 0x08D8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     mWinConditionHeroToDefeat;                        		// 0x08E8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     mWinConditionArtifactToAcquire;                   		// 0x08F8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mWinConditionResourcesToCollect;                  		// 0x0908 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class AH7Town*                                     mWinConditionTownToCapture;                       		// 0x0918 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UH7HeroItem*                                 mWinConditionArtifactToTransfer;                  		// 0x0920 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class AH7Town*                                     mWinConditionArtifactTransferTown;                		// 0x0928 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                mWinConditionAccumulateCreatureAmount;            		// 0x0930 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class AH7Town*                                     mLoseConditionTownToLose;                         		// 0x0934 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class AH7AdventureArmy*                            mLoseConditionHeroToLose;                         		// 0x093C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                mLoseConditionWeekTimeLimit;                      		// 0x0944 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< class UH7HeroAbility* >                    mForbiddenSpells;                                 		// 0x0948 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mForbiddenWeeks;                                  		// 0x0958 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mForbiddenHeroItems;                              		// 0x0968 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mCustomHallOfHeroes;                              		// 0x0978 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7Faction* >                        mCustomFactions;                                  		// 0x0988 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mCustomHeroes;                                    		// 0x0998 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7Creature* >                       mCustomCreatures;                                 		// 0x09A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           mStoredObjects;                                   		// 0x09B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7MapData                                  mMapData;                                         		// 0x09C8 (0x02F8) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3586 ];

		return pClassPointer;
	};

	class UH7ResourceSet* GetResourceSet ( );
	TArray< unsigned char > GetAvailableStartPositions ( );
	TArray< struct FMapInfoPlayerProperty > GetPlayerProperties ( );
	TArray< class UH7BaseAbility* > GetAllowedSpellList ( );
	TArray< class AH7Creature* > GetCustomCreatures ( );
	TArray< class AH7EditorHero* > GetCustomHeroes ( );
	TArray< class UH7Faction* > GetCustomFactions ( );
	struct FH7MapData GetMapData ( );
	TArray< class UH7HeroItem* > GetForbiddenItemList ( );
	int GetPlayerAmount ( );
	int GetMaxHeroLevelForPlayer ( unsigned char PlayerNumber );
	int GetStartYear ( );
	int GetStartMonth ( );
	int GetStartWeek ( );
	int GetStartDay ( );
	unsigned char GetMapType ( );
	struct FString GetNextMap ( );
	class USeqAct_Interp* GetEndMatinee ( );
};



// Class MMH7Game.H7MapInfoCombat ( Property size: 2 iter: 2) 
// Class name index: 8374 
// 0x0070 (0x010C - 0x009C)
class UH7MapInfoCombat : public UH7MapInfoBase
{
public:
	unsigned long                                      mIsMapVisibleInDuelBrowser : 1;                   		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FH7CombatMapData                            mCombatMapData;                                   		// 0x00A0 (0x006C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3588 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7MapInfoCouncil ( Property size: 0 iter: 0) 
// Class name index: 8376 
// 0x0000 (0x0060 - 0x0060)
class UH7MapInfoCouncil : public UMapInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3590 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7Math ( Property size: 0 iter: 23) 
// Class name index: 8378 
// 0x0000 (0x0060 - 0x0060)
class UH7Math : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3592 ];

		return pClassPointer;
	};

	void GetPointsOnCircle ( struct FIntPoint Center, int Radius, TArray< struct FIntPoint >* outPoints );
	struct FVector Bezier ( float T, TArray< struct FVector > controlPoints );
	float NChooseR ( int N, int R );
	bool LinePlaneIntersection ( struct FVector LineA, struct FVector LineB, struct FVector PlanePoint, struct FVector PlaneNormal, struct FVector* IntersectionPoint );
	float Map ( float Value, float start1, float stop1, float start2, float stop2 );
	void GetPointsFromShape ( struct FIntPoint TargetPoint, TArray< struct FIntPoint > Shape, int GridSizeX, int GridSizeY, unsigned char originSize, TArray< struct FIntPoint >* outPoints );
	void GetPointsFromDimensions ( struct FIntPoint TargetPoint, struct FIntPoint dim, int GridSizeX, int GridSizeY, unsigned char originSize, unsigned long filled, TArray< struct FIntPoint >* outPoints );
	void GetPointsOnEllipse ( struct FIntPoint centerPoint, int r1, int r2, TArray< struct FIntPoint >* outPoints );
	void GetSpiralIntPointsByDimension ( struct FIntPoint centerPoint, struct FIntPoint dimensions, TArray< struct FIntPoint >* outPoints );
	bool CheckPointInCircle ( struct FIntPoint centerPoint, struct FIntPoint Checkpoint, int R );
	void GetMidPointCirclePoints ( struct FIntPoint centerPoint, int R, TArray< struct FIntPoint >* outPoints );
	int GetLineCellsLengthBresenham ( struct FIntPoint originPoint, struct FIntPoint TargetPoint );
	void GetLineCellsBresenham ( struct FIntPoint originPoint, struct FIntPoint TargetPoint, TArray< class UH7CombatMapCell* >* lineCells );
	void GetLineCellsSuperCover ( struct FIntPoint originPoint, struct FIntPoint TargetPoint, TArray< class UH7CombatMapCell* >* lineCells );
	bool CalcLineIntersection ( struct FIntPoint A1, struct FIntPoint A2, struct FIntPoint B1, struct FIntPoint B2, struct FIntPoint* ab );
	struct FIntPoint CalcIntPointFromMatrixIndex ( int Index, int xSize );
	int CalcMatrixIndex ( int X, int Y, int xSize );
	int ConvertDegreeToUnrealDegree ( float Degree );
	float GetDistanceIntPointsP ( struct FIntPoint A, struct FIntPoint B, float P );
	float GetDiagonalShortcutDistanceIntPoints ( struct FIntPoint A, struct FIntPoint B );
	float GetDistanceIntPoints ( struct FIntPoint A, struct FIntPoint B );
	float GetDistance ( struct FVector A, struct FVector B );
	int GetRotationDiff ( int rot1, int rot2 );
};



// Class MMH7Game.H7MatineeManager ( Property size: 11 iter: 33) 
// Class name index: 8380 
// 0x0040 (0x00A0 - 0x0060)
class UH7MatineeManager : public UObject
{
public:
	float                                              FLOAT_MAX;                                        		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AH7CouncilManager*                           mCouncilManager;                                  		// 0x0064 (0x0008) [0x0000000000000000]              
	class USeqAct_Interp*                              mMonitoredMatinee;                                		// 0x006C (0x0008) [0x0000000000000000]              
	unsigned long                                      mMatineeWasPlaying : 1;                           		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mPlayMainMenuMusicPrevented : 1;                  		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mBlockingFrame : 1;                               		// 0x0074 (0x0004) [0x0000000000000000] [0x00000004] 
	class USeqAct_Interp*                              mCaptureMatinee;                                  		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              mCaptureStartTime;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              mCaptureTime;                                     		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FRotator                                    mCamRot;                                          		// 0x0088 (0x000C) [0x0000000000000000]              
	struct FVector                                     mCamPos;                                          		// 0x0094 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3594 ];

		return pClassPointer;
	};

	bool IsProgressMatinee ( struct FString matineeName );
	bool IsEndMatinee ( struct FString matineeName );
	bool IsStartMatinee ( struct FString matineeName );
	bool IsIntroMatinee ( struct FString matineeName );
	bool WasMatineePlaying ( );
	bool IsMatineePlaying ( );
	void PlayIntroMatinee ( );
	void GameIsReady ( );
	void StartResumeMainMenuMusic ( );
	void MatineeFinished ( struct FString nameOfFinishedMatinee );
	void HandleCampaignCompletion ( );
	void PlayMatineeByObjComment ( struct FString Matinee, unsigned long playReversed );
	class USeqAct_Interp* FindMatineeByObjComment ( struct FString Matinee );
	void HockUpToGameReadyEvent ( );
	void UpdateTick ( float DeltaTime );
	void ProcessCaptureAtPos ( class USeqAct_Interp* captureMatinee, TArray< class UInterpData* > matineeInterpData, float Position, struct FVector* resultPos, struct FRotator* resultRot, float* resultFOV );
	void CaptureMatineeAtPos ( struct FString matineeName, float Position, unsigned long atTheEnd, struct FVector* resultPos, struct FRotator* resultRot, float* resultFOV );
	void CancelCurrentMatinee ( unsigned long Jump );
	void Initialize ( class AH7CouncilManager* NewOwner );
	class USeqAct_Interp* GetMonitoredMatinee ( );
	void SetMonitoredMatinee ( class USeqAct_Interp* matineeToMonitor );
	void SetPlayMainMenuMusicPrevented ( unsigned long val );
};



// Class MMH7Game.H7MinimapNative ( Property size: 0 iter: 0) 
// Class name index: 8382 
// 0x0000 (0x0060 - 0x0060)
class UH7MinimapNative : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3596 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7Month ( Property size: 3 iter: 7) 
// Class name index: 8384 
// 0x0024 (0x0084 - 0x0060)
class UH7Month : public UObject
{
public:
	struct FString                                     mMonthName;                                       		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mMonthDescription;                                		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mMonthNumber;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3598 ];

		return pClassPointer;
	};

	void SetMonthDescription ( struct FString monthDescription );
	void SetMonthName ( struct FString monthName );
	struct FString GetMonthDescription ( );
	struct FString GetMonthName ( );
};



// Class MMH7Game.H7ParticleEmitter ( Property size: 3 iter: 3) 
// Class name index: 8386 
// 0x0004 (0x0258 - 0x0254)
class AH7ParticleEmitter : public AEmitter
{
public:
	unsigned long                                      mIsHidden : 1;                                    		// 0x0254 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsActivated : 1;                                 		// 0x0254 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsAutoActivate : 1;                              		// 0x0254 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3600 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7PathList ( Property size: 1 iter: 2) 
// Class name index: 8388 
// 0x0010 (0x0070 - 0x0060)
class UH7PathList : public UObject
{
public:
	TArray< struct FString >                           mPaths;                                           		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3602 ];

		return pClassPointer;
	};

	TArray< struct FString > GetPaths ( );
};



// Class MMH7Game.H7Player ( Property size: 46 iter: 189) 
// Class name index: 8390 
// 0x0140 (0x0380 - 0x0240)
class AH7Player : public AActor
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureController*                      mAdventureController;                             		// 0x0248 (0x0008) [0x0000000000000000]              
	unsigned char                                      mPlayerType;                                      		// 0x0250 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerColor;                                     		// 0x0251 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mTeamNumber;                                      		// 0x0252 (0x0001) [0x0000000000000000]              
	unsigned char                                      mStatus;                                          		// 0x0253 (0x0001) [0x0000000000000000]              
	unsigned char                                      mPlayerNumber;                                    		// 0x0254 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCombatPlayerType;                                		// 0x0255 (0x0001) [0x0000000000000000]              
	struct FString                                     mName;                                            		// 0x0258 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7ResourceSet*                              mResourceSetTemplate;                             		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Faction*                                  mFaction;                                         		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDifficultyAICreatureGrowthRateMultiplier;        		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              mDifficultyAIStartResourcesMultiplier;            		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              mDifficultyAIResourceIncomeMultiplier;            		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              mDifficultyAIAggressivenessMultiplier;            		// 0x0284 (0x0004) [0x0000000000000000]              
	class UH7QuestController*                          mQuestController;                                 		// 0x0288 (0x0008) [0x0000000000000000]              
	int                                                mArmiesDefeated;                                  		// 0x0290 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            mVisitedKeymasters;                               		// 0x0294 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Obelisk* >                        mVisitedObelisks;                                 		// 0x02A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7ResourceSet*                              mResourceSet;                                     		// 0x02B4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mDiscoveredFromStart : 1;                         		// 0x02BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mWonGame : 1;                                     		// 0x02BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mLostGame : 1;                                    		// 0x02BC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsControlledByAI : 1;                            		// 0x02BC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mIsObserver : 1;                                  		// 0x02BC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mEndedTurn : 1;                                   		// 0x02BC (0x0004) [0x0000000000000000] [0x00000020] 
	class UH7ThievesGuildManager*                      mThievesGuildManager;                             		// 0x02C0 (0x0008) [0x0000000000000000]              
	class UH7ResourceSet*                              mAiSaveUpSpendingHero;                            		// 0x02C8 (0x0008) [0x0000000000000000]              
	class UH7ResourceSet*                              mAiSaveUpSpendingRecruitment;                     		// 0x02D0 (0x0008) [0x0000000000000000]              
	class UH7ResourceSet*                              mAiSaveUpSpendingTownDev;                         		// 0x02D8 (0x0008) [0x0000000000000000]              
	class UH7ResourceSet*                              mAiNeedTownDev;                                   		// 0x02E0 (0x0008) [0x0000000000000000]              
	class UH7ResourceSet*                              mAiNeedRecruitment;                               		// 0x02E8 (0x0008) [0x0000000000000000]              
	TArray< int >                                      mAiDiscoveredAoC;                                 		// 0x02F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Town*                                     mAiCapitol;                                       		// 0x0300 (0x0008) [0x0000000000000000]              
	float                                              mAiPowerBalance;                                  		// 0x0308 (0x0004) [0x0000000000000000]              
	int                                                mAiMainCounter;                                   		// 0x030C (0x0004) [0x0000000000000000]              
	class UH7BuffManager*                              mBuffManager;                                     		// 0x0310 (0x0008) [0x0000000000000000]              
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x0318 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x0320 (0x0008) [0x0000000000000000]              
	class UH7EffectManager*                            mEffectManager;                                   		// 0x0328 (0x0008) [0x0000000000000000]              
	TArray< class AH7Player* >                         mPlunderQueue;                                    		// 0x0330 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7EditorHero* >                     mForbiddenHeroes;                                 		// 0x0340 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureArmy*                            mLastSelectedArmy;                                		// 0x0350 (0x0008) [0x0000000000000000]              
	class AH7Town*                                     mLastConqueredTown;                               		// 0x0358 (0x0008) [0x0000000000000000]              
	TArray< class UH7BaseCreatureStack* >              mOriginalReinforcementStacksTown;                 		// 0x0360 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7BaseCreatureStack* >              mOriginalReinforcementStacksArmy;                 		// 0x0370 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3604 ];

		return pClassPointer;
	};

	void InitAIPlayerName ( );
	void eventPostSerialize ( );
	bool HasTownsOfFaction ( class UH7Faction* Faction );
	float GetBaseStatByID ( unsigned char desiredStat );
	bool IsResponsibleForAutoSave ( );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat );
	float GetAddBoniOnStatByID ( unsigned char desiredStat );
	float GetModifiedStatByID ( unsigned char desiredStat );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char checkForOperation1, unsigned char checkForOperation2, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	class AH7AdventurePlayerController* GetAdventurePlayerController ( );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	bool CanApplyPlunder ( );
	void ExecutePlunder ( );
	void ApplyPlunder ( class AH7Player* plunderingPlayer );
	bool CanApplySabotage ( );
	void ApplySabotage ( class AH7Player* sabotagingPlayer );
	int GetExplorationPercentage ( );
	bool IsControlledByLocalPlayer ( );
	TArray< class AH7AdventureArmy* > GetUndefeatedHeroArmies ( );
	int GetUndefeatedHeroesAmount ( );
	struct FColor eventGetColor ( );
	void Init ( );
	bool AiCanSpendCurrencyHero ( int Currency );
	bool AiCanSpendResourcesHero ( TArray< struct FH7ResourceQuantity > Resources );
	void AiClearNeedForTownDev ( );
	void AiModifyNeedForTownDev ( TArray< struct FH7ResourceQuantity > Costs );
	bool AiCanSpendResourcesOnTownDev ( TArray< struct FH7ResourceQuantity > Resources );
	void AiClearNeedForRecruitment ( );
	void AiModifyNeedForRecruitment ( TArray< struct FH7ResourceQuantity > Costs );
	bool AiCanSpendResourcesOnRecruitment ( TArray< struct FH7ResourceQuantity > Resources );
	bool AiDumpResources ( class UH7ResourceSet* rs );
	void CreateResourcesSet ( );
	void PostBeginPlay ( );
	class AH7AdventureHero* GetActiveHero_DoNotUse ( );
	TArray< class AH7AdventureArmy* > GetArmiesByStrength ( );
	TArray< class AH7AdventureArmy* > GetArmies ( );
	class AH7AdventureHero* GetBestHero ( );
	TArray< class AH7AdventureHero* > GetHeroes ( );
	class AH7CombatHero* GetHeroInCombat ( );
	TArray< struct FArrivedCaravan > GetAllArrivedCaravans ( );
	TArray< class AH7Fort* > GetForts ( class AH7Fort* except );
	class AH7Town* GetBestTown ( );
	TArray< class AH7Town* > GetTowns ( class AH7Town* except );
	TArray< class AH7CaravanArmy* > GetCaravans ( );
	void InitThievesGuildManager ( TArray< class AH7Player* > Players );
	bool IsPlayerHostile ( class AH7Player* thaPlayer );
	void SendDefeatMessage ( );
	TArray< struct FIntPoint > RevealFOWOfforTiles ( TArray< int > exploredTiles, int gridCols );
	void RevealFOWOfAllPlayers ( );
	void GameEndedConfirm ( );
	bool AllAlliesLost ( );
	void UpdateObserverState ( );
	void BecomeObserver ( );
	void LoseGame ( );
	void WinGame ( );
	bool IsInSpectatorMode ( );
	bool IsPlayerAllied ( class AH7Player* thaPlayer );
	bool AddDiscoveredAoC ( int aoc_number );
	bool HasCapitol ( );
	void AddVisitedObelisk ( class AH7Obelisk* obelisk );
	void SetOriginalReinforcementStacksArmy ( TArray< class UH7BaseCreatureStack* > stacks );
	void SetOriginalReinforcementStacksTown ( TArray< class UH7BaseCreatureStack* > stacks );
	TArray< class UH7BaseCreatureStack* > GetOriginalReinforcementStacksArmy ( );
	TArray< class UH7BaseCreatureStack* > GetOriginalReinforcementStacksTown ( );
	int GetHitPoints ( );
	int GetStackSize ( );
	class AH7Player* GetPlayer ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	unsigned char GetEntityType ( );
	int GetID ( );
	struct FIntPoint GetGridPosition ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	struct FString GetName ( );
	float CalcAiAoCModifierFromTargetArmy ( struct FH7AiConfigCompound cfg, class AH7AdventureArmy* Army );
	void UpdateTownInfoIcons ( );
	float CalcAiAoCModifierFromTargetSite ( struct FH7AiConfigCompound cfg, class AH7VisitableSite* Site );
	TArray< class AH7Town* > GetCaravanTargets ( );
	void RecalcAiPowerBalance ( );
	float GetAiPowerBalance ( );
	void SetAiCapitol ( class AH7Town* T );
	class AH7Town* GetAiCapitol ( );
	int GetDiscoveredAoC ( );
	class UH7ResourceSet* GetAiNeedRecruitment ( );
	class UH7ResourceSet* GetAiNeedTownDev ( );
	class UH7ResourceSet* GetAiSaveUpSpendingTownDev ( );
	class UH7ResourceSet* GetAiSaveUpSpendingRecruitment ( );
	class UH7ResourceSet* GetAiSaveUpSpendingHero ( );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	int GetDefeatedArmiesCount ( );
	void SetDefeatedArmiesCount ( int Count );
	class UH7QuestController* GetQuestController ( );
	void SetFaction ( class UH7Faction* Faction );
	class UH7Faction* GetFaction ( );
	void SetControlledByAI ( unsigned long isControlled );
	bool IsControlledByAI ( );
	bool HasEndedTurn ( );
	void SetEndedTurn ( unsigned long val );
	void SetWonGame ( );
	void SetDiscoveredFromStart ( unsigned long val );
	bool IsDiscoveredFromStart ( );
	void SetThievesGuildManager ( class UH7ThievesGuildManager* M );
	class UH7ThievesGuildManager* GetThievesGuildManager ( );
	bool IsNeutralPlayer ( );
	class AH7AdventureArmy* GetLastSelectedArmy ( );
	void SetLastSelectedArmy ( class AH7AdventureArmy* Army );
	unsigned char GetStatus ( );
	void SetStatus ( unsigned char inNewStatus );
	unsigned char GetTeamNumber ( );
	void SetTeamNumber ( unsigned char Number );
	unsigned char GetCombatPlayerType ( );
	void SetCombatPlayerType ( unsigned char newType );
	void SetResourceSetTemplate ( class UH7ResourceSet* Value );
	class UH7ResourceSet* GetResourceSet ( );
	void GetResourceIncomeFromEffects ( class UH7ResourceSet** effectSpecials );
	void SetName ( struct FString NewName );
	void SetPlayerNumber ( int Number );
	unsigned char GetPlayerNumber ( );
	void SetPlayerColor ( unsigned char playerColor );
	struct FString GetPlayerColorString ( );
	unsigned char GetPlayerColor ( );
	void SetPlayerType ( unsigned char playerType );
	unsigned char GetPlayerType ( );
	int GetNumOfVisitedObelisks ( );
	TArray< class AH7Obelisk* > GetVisitedObelisks ( );
	void AddVisitedKeymaster ( unsigned char keyColor );
	TArray< unsigned char > GetVisitedKeymasters ( );
	bool IsHeroAllowed ( class AH7EditorHero* Hero );
	TArray< class AH7EditorHero* > GetForbiddenHeroes ( );
	void SetForbiddenHeroes ( TArray< class AH7EditorHero* > Heroes );
	void SetAIAggresivenessMultiplier ( float val );
	void SetAIStartResourceMultiplier ( float val );
	void SetAIResourceIncomeMultiplier ( float val );
	void SetAICreatureGrowthRateMultiplier ( float val );
	void IncrementAIMainCounter ( );
	int GetAIMainCounter ( );
	void SetLastConqueredTown ( class AH7Town* Town );
	class AH7Town* GetLastConqueredTown ( );
};



// Class MMH7Game.H7PlayerProfile ( Property size: 39 iter: 144) 
// Class name index: 8392 
// 0x0114 (0x0174 - 0x0060)
class UH7PlayerProfile : public UObject
{
public:
	struct FString                                     mName;                                            		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mUserName;                                        		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mUserPrivileges;                                  		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mHasEnteredCouncil : 1;                           		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mHasEnteredCouncilForTheFirstTime : 1;            		// 0x0090 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      mScanningSaves : 1;                               		// 0x0090 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mReloadProfile : 1;                               		// 0x0090 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      mSavedThisTick : 1;                               		// 0x0090 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      mSavedTransThisTick : 1;                          		// 0x0090 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      mLoadedThisTick : 1;                              		// 0x0090 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      mCheckedThisTick : 1;                             		// 0x0090 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      mSaveTaskSucceeded : 1;                           		// 0x0090 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      mLoadTaskSucceeded : 1;                           		// 0x0090 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      mCheckTaskSucceeded : 1;                          		// 0x0090 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      mLookingForCampTransData : 1;                     		// 0x0090 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      mRewardsPulled : 1;                               		// 0x0090 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      mScanningCampaigns : 1;                           		// 0x0090 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	TArray< struct FCampaignProgress >                 mCampaignsProgress;                               		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mPlayedCampaignID;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	TArray< struct FMovieData >                        mPlayedBIKCinematic;                              		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mNumOfStartedMaps;                                		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              mGameplayTimeSec;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                mTotalGameplayTimeMin;                            		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                mDuelMapTime;                                     		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mDuelMapSec;                                      		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FH7MapSaveMapping >                 mContinueSaveGames;                               		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBaseMapProgress >                  mNormalMapsData;                                  		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7DifficultyParameters                     mSelectedDifficulty;                              		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                mCurrentNormalMapID;                              		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     mCurrentMapFile;                                  		// 0x00F4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UH7ListingSavegame*                          mSaveGameScanner;                                 		// 0x0104 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FH7ListingSavegameDataScene >       mScannedSaves;                                    		// 0x010C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UH7SavegameTask_Base* >              mSaveLoadTasks;                                   		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UH7CampaignTransitionManager*                mCampaignTransManager;                            		// 0x012C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UH7AchievementManager*                       mAchievementManager;                              		// 0x0134 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FH7UPlayReward >                    mUPlayRewards;                                    		// 0x013C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7UPlayAction >                    mUPlayActions;                                    		// 0x014C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CampaignDefinition* >             mUserCampaignDefinitions;                         		// 0x015C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UH7ListingCampaign*                          mUserCampaignScanner;                             		// 0x016C (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3606 ];

		return pClassPointer;
	};

	void Cheat_PrintProfileData ( );
	void Cheat_WipePlayerProfile ( unsigned long areYouSure );
	void Cheat_CompleteMapForCampaign ( class UH7CampaignDefinition* CampaignRef );
	bool HasCampaignProgress ( );
	bool HasStartedMap ( struct FString MapName );
	bool HasFinishedMap ( struct FString MapName );
	TArray< int > GetStoryPointsByMap ( struct FString MapFilename );
	void SetContinueSave ( struct FString saveName, struct FString MapFilename, class UH7CampaignDefinition* CampaignRef );
	TArray< struct FString > GetSeenMatinees ( );
	int GetCampaignFinishedMapsNum ( class UH7CampaignDefinition* CampaignRef );
	bool IsCampaignComplete ( class UH7CampaignDefinition* CampaignRef );
	struct FCampaignProgress GetCampaignDataByDef ( class UH7CampaignDefinition* CampaignRef );
	int GetCampaignMapIndex ( class UH7CampaignDefinition* CampaignRef, struct FString MapFilename );
	int GetCampaignID ( class UH7CampaignDefinition* CampaignRef );
	bool IsCampaignStarted ( class UH7CampaignDefinition* CampaignRef );
	bool IsCampaignEverStarted ( class UH7CampaignDefinition* CAMPAIGN );
	bool SelectedDifficultyEqualsLastPlayedDifficulty ( class UH7CampaignDefinition* CampaignRef, unsigned char* lastPlayedDifficulty );
	bool WasMapCompletedBefore ( int PlayedCampaignID );
	void CompleteCurrentMap ( class UH7CampaignDefinition* CampaignRef );
	struct FCampaignMapProgress GetPreviousMapInCampaign ( class UH7CampaignDefinition* CampaignRef );
	bool IsIvanCampaignFinished ( );
	bool WasMapPlayed ( class UH7CampaignDefinition* CampaignRef, struct FString MapFilename );
	void GetPlayedMapFileNames ( class UH7CampaignDefinition* CampaignRef, TArray< struct FString >* mapNames );
	void UnlockStorypoint ( int storypointIndex );
	void OverrideMapProgress ( struct FCampaignMapProgress newMapProgress );
	bool IsAReplay ( class UH7CampaignDefinition* campeignRef, struct FString MapFilename );
	bool IsMapCompletedInCampaign ( class UH7CampaignDefinition* campaignDef, int MapIndexInCampaign );
	void StartCampaignMap ( class UH7CampaignDefinition* CampaignRef, struct FString MapFilename, unsigned long checkPrivilege, unsigned long restartCurrentMap );
	bool CanCountinueLastCampaign ( );
	void ContinueLastCampaign ( );
	bool CheckCampaignUPlayID ( class UH7CampaignDefinition* CampaignRef );
	void ResetCampaignProgress ( class UH7CampaignDefinition* CampaignRef );
	void SetHasEnteredCouncil ( );
	bool ShouldDisplayAdvice ( );
	bool HasEnteredCouncil ( );
	void ChangeCurrentCampaign ( class UH7CampaignDefinition* CampaignRef );
	bool HasCurrentCampaign ( );
	struct FCampaignProgress GetCurrentCampaign ( );
	void ProgressScenePlayed ( );
	int GetCurrentCampaignID ( );
	bool WasCouncilOutroPlayed ( class UH7CampaignDefinition* CampaignRef );
	bool WasCouncilIntroPlayed ( class UH7CampaignDefinition* CampaignRef );
	void CampaignFinishedCouncilMatinee ( class UH7CampaignDefinition* CampaignRef, unsigned long introMatinee );
	void HandleMapFinish ( unsigned long isCampaign );
	void HandleMapStart ( struct FString MapFilename, class UH7CampaignDefinition* CampaignRef );
	bool IsPartOfCurrentCampaign ( struct FString MapFilename );
	void HandleCampaignMapRestart ( struct FString MapFilename, class UH7CampaignDefinition* CampaignRef );
	struct FH7ListingSavegameDataScene FindLastCampaignSave ( TArray< struct FH7ListingSavegameDataScene > savesList, class UH7CampaignDefinition* CampaignRef, struct FString MapFilename );
	struct FH7ListingSavegameDataScene GetContinueSave ( class UH7CampaignDefinition* theCampaign, struct FString MapFilename );
	void CacheSaves ( );
	void ClearSavesCache ( );
	void SaveCampaignTransition ( );
	void Save ( );
	void LoadProfileFile ( );
	void LoadCampaignTransData ( );
	void CheckCampaignTransitionSlot ( );
	void CheckProfileSlot ( );
	void UpdateFromUPlay ( );
	void eventTickSave ( float DeltaTime );
	void InitPlayerProfile ( struct FString ProfileName );
	void TrackingCampaignComplete ( );
	void TrackingCutScenePlayed ( struct FMovieData Data );
	void TickMapTime ( float DeltaTime );
	void TickCampaignTime ( float DeltaTime, class UH7CampaignDefinition* campaignDef );
	void TickGameplayTime ( float DeltaTime );
	void TickDuelMapTime ( float DeltaTime );
	int GetNormalMapGameplayTimeMin ( struct FString MapFilename );
	int GetCampaignMapGameplayTimeMin ( struct FString MapFilename );
	int GetCampaignGameplayTimeMin ( class UH7CampaignDefinition* CampaignRef );
	void ResetDuelTimers ( );
	int GetDuelMapTimeMin ( );
	int GetTotalGameplayTimeMin ( );
	struct FString GetSanitizedMinutes ( int minutes );
	int GetNumCompletedMaps ( class UH7CampaignDefinition* CampaignRef );
	int GetNumCompletedCampaigns ( unsigned long includeCurrent );
	int GetNumStartedCampaigns ( unsigned long includeCurrent );
	struct FString GetCurrentMapName ( int PlayedCampaignID );
	int GetTurnsCampaignCompletion ( int campaignIndex );
	void AddPlayedCinematic ( struct FString cinematicName, unsigned long WasSkipped, float PlayTime );
	bool WasCinematicPlayed ( struct FString cinematicName );
	int GetPlayedCinematicsNum ( );
	TArray< struct FMovieData > GetPlayedCinematics ( );
	int WasNormalMapPlayed ( struct FString MapFilename );
	struct FH7RawCampaignData GetRawCampaign ( class UH7CampaignDefinition* campRef );
	void RecreateCustomCampaignDefinitions ( );
	struct FCampaignMapProgress GetCampaignMapData ( struct FString MapFilename );
	struct FBaseMapProgress GetBasicMapData ( struct FString MapFilename );
	TArray< struct FBaseMapProgress > GetNormalMapsList ( );
	int GetNumOfMapStarts ( );
	struct FBaseMapProgress CampaignMapToBase ( struct FCampaignMapProgress CampaignData );
	bool IsHigherDifficulty ( struct FH7DifficultyParameters diffParamCheck, struct FH7DifficultyParameters diffParamCompare );
	unsigned char GetDifficulty ( struct FH7DifficultyParameters difficultyParams );
	int GetNumCustomCampaign ( );
	void SetSelectedDifficulty ( struct FH7DifficultyParameters newDifficultyParams );
	unsigned char GetSelectedDifficultyConverted ( );
	struct FH7DifficultyParameters GetSelectedDifficulty ( );
	struct FString GetPrivilegeName ( int privilege );
	void GetUserPrivileges ( unsigned long onlyOwned, TArray< int >* userPrivileges );
	bool HasPrivileg ( int privileg );
	struct FString GetFilename ( struct FString ProfileName );
	class UH7PlayerProfile* GetInstance ( );
	class UH7AchievementManager* GetAchievementManager ( );
	class UH7CampaignTransitionManager* GetCampTransManager ( );
	bool AreRewardsPulled ( );
};



// Class MMH7Game.H7PlayerReplicationInfo ( Property size: 8 iter: 29) 
// Class name index: 8394 
// 0x0008 (0x0318 - 0x0310)
class AH7PlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	unsigned char                                      mPlayerNumber;                                    		// 0x0310 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      mCombatPlayerType;                                		// 0x0311 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      mIsCombatMapAttacker : 1;                         		// 0x0314 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsHostReady : 1;                                 		// 0x0314 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      mIsPlayerReady : 1;                               		// 0x0314 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      mIsInCombat : 1;                                  		// 0x0314 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      mTurnFinished : 1;                                		// 0x0314 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      mCanBeginNextTurn : 1;                            		// 0x0314 (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3608 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void SetIsInCombatMap ( unsigned long IsInCombatMap );
	void SetReplicationPlayerNumber ( unsigned char newPlayerNumber );
	void SetCanBeginNextTurn ( );
	void SetTurnFinished ( );
	void ResetCandBeginNextTurn ( );
	void ResetTurnFinished ( );
	void SetPlayerReady ( );
	void SetHostReady ( );
	void SetCombatPlayerType ( unsigned char newType );
	void ShowPlayerJoinGameMessage ( );
	void PostBeginPlay ( );
	class AH7Player* GetPlayer ( );
	bool CanBeginNextTurn ( );
	bool IsTurnFinished ( );
	bool IsInAdventureMap ( );
	bool IsInCombatMap ( );
	unsigned char GetPlayerNumber ( );
	bool IsPlayerReady ( );
	bool IsHostReady ( );
	unsigned char GetCombatPlayerType ( );
};



// Class MMH7Game.H7QuestController ( Property size: 15 iter: 50) 
// Class name index: 8396 
// 0x0058 (0x00B8 - 0x0060)
class UH7QuestController : public UObject
{
public:
	class AH7Player*                                   mPlayer;                                          		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureController*                      mAdventureController;                             		// 0x0068 (0x0008) [0x0000000000000000]              
	TArray< class UH7SeqAct_Quest_NewNode* >           mAllQuests;                                       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7SeqCon_Event* >                   mAllEvents;                                       		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      mMapType;                                         		// 0x0090 (0x0001) [0x0000000000000000]              
	unsigned char                                      mPendingEndGameAction;                            		// 0x0091 (0x0001) [0x0000000000000000]              
	class USeqAct_Interp*                              mEndMatinee;                                      		// 0x0094 (0x0008) [0x0000000000000000]              
	unsigned long                                      mWonGame : 1;                                     		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mLostGame : 1;                                    		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mQueuedForWin : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mQueuedForLoss : 1;                               		// 0x009C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mSkipEndGameAction : 1;                           		// 0x009C (0x0004) [0x0000000000000000] [0x00000010] 
	class UH7SeqAct_WinMap*                            mWinSequence;                                     		// 0x00A0 (0x0008) [0x0000000000000000]              
	class UH7SeqAct_LoseMap*                           mLoseSequence;                                    		// 0x00A8 (0x0008) [0x0000000000000000]              
	class UH7MapEventParam*                            mMapEventParam;                                   		// 0x00B0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3610 ];

		return pClassPointer;
	};

	TArray< class UH7SeqCon_Event* > GetActiveEvents ( );
	TArray< class UH7SeqAct_Quest_NewNode* > GetActiveQuestNodes ( );
	class UH7SeqAct_Quest_NewNode* GetQuestByID ( struct FString Id );
	bool IsGameWonBySomeone ( );
	void DoEndGameAction ( unsigned char Action, unsigned long skipMatinee );
	void CheckEndMatinee ( );
	void HideHUD ( );
	void EndGame ( );
	void AIHotseatLoseConfirmed ( );
	bool IsGameWon ( );
	bool IsGameEnd ( );
	void CheckLoseGame ( );
	void LoseGame ( );
	void CheckWinGame ( );
	void WinGame ( );
	bool IsLastCampaignMap ( );
	bool HasNextMap ( );
	bool IsReplay ( );
	unsigned char GetEndGameAction ( );
	class UH7SeqAct_QuestObjective* GetObjectiveForCondition ( class UH7SeqCon_Condition* searchCondition );
	class UH7SeqAct_Quest_NewNode* GetQuestForObjective ( class UH7SeqAct_QuestObjective* searchObjective );
	void Init ( );
	void SetPlayer ( class AH7Player* playerr );
	void SetSkipEndGameAction ( unsigned long Value );
	unsigned char GetPendingEndGameAction ( );
	class USeqAct_Interp* GetEndMatinee ( );
	class UH7SeqAct_LoseMap* GetLoseSeq ( );
	class UH7SeqAct_WinMap* GetWinSeq ( );
	void SetLossSeq ( class UH7SeqAct_LoseMap* loss );
	void SetWinSeq ( class UH7SeqAct_WinMap* win );
	void SetQueuedForLoss ( unsigned long loss );
	void SetQueuedForWin ( unsigned long win );
	bool IsQueuedForLoss ( );
	bool IsQueuedForWin ( );
};



// Class MMH7Game.H7ReplicationInfo ( Property size: 40 iter: 152) 
// Class name index: 8398 
// 0x07D0 (0x0A78 - 0x02A8)
class AH7ReplicationInfo : public AGameReplicationInfo
{
public:
	class UH7MultiplayerGameManager*                   mMultiplayerGameManager;                          		// 0x02A8 (0x0008) [0x0000000000000000]              
	class AH7ControllerManager*                        mControllerManager;                               		// 0x02B0 (0x0008) [0x0000000000000000]              
	class UH7GameProcessor*                            mGameProcessor;                                   		// 0x02B8 (0x0008) [0x0000000000000000]              
	class UH7CommandQueue*                             mCommandQueue;                                    		// 0x02C0 (0x0008) [0x0000000000000000]              
	class UH7InstantCommandManager*                    mInstantCommandManager;                           		// 0x02C8 (0x0008) [0x0000000000000000]              
	class UH7MultiplayerCommandManager*                mMpCommandManager;                                		// 0x02D0 (0x0008) [0x0000000000000000]              
	class UH7SimTurnCommandManager*                    mSimTurnCommandManager;                           		// 0x02D8 (0x0008) [0x0000000000000000]              
	int                                                mUnitActionsCounter;                              		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                mCombatUnitTurnCounter;                           		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                mGameStateCounter;                                		// 0x02E8 (0x0004) [0x0000000000000000]              
	class AH7SoundManager*                             mSoundManager;                                    		// 0x02EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AH7SynchRNG*                                 mSynchRNG;                                        		// 0x02F4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsReturningToMainMenu : 1;                       		// 0x02FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsAdventureMap : 1;                              		// 0x02FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsSimTurns : 1;                                  		// 0x02FC (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      mIsLoadedGame : 1;                                		// 0x02FC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mIsAutoSaveEnabled : 1;                           		// 0x02FC (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      mIsTutorial : 1;                                  		// 0x02FC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mSupressTactics : 1;                              		// 0x02FC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mNormalGameSpeed : 1;                             		// 0x02FC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mIsReplayCombat : 1;                              		// 0x02FC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mReadyToLoad : 1;                                 		// 0x02FC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mFirstClientLobbyReplication : 1;                 		// 0x02FC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mWasSaveGameCheckDoneMP : 1;                      		// 0x02FC (0x0004) [0x0000000000000000] [0x00000800] 
	TArray< class UH7IEventManagingObject* >           mEventManageables;                                		// 0x0300 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mIdCounter;                                       		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              cGameSpeedAdventure;                              		// 0x0314 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              cGameSpeedAdventureAI;                            		// 0x0318 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              cGameSpeedCombat;                                 		// 0x031C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             mPreviousStreamingLevels;                         		// 0x0320 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7PostprocessManager*                       mPostprocessManager;                              		// 0x0330 (0x0008) [0x0000000000000000]              
	float                                              mFrameStartTime;                                  		// 0x0338 (0x0004) [0x0000000000000000]              
	int                                                mSelectedTeleportTargetID;                        		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                mFakeRandomTarget;                                		// 0x0340 (0x0004) [0x0000000000000000]              
	int                                                mFakeRandomBuff;                                  		// 0x0344 (0x0004) [0x0000000000000000]              
	struct FString                                     mPendingSaveGameFileName;                         		// 0x0348 (0x0010) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FString                                     mTempPlayerName;                                  		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7LobbyData                                mLobbyData;                                       		// 0x0368 (0x0364) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FH7ContentScannerAdventureMapData           mMapHeader;                                       		// 0x06CC (0x031C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7ContentScannerCombatMapData              mMapHeaderCombat;                                 		// 0x09E8 (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3612 ];

		return pClassPointer;
	};

	bool IsLAN ( );
	bool IsDuel ( );
	struct FH7MapHeaderPlayerInfoProperty GetMapHeaderPlayerInfoByPosition ( unsigned char StartPosition );
	struct FH7MapHeaderPlayerInfoProperty GetMapHeaderPlayerInfoByLobbyPlayerIndex ( int PlayerIndex );
	void WriteGameDataToTransitionData ( unsigned long fromResultWindow );
	void WriteLobbyDataToTransitionData ( unsigned long useLobbyData );
	void AddPlayerToLobbyDataContinue ( struct FString PlayerName, int NewIndex, unsigned long fromSaveScan );
	void AddPlayerToLobbyData ( struct FString PlayerName, int forceIndex );
	void SavegameMPScanCompleted ( );
	void InitLobbyDataByMapInfo ( class UH7MapInfo* MyMapInfo );
	void LobbyUpdateDisconnectedPlayers ( );
	void UpdateOnlineGameStarted ( );
	void LobbyUpdateOnlineGameSettingsSlots ( unsigned long ignoreUpdateOnline );
	struct FString GetCurrentMapName ( );
	class UH7Faction* GetAvailableStartFaction ( struct FString startFactionName );
	void InitLobbyHeroes ( unsigned long isScenario, unsigned long isMultiplayer );
	void InitLobbyData ( struct FH7ContentScannerAdventureMapData mapHeader, unsigned long forHotseat, unsigned long forMultiplayer );
	void InitLobbyDataBySaveData ( struct FH7ContentScannerAdventureMapData mapHeader, struct FH7ListingSavegameDataScene saveData );
	void InitLobbyDataForDuel ( struct FH7ContentScannerCombatMapData mapHeader, unsigned long MULTIPLAYER, unsigned long HOTSEAT );
	void InitLobbyDataForCampaign ( );
	void CompleteSlotCheckMP ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetFirstClientLobbyReplication ( unsigned long val );
	int GetMyPlayerIndex ( );
	class AH7Player* GetPlayerByNumber ( unsigned char Number );
	float GetTimeSinceFrameStart ( );
	void SetFrameStartTime ( );
	void eventTick ( float DeltaTime );
	void CommitCombatMapChange ( );
	void DelayedLoadCombatMap ( );
	void SwitchToCombatState ( struct FString CombatMapName, unsigned long isReplayCombat, unsigned long isSiege );
	void UnregisterEventManageable ( class UH7IEventManagingObject* eventManageable );
	void RegisterEventManageable ( class UH7IEventManagingObject* eventManageable );
	class UH7IEventManagingObject* GetEventManageable ( int eventManageableId );
	TArray< class UH7IEventManagingObject* > GetEventManageables ( );
	bool isSimTurns ( unsigned long checkAdventureMap );
	struct FVector2D GetGameSpeedConstraintsAI ( );
	struct FVector2D GetGameSpeedConstraints ( );
	void ModifyGameSpeedMPCombat ( float newGameSpeed );
	void ModifyGameSpeedMPAdventure ( float newGameSpeed );
	void ModifyGameSpeedAdventureAI ( float newGameSpeed );
	void ModifyGameSpeedAdventure ( float newGameSpeed );
	void ModifyGameSpeedCombat ( float newGameSpeed );
	void SetCutsceneMode ( unsigned long isCutscenePlaying );
	void OnDestroyGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ReturnToMainMenuNoPC ( );
	void CreateSynchRNG ( );
	void CreateMainMenuController ( );
	void CreateAdventureController ( );
	void CreateCombatController ( );
	void SetIsCombatMap ( );
	void SetIsAdventureMap ( );
	bool eventCurrentHUDContextIsHeroTradeWindow ( );
	void eventDestroyed ( );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	void InitMPTurnGUI ( );
	void InitMP ( );
	void GoToMainMenu ( );
	void StartMap ( struct FString MapName );
	void PostBeginPlay ( );
	void SetAutoSaveEnabled ( unsigned long B );
	bool IsAutoSaveEnabled ( );
	void PrintLogMessage ( struct FString msg, int MsgType );
	void SetPendingSaveGameFileName ( struct FString NewName );
	int GetNewID ( );
	int GetNewIDNative ( );
	void ResetFakeRandomNumbers ( );
	int GetFakeRandomBuff ( );
	int GetFakeRandomTarget ( );
	void SetFakeRandomBuff ( int I );
	void SetFakeRandomTarget ( int I );
	int GetTeleportTargetID ( );
	void SetTeleportTargetID ( int Id );
	int GetGameStateCounter ( );
	void IncGameStateCounter ( );
	class AH7SoundManager* GetSoundManager ( );
	class UH7MultiplayerGameManager* GetMultiplayerGameManager ( );
	int GetCombatUnitTurnCounter ( );
	void IncCombatUnitTurnCounter ( );
	void ResetCombatUnitTurnCounter ( );
	class AH7PostprocessManager* GetPostprocessManager ( );
	int GetUnitActionsCounter ( );
	void IncUnitActionsCounter ( );
	class UH7SimTurnCommandManager* GetSimTurnCommandManager ( );
	class UH7MultiplayerCommandManager* GetMpCommandManager ( );
	TArray< struct FName > GetPreviousStreamingLevels ( );
	void SetIsReplayCombat ( unsigned long isReplayCombat );
	void SetSimTurns ( unsigned long isSimTurns );
	class UH7InstantCommandManager* GetInstantCommandManager ( );
	class UH7CommandQueue* GetCommandQueue ( );
	bool IsInCutscene ( );
	float GetGameSpeedCombatConfig ( );
	float GetGameSpeedAdventureAIConfig ( );
	float GetGameSpeedAdventureConfig ( );
	float GetGameSpeedCombat ( );
	float GetGameSpeedAdventureAI ( );
	float GetGameSpeedAdventure ( );
	float GetGameSpeed ( );
	int GetIdCounter ( );
	void SetIdCounter ( int newIdCounter );
	bool IsLoadedGame ( );
	struct FH7ContentScannerAdventureMapData GetMapHeader ( );
	class AH7SynchRNG* GetSynchRNG ( );
	class UH7GameProcessor* GetGameProcessor ( );
	class AH7ControllerManager* GetControllerManager ( );
	bool IsCouncilMap ( );
	bool IsCombatMap ( );
	bool IsAdventureMap ( );
	class AH7ReplicationInfo* GetInstance ( );
};



// Class MMH7Game.H7Resource ( Property size: 17 iter: 30) 
// Class name index: 8400 
// 0x0098 (0x00F8 - 0x0060)
class UH7Resource : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ILocaParamizable;                      		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mResourceName;                                    		// 0x0070 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mCustomTooltipKey;                                		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mNameInst;                                        		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mResourceTypeIdentifier;                          		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mResourceIcon;                                    		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRank;                                            		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        mMesh;                                            		// 0x00BC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    mFX;                                              		// 0x00C4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x00CC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkEvent*                                    mOnPickUpSound;                                   		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnGainXPSound;                                   		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPopUpRequestSound;                               		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAiTradeThresholdNeed;                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAiTradeThresholdGreed;                           		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mGUIPriority;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3614 ];

		return pClassPointer;
	};

	bool IsEqual ( class UH7Resource* Resource );
	int CostResourceCompareGUI ( struct FH7ResourceQuantity A, struct FH7ResourceQuantity B );
	struct FString GetIconPath ( );
	void LocalizeName ( );
	struct FString GetIDString ( );
	struct FString GetName ( );
	int GetGUIPriority ( );
	int GetTradeThreshold ( unsigned long isNeed );
	unsigned char GetRank ( );
	struct FString GetCustomTooltipKey ( );
	struct FString GetTypeIdentifier ( );
	class UTexture2D* GetIcon ( );
	struct FString GetEditorName ( );
};



// Class MMH7Game.H7ResourceSet ( Property size: 5 iter: 49) 
// Class name index: 8402 
// 0x0048 (0x00A8 - 0x0060)
class UH7ResourceSet : public UObject
{
public:
	struct FString                                     mName;                                            		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FResourceStockpile >                mResources;                                       		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FResourceStockpile                          mCurrencyResource;                                		// 0x0080 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ResourceGatherData >             mResourcesGathered;                               		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Player*                                   mPlayer;                                          		// 0x00A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3616 ];

		return pClassPointer;
	};

	class UTexture2D* GetIconByStr ( struct FString Str );
	bool IsCurrencyResource ( class UH7Resource* Resource );
	void TradeResourcesWithPlayer ( class AH7Player* sourcePlayer, class AH7Player* targetPlayer, TArray< struct FH7ResourceQuantity > Resources );
	bool TradeResourceWithPlayer ( class AH7Player* sourcePlayer, class AH7Player* targetPlayer, class UH7Resource* Resource, int Amount );
	bool HasResourceInSet ( class UH7Resource* Resource );
	void SetGatheredResources ( TArray< struct FH7ResourceGatherData > gatheredResources );
	void SetResources ( TArray< struct FResourceStockpile > stockpiles );
	void HandleIncome ( unsigned long updateGui );
	TArray< int > GetAllResourceAmounts ( );
	TArray< struct FResourceStockpile > GetResources ( );
	int ResourceCompareGUI ( struct FResourceStockpile A, struct FResourceStockpile B );
	TArray< struct FResourceStockpile > eventGetAllResourcesAsArray ( );
	TArray< struct FH7ResourceGatherData > GetGatheredResources ( );
	class UH7Resource* GetResourceByResourceTypeIdentifier ( struct FString resourceName );
	class UH7Resource* GetResourceByIDString ( struct FString resourceName );
	class UH7Resource* GetResourceByName ( struct FString resourceName );
	void PrintDebugStockpileForAI ( );
	void LogGatheredResource ( class UH7Resource* Resource, int modAmount, unsigned long Currency );
	void eventModifiedIncome ( class UH7Resource* Resource );
	void ModifyIncome ( class UH7Resource* Resource, int modAmount );
	void SetResource ( class UH7Resource* Resource, int Amount, unsigned long updateGui );
	void ModifyResource ( class UH7Resource* Resource, int modAmount, unsigned long updateGui );
	void ModifyCurrency ( int modAmount, unsigned long updateGui );
	void ModifyCurrencySilent ( int modAmount );
	void SetCurrencySilent ( int Amount );
	void ClearQuantity ( class UH7Resource* resName );
	void ClearIncome ( class UH7Resource* resName );
	void ClearPreviousIncome ( );
	int GetIncome ( class UH7Resource* Resource );
	class UH7Resource* GetResourceByAID ( struct FString aid );
	int GetResource ( class UH7Resource* Resource );
	bool CanSpendResource ( struct FH7ResourceQuantity Cost );
	int CanSpendResourcesTimes ( TArray< struct FH7ResourceQuantity > Resources );
	bool CanSpendResources ( TArray< struct FH7ResourceQuantity > Resources );
	void spendResources ( TArray< struct FH7ResourceQuantity > Resources, unsigned long updateGui, unsigned long doMultiplayerSynchro );
	void SortByGUIPriority ( );
	void ApplyDifficultyMultiplier ( );
	class AH7Player* GetPlayer ( );
	void SetPlayer ( class AH7Player* Player );
	class UH7Resource* GetCurrencyResourceType ( );
	struct FString GetCurrencyIDString ( );
	struct FString GetCurrencyResource ( );
	int GetCurrency ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7RndSkillManager ( Property size: 17 iter: 49) 
// Class name index: 8404 
// 0x00BC (0x011C - 0x0060)
class UH7RndSkillManager : public UObject
{
public:
	class UH7SkillManager*                             mSkillManager;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< class UH7Skill* >                          mPickableSkillPool;                               		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mPickableAbilityPool;                             		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mWeightForAbilities;                              		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mWeightForSkills;                                 		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Skill* >                          mPickedSkills;                                    		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mPickedAbilities;                                 		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Skill* >                          mLearnedSkills;                                   		// 0x00C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7LevelUpData >                    mStatIncreases;                                   		// 0x00D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7RelativeWeightData                       mWeightDataConfig;                                		// 0x00E8 (0x001C) [0x0000000000000000]              
	unsigned long                                      IsOptionalAbility : 1;                            		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsReset : 1;                                     		// 0x0104 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mAbilitySlot;                                     		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                mSkillSlot;                                       		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                mMaxSkillSlot;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                mSumAbilityProbability;                           		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                mSumSkillProbability;                             		// 0x0118 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3618 ];

		return pClassPointer;
	};

	void AddPickedSkill ( class UH7Skill* Skill );
	void AddPickedAbility ( class UH7HeroAbility* Ability );
	void SetIsReset ( unsigned long IsReset );
	void ClearPickedAbilitiesAndSkills ( );
	void QueueStatIncrease ( struct FH7LevelUpData Str );
	void DequeueStatIncreases ( );
	class UH7Skill* PickSkillFromPool ( unsigned long FromPool );
	class UH7HeroAbility* PickAbilityFromPool ( unsigned long withoutWeight, unsigned long ignoreUltimate );
	int GetWeightForAbility ( class UH7HeroAbility* Ability );
	int GetWeightForSkill ( class UH7Skill* Skill );
	void GenerateWeightsForSkillPool ( );
	void GenerateWeightsForAbilityPool ( );
	void GeneratePoolOfAbilitesToLearn ( );
	void GeneratePoolOfSkillsToLearn ( );
	void SetNewAbilitiesForPicking ( );
	void SetNewSkillsForPicking ( );
	int NumberOfSkillsMaxed ( );
	void Reset ( );
	void GenerateNewBatch ( );
	void Init ( class UH7SkillManager* skillManager );
	TArray< struct FH7LevelUpData > GetCurrentStatIncreases ( );
	void AddAbilityToPool ( class UH7HeroAbility* Ability, int Weight );
	void AddSkillToPool ( class UH7Skill* Skill, int Weight );
	bool IsReset ( );
	int GetmAbilitySlot ( );
	int GetSkillSlot ( );
	int GetMaxSkillSlot ( );
	TArray< struct FH7LevelUpData > GetStatIncreases ( );
	int GetPickedAbilitiesLength ( );
	TArray< class UH7HeroAbility* > GetPickedAbilities ( );
	TArray< class UH7Skill* > GetLeanedSkills ( );
	TArray< class UH7Skill* > GetPickedSkills ( );
};



// Class MMH7Game.H7ScriptingController ( Property size: 12 iter: 46) 
// Class name index: 8406 
// 0x009C (0x02DC - 0x0240)
class AH7ScriptingController : public AActor
{
public:
	TArray< struct FH7CreatureCounter >                mCreatureLosses;                                  		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7ArmyStrengthParams >             mArmyStrengthLosses;                              		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7TownBuildingVisitData >          mVisitedBuildings;                                		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7SiteVisitData >                  mVisitedSites;                                    		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7SeqCon_HasCollectedArmies* >      mCollectArmyConditions;                           		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7MinePlunderCounter >             mPlunderedMines;                                  		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IRandomPropertyOwner* >           mRandomPropertyOwners;                            		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsCombatPaused : 1;                              		// 0x02B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                mLastCombatLosses;                                		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      mPreviousHudMode;                                 		// 0x02B8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UH7SeqAct_StartTimer* >              mActiveTimers;                                    		// 0x02BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7TownDwellingOverride >           mTownDwellingOverrides;                           		// 0x02CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3620 ];

		return pClassPointer;
	};

	bool IsTownDwellingOverrideValid ( struct FH7TownDwellingOverride dwellingOverride );
	struct FH7TownDwellingOverride GetTownDwellingOverride ( class AH7Town* Town, class UH7TownDwelling* Dwelling );
	void AddTownDwellingOverride ( struct FH7TownDwellingOverride dwellingOverride );
	void eventPostSerialize ( );
	void InitConditions ( );
	void UpdateTimers ( unsigned char Period );
	void UpdateConditions ( TArray< class UH7SeqCon_Condition* > inConditions, unsigned char Period );
	void UpdateTurn ( unsigned char Period );
	void PostBeginPlay ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void UpdateCollectedArmies ( unsigned char PlayerID, class AH7AdventureArmy* Army );
	void UpdateMinePlunder ( class AH7Mine* plunderedMine, unsigned char plunderingPlayer );
	void UpdateSiteVisit ( class AH7VisitableSite* visitedSite, unsigned char visitingPlayer );
	void UpdateBuildingVisit ( class UH7TownBuilding* visitedBuilding, class AH7Town* visitedTown, unsigned char visitingPlayer );
	void UpdateArmyStrengthLosses ( TArray< struct FH7CreatureCounter > defeatedCreatures, unsigned char PlayerID, class AH7EditorHero* defeatedHero );
	void UpdateCreatureLosses ( TArray< struct FH7CreatureCounter > defeatedCreatures );
	void UpdateAfterCombatLosses ( TArray< struct FH7CreatureCounter > defeatedCreatures, unsigned char PlayerID, class AH7EditorHero* defeatedHero );
	void TriggerEventParam ( class UClass* EventClass, class UH7EventParam* Param, class AActor* EventInstigator, int ActivateIndex );
	bool triggerEvent ( class UClass* EventClass, int ActivateIndex );
	class AH7ScriptingController* GetInstance ( );
	void UnregisterTimer ( class UH7SeqAct_StartTimer* Timer );
	void RegisterTimer ( class UH7SeqAct_StartTimer* Timer );
	void SetPreviousHUDMode ( unsigned char Mode );
	unsigned char GetPreviousHUDMode ( );
	void ResumeCombat ( );
	void PauseCombat ( );
	bool IsCombatPaused ( );
	int GetLastCombatLosses ( );
	void SetLastCombatLosses ( int totalLosses );
	TArray< struct FH7MinePlunderCounter > GetPlunderedMines ( );
	TArray< struct FH7SiteVisitData > GetVisitedSites ( );
	TArray< struct FH7TownBuildingVisitData > GetVisitedBuildings ( );
	TArray< struct FH7ArmyStrengthParams > GetArmyStrengthLosses ( );
	TArray< struct FH7CreatureCounter > GetCreatureLosses ( );
};



// Class MMH7Game.H7SeqAct_ActivateEvent ( Property size: 3 iter: 5) 
// Class name index: 8408 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_ActivateEvent : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqCon_Event*                             mEvent;                                           		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3622 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ActivateNpcScene ( Property size: 3 iter: 5) 
// Class name index: 8410 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_ActivateNpcScene : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_StartNpcScene*                     mScene;                                           		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3624 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ActivateQuest_New ( Property size: 3 iter: 5) 
// Class name index: 8412 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_ActivateQuest_New : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_Quest_NewNode*                     mQuest;                                           		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3626 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_AdvanceQuestStage ( Property size: 3 iter: 5) 
// Class name index: 8414 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_AdvanceQuestStage : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_Quest_NewNode*                     mQuest;                                           		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3628 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_AMEventCameraAction ( Property size: 28 iter: 33) 
// Class name index: 8416 
// 0x0058 (0x01C4 - 0x016C)
class UH7SeqAct_AMEventCameraAction : public USeqAct_Latent
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x016C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AMEventCameraAction*                      mAMEventArchetype;                                		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      mStartTarget;                                     		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      mEndTarget;                                       		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mContinues : 1;                                   		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mEnableCutsceneMode : 1;                          		// 0x018C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mLerpToCameraStartPosition : 1;                   		// 0x018C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mLerpToPreviousPosition : 1;                      		// 0x018C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mToggleCinimaticView : 1;                         		// 0x018C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mToggleHud : 1;                                   		// 0x018C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mFollowTarget : 1;                                		// 0x018C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mOverrideArchetypeSettings : 1;                   		// 0x018C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      mEaseInOutAnimation : 1;                          		// 0x018C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      mEaseInOutLerp : 1;                               		// 0x018C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      mFlipYawToNearerSide : 1;                         		// 0x018C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      mActionCompleted : 1;                             		// 0x018C (0x0004) [0x0000000000000000] [0x00000800] 
	float                                              mAnimDuration;                                    		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mLerpDuration;                                    		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mLerpOutDuration;                                 		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartPitch;                                      		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndPitch;                                        		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartYaw;                                        		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndYaw;                                          		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartViewingDistance;                            		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndViewingDistance;                              		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartFOV;                                        		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndFOV;                                          		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7CameraAction*                             mAction;                                          		// 0x01BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3630 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void OnActionCompleted ( );
	void eventcancel ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_Audio ( Property size: 2 iter: 4) 
// Class name index: 8418 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqAct_Audio : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3632 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_CellChange ( Property size: 5 iter: 6) 
// Class name index: 8420 
// 0x0024 (0x0178 - 0x0154)
class UH7SeqAct_CellChange : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mMovementType;                                    		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureCellMarker*                      mCellMarker;                                      		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CellChangerActor*                         mCellChanger;                                     		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3634 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqAct_CellLayerDataChange ( Property size: 4 iter: 5) 
// Class name index: 8422 
// 0x0020 (0x0174 - 0x0154)
class UH7SeqAct_CellLayerDataChange : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7AdventureLayerCellProperty*               mCellLayerData;                                   		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureCellMarker*                      mCellMarker;                                      		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3636 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqAct_ChangeLayerVisibility ( Property size: 4 iter: 6) 
// Class name index: 8424 
// 0x001C (0x0170 - 0x0154)
class UH7SeqAct_ChangeLayerVisibility : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mShouldHide : 1;                                  		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mHideFlags : 1;                                   		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FName >                             mLayers;                                          		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3638 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ChangeObjectCollision ( Property size: 4 iter: 7) 
// Class name index: 8426 
// 0x0015 (0x0169 - 0x0154)
class UH7SeqAct_ChangeObjectCollision : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7EditorMapObject*                          mTargetObject;                                    		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mToggle : 1;                                      		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      mNewCollisionType;                                		// 0x0168 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3640 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_ChangeObjectVisibility ( Property size: 4 iter: 7) 
// Class name index: 8428 
// 0x0014 (0x0168 - 0x0154)
class UH7SeqAct_ChangeObjectVisibility : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7EditorMapObject*                          mTargetObject;                                    		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mToggle : 1;                                      		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mShow : 1;                                        		// 0x0164 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3642 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_ChangeSiteOwner ( Property size: 9 iter: 13) 
// Class name index: 8430 
// 0x0030 (0x0184 - 0x0154)
class UH7SeqAct_ChangeSiteOwner : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AreaOfControlSite*                        mTargetSite;                                      		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerTargetType;                                		// 0x0174 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mTargetPlayer;                                    		// 0x0175 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mNewOwner;                                        		// 0x0176 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7Area*                                     mTargetArea;                                      		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseTargetPlayer : 1;                             		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3644 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	TArray< class AH7AreaOfControlSite* > GetTargetSites ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ChangeTownAiSettings ( Property size: 9 iter: 12) 
// Class name index: 8432 
// 0x0024 (0x0178 - 0x0154)
class UH7SeqAct_ChangeTownAiSettings : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Town*                                     mTown;                                            		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mInHibernation : 1;                               		// 0x0174 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mEnableDevelopTown : 1;                           		// 0x0174 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mEnableRecruitment : 1;                           		// 0x0174 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mEnableTrade : 1;                                 		// 0x0174 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mEnableHireHeroes : 1;                            		// 0x0174 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3646 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_CompleteQuestObjective ( Property size: 3 iter: 5) 
// Class name index: 8434 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_CompleteQuestObjective : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_QuestObjective*                    mObjective;                                       		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3648 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_DeactivateEvent ( Property size: 3 iter: 5) 
// Class name index: 8436 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_DeactivateEvent : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqCon_Event*                             mEvent;                                           		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3650 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_EndCurrentTurn ( Property size: 2 iter: 4) 
// Class name index: 8438 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqAct_EndCurrentTurn : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3652 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_EndNpcScene ( Property size: 1 iter: 3) 
// Class name index: 8440 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_EndNpcScene : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3654 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_FailQuest ( Property size: 3 iter: 5) 
// Class name index: 8442 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_FailQuest : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_Quest_NewNode*                     mQuest;                                           		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3656 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_FailQuestObjective ( Property size: 3 iter: 5) 
// Class name index: 8444 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_FailQuestObjective : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_QuestObjective*                    mObjective;                                       		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3658 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_FinalChoice ( Property size: 3 iter: 4) 
// Class name index: 8446 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqAct_FinalChoice : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                MinValue;                                         		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                mOutValue;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3660 ];

		return pClassPointer;
	};

	void Activated ( );
};



// Class MMH7Game.H7SeqAct_FinishHeroTurn ( Property size: 2 iter: 4) 
// Class name index: 8448 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqAct_FinishHeroTurn : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3662 ];

		return pClassPointer;
	};

	void eventActivated ( );
	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqAct_FireEvent ( Property size: 3 iter: 5) 
// Class name index: 8450 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_FireEvent : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqCon_Event*                             mEvent;                                           		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3664 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_FlagBuilding ( Property size: 5 iter: 8) 
// Class name index: 8452 
// 0x0021 (0x0175 - 0x0154)
class UH7SeqAct_FlagBuilding : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AreaOfControlSite*                        mBuilding;                                        		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerNumber;                                    		// 0x0174 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3666 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_FocusCamera ( Property size: 9 iter: 13) 
// Class name index: 8454 
// 0x002C (0x0180 - 0x0154)
class UH7SeqAct_FocusCamera : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mFollowTarget : 1;                                		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mLockCamera : 1;                                  		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mZoom : 1;                                        		// 0x016C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      mFocusActor;                                      		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mZoomValue;                                       		// 0x0178 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              mZoomCustomDistance;                              		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3668 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_FullScreenMovieSetInputEnable ( Property size: 1 iter: 1) 
// Class name index: 8456 
// 0x0004 (0x0158 - 0x0154)
class UH7SeqAct_FullScreenMovieSetInputEnable : public USequenceAction
{
public:
	unsigned long                                      IsInputEnabled : 1;                               		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3670 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SeqAct_GetExecutableParam ( Property size: 1 iter: 1) 
// Class name index: 8458 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqAct_GetExecutableParam : public USequenceAction
{
public:
	struct FString                                     ParamName;                                        		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3672 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SeqAct_GiveTakeCameraControl ( Property size: 3 iter: 5) 
// Class name index: 8460 
// 0x0014 (0x0168 - 0x0154)
class UH7SeqAct_GiveTakeCameraControl : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mTakeCameraControl : 1;                           		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3674 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_Hide_Reveal ( Property size: 5 iter: 8) 
// Class name index: 8462 
// 0x0029 (0x017D - 0x0154)
class UH7SeqAct_Hide_Reveal : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7IHideable*                                mTargetObject;                                    		// 0x016C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0174 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned char                                      mOperation;                                       		// 0x017C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3676 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_InterruptAction ( Property size: 1 iter: 3) 
// Class name index: 8464 
// 0x0008 (0x0198 - 0x0190)
class UH7SeqAct_InterruptAction : public USeqAct_AIMoveToActor
{
public:
	class AH7AdventureArmy*                            mTargetArmy;                                      		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3678 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_StartNpcScene ( Property size: 2 iter: 4) 
// Class name index: 8466 
// 0x0018 (0x01B0 - 0x0198)
class UH7SeqAct_StartNpcScene : public UH7SeqAct_InterruptAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0198 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mSceneName;                                       		// 0x01A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3680 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_LatentArmyAction ( Property size: 6 iter: 8) 
// Class name index: 8468 
// 0x002C (0x01BC - 0x0190)
class UH7SeqAct_LatentArmyAction : public USeqAct_AIMoveToActor
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0190 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x0198 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureArmy*                            mArmy;                                            		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseInteractingArmy : 1;                          		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mEditmUseInteractingArmy : 1;                     		// 0x01A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< class UObject* >                           mInteractingArmyObjects;                          		// 0x01AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3682 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class AH7AdventureArmy* eventGetTargetArmy ( );
};



// Class MMH7Game.H7SeqAct_AttackArmy ( Property size: 2 iter: 4) 
// Class name index: 8470 
// 0x000C (0x01C8 - 0x01BC)
class UH7SeqAct_AttackArmy : public UH7SeqAct_LatentArmyAction
{
public:
	class AH7AdventureArmy*                            mDefendingArmy;                                   		// 0x01BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseDefendingArmy : 1;                            		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3684 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class AH7AdventureArmy* eventGetDefendingArmy ( );
};



// Class MMH7Game.H7SeqAct_InteractWithBuilding ( Property size: 2 iter: 5) 
// Class name index: 8472 
// 0x0010 (0x01CC - 0x01BC)
class UH7SeqAct_InteractWithBuilding : public UH7SeqAct_LatentArmyAction
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x01BC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7VisitableSite*                            mSite;                                            		// 0x01C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3686 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	class AH7VisitableSite* GetSite ( );
};



// Class MMH7Game.H7SeqAct_MoveTo ( Property size: 3 iter: 9) 
// Class name index: 8474 
// 0x0004 (0x01C0 - 0x01BC)
class UH7SeqAct_MoveTo : public UH7SeqAct_LatentArmyAction
{
public:
	unsigned long                                      mUseMovementPoints : 1;                           		// 0x01BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mTeleport : 1;                                    		// 0x01BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mCamFollow : 1;                                   		// 0x01BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3688 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class UH7AdventureMapCell* GetTargetCell ( );
	bool IsCamFollowing ( );
	bool IsTeleporting ( );
	bool IsUsingMovementPoints ( );
	bool IsMovingNearTarget ( );
};



// Class MMH7Game.H7SeqAct_MoveToArmy ( Property size: 2 iter: 5) 
// Class name index: 8476 
// 0x000C (0x01CC - 0x01C0)
class UH7SeqAct_MoveToArmy : public UH7SeqAct_MoveTo
{
public:
	class AH7AdventureArmy*                            mMoveTarget;                                      		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseInteractingMoveTarget : 1;                    		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3690 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class UH7AdventureMapCell* GetTargetCell ( );
	bool IsMovingNearTarget ( );
};



// Class MMH7Game.H7SeqAct_MoveToBuilding ( Property size: 2 iter: 5) 
// Class name index: 8478 
// 0x0010 (0x01D0 - 0x01C0)
class UH7SeqAct_MoveToBuilding : public UH7SeqAct_MoveTo
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x01C0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7VisitableSite*                            mMoveTarget;                                      		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3692 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	class UH7AdventureMapCell* GetTargetCell ( );
};



// Class MMH7Game.H7SeqAct_MoveToTile ( Property size: 5 iter: 8) 
// Class name index: 8480 
// 0x0018 (0x01D8 - 0x01C0)
class UH7SeqAct_MoveToTile : public UH7SeqAct_MoveTo
{
public:
	int                                                mTileX;                                           		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mTileY;                                           		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mTileGridIndex;                                   		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseTargetTileMarker : 1;                         		// 0x01CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7TileMarker*                               mTargetTileMarker;                                		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3694 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class UH7AdventureMapCell* GetTargetCell ( );
	bool IsUsingTileMarker ( );
};



// Class MMH7Game.H7SeqAct_RotateArmy ( Property size: 4 iter: 7) 
// Class name index: 8482 
// 0x0010 (0x01CC - 0x01BC)
class UH7SeqAct_RotateArmy : public UH7SeqAct_LatentArmyAction
{
public:
	unsigned long                                      mInstant : 1;                                     		// 0x01BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUseDirection : 1;                                		// 0x01BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      mTargetDirection;                                 		// 0x01C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorMapObject*                          mTargetObject;                                    		// 0x01C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3696 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	struct FRotator GetTargetRotation ( );
	bool IsInstant ( );
};



// Class MMH7Game.H7SeqAct_LoseMap ( Property size: 3 iter: 5) 
// Class name index: 8484 
// 0x0011 (0x0165 - 0x0154)
class UH7SeqAct_LoseMap : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mLosingPlayer;                                    		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3698 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ManipulateDestructibleState ( Property size: 4 iter: 6) 
// Class name index: 8486 
// 0x0028 (0x017C - 0x0154)
class UH7SeqAct_ManipulateDestructibleState : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7GameplayFracturedMeshActor*               mManipulatedActor;                                		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7IDestructible*                            mManipulatedInterfaceActor;                       		// 0x016C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0174 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3700 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_ManipulateHero ( Property size: 5 iter: 7) 
// Class name index: 8488 
// 0x002C (0x0180 - 0x0154)
class UH7SeqAct_ManipulateHero : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mUseInteractingArmy : 1;                          		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AdventureArmy*                            mTargetArmy;                                      		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           mInteractingHeroObjects;                          		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3702 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class AH7AdventureArmy* GetTargetArmy ( );
};



// Class MMH7Game.H7SeqAct_AddRandomHeroItem ( Property size: 5 iter: 10) 
// Class name index: 8490 
// 0x000C (0x018C - 0x0180)
class UH7SeqAct_AddRandomHeroItem : public UH7SeqAct_ManipulateHero
{
public:
	unsigned long                                      mUseSpecificSet : 1;                              		// 0x0180 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mMinorAllowed : 1;                                		// 0x0180 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mMajorAllowed : 1;                                		// 0x0180 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mRelicAllowed : 1;                                		// 0x0180 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class UH7ItemSet*                                  mSpecificSet;                                     		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3704 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class UH7HeroItem* GetRandomHeroItemFromPool ( );
	void ResetGlobalList ( );
	void InitGlobalList ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_BaseHeroItems ( Property size: 0 iter: 2) 
// Class name index: 8492 
// 0x0000 (0x0180 - 0x0180)
class UH7SeqAct_BaseHeroItems : public UH7SeqAct_ManipulateHero
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3706 ];

		return pClassPointer;
	};

	TArray< class UH7HeroItem* > GetItemsAndEquipment ( class UH7Inventory* targetInventory, class UH7HeroEquipment* targetEquipment );
	TArray< class UH7HeroItem* > GetItemInstances ( class UH7Inventory* targetInventory, class UH7HeroEquipment* targetEquipment, class UH7HeroItem* templateItem );
};



// Class MMH7Game.H7SeqAct_ModHeroItems ( Property size: 2 iter: 4) 
// Class name index: 8494 
// 0x0014 (0x0194 - 0x0180)
class UH7SeqAct_ModHeroItems : public UH7SeqAct_BaseHeroItems
{
public:
	unsigned char                                      mOperation;                                       		// 0x0180 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7HeroItem* >                       mItems;                                           		// 0x0184 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3708 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_TransferHeroItems ( Property size: 2 iter: 4) 
// Class name index: 8496 
// 0x000C (0x018C - 0x0180)
class UH7SeqAct_TransferHeroItems : public UH7SeqAct_BaseHeroItems
{
public:
	class AH7AdventureArmy*                            mSourceArmy;                                      		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIncludeEquipment : 1;                            		// 0x0188 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3710 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ClearHeroUnits ( Property size: 0 iter: 2) 
// Class name index: 8498 
// 0x0000 (0x0180 - 0x0180)
class UH7SeqAct_ClearHeroUnits : public UH7SeqAct_ManipulateHero
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3712 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModHeroBuffs ( Property size: 3 iter: 5) 
// Class name index: 8500 
// 0x001C (0x019C - 0x0180)
class UH7SeqAct_ModHeroBuffs : public UH7SeqAct_ManipulateHero
{
public:
	unsigned char                                      mBuffOperation;                                   		// 0x0180 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseBuff* >                       mBuffs;                                           		// 0x0184 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7AdventureMapGridController*               mGridController;                                  		// 0x0194 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3714 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModHeroSkills ( Property size: 1 iter: 3) 
// Class name index: 8502 
// 0x0008 (0x0188 - 0x0180)
class UH7SeqAct_ModHeroSkills : public UH7SeqAct_ManipulateHero
{
public:
	class UH7Skill*                                    mSkill;                                           		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3716 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModHeroSpells ( Property size: 1 iter: 4) 
// Class name index: 8504 
// 0x0008 (0x0188 - 0x0180)
class UH7SeqAct_ModHeroSpells : public UH7SeqAct_ManipulateHero
{
public:
	class UH7HeroAbility*                              mSpell;                                           		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3718 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool CanLearnSpell ( class AH7AdventureHero* Hero );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModHeroStacksize ( Property size: 2 iter: 4) 
// Class name index: 8506 
// 0x0008 (0x0188 - 0x0180)
class UH7SeqAct_ModHeroStacksize : public UH7SeqAct_ManipulateHero
{
public:
	unsigned char                                      mOper;                                            		// 0x0180 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPercentage;                                      		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3720 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModHeroUnits ( Property size: 5 iter: 7) 
// Class name index: 8508 
// 0x0014 (0x0194 - 0x0180)
class UH7SeqAct_ModHeroUnits : public UH7SeqAct_ManipulateHero
{
public:
	unsigned char                                      mOper;                                            		// 0x0180 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mUnit;                                            		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mQuantity;                                        		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mAILock : 1;                                      		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDismissDisabled : 1;                             		// 0x0190 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3722 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModHeroXP ( Property size: 2 iter: 4) 
// Class name index: 8510 
// 0x0008 (0x0188 - 0x0180)
class UH7SeqAct_ModHeroXP : public UH7SeqAct_ManipulateHero
{
public:
	unsigned char                                      mOper;                                            		// 0x0180 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mQuantity;                                        		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3724 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_SelectHeroOfCurrentPlayer ( Property size: 1 iter: 3) 
// Class name index: 8512 
// 0x0004 (0x0184 - 0x0180)
class UH7SeqAct_SelectHeroOfCurrentPlayer : public UH7SeqAct_ManipulateHero
{
public:
	unsigned long                                      mFocusCamera : 1;                                 		// 0x0180 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3726 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_SetHeroMovementPoint ( Property size: 1 iter: 3) 
// Class name index: 8514 
// 0x0004 (0x0184 - 0x0180)
class UH7SeqAct_SetHeroMovementPoint : public UH7SeqAct_ManipulateHero
{
public:
	int                                                mPoints;                                          		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3728 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_TransferHeroUnits ( Property size: 2 iter: 4) 
// Class name index: 8516 
// 0x000C (0x018C - 0x0180)
class UH7SeqAct_TransferHeroUnits : public UH7SeqAct_ManipulateHero
{
public:
	class AH7AdventureArmy*                            mSourceArmy;                                      		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseMergeWindow : 1;                              		// 0x0188 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3730 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ManipulateHeroes ( Property size: 9 iter: 11) 
// Class name index: 8518 
// 0x0038 (0x018C - 0x0154)
class UH7SeqAct_ManipulateHeroes : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mUseInteractingArmy : 1;                          		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUseTargetPlayer : 1;                             		// 0x0164 (0x0004) [0x0000000000022000] [0x00000002] ( CPF_Transient | CPF_EditConst )
	class AH7AdventureArmy*                            mTargetArmy;                                      		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Area*                                     mTargetArea;                                      		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerTargetType;                                		// 0x0178 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mTargetPlayer;                                    		// 0x0179 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           mInteractingHeroObjects;                          		// 0x017C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3732 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	TArray< class AH7AdventureArmy* > GetTargetArmies ( );
};



// Class MMH7Game.H7SeqAct_ChangeHeroAggressiveness ( Property size: 1 iter: 3) 
// Class name index: 8520 
// 0x0001 (0x018D - 0x018C)
class UH7SeqAct_ChangeHeroAggressiveness : public UH7SeqAct_ManipulateHeroes
{
public:
	unsigned char                                      mNewAggressiveness;                               		// 0x018C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3734 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ChangeHeroOwner ( Property size: 1 iter: 3) 
// Class name index: 8522 
// 0x0001 (0x018D - 0x018C)
class UH7SeqAct_ChangeHeroOwner : public UH7SeqAct_ManipulateHeroes
{
public:
	unsigned char                                      mNewOwner;                                        		// 0x018C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3736 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_RemoveHero ( Property size: 0 iter: 2) 
// Class name index: 8524 
// 0x0000 (0x018C - 0x018C)
class UH7SeqAct_RemoveHero : public UH7SeqAct_ManipulateHeroes
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3738 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_SetHeroHibernationState ( Property size: 1 iter: 3) 
// Class name index: 8526 
// 0x0004 (0x0190 - 0x018C)
class UH7SeqAct_SetHeroHibernationState : public UH7SeqAct_ManipulateHeroes
{
public:
	unsigned long                                      mNewHibernationState : 1;                         		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3740 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ManipulateTownBuilding ( Property size: 5 iter: 7) 
// Class name index: 8528 
// 0x0024 (0x0178 - 0x0154)
class UH7SeqAct_ManipulateTownBuilding : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Town*                                     mTown;                                            		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7TownBuilding*                             mBuilding;                                        		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mBuild : 1;                                       		// 0x0174 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3742 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModBuildingBuffs ( Property size: 6 iter: 9) 
// Class name index: 8530 
// 0x0034 (0x0188 - 0x0154)
class UH7SeqAct_ModBuildingBuffs : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7VisitableSite*                            mTargetSite;                                      		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mBuffOperation;                                   		// 0x0174 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseBuff* >                       mBuffs;                                           		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3744 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ModPlayerBuffs ( Property size: 6 iter: 8) 
// Class name index: 8532 
// 0x002C (0x0180 - 0x0154)
class UH7SeqAct_ModPlayerBuffs : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mTargetPlayer;                                    		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mBuffOperation;                                   		// 0x0165 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseBuff* >                       mBuffs;                                           		// 0x0168 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7AdventureController*                      mAdventureController;                             		// 0x0178 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3746 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_Narration ( Property size: 0 iter: 2) 
// Class name index: 8534 
// 0x0000 (0x016C - 0x016C)
class UH7SeqAct_Narration : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3748 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqAct_BaseDialogue ( Property size: 16 iter: 42) 
// Class name index: 8536 
// 0x006C (0x01D8 - 0x016C)
class UH7SeqAct_BaseDialogue : public UH7SeqAct_Narration
{
public:
	unsigned char                                      mBaseDialogueType;                                		// 0x016C (0x0001) [0x0000000000000000]              
	unsigned long                                      mBaseIsDialogue : 1;                              		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mDialogueFinished : 1;                            		// 0x0170 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mAutoForward : 1;                                 		// 0x0170 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mPlayInitialDialogue : 1;                         		// 0x0170 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mReadyToSwap : 1;                                 		// 0x0170 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mLocalAutoPlaySetting : 1;                        		// 0x0170 (0x0004) [0x0000000000000000] [0x00000020] 
	class AH7EditorHero*                               mBaseNarrator;                                    		// 0x0174 (0x0008) [0x0000000000000000]              
	TArray< struct FH7DialogueLine >                   mBaseLines;                                       		// 0x017C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mCurrentLineIndex;                                		// 0x018C (0x0004) [0x0000000000000000]              
	class UH7GFxDialog*                                mDialogWindow;                                    		// 0x0190 (0x0008) [0x0000000000000000]              
	class UH7GFxCouncilDialog*                         mCouncilDialogWindow;                             		// 0x0198 (0x0008) [0x0000000000000000]              
	class UH7GFxNarrationDialog*                       mNarrationDialogWindow;                           		// 0x01A0 (0x0008) [0x0000000000000000]              
	struct FString                                     mPreviousCaption;                                 		// 0x01A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mNextCaption;                                     		// 0x01B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mCloseCaption;                                    		// 0x01C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3750 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void PlayCallbackAKEvent ( class UAkEvent* Event );
	void OnPreviousLine ( );
	void eventOnNextLine ( );
	void eventAutoOnNextLine ( );
	void BecomeReadyToSwap ( );
	void eventDoAutoForward ( );
	void OnClose ( );
	void StartVoiceOver ( );
	void StopVoiceOver ( );
	struct FString GetLocalizedContent ( int lineIndex );
	struct FString GetCurrentLineText ( );
	struct FH7DialogueLine GetCurrentLineStruct ( );
	void ShowCurrentDialogueLine ( );
	TArray< class AH7EditorHero* > GetAllSpeakersAndListeners ( );
	bool isMonolog ( );
	class AH7EditorHero* GetListenerHero ( int lineIndex, unsigned long searchSpeaker );
	class AH7EditorHero* eventGetSpeakerHero ( int lineIndex );
	class AActor* eventGetSoundActor ( );
	void ShowDialogue ( TArray< struct FH7DialogueLine > Lines, unsigned char dialogueType, class AH7EditorHero* narrator );
	void SetLocalAutoPlaySetting ( unsigned long val );
	bool GetLocalAutoPlaySetting ( );
	void Initialize ( );
	void eventSetAutoForward ( unsigned long val );
};



// Class MMH7Game.H7SeqAct_ShowDialogue ( Property size: 9 iter: 17) 
// Class name index: 8538 
// 0x0048 (0x0220 - 0x01D8)
class UH7SeqAct_ShowDialogue : public UH7SeqAct_BaseDialogue
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x01D8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x01E0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IVoiceable;                            		// 0x01E8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsNarratorEnabled : 1;                           		// 0x01F0 (0x0004) [0x0000000000022000] [0x00000001] ( CPF_Transient | CPF_EditConst )
	unsigned long                                      mIsDialogue : 1;                                  		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FString                                     mTitle;                                           		// 0x01F4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mDialogueType;                                    		// 0x0204 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorHero*                               mNarrator;                                        		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7DialogueLine >                   mLines;                                           		// 0x0210 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3752 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	struct FString GetLocalizedContent ( int lineIndex );
	void Activated ( );
	unsigned char GetDialogueType ( );
	bool IsDialogue ( );
	class AH7EditorHero* GetNarrator ( );
	TArray< struct FH7DialogueLine > GetLines ( );
};



// Class MMH7Game.H7SeqAct_StartShowDialogue ( Property size: 3 iter: 7) 
// Class name index: 8540 
// 0x0018 (0x01F0 - 0x01D8)
class UH7SeqAct_StartShowDialogue : public UH7SeqAct_BaseDialogue
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x01D8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x01E0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_ShowDialogue*                      mDialogToShow;                                    		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3754 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	struct FString GetLocalizedContent ( int lineIndex );
	void OnClose ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_BaseText ( Property size: 1 iter: 5) 
// Class name index: 8542 
// 0x0004 (0x0170 - 0x016C)
class UH7SeqAct_BaseText : public UH7SeqAct_Narration
{
public:
	unsigned long                                      mTextConfirmed : 1;                               		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3756 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void OnTextConfirmed ( );
	struct FString GetLocalizedContent ( );
	void ShowText ( );
};



// Class MMH7Game.H7SeqAct_ShowText ( Property size: 6 iter: 10) 
// Class name index: 8544 
// 0x003C (0x01AC - 0x0170)
class UH7SeqAct_ShowText : public UH7SeqAct_BaseText
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0170 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mTitle;                                           		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mText;                                            		// 0x0188 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UTexture2D*                                  mImage;                                           		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mImage2;                                          		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mTutorialBG : 1;                                  		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3758 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	struct FString GetLocalizedContent ( );
	void ShowText ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_StartShowText ( Property size: 3 iter: 7) 
// Class name index: 8546 
// 0x0018 (0x0188 - 0x0170)
class UH7SeqAct_StartShowText : public UH7SeqAct_BaseText
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0170 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x0178 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_ShowText*                          mTextToShow;                                      		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3760 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	struct FString GetLocalizedContent ( );
	void OnTextConfirmed ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_HighlightGUIElement ( Property size: 12 iter: 22) 
// Class name index: 8548 
// 0x0044 (0x01B0 - 0x016C)
class UH7SeqAct_HighlightGUIElement : public UH7SeqAct_Narration
{
public:
	unsigned long                                      mDeleteAllHighlights : 1;                         		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mPreventAllPendingHighlights : 1;                 		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mIsCircle : 1;                                    		// 0x016C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mIsBanana : 1;                                    		// 0x016C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mRemoveWhenClicked : 1;                           		// 0x016C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mIsClicked : 1;                                   		// 0x016C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mEndTicking : 1;                                  		// 0x016C (0x0004) [0x0000000000000000] [0x00000040] 
	struct FString                                     mContainer;                                       		// 0x0170 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mElement;                                         		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mText;                                            		// 0x0190 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UTexture2D*                                  mImage;                                           		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mImage2;                                          		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3762 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsClicked ( );
	bool IsRemoveWhenClicked ( );
	void EndTicking ( );
	void TriggerClick ( );
	void ShowHighlight ( );
	void Activated ( );
	struct FString GetText ( );
	int GetAssetNr ( );
	bool IsCircle ( );
};



// Class MMH7Game.H7SeqAct_ShowCouncilDialogue ( Property size: 4 iter: 13) 
// Class name index: 8550 
// 0x0020 (0x018C - 0x016C)
class UH7SeqAct_ShowCouncilDialogue : public UH7SeqAct_Narration
{
public:
	struct FPointer                                    VfTable_IH7IVoiceable;                            		// 0x016C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7CouncilDialogueLine >            mLines;                                           		// 0x0174 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mCurrentLineIndex;                                		// 0x0184 (0x0004) [0x0000000000000000]              
	unsigned long                                      mDialogueFinished : 1;                            		// 0x0188 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3764 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	struct FString GetLocalizedContent ( );
	class AActor* eventGetSoundActor ( );
	void eventFinishDialogue ( );
	void eventHideSubtitle ( );
	void eventShowSubtitle ( );
	void ShowSubtitles ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ShowNote ( Property size: 3 iter: 6) 
// Class name index: 8552 
// 0x0020 (0x018C - 0x016C)
class UH7SeqAct_ShowNote : public UH7SeqAct_Narration
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x016C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mText;                                            		// 0x0174 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UTexture2D*                                  mIcon;                                            		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3766 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	struct FString GetLocalizedContent ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ObjectActivator ( Property size: 1 iter: 2) 
// Class name index: 8554 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_ObjectActivator : public USequenceAction
{
public:
	class UObject*                                     mObjectToKismetActivate;                          		// 0x0154 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3768 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqAct_ObjectiveAndGate ( Property size: 2 iter: 3) 
// Class name index: 8556 
// 0x0014 (0x0168 - 0x0154)
class UH7SeqAct_ObjectiveAndGate : public USequenceAction
{
public:
	TArray< class UH7SeqAct_ObjectiveAndGateStatus* >  mStageGateStati;                                  		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mSkip : 1;                                        		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3770 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SeqAct_ObjectiveAndGateStatus ( Property size: 3 iter: 3) 
// Class name index: 8558 
// 0x0024 (0x0084 - 0x0060)
class UH7SeqAct_ObjectiveAndGateStatus : public UObject
{
public:
	unsigned long                                      isOpen : 1;                                       		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< unsigned long >                            LinkedOutputFiredStatus;                          		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPointer >                          LinkedOutputs;                                    		// 0x0074 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3772 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SeqAct_OperateFogOfWar ( Property size: 4 iter: 5) 
// Class name index: 8560 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_OperateFogOfWar : public USequenceAction
{
public:
	unsigned char                                      mPlayerNumber;                                    		// 0x0154 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsCovered : 1;                                   		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsPermanent : 1;                                 		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mWasActivated : 1;                                		// 0x0158 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3774 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqAct_OverwriteHeroIcon ( Property size: 3 iter: 4) 
// Class name index: 8562 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_OverwriteHeroIcon : public USequenceAction
{
public:
	class AH7Unit*                                     mUnit;                                            		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mNewTexture;                                      		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0164 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3776 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqAct_PauseCurrentCombat ( Property size: 2 iter: 4) 
// Class name index: 8564 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqAct_PauseCurrentCombat : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3778 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_Quest_NewNode ( Property size: 23 iter: 64) 
// Class name index: 8566 
// 0x0108 (0x025C - 0x0154)
class UH7SeqAct_Quest_NewNode : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mPlayer;                                          		// 0x015C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mQuestStatus;                                     		// 0x015D (0x0001) [0x0000000000000000]              
	unsigned char                                      mQuestStateNewThisFrame;                          		// 0x015E (0x0001) [0x0000000000000000]              
	struct FString                                     mTitle;                                           		// 0x0160 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      mUseSkirmish : 1;                                 		// 0x0170 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mActivateAtStart : 1;                             		// 0x0170 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mPrimary : 1;                                     		// 0x0170 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mTracked : 1;                                     		// 0x0170 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mShowQuestResultBeforeCompleteActions : 1;        		// 0x0170 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mQuestStarted : 1;                                		// 0x0170 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FString                                     mTitleInst;                                       		// 0x0174 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mDescription;                                     		// 0x0184 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mDescriptionInst;                                 		// 0x0194 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mRewardText;                                      		// 0x01A4 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mRewardTextInst;                                  		// 0x01B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7QuestReward                              mReward1;                                         		// 0x01C4 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FH7QuestReward                              mReward2;                                         		// 0x01E8 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FH7QuestReward                              mReward3;                                         		// 0x020C (0x0024) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7QuestReward >                    mRewards;                                         		// 0x0230 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mCurrentStage;                                    		// 0x0240 (0x0004) [0x0000000000000000]              
	TArray< struct FH7ObjectiveBufferEntry >           mTooltipBuffer;                                   		// 0x0244 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7SeqAct_ObjectiveAndGate*                  mObjectiveGate;                                   		// 0x0254 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3780 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	unsigned char GetStatOfAttribute ( unsigned char attribute );
	struct FString GetIconOfReward ( struct FH7QuestReward reward );
	struct FString GetNameOfReward ( struct FH7QuestReward reward );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* questData, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	void OnMergeCompleted ( unsigned long Success );
	bool GiveOutRewardsToPlayer ( class AH7Player* Player );
	void OnRewardAccepted ( );
	void eventQuestStageChanged ( );
	void ExecuteObjectiveBufferUpdate ( );
	void BufferObjectiveChange ( class UH7SeqAct_QuestObjective* objective, unsigned char oldStatus, unsigned char NewStatus );
	void DeleteFromBuffer ( unsigned char Status );
	void ResetNewQuestState ( );
	void BufferNewQuestState ( unsigned char NewStatus );
	void QuestCompleted ( );
	void eventQuestStateChanged ( unsigned char oldStatus, unsigned char NewStatus );
	void eventQuestActivated ( );
	int eventGetObjClassVersion ( );
	void eventPostSerialize ( );
	void AcceptCompleteResult ( );
	bool IsSkirmish ( );
	TArray< class UH7SeqAct_QuestObjective* > GetCurrentObjectives ( );
	class UH7SeqAct_QuestGroup* GetGroup ( );
	struct FString GetID ( );
	TArray< struct FH7QuestReward > GetRewards ( );
	struct FString GetRewardText ( );
	struct FString GetDescription ( );
	struct FString GetTitle ( );
	unsigned char GetPlayerNumber ( );
	bool IsStarted ( );
	unsigned char GetQuestStatus ( );
	void SetTracked ( unsigned long val );
	bool IsTracked ( );
	bool IsPrimary ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7SeqAct_QuestGroup ( Property size: 6 iter: 8) 
// Class name index: 8568 
// 0x004C (0x01A0 - 0x0154)
class UH7SeqAct_QuestGroup : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mTitle;                                           		// 0x015C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mTitleInst;                                       		// 0x016C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mDescription;                                     		// 0x017C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mDescriptionInst;                                 		// 0x018C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mPrimary : 1;                                     		// 0x019C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3782 ];

		return pClassPointer;
	};

	struct FString GetDescription ( );
	struct FString GetTitle ( );
};



// Class MMH7Game.H7SeqAct_QuestObjective ( Property size: 22 iter: 42) 
// Class name index: 8570 
// 0x00A4 (0x01F8 - 0x0154)
class UH7SeqAct_QuestObjective : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mName;                                            		// 0x0164 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mDescription;                                     		// 0x0174 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      mStage;                                           		// 0x0184 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mShowOnMinimap;                                   		// 0x0185 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mObjectiveStatus;                                 		// 0x0186 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCondTier;                                        		// 0x0187 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIgnoreFail : 1;                                  		// 0x0188 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mObjectiveActivated : 1;                          		// 0x0188 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mAchieved : 1;                                    		// 0x0188 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mFailed : 1;                                      		// 0x0188 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mUseSkirmish : 1;                                 		// 0x0188 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	TArray< class UH7IQuestTarget* >                   mTrackingObjects;                                 		// 0x018C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mLastGameStateCounter;                            		// 0x019C (0x0004) [0x0000000000000000]              
	TArray< class UH7SeqCon_Condition* >               mWinConditions;                                   		// 0x01A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7SeqCon_Condition* >               mLoseConditions;                                  		// 0x01B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mCondDescription;                                 		// 0x01C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           mCondRelatedObjects;                              		// 0x01D0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mCondWeeks;                                       		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCondAmount;                                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mCondIcon;                                        		// 0x01E8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3784 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	TArray< class UH7SeqCon_Condition* > GetLoseConditions ( );
	TArray< class UH7SeqCon_Condition* > GetWinConditions ( );
	TArray< class UH7IQuestTarget* > GetMinimapQuestTargets ( );
	void eventObjectiveStateChanged ( unsigned char oldStatus, unsigned char NewStatus );
	void eventObjectiveActivated ( );
	bool eventShouldFireConditionCheck ( );
	void RemoveMinimapTrackingObject ( class UH7IQuestTarget* questTarget );
	bool IsActive ( );
	TArray< class UH7IQuestTarget* > GetQuestTargets ( );
	unsigned char GetShowOnMinimap ( );
	unsigned char GetObjectiveStatus ( );
	struct FString GetDescription ( );
	struct FString WinLoseCondDesc ( );
	struct FString GetCreatureTierString ( );
	struct FString GetDescriptionName ( class UObject* relatedObject );
	bool IsFailed ( );
	bool IsAchieved ( );
};



// Class MMH7Game.H7SeqAct_RemoveCaravans ( Property size: 6 iter: 10) 
// Class name index: 8572 
// 0x0030 (0x0184 - 0x0154)
class UH7SeqAct_RemoveCaravans : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mPlayer;                                          		// 0x016C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7CaravanRoute >                   mCaravanRoutes;                                   		// 0x0170 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mAllCaravans : 1;                                 		// 0x0180 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3786 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void RemoveCaravan ( class AH7CaravanArmy* caravan );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_RemoveMinimapTrackingObject ( Property size: 4 iter: 6) 
// Class name index: 8574 
// 0x0028 (0x017C - 0x0154)
class UH7SeqAct_RemoveMinimapTrackingObject : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_QuestObjective*                    mObjective;                                       		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7IQuestTarget*                             mTrackingObject;                                  		// 0x016C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0174 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3788 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ResumeCurrentCombat ( Property size: 2 iter: 4) 
// Class name index: 8576 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqAct_ResumeCurrentCombat : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3790 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_RevealFogOfWar ( Property size: 8 iter: 10) 
// Class name index: 8578 
// 0x0029 (0x017D - 0x0154)
class UH7SeqAct_RevealFogOfWar : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mRevealRadius;                                    		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mTileX;                                           		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mTileY;                                           		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseTargetTileMarker : 1;                         		// 0x0170 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7TileMarker*                               mTargetTileMarker;                                		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerNumber;                                    		// 0x017C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3792 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetAkAmbientNode ( Property size: 3 iter: 5) 
// Class name index: 8580 
// 0x001C (0x0170 - 0x0154)
class UH7SeqAct_SetAkAmbientNode : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mEnableNode : 1;                                  		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class AH7AKAmbientNode* >                  mNodeReferences;                                  		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3794 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetCombatCoolCamAllowed ( Property size: 3 iter: 5) 
// Class name index: 8582 
// 0x0014 (0x0168 - 0x0154)
class UH7SeqAct_SetCombatCoolCamAllowed : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mCoolCamCombatActionAllowed : 1;                  		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3796 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_SetDiplomacy ( Property size: 4 iter: 6) 
// Class name index: 8584 
// 0x0019 (0x016D - 0x0154)
class UH7SeqAct_SetDiplomacy : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mDiplomaticDisposition;                           		// 0x016C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3798 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetDwellingCreaturesPool ( Property size: 4 iter: 6) 
// Class name index: 8586 
// 0x0028 (0x017C - 0x0154)
class UH7SeqAct_SetDwellingCreaturesPool : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Dwelling*                                 mDwelling;                                        		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7DwellingCreatureData >           mCreaturesPool;                                   		// 0x016C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3800 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetListenerCinematic ( Property size: 2 iter: 4) 
// Class name index: 8588 
// 0x000C (0x0160 - 0x0154)
class UH7SeqAct_SetListenerCinematic : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mEnableCinematicMode : 1;                         		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3802 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetNPCProperties ( Property size: 5 iter: 7) 
// Class name index: 8590 
// 0x001C (0x0170 - 0x0154)
class UH7SeqAct_SetNPCProperties : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureArmy*                            mNPCArmy;                                         		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsNPC : 1;                                       		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsTalking : 1;                                   		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3804 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetResource ( Property size: 7 iter: 10) 
// Class name index: 8592 
// 0x0040 (0x0194 - 0x0154)
class UH7SeqAct_SetResource : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FH7ResourceQuantity                         mResource;                                        		// 0x0164 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ResourceQuantity >               mResources;                                       		// 0x017C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mOper;                                            		// 0x018C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerNumber;                                    		// 0x018D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIncome : 1;                                      		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3806 ];

		return pClassPointer;
	};

	void eventVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetShellState ( Property size: 2 iter: 4) 
// Class name index: 8594 
// 0x000C (0x0160 - 0x0154)
class UH7SeqAct_SetShellState : public USequenceAction
{
public:
	class AH7VisitingShell*                            mShell;                                           		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mState : 1;                                       		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3808 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetSurrenderFlee ( Property size: 3 iter: 5) 
// Class name index: 8596 
// 0x000C (0x0160 - 0x0154)
class UH7SeqAct_SetSurrenderFlee : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      canFlee : 1;                                      		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      canSurrender : 1;                                 		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3810 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetTownDwellingCreaturePool ( Property size: 8 iter: 10) 
// Class name index: 8598 
// 0x0060 (0x01B4 - 0x0154)
class UH7SeqAct_SetTownDwellingCreaturePool : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Town*                                     mTown;                                            		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7TownDwelling*                             mDwelling;                                        		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FH7DwellingCreatureData                     mCreaturePool;                                    		// 0x0174 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mName;                                            		// 0x018C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mDescription;                                     		// 0x019C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mIcon;                                            		// 0x01AC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3812 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_ShowFloatingText ( Property size: 10 iter: 12) 
// Class name index: 8600 
// 0x0050 (0x01A4 - 0x0154)
class UH7SeqAct_ShowFloatingText : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mTextToShow;                                      		// 0x0164 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class AH7TileMarker*                               mTargetTileMarker;                                		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mType;                                            		// 0x017C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mColor;                                           		// 0x017D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mPosition;                                        		// 0x0180 (0x000C) [0x0000000000000000]              
	int                                                mIntParam;                                        		// 0x018C (0x0004) [0x0000000000000000]              
	float                                              mFloatParam;                                      		// 0x0190 (0x0004) [0x0000000000000000]              
	struct FString                                     mStringParam;                                     		// 0x0194 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3814 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_SpawnAdventureObject ( Property size: 4 iter: 6) 
// Class name index: 8602 
// 0x0020 (0x0174 - 0x0154)
class UH7SeqAct_SpawnAdventureObject : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7TileMarker*                               mTargetTileMarker;                                		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureObject*                          mArchetype;                                       		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     SpawnedObject;                                    		// 0x016C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3816 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SpawnArmy ( Property size: 10 iter: 13) 
// Class name index: 8604 
// 0x0040 (0x0194 - 0x0154)
class UH7SeqAct_SpawnArmy : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7TileMarker*                               mTargetTileMarker;                                		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mArmyArchetype;                                   		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerNumber;                                    		// 0x017C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mTargetDirection;                                 		// 0x017D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorMapObject*                          mTargetObject;                                    		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseDirection : 1;                                		// 0x0188 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UObject*                                     SpawnedObject;                                    		// 0x018C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3818 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SpawnCaravan ( Property size: 7 iter: 10) 
// Class name index: 8606 
// 0x00B5 (0x0209 - 0x0154)
class UH7SeqAct_SpawnCaravan : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0164 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7TileMarker*                               mTargetTileMarker;                                		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AreaOfControlSiteLord*                    mCaravanTarget;                                   		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FCreatureStackProperties                    mCreatureStackProperties[ 0x7 ];                  		// 0x017C (0x008C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerNumber;                                    		// 0x0208 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3820 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_StartTimer ( Property size: 8 iter: 17) 
// Class name index: 8608 
// 0x0038 (0x018C - 0x0154)
class UH7SeqAct_StartTimer : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mName;                                            		// 0x0164 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mTimeAmount;                                      		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mUnit;                                            		// 0x0178 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCounter;                                         		// 0x017C (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsStarted : 1;                                   		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 
	class UH7TimerEventParam*                          mTimerEventParam;                                 		// 0x0184 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3822 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	int eventGetObjClassVersion ( );
	void UpdateCounter ( );
	void UpdateDay ( );
	void UpdateWeek ( );
	void eventActivated ( );
	unsigned char GetUnit ( );
	bool IsStarted ( );
	int GetCount ( );
};



// Class MMH7Game.H7SeqAct_ToggleCutscene ( Property size: 1 iter: 3) 
// Class name index: 8610 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_ToggleCutscene : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3824 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_UnlockStorypoint ( Property size: 2 iter: 4) 
// Class name index: 8612 
// 0x000C (0x0160 - 0x0154)
class UH7SeqAct_UnlockStorypoint : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mStoryPointIndex;                                 		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3826 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_VisitAndGarrison ( Property size: 3 iter: 6) 
// Class name index: 8614 
// 0x0018 (0x016C - 0x0154)
class UH7SeqAct_VisitAndGarrison : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AreaOfControlSite*                        mInteractingSite;                                 		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mInteractingHero;                                 		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3828 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_WinMap ( Property size: 3 iter: 5) 
// Class name index: 8616 
// 0x0011 (0x0165 - 0x0154)
class UH7SeqAct_WinMap : public USequenceAction
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IActionable;                           		// 0x015C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mWinningPlayer;                                   		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3830 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqCon_Condition ( Property size: 3 iter: 12) 
// Class name index: 8618 
// 0x001C (0x0154 - 0x0138)
class UH7SeqCon_Condition : public USequenceCondition
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0138 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mNot : 1;                                         		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UH7IQuestTarget* >                   mOldQuestTargets;                                 		// 0x0144 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3832 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventConditionProgressed ( int progressIndex );
	bool Eval ( unsigned char Op, float ValueA, float ValueB );
	void UpdateDay ( );
	void UpdateWeek ( );
	bool HasOutputImpulse ( );
	bool IsConditionFulfilled ( );
	void Activated ( );
	TArray< class UH7IQuestTarget* > GetQuestTargets ( );
};



// Class MMH7Game.H7SeqCon_ArmiesDefeated ( Property size: 4 iter: 12) 
// Class name index: 8620 
// 0x002C (0x0180 - 0x0154)
class UH7SeqCon_ArmiesDefeated : public UH7SeqCon_Condition
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class AH7AdventureArmy* >                  mArmies;                                          		// 0x015C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mProgress;                                        		// 0x016C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mPreviousDefeatedArmies;                          		// 0x017C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3834 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	struct FString GetProgress ( );
	TArray< class UH7IQuestTarget* > GetQuestTargets ( );
	int GetDefeatedArmiesCount ( );
	bool IsConditionFulfilled ( );
};



// Class MMH7Game.H7SeqCon_TimePassed ( Property size: 5 iter: 15) 
// Class name index: 8622 
// 0x0020 (0x0174 - 0x0154)
class UH7SeqCon_TimePassed : public UH7SeqCon_Condition
{
public:
	unsigned long                                      mUseTimer : 1;                                    		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                mTimeAmount;                                      		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mUnit;                                            		// 0x015C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mProgress;                                        		// 0x0160 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mCounter;                                         		// 0x0170 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3836 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasTimePassed ( );
	void UpdateCounter ( );
	void UpdateDay ( );
	void UpdateWeek ( );
	bool HasOutputImpulse ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	struct FString GetProgress ( );
};



// Class MMH7Game.H7SeqCon_ArmyHas ( Property size: 4 iter: 7) 
// Class name index: 8624 
// 0x001C (0x0190 - 0x0174)
class UH7SeqCon_ArmyHas : public UH7SeqCon_TimePassed
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0174 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureArmy*                            mArmy;                                            		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseInteractingArmy : 1;                          		// 0x0184 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AdventureArmy*                            mInteractingArmy;                                 		// 0x0188 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3838 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForArmy ( class AH7AdventureArmy* Army );
	bool IsConditionFulfilled ( );
};



// Class MMH7Game.H7SeqCon_ArmyHasCreatures ( Property size: 3 iter: 5) 
// Class name index: 8626 
// 0x000D (0x019D - 0x0190)
class UH7SeqCon_ArmyHasCreatures : public UH7SeqCon_ArmyHas
{
public:
	class AH7Creature*                                 mCreature;                                        		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCreatureCounter;                                 		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mOper;                                            		// 0x019C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3840 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForArmy ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7SeqCon_ArmyHasCreaturesFromFaction ( Property size: 3 iter: 5) 
// Class name index: 8628 
// 0x000D (0x019D - 0x0190)
class UH7SeqCon_ArmyHasCreaturesFromFaction : public UH7SeqCon_ArmyHas
{
public:
	class UH7Faction*                                  mFaction;                                         		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCreatureCounter;                                 		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mOper;                                            		// 0x019C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3842 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForArmy ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7SeqCon_ArmyHasHero ( Property size: 1 iter: 3) 
// Class name index: 8630 
// 0x0008 (0x0198 - 0x0190)
class UH7SeqCon_ArmyHasHero : public UH7SeqCon_ArmyHas
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3844 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForArmy ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7SeqCon_ArmyHasHeroFromFaction ( Property size: 1 iter: 3) 
// Class name index: 8632 
// 0x0008 (0x0198 - 0x0190)
class UH7SeqCon_ArmyHasHeroFromFaction : public UH7SeqCon_ArmyHas
{
public:
	class UH7Faction*                                  mFaction;                                         		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3846 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForArmy ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7SeqCon_ArmyHasPlayer ( Property size: 1 iter: 3) 
// Class name index: 8634 
// 0x0001 (0x0191 - 0x0190)
class UH7SeqCon_ArmyHasPlayer : public UH7SeqCon_ArmyHas
{
public:
	unsigned char                                      mPlayerNumber;                                    		// 0x0190 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3848 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForArmy ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7SeqCon_ArmyHasPlayerFromFaction ( Property size: 1 iter: 3) 
// Class name index: 8636 
// 0x0008 (0x0198 - 0x0190)
class UH7SeqCon_ArmyHasPlayerFromFaction : public UH7SeqCon_ArmyHas
{
public:
	class UH7Faction*                                  mFaction;                                         		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3850 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForArmy ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7SeqCon_BuildingIsFromFaction ( Property size: 3 iter: 5) 
// Class name index: 8638 
// 0x0018 (0x018C - 0x0174)
class UH7SeqCon_BuildingIsFromFaction : public UH7SeqCon_TimePassed
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0174 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AreaOfControlSite*                        mBuilding;                                        		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Faction*                                  mFaction;                                         		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3852 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilled ( );
};



// Class MMH7Game.H7SeqCon_DestructibleObjectIs ( Property size: 3 iter: 6) 
// Class name index: 8640 
// 0x0011 (0x0185 - 0x0174)
class UH7SeqCon_DestructibleObjectIs : public UH7SeqCon_TimePassed
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0174 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7GameplayFracturedMeshActor*               mDestructibleObject;                              		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mState;                                           		// 0x0184 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3854 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilled ( );
};



// Class MMH7Game.H7SeqCon_EventIs ( Property size: 3 iter: 5) 
// Class name index: 8642 
// 0x0011 (0x0185 - 0x0174)
class UH7SeqCon_EventIs : public UH7SeqCon_TimePassed
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0174 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqCon_Event*                             mEvent;                                           		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mStatus;                                          		// 0x0184 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3856 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilled ( );
};



// Class MMH7Game.H7SeqCon_Player ( Property size: 3 iter: 8) 
// Class name index: 8644 
// 0x0018 (0x018C - 0x0174)
class UH7SeqCon_Player : public UH7SeqCon_TimePassed
{
public:
	unsigned char                                      mConditionPlayer;                                 		// 0x0174 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mAnyPlayer : 1;                                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class AH7Player* >                         mPlayers;                                         		// 0x017C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3858 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
	bool IsConditionFulfilled ( );
	TArray< class AH7Player* > GetPlayers ( );
	bool HasProgress ( );
};



// Class MMH7Game.H7SeqCon_CanReachHero ( Property size: 11 iter: 14) 
// Class name index: 8646 
// 0x004C (0x01D8 - 0x018C)
class UH7SeqCon_CanReachHero : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7EditorHero*                               mCheckHero;                                       		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mCheckArmy;                                       		// 0x01A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorHero*                               mReachHero;                                       		// 0x01AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mReachArmy;                                       		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mReachPlayer;                                     		// 0x01BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mWithinMovementRange : 1;                         		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                mWithinTiles;                                     		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mInstigatingArmy;                                 		// 0x01C8 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mReachedArmy;                                     		// 0x01D0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3860 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	TArray< class AH7AdventureArmy* > GetArmies ( class AH7Player* thePlayer, class AH7EditorHero* theHero );
	bool IsConditionFulfilledForPlayer ( class AH7Player* thePlayer );
};



// Class MMH7Game.H7SeqCon_CheckArmyStrength ( Property size: 8 iter: 15) 
// Class name index: 8648 
// 0x00A4 (0x0230 - 0x018C)
class UH7SeqCon_CheckArmyStrength : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7EditorHero*                               mHero;                                            		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FH7CreatureCounter                          mCreatureStacks[ 0x7 ];                           		// 0x01A4 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	float                                              mArmyStrength;                                    		// 0x0214 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      mCompareOper;                                     		// 0x0218 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7Faction* >                        mConsideredFactions;                              		// 0x021C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mPreviousStrengthLoss;                            		// 0x022C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3862 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	TArray< struct FH7StackStrengthParams > GetFilteredStackStrengths ( TArray< struct FH7StackStrengthParams > unfilteredStackStrengths );
	float GetTotalStrengthLoss ( class AH7Player* derPlayer );
	bool IsConditionFulfilledForPlayer ( class AH7Player* derPlayer );
};



// Class MMH7Game.H7SeqCon_CollectedSouls ( Property size: 4 iter: 10) 
// Class name index: 8650 
// 0x0014 (0x01A0 - 0x018C)
class UH7SeqCon_CollectedSouls : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mSoulCounter;                                     		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mOper;                                            		// 0x0198 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPreviousBodyCount;                               		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3864 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	int GetBodyCount ( class AH7Player* thePlayer );
	bool IsConditionFulfilledForPlayer ( class AH7Player* thePlayer );
};



// Class MMH7Game.H7SeqCon_DaysPassedWithNoTown ( Property size: 1 iter: 4) 
// Class name index: 8652 
// 0x0008 (0x0194 - 0x018C)
class UH7SeqCon_DaysPassedWithNoTown : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3866 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_DefeatAmountOfArmies ( Property size: 3 iter: 8) 
// Class name index: 8654 
// 0x0010 (0x019C - 0x018C)
class UH7SeqCon_DefeatAmountOfArmies : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mArmyAmount;                                      		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPreviousAmount;                                  		// 0x0198 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3868 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_GatherResources ( Property size: 6 iter: 14) 
// Class name index: 8656 
// 0x0030 (0x01BC - 0x018C)
class UH7SeqCon_GatherResources : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mCompairOp;                                       		// 0x0194 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ResourceQuantity >               mResources;                                       		// 0x0198 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      mPreviousResourceAmounts;                         		// 0x01A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsCompleted : 1;                                 		// 0x01B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsFailed : 1;                                    		// 0x01B8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3870 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	bool HasRequiredResourceAmount ( int Current, int required );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
	void SetFailed ( unsigned long val );
	void SetCompleted ( unsigned long val );
};



// Class MMH7Game.H7SeqCon_GovernorOfTown ( Property size: 4 iter: 7) 
// Class name index: 8658 
// 0x0020 (0x01AC - 0x018C)
class UH7SeqCon_GovernorOfTown : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Town*                                     mSite;                                            		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mGovernor;                                        		// 0x01A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3872 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasBuilding ( Property size: 4 iter: 7) 
// Class name index: 8660 
// 0x0020 (0x01AC - 0x018C)
class UH7SeqCon_HasBuilding : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Town*                                     mSite;                                            		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7TownBuilding*                             mBuilding;                                        		// 0x01A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3874 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasBuiltTearOfAsha ( Property size: 1 iter: 3) 
// Class name index: 8662 
// 0x0008 (0x0194 - 0x018C)
class UH7SeqCon_HasBuiltTearOfAsha : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3876 ];

		return pClassPointer;
	};

	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqCon_HasCollectedArmies ( Property size: 4 iter: 11) 
// Class name index: 8664 
// 0x002C (0x01B8 - 0x018C)
class UH7SeqCon_HasCollectedArmies : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class AH7AdventureArmy* >                  mArmiesToCollect;                                 		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            mCollectors;                                      		// 0x01A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mPreviousMatches;                                 		// 0x01B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3878 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	void UpdateCollectedArmies ( unsigned char PlayerID, class AH7AdventureArmy* Army );
	int GetMatches ( class AH7Player* thePlayer );
	bool IsConditionFulfilledForPlayer ( class AH7Player* thePlayer );
};



// Class MMH7Game.H7SeqCon_HasHeroWith ( Property size: 5 iter: 8) 
// Class name index: 8666 
// 0x0024 (0x01B0 - 0x018C)
class UH7SeqCon_HasHeroWith : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7EditorHero*                               mHero;                                            		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseInteractingHero : 1;                          		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AdventureArmy*                            mHeroArmy;                                        		// 0x01A8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3880 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
	bool IsConditionFulfilledForPlayer ( class AH7Player* thePlayer );
};



// Class MMH7Game.H7SeqCon_HasHeroFromFaction ( Property size: 1 iter: 3) 
// Class name index: 8668 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqCon_HasHeroFromFaction : public UH7SeqCon_HasHeroWith
{
public:
	class UH7Faction*                                  mFaction;                                         		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3882 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroOfClass ( Property size: 1 iter: 3) 
// Class name index: 8670 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqCon_HasHeroOfClass : public UH7SeqCon_HasHeroWith
{
public:
	class UH7HeroClass*                                mClass;                                           		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3884 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroWithAbility ( Property size: 1 iter: 3) 
// Class name index: 8672 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqCon_HasHeroWithAbility : public UH7SeqCon_HasHeroWith
{
public:
	class UH7HeroAbility*                              mAbility;                                         		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3886 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroWithAffinity ( Property size: 1 iter: 3) 
// Class name index: 8674 
// 0x0001 (0x01B1 - 0x01B0)
class UH7SeqCon_HasHeroWithAffinity : public UH7SeqCon_HasHeroWith
{
public:
	unsigned char                                      mAffinity;                                        		// 0x01B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3888 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroWithSkill ( Property size: 2 iter: 4) 
// Class name index: 8676 
// 0x0009 (0x01B9 - 0x01B0)
class UH7SeqCon_HasHeroWithSkill : public UH7SeqCon_HasHeroWith
{
public:
	class UH7Skill*                                    mSkill;                                           		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRank;                                            		// 0x01B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3890 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroWithSpecialization ( Property size: 1 iter: 3) 
// Class name index: 8678 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqCon_HasHeroWithSpecialization : public UH7SeqCon_HasHeroWith
{
public:
	class UH7HeroAbility*                              mSpecialization;                                  		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3892 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroWithSpell ( Property size: 1 iter: 3) 
// Class name index: 8680 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqCon_HasHeroWithSpell : public UH7SeqCon_HasHeroWith
{
public:
	class UH7HeroAbility*                              mSpell;                                           		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3894 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroWithStat ( Property size: 4 iter: 7) 
// Class name index: 8682 
// 0x000C (0x01BC - 0x01B0)
class UH7SeqCon_HasHeroWithStat : public UH7SeqCon_HasHeroWith
{
public:
	unsigned char                                      mStat;                                            		// 0x01B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mCompareOper;                                     		// 0x01B1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mTargetValue;                                     		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mBaseOnly : 1;                                    		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3896 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	int GetCurrentStatValue ( class AH7AdventureHero* Hero );
	bool IsConditionFulfilledForHero ( class AH7AdventureHero* currentHero );
};



// Class MMH7Game.H7SeqCon_HasHeroWithItem ( Property size: 12 iter: 20) 
// Class name index: 8684 
// 0x0044 (0x01D0 - 0x018C)
class UH7SeqCon_HasHeroWithItem : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x019C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mCheckCount : 1;                                  		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mAnyItem : 1;                                     		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mMustInTown : 1;                                  		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                mItemTotalCountAtLeast;                           		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorHero*                               mHero;                                            		// 0x01AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroItem*                                 mItemToHave;                                      		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Town*                                     mTown;                                            		// 0x01BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mHeroArmy;                                        		// 0x01C4 (0x0008) [0x0000000000000000]              
	int                                                mPreviousHighestProgress;                         		// 0x01CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3898 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	int GetCurrentItemCount ( class AH7AdventureHero* Hero );
	int GetHighestItemCount ( class AH7Player* thePlayer );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasNoEnemyPlayer ( Property size: 1 iter: 3) 
// Class name index: 8686 
// 0x0008 (0x0194 - 0x018C)
class UH7SeqCon_HasNoEnemyPlayer : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3900 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasNoHero ( Property size: 3 iter: 7) 
// Class name index: 8688 
// 0x001C (0x01A8 - 0x018C)
class UH7SeqCon_HasNoHero : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< unsigned char >                            mTargetPlayers;                                   		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mTrackHeroes : 1;                                 		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3902 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	TArray< class AH7Player* > GetPlayersToTrack ( );
	TArray< class UH7IQuestTarget* > GetQuestTargets ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasNoTown ( Property size: 3 iter: 7) 
// Class name index: 8690 
// 0x001C (0x01A8 - 0x018C)
class UH7SeqCon_HasNoTown : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< unsigned char >                            mTargetPlayers;                                   		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mTrackTowns : 1;                                  		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3904 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	TArray< class AH7Player* > GetPlayersToTrack ( );
	TArray< class UH7IQuestTarget* > GetQuestTargets ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasPlunderedMines ( Property size: 3 iter: 8) 
// Class name index: 8692 
// 0x001C (0x01A8 - 0x018C)
class UH7SeqCon_HasPlunderedMines : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7MinePlunderCounter >             mMines;                                           		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mPreviousPlunderedMineCount;                      		// 0x01A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3906 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	bool HasProgress ( );
	void InitProgress ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasResourcePercentage ( Property size: 6 iter: 14) 
// Class name index: 8694 
// 0x0028 (0x01B4 - 0x018C)
class UH7SeqCon_HasResourcePercentage : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7ResourceAmount >                 mResources;                                       		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mOperation;                                       		// 0x01A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPercent;                                         		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPreviousTotalResourceAmount;                     		// 0x01AC (0x0004) [0x0000000000000000]              
	int                                                mRequiredTotalResourceAmount;                     		// 0x01B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3908 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	void InitRequiredResourceAmount ( );
	int GetRequiredResourceAmount ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* thePlayer );
};



// Class MMH7Game.H7SeqCon_HasVisitedSite ( Property size: 2 iter: 7) 
// Class name index: 8696 
// 0x0018 (0x01A4 - 0x018C)
class UH7SeqCon_HasVisitedSite : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class AH7VisitableSite* >                  mTargetSites;                                     		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3910 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	bool HasProgress ( );
	void InitProgress ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HasVisitedTownBuilding ( Property size: 3 iter: 5) 
// Class name index: 8698 
// 0x0018 (0x01A4 - 0x018C)
class UH7SeqCon_HasVisitedTownBuilding : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7TownBuilding*                             mTargetBuilding;                                  		// 0x0194 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Town*                                     mTargetTown;                                      		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3912 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HeroDefeated ( Property size: 5 iter: 7) 
// Class name index: 8700 
// 0x0028 (0x01B4 - 0x018C)
class UH7SeqCon_HeroDefeated : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7EditorHero*                               mHero;                                            		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mHeroArmy;                                        		// 0x01A4 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmyToCheck;                                     		// 0x01AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3914 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_HoldCreatures ( Property size: 5 iter: 16) 
// Class name index: 8702 
// 0x0040 (0x01CC - 0x018C)
class UH7SeqCon_HoldCreatures : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7CreatureDat >                    mCreatures;                                       		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7IStackContainer*                          mCreatureContainer;                               		// 0x01A4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x01AC (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FString                                     mProgressPercent;                                 		// 0x01B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     mArmy;                                            		// 0x01C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3916 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	struct FString GetProgress_Percent ( );
	void InitProgress_Percent ( );
	void InitProgress ( );
	TArray< class UH7IStackContainer* > GetPlayerStackContainers ( class AH7Player* fromPlayer );
	TArray< class UH7IStackContainer* > GetStackContainers ( class AH7Player* thePlayer );
	int GetCurrentAmount ( int CreatureIndex, TArray< class UH7IStackContainer* > containers );
	bool IsConditionFulfilledForPlayer ( class AH7Player* thePlayer );
};



// Class MMH7Game.H7SeqCon_HoldCreaturesByTier ( Property size: 5 iter: 11) 
// Class name index: 8704 
// 0x0014 (0x01A0 - 0x018C)
class UH7SeqCon_HoldCreaturesByTier : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mCreatureTier;                                    		// 0x0194 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mOper;                                            		// 0x0195 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCreatureAmount;                                  		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPreviousCount;                                   		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3918 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	int GetCount ( class AH7Player* Player );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_LostCreatures ( Property size: 4 iter: 11) 
// Class name index: 8706 
// 0x0020 (0x01AC - 0x018C)
class UH7SeqCon_LostCreatures : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FH7CreatureCounter                          mCreatureCounter;                                 		// 0x0194 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mOper;                                            		// 0x01A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPreviousBodyCount;                               		// 0x01A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3920 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	int GetAnyCreatureLostAmount ( class AH7Player* Player );
	int GetBodyCount ( class AH7Player* Player );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_OwnSite ( Property size: 4 iter: 12) 
// Class name index: 8708 
// 0x0024 (0x01B0 - 0x018C)
class UH7SeqCon_OwnSite : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0194 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class AH7AreaOfControlSite* >              mSites;                                           		// 0x019C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mPreviousOwnedSiteCount;                          		// 0x01AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3922 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	TArray< class UH7IQuestTarget* > GetQuestTargets ( );
	int GetTeamOwnedSiteCount ( class AH7Player* Player );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_PlayerIsFromFaction ( Property size: 2 iter: 4) 
// Class name index: 8710 
// 0x0010 (0x019C - 0x018C)
class UH7SeqCon_PlayerIsFromFaction : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7Faction*                                  mFaction;                                         		// 0x0194 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3924 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* thePlayer );
};



// Class MMH7Game.H7SeqCon_ReachLvl ( Property size: 2 iter: 4) 
// Class name index: 8712 
// 0x000C (0x0198 - 0x018C)
class UH7SeqCon_ReachLvl : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mLvl;                                             		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3926 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_SitesVisited ( Property size: 3 iter: 11) 
// Class name index: 8714 
// 0x001C (0x01A8 - 0x018C)
class UH7SeqCon_SitesVisited : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class AH7VisitableSite* >                  mSites;                                           		// 0x0194 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mPreviousVisitedSites;                            		// 0x01A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3928 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	void InitProgress ( );
	struct FString GetProgress ( );
	TArray< class UH7IQuestTarget* > GetQuestTargets ( );
	int GetVisitedSitesCount ( class AH7Player* Player );
	bool IsConditionFulfilledForPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7SeqCon_TimeUp ( Property size: 1 iter: 3) 
// Class name index: 8716 
// 0x0008 (0x0194 - 0x018C)
class UH7SeqCon_TimeUp : public UH7SeqCon_Player
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x018C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3930 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool HasProgress ( );
};



// Class MMH7Game.H7SeqCon_QuestIs ( Property size: 3 iter: 5) 
// Class name index: 8718 
// 0x0011 (0x0185 - 0x0174)
class UH7SeqCon_QuestIs : public UH7SeqCon_TimePassed
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0174 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_Quest_NewNode*                     mQuest;                                           		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mStatus;                                          		// 0x0184 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3932 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilled ( );
};



// Class MMH7Game.H7SeqCon_TimerReachedCount ( Property size: 5 iter: 13) 
// Class name index: 8720 
// 0x0028 (0x017C - 0x0154)
class UH7SeqCon_TimerReachedCount : public UH7SeqCon_Condition
{
public:
	struct FPointer                                    VfTable_IH7IConditionable;                        		// 0x0154 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_StartTimer*                        mTimer;                                           		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCount;                                           		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mProgress;                                        		// 0x0168 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mPreviousTimerCount;                              		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3934 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilled ( );
	bool HasOutputImpulse ( );
	bool HasProgress ( );
	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	int GetTimerCount ( );
	void InitProgress ( );
	struct FString GetProgress ( );
};



// Class MMH7Game.H7SeqCon_Event ( Property size: 8 iter: 22) 
// Class name index: 8722 
// 0x0038 (0x0170 - 0x0138)
class UH7SeqCon_Event : public USequenceCondition
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0138 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mName;                                            		// 0x0140 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mStatus;                                          		// 0x0150 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mExecute;                                         		// 0x0151 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxCount;                                        		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseCount : 1;                                    		// 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                mCounter;                                         		// 0x015C (0x0004) [0x0000000000000000]              
	TArray< class UH7SeqCon_Condition* >               mConditions;                                      		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3936 ];

		return pClassPointer;
	};

	TArray< class UH7SeqCon_Condition* > GetConditions ( );
	int eventGetObjClassVersion ( );
	void UpdateStatus ( );
	void UpdateCounter ( );
	bool AreConditionsFulFilled ( );
	void ActivateEvent ( );
	bool IsCounterReduced ( );
	bool IsTriggered ( );
	bool IsDeactivated ( );
	bool IsActivated ( );
	void eventActivated ( );
	void SetStatus ( unsigned char NewStatus );
	unsigned char GetStatus ( );
};



// Class MMH7Game.H7SeqCon_HasPrivileg ( Property size: 1 iter: 3) 
// Class name index: 8724 
// 0x0004 (0x013C - 0x0138)
class UH7SeqCon_HasPrivileg : public USequenceCondition
{
public:
	unsigned long                                      mPreorderArtifacts : 1;                           		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3938 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqCon_VictoryConditionGate ( Property size: 1 iter: 4) 
// Class name index: 8726 
// 0x0004 (0x013C - 0x0138)
class UH7SeqCon_VictoryConditionGate : public USequenceCondition
{
public:
	int                                                mOutputIndex;                                     		// 0x0138 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3940 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void InitOutputIndex ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqEvent ( Property size: 2 iter: 4) 
// Class name index: 8728 
// 0x0010 (0x0188 - 0x0178)
class UH7SeqEvent : public USequenceEvent
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0178 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7EventParam*                               mEventParam;                                      		// 0x0180 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3942 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_DestructibleObjectUsed ( Property size: 5 iter: 8) 
// Class name index: 8730 
// 0x0028 (0x01B0 - 0x0188)
class UH7SeqEvent_DestructibleObjectUsed : public UH7SeqEvent
{
public:
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0188 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x0190 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7DestructibleObjectManipulator*            mDestructibleObjectManipulator;                   		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Fort*                                     mFort;                                            		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      mRequiredInstigator;                              		// 0x01A8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3944 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	void eventRegisterEvent ( );
};



// Class MMH7Game.H7SeqEvent_CompletesDestruction ( Property size: 0 iter: 1) 
// Class name index: 8732 
// 0x0000 (0x01B0 - 0x01B0)
class UH7SeqEvent_CompletesDestruction : public UH7SeqEvent_DestructibleObjectUsed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3946 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_CompletesReparation ( Property size: 0 iter: 1) 
// Class name index: 8734 
// 0x0000 (0x01B0 - 0x01B0)
class UH7SeqEvent_CompletesReparation : public UH7SeqEvent_DestructibleObjectUsed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3948 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_StartsDestruction ( Property size: 0 iter: 1) 
// Class name index: 8736 
// 0x0000 (0x01B0 - 0x01B0)
class UH7SeqEvent_StartsDestruction : public UH7SeqEvent_DestructibleObjectUsed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3950 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_StartsReparation ( Property size: 0 iter: 1) 
// Class name index: 8738 
// 0x0000 (0x01B0 - 0x01B0)
class UH7SeqEvent_StartsReparation : public UH7SeqEvent_DestructibleObjectUsed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3952 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_HeroEvent ( Property size: 7 iter: 9) 
// Class name index: 8740 
// 0x0028 (0x01B0 - 0x0188)
class UH7SeqEvent_HeroEvent : public UH7SeqEvent
{
public:
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0188 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x0190 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOneHero : 1;                                     		// 0x0198 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mOnePlayer : 1;                                   		// 0x0198 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AH7EditorHero*                               mHero;                                            		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerNumber;                                    		// 0x01A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mHeroArmy;                                        		// 0x01A8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3954 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_Battlesite ( Property size: 1 iter: 3) 
// Class name index: 8742 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqEvent_Battlesite : public UH7SeqEvent_HeroEvent
{
public:
	class AH7BattleSite*                               mBattleSite;                                      		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3956 ];

		return pClassPointer;
	};

	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_BattlesiteLost ( Property size: 0 iter: 1) 
// Class name index: 8744 
// 0x0000 (0x01B8 - 0x01B8)
class UH7SeqEvent_BattlesiteLost : public UH7SeqEvent_Battlesite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3958 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_BattlesiteWon ( Property size: 0 iter: 1) 
// Class name index: 8746 
// 0x0000 (0x01B8 - 0x01B8)
class UH7SeqEvent_BattlesiteWon : public UH7SeqEvent_Battlesite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3960 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_CollectArmy ( Property size: 5 iter: 7) 
// Class name index: 8748 
// 0x0014 (0x01C4 - 0x01B0)
class UH7SeqEvent_CollectArmy : public UH7SeqEvent_HeroEvent
{
public:
	int                                                mArmyCount;                                       		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCounter;                                         		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              mActivationTime;                                  		// 0x01B8 (0x0004) [0x0000000000000000]              
	int                                                mTriggerCount;                                    		// 0x01BC (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsEnabled : 1;                                   		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3962 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_CollectSpecificArmy ( Property size: 1 iter: 3) 
// Class name index: 8750 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqEvent_CollectSpecificArmy : public UH7SeqEvent_HeroEvent
{
public:
	class AH7AdventureArmy*                            mArmyToCollect;                                   		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3964 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_CombatTrigger ( Property size: 6 iter: 9) 
// Class name index: 8752 
// 0x0020 (0x01D0 - 0x01B0)
class UH7SeqEvent_CombatTrigger : public UH7SeqEvent_HeroEvent
{
public:
	class AH7AdventureArmy*                            mDefendingArmy;                                   		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mWhichCombatMap;                                  		// 0x01B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mEnemyPlayerNumber;                               		// 0x01B9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mCombatMapName;                                   		// 0x01BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mOneEnemyPlayer : 1;                              		// 0x01CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsCombatMapUsed : 1;                             		// 0x01CC (0x0004) [0x0000000000022000] [0x00000002] ( CPF_Transient | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3966 ];

		return pClassPointer;
	};

	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_Combat ( Property size: 2 iter: 4) 
// Class name index: 8754 
// 0x0010 (0x01E0 - 0x01D0)
class UH7SeqEvent_Combat : public UH7SeqEvent_CombatTrigger
{
public:
	struct FVector                                     mCombatPosition;                                  		// 0x01D0 (0x000C) [0x0000000000000000]              
	int                                                mTotalLosses;                                     		// 0x01DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3968 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_CombatMapEnd ( Property size: 2 iter: 4) 
// Class name index: 8756 
// 0x0010 (0x01E0 - 0x01D0)
class UH7SeqEvent_CombatMapEnd : public UH7SeqEvent_CombatTrigger
{
public:
	class AH7EditorHero*                               mVictoriousHero;                                  		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mVictoriousHeroArmy;                              		// 0x01D8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3970 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_CombatMapStarted ( Property size: 0 iter: 1) 
// Class name index: 8758 
// 0x0000 (0x01D0 - 0x01D0)
class UH7SeqEvent_CombatMapStarted : public UH7SeqEvent_CombatTrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3972 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_EnterLeaveShip ( Property size: 3 iter: 5) 
// Class name index: 8760 
// 0x000D (0x01BD - 0x01B0)
class UH7SeqEvent_EnterLeaveShip : public UH7SeqEvent_HeroEvent
{
public:
	unsigned long                                      mOneShip : 1;                                     		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7Ship*                                     mShip;                                            		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mInteraction;                                     		// 0x01BC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3974 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_HasMoved ( Property size: 3 iter: 5) 
// Class name index: 8762 
// 0x000C (0x01BC - 0x01B0)
class UH7SeqEvent_HasMoved : public UH7SeqEvent_HeroEvent
{
public:
	unsigned long                                      mEventMovementCheck : 1;                          		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      mEventMovementOperation;                          		// 0x01B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mEventMovementPoints;                             		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3976 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_LearnAbility ( Property size: 1 iter: 3) 
// Class name index: 8764 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqEvent_LearnAbility : public UH7SeqEvent_HeroEvent
{
public:
	class UH7HeroAbility*                              mAbility;                                         		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3978 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_LearnSkill ( Property size: 2 iter: 4) 
// Class name index: 8766 
// 0x0009 (0x01B9 - 0x01B0)
class UH7SeqEvent_LearnSkill : public UH7SeqEvent_HeroEvent
{
public:
	class UH7Skill*                                    mSkill;                                           		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRank;                                            		// 0x01B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3980 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_LearnSpell ( Property size: 1 iter: 3) 
// Class name index: 8768 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqEvent_LearnSpell : public UH7SeqEvent_HeroEvent
{
public:
	class UH7HeroAbility*                              mAbility;                                         		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3982 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_Loot ( Property size: 2 iter: 4) 
// Class name index: 8770 
// 0x000C (0x01BC - 0x01B0)
class UH7SeqEvent_Loot : public UH7SeqEvent_HeroEvent
{
public:
	unsigned long                                      mOneItem : 1;                                     		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7ItemPile*                                 mItem;                                            		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3984 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_PlunderedMine ( Property size: 2 iter: 4) 
// Class name index: 8772 
// 0x0009 (0x01B9 - 0x01B0)
class UH7SeqEvent_PlunderedMine : public UH7SeqEvent_HeroEvent
{
public:
	class AH7Mine*                                     mMine;                                            		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mMineOwner;                                       		// 0x01B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3986 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_ReachLevel ( Property size: 1 iter: 3) 
// Class name index: 8774 
// 0x0004 (0x01B4 - 0x01B0)
class UH7SeqEvent_ReachLevel : public UH7SeqEvent_HeroEvent
{
public:
	int                                                mHeroLevel;                                       		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3988 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_SiteCaptured ( Property size: 3 iter: 6) 
// Class name index: 8776 
// 0x0014 (0x01C4 - 0x01B0)
class UH7SeqEvent_SiteCaptured : public UH7SeqEvent_HeroEvent
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x01B0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOneSite : 1;                                     		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AreaOfControlSite*                        mSite;                                            		// 0x01BC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3990 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_TalkedToNPC ( Property size: 1 iter: 3) 
// Class name index: 8778 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqEvent_TalkedToNPC : public UH7SeqEvent_HeroEvent
{
public:
	class AH7AdventureArmy*                            mNPCArmy;                                         		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3992 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_VisitDwellingMine ( Property size: 3 iter: 6) 
// Class name index: 8780 
// 0x0014 (0x01C4 - 0x01B0)
class UH7SeqEvent_VisitDwellingMine : public UH7SeqEvent_HeroEvent
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x01B0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOneMine : 1;                                     		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AreaOfControlSiteVassal*                  mMine;                                            		// 0x01BC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3994 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_VisitNeutralBuilding ( Property size: 3 iter: 6) 
// Class name index: 8782 
// 0x001C (0x01CC - 0x01B0)
class UH7SeqEvent_VisitNeutralBuilding : public UH7SeqEvent_HeroEvent
{
public:
	unsigned long                                      mOneBuilding : 1;                                 		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7NeutralSite*                              mSite;                                            		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7INeutralable*                             mTargetSite;                                      		// 0x01BC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x01C4 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3996 ];

		return pClassPointer;
	};

	void eventVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_VisitShell ( Property size: 2 iter: 4) 
// Class name index: 8784 
// 0x000C (0x01BC - 0x01B0)
class UH7SeqEvent_VisitShell : public UH7SeqEvent_HeroEvent
{
public:
	unsigned long                                      mOneShell : 1;                                    		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7VisitingShell*                            mShell;                                           		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3998 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_VisitTown ( Property size: 3 iter: 6) 
// Class name index: 8786 
// 0x0014 (0x01C4 - 0x01B0)
class UH7SeqEvent_VisitTown : public UH7SeqEvent_HeroEvent
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x01B0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOneTown : 1;                                     		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AreaOfControlSiteLord*                    mTown;                                            		// 0x01BC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4000 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_MapFinished ( Property size: 2 iter: 4) 
// Class name index: 8788 
// 0x0009 (0x0191 - 0x0188)
class UH7SeqEvent_MapFinished : public UH7SeqEvent
{
public:
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0188 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mFinishCondition;                                 		// 0x0190 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4002 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_PlayerEvent ( Property size: 5 iter: 8) 
// Class name index: 8790 
// 0x0014 (0x019C - 0x0188)
class UH7SeqEvent_PlayerEvent : public UH7SeqEvent
{
public:
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0188 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOnePlayer : 1;                                   		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mOnePlayers : 1;                                  		// 0x0190 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      mPlayerNumber;                                    		// 0x0194 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FH7AffectedPlayers                          mAffectedPlayers;                                 		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4004 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsChecked ( struct FH7AffectedPlayers Players, unsigned char PlayerID );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_PlayerGetsVisibilityOf ( Property size: 0 iter: 3) 
// Class name index: 8792 
// 0x0000 (0x019C - 0x019C)
class UH7SeqEvent_PlayerGetsVisibilityOf : public UH7SeqEvent_PlayerEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4006 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool DiscoveredSomethingOfInterest ( TArray< class UH7AdventureMapCell* > Cells );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_PlayerGetsVisibilityOfArmy ( Property size: 14 iter: 17) 
// Class name index: 8794 
// 0x0044 (0x01E0 - 0x019C)
class UH7SeqEvent_PlayerGetsVisibilityOfArmy : public UH7SeqEvent_PlayerGetsVisibilityOf
{
public:
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x019C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x01A4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOneArmy : 1;                                     		// 0x01AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mArmyOnePlayer : 1;                               		// 0x01AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mArmyOnePlayers : 1;                              		// 0x01AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mOneHero : 1;                                     		// 0x01AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mCaravansOnly : 1;                                		// 0x01AC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class AH7AdventureArmy*                            mArmy;                                            		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mArmyPlayerNumber;                                		// 0x01B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FH7AffectedPlayers                          mArmyAffectedPlayers;                             		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorHero*                               mHero;                                            		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AreaOfControlSiteLord*                    mCaravanSource;                                   		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AreaOfControlSiteLord*                    mCaravanTarget;                                   		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mHeroArmy;                                        		// 0x01D8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4008 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool DiscoveredSomethingOfInterest ( TArray< class UH7AdventureMapCell* > Cells );
};



// Class MMH7Game.H7SeqEvent_PlayerGetsVisibilityOfBuilding ( Property size: 7 iter: 10) 
// Class name index: 8796 
// 0x001C (0x01B8 - 0x019C)
class UH7SeqEvent_PlayerGetsVisibilityOfBuilding : public UH7SeqEvent_PlayerGetsVisibilityOf
{
public:
	struct FPointer                                    VfTable_IH7IRandomPropertyOwner;                  		// 0x019C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOneBuilding : 1;                                 		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mBuildingOnePlayer : 1;                           		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mBuildingOnePlayers : 1;                          		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AH7VisitableSite*                            mTargetBuilding;                                  		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mBuildingPlayerNumber;                            		// 0x01B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FH7AffectedPlayers                          mBuildingAffectedPlayers;                         		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4010 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void UpdateRandomProperties ( class UObject* randomObject, class UObject* hatchedObject );
	bool DiscoveredSomethingOfInterest ( TArray< class UH7AdventureMapCell* > Cells );
};



// Class MMH7Game.H7SeqEvent_PlayerGetsVisibilityOfTile ( Property size: 1 iter: 3) 
// Class name index: 8798 
// 0x0008 (0x01A4 - 0x019C)
class UH7SeqEvent_PlayerGetsVisibilityOfTile : public UH7SeqEvent_PlayerGetsVisibilityOf
{
public:
	class AH7TileMarker*                               mTargetTile;                                      		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4012 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool DiscoveredSomethingOfInterest ( TArray< class UH7AdventureMapCell* > Cells );
};



// Class MMH7Game.H7SeqEvent_PlayerTurn ( Property size: 0 iter: 1) 
// Class name index: 8800 
// 0x0000 (0x019C - 0x019C)
class UH7SeqEvent_PlayerTurn : public UH7SeqEvent_PlayerEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4014 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_PlayerVisitsTownBuilding ( Property size: 2 iter: 4) 
// Class name index: 8802 
// 0x000C (0x01A8 - 0x019C)
class UH7SeqEvent_PlayerVisitsTownBuilding : public UH7SeqEvent_PlayerEvent
{
public:
	unsigned long                                      mOneBuilding : 1;                                 		// 0x019C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UH7TownBuilding*                             mTargetBuilding;                                  		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4016 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_PlayerWinLoseGame ( Property size: 0 iter: 2) 
// Class name index: 8804 
// 0x0000 (0x019C - 0x019C)
class UH7SeqEvent_PlayerWinLoseGame : public UH7SeqEvent_PlayerEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4018 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_TimerExpired ( Property size: 2 iter: 4) 
// Class name index: 8806 
// 0x0010 (0x0198 - 0x0188)
class UH7SeqEvent_TimerExpired : public UH7SeqEvent
{
public:
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0188 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7SeqAct_StartTimer*                        mTimer;                                           		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4020 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_AdvCombatTransition ( Property size: 2 iter: 3) 
// Class name index: 8808 
// 0x0010 (0x0188 - 0x0178)
class UH7SeqEvent_AdvCombatTransition : public USequenceEvent
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0178 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0180 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4022 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_CellEventArmy ( Property size: 8 iter: 9) 
// Class name index: 8810 
// 0x0030 (0x01A8 - 0x0178)
class UH7SeqEvent_CellEventArmy : public USequenceEvent
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0178 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0180 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHeroReplaceable;                      		// 0x0188 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mFilterOneHero : 1;                               		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mFilterOnePlayer : 1;                             		// 0x0190 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AH7EditorHero*                               mFilterHero;                                      		// 0x0194 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mFilterPlayerID;                                  		// 0x019C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mHeroArmy;                                        		// 0x01A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4024 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SeqEvent_MapLoaded ( Property size: 2 iter: 3) 
// Class name index: 8812 
// 0x0010 (0x0188 - 0x0178)
class UH7SeqEvent_MapLoaded : public USequenceEvent
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0178 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ITriggerable;                          		// 0x0180 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4026 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7SiegeMapDecoration ( Property size: 5 iter: 6) 
// Class name index: 8814 
// 0x0028 (0x02D8 - 0x02B0)
class AH7SiegeMapDecoration : public ASkeletalMeshActorMAT
{
public:
	class UAnimNode*                                   AnimNodeSeqComp;                                  		// 0x02B0 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMeshComponent*                        mMesh;                                            		// 0x02B8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    mFX;                                              		// 0x02C0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x02C8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UH7Faction*                                  mReferenceFaction;                                		// 0x02D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4028 ];

		return pClassPointer;
	};

	void Update ( struct FH7SiegeTownData siegeTownData );
};



// Class MMH7Game.H7SoundController ( Property size: 63 iter: 119) 
// Class name index: 8816 
// 0x0174 (0x01D4 - 0x0060)
class UH7SoundController : public UObject
{
public:
	struct FName                                       mCurrentTileName;                                 		// 0x0060 (0x0008) [0x0000000000000000]              
	float                                              mExecMusicTargetTime;                             		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FString                                     mCurrentMapType;                                  		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mCurrentTownScreenFaction;                        		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsMusicPlaying : 1;                              		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mNextTurn : 1;                                    		// 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mInCinematicMode : 1;                             		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mAcademyTownIsPlaying : 1;                        		// 0x008C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mStrongholdTownIsPlaying : 1;                     		// 0x008C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mHavenTownIsPlaying : 1;                          		// 0x008C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mDungeonTownIsPlaying : 1;                        		// 0x008C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mSylvanTownIsPlaying : 1;                         		// 0x008C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mNecropolisTownIsPlaying : 1;                     		// 0x008C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mMusicIsPlaying : 1;                              		// 0x008C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mCombatMusicIsPlaying : 1;                        		// 0x008C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      cMusicSetting : 1;                                		// 0x008C (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      cSoundSetting : 1;                                		// 0x008C (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      cVoiceOverSetting : 1;                            		// 0x008C (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      cMasterSetting : 1;                               		// 0x008C (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      cAmbientSoundSetting : 1;                         		// 0x008C (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	float                                              mCurrentAttenuationDistance;                      		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FName                                       mCurrentUnitUndergroundName;                      		// 0x0094 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mPlayAITurnMusic;                                 		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeAITurnMusic;                               		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayCreditsMusic;                                		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayAcademyTownMusic;                            		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayHavenTownMusic;                              		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayStrongholdTownMusic;                         		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayNecropolisTownMusic;                         		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlaySylvanTownMusic;                             		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPlayDungeonTownMusic;                            		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeAcademyTownMusic;                          		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeHavenTownMusic;                            		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeStrongholdTownMusic;                       		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeNecropolisTownMusic;                       		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeSylvanTownMusic;                           		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeDungeonTownMusic;                          		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mCombatMusic;                                     		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mVictoryMusic;                                    		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDefeatMusic;                                     		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMainMusic;                                       		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeMainMusic;                                 		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mResumeCombatMusic;                               		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPauseAllMusic;                                   		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopAllMusic;                                    		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopAllCombatMusic;                              		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopAllExceptMusic;                              		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mMusicDuckingValue;                               		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mBasicAmbientStop;                                		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mVoiceOverStop;                                   		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mCurrentMusicEvent;                               		// 0x0178 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mResumeMusicEvent;                                		// 0x0180 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mLastMusicEvent;                                  		// 0x0188 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mCurrentAmbientEvent;                             		// 0x0190 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mFoWAmbientEvent;                                 		// 0x0198 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mLastAmbientEvent;                                		// 0x01A0 (0x0008) [0x0000000000000000]              
	TArray< class UAkEvent* >                          mPlayedMusicEvents;                               		// 0x01A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7AdventureLayerCellProperty*               mLastVisitedCell;                                 		// 0x01B8 (0x0008) [0x0000000000000000]              
	float                                              cMusicVolume;                                     		// 0x01C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              cSoundVolume;                                     		// 0x01C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              cVoiceOverVolume;                                 		// 0x01C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              cMasterVolume;                                    		// 0x01CC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              cAmbientSoundVolume;                              		// 0x01D0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4030 ];

		return pClassPointer;
	};

	class UH7SoundController* GetInstance ( );
	void PlayGlobalAkEvent ( class UAkEvent* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	void ResetOptions ( );
	void SetDistanceAttenuationValue ( float Value );
	void UpdateCameraDistanceAttenuation ( float currentDistance, float cameraMin, float cameraMax );
	void LoadingScreenEnabled ( unsigned long val );
	void EnableSoundCutsceneChannel ( unsigned long Enable );
	void EnableSoundChannel ( unsigned long Enable );
	void SetSoundSetting ( unsigned long bVal );
	void SetSoundVolume ( float Value );
	void EnableVoiceChannel ( unsigned long Enable );
	void SetVoiceOverVolume ( float Value );
	void SetVoiceOverSetting ( unsigned long val );
	void StartMusicDucking ( );
	void ResetMusicVariables ( );
	void ResetLastAmbientEvent ( );
	void ResetLastMusicEvent ( );
	void PlayPauseMusic ( );
	void PostEvent ( class UAkEvent* NewEvent, unsigned long stopWhenOwnerDestroyed );
	void SwitchTownScreenMusic ( struct FString Faction );
	void UpdateMusicGameStateSwitch ( struct FString maptype, struct FString Faction );
	void PlayAdventureMapMusic ( );
	void AdventureMapCellInput ( );
	void InCinematicMode ( unsigned long val );
	void SetMusicVolume ( float Value );
	void SetMusicSetting ( unsigned long val );
	void UpdateMasterSetting ( );
	void SetMasterSettings ( unsigned long bVal );
	void SetMasterVolumeSettings ( float fVol );
	bool FogOfWarIsRevealedCheck ( struct FVector objectLocation );
	void eventUpdateHearableAmbientSoundNodes ( );
	void EnableAmbientChannel ( unsigned long Enable );
	void SetAmbientSoundSettings ( unsigned long bVal );
	void SetAmbientSoundSettingsBool ( unsigned long bVal );
	void SetAmbientSoundVolume ( float fVol );
	void SetLastAmbientEvent ( class UAkEvent* Event );
	class AH7SoundManager* GetSoundManager ( );
	void eventDestroyed ( );
	void Initialize ( unsigned long silentSFX );
	void SetNextTurn ( unsigned long val );
	class UAkEvent* GetCreditsMusicEvent ( );
	class UAkEvent* GetStopAllExceptMusicEvent ( );
	class UAkEvent* GetMainMusicResumeEvent ( );
	class UAkEvent* GetVoiceOverStopAllEvent ( );
	class UAkEvent* GetLastAmbientEvent ( );
	class UAkEvent* GetBasicAmbientStopEvent ( );
	float GetVoiceOverVolume ( );
	bool GetVoiceOverSetting ( );
	float GetAmbientSoundVolume ( );
	bool GetAmbientSoundSettings ( );
	bool GetMasterSettings ( );
	float GetMasterVolumeSettings ( );
	float GetSoundVolume ( );
	float GetMusicVolume ( );
	bool GetSoundSetting ( );
	bool GetMusicSetting ( );
};



// Class MMH7Game.H7SoundManager ( Property size: 4 iter: 17) 
// Class name index: 8818 
// 0x0024 (0x0264 - 0x0240)
class AH7SoundManager : public AActor
{
public:
	TArray< class AAkAmbientSound* >                   mAmbientSoundList;                                		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AAkAmbientSound* >                   mDisabledAmbientSoundList;                        		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mDynamicLoopStarted : 1;                          		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mLoadingScreenEnabled : 1;                        		// 0x0260 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4032 ];

		return pClassPointer;
	};

	void eventFocusMultiplierTick ( float focusVolumeMutliplier );
	void eventDestroyed ( );
	void CallLoadingScreenEnabled ( );
	void LoadingScreenEnabledDelayed ( unsigned long val );
	void TrailerIsPlayingCheck ( );
	void TrailerMode ( );
	void GetAmbientSoundNodeList ( );
	void StartAmbientLayers ( );
	void StopAmbientLayers ( );
	void UpdateHearableAmbientSoundNodes ( );
	void StartDynamicMusicTimerLoop ( );
	void PlayAkEventOnActor ( class AActor* creator, class UAkEvent* Sound, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation );
	void PostBeginPlay ( );
};



// Class MMH7Game.H7SynchRNG ( Property size: 3 iter: 15) 
// Class name index: 8820 
// 0x0018 (0x0258 - 0x0240)
class AH7SynchRNG : public AActor
{
public:
	TArray< float >                                    mRandomNumbersPool;                               		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mCounter;                                         		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                mMinPoolSize;                                     		// 0x0254 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4034 ];

		return pClassPointer;
	};

	void SendRefillPool ( );
	int GenerateSeed ( );
	void RefillPool ( int synchSeed );
	float GetRandomFloat ( );
	void SetCounter ( int newCounter );
	int GetCounter ( );
	int GetRandomIntRange ( int Min, int Max );
	int GetRandomInt ( int Max );
	int GetRandomIntNative ( int Max );
	void Init ( );
};



// Class MMH7Game.H7TeamManager ( Property size: 2 iter: 12) 
// Class name index: 8822 
// 0x0018 (0x0078 - 0x0060)
class UH7TeamManager : public UObject
{
public:
	TArray< class AH7Player* >                         mPlayers;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureController*                      mAdventureController;                             		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4036 ];

		return pClassPointer;
	};

	class UH7TeamManager* GetInstance ( );
	bool HasAllies ( class AH7Player* thaPlayah );
	bool IsHostile ( class AH7Player* playerA, class AH7Player* playerB );
	bool IsAllied ( class AH7Player* playerA, class AH7Player* playerB );
	TArray< class AH7Player* > GetPlayerOfTeam ( unsigned char teamNumber );
	void GetAllAlliesAndSpectatorNumbers ( unsigned char PlayerNumber, TArray< unsigned char >* numbers );
	TArray< class AH7Player* > GetAllAlliesIncludingSelf ( class AH7Player* thaPlayah );
	TArray< class AH7Player* > GetAllAlliesOf ( class AH7Player* thaPlayah );
	TArray< class AH7Player* > GetAllEnemiesOf ( class AH7Player* thaPlayah );
	void InitTeamManager ( );
};



// Class MMH7Game.H7TestCaseThreadTaskActor ( Property size: 8 iter: 12) 
// Class name index: 8824 
// 0x0043 (0x0290 - 0x024D)
class AH7TestCaseThreadTaskActor : public AStaticMeshActor
{
public:
	struct FPointer                                    VfTable_IH7ContentScannerListener;                		// 0x0250 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7ListingMap*                               mListingMap;                                      		// 0x0258 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UH7ListingCombatMap*                         mListingCombatMap;                                		// 0x0260 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UH7ListingCampaign*                          mListingCampaign;                                 		// 0x0268 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UH7ContentScanner*                           mContentScanner;                                  		// 0x0270 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UH7ListingSavegame*                          mListingSavegame;                                 		// 0x0278 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class AStaticMeshActor*                            ActorWithStreamLoadMat;                           		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Texture2DStreamLoad*                      StreamLoadTex;                                    		// 0x0288 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4038 ];

		return pClassPointer;
	};

	void eventOnScanned_Campaign ( struct FH7ContentScannerCampaignData* CampaignData );
	void eventOnScanned_CombatMap ( struct FH7ContentScannerCombatMapData* CombatData );
	void eventOnScanned_AdventureMap ( struct FH7ContentScannerAdventureMapData* AdvData );
	void eventKismetActivate ( );
};



// Class MMH7Game.H7TownAsset ( Property size: 21 iter: 47) 
// Class name index: 8826 
// 0x00A0 (0x0330 - 0x0290)
class AH7TownAsset : public ADynamicSMActor_Spawnable
{
public:
	struct FString                                     mType;                                            		// 0x0290 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7TownAssetMaterial >              mMaterials;                                       		// 0x02A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystemComponent*                    mFX;                                              		// 0x02B0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   MatHovered;                                       		// 0x02B8 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MatUnhovered;                                     		// 0x02C0 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mOnHoverSound;                                    		// 0x02C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOnClickSound;                                    		// 0x02D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mSoundPause : 1;                                  		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mZoomedIn : 1;                                    		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsHovered : 1;                                   		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mZoomEnabled : 1;                                 		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                mBuildingLevel;                                   		// 0x02DC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mMatInst;                                         		// 0x02E0 (0x0008) [0x0000000000000000]              
	class UPhysicalMaterial*                           mPassMaterial;                                    		// 0x02E8 (0x0008) [0x0000000000000000]              
	class UPhysicalMaterial*                           mBlockMaterial;                                   		// 0x02F0 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    mParticleSystem;                                  		// 0x02F8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AH7PlayerController*                         mPlayerController;                                		// 0x0300 (0x0008) [0x0000000000000000]              
	float                                              mCurrFade;                                        		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              mFadeAmt;                                         		// 0x030C (0x0004) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         mParticleFadingMats;                              		// 0x0310 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         mSavedParticleMats;                               		// 0x0320 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4040 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventTick ( float DeltaTime );
	void StartFadeIn ( );
	void SetHoverEffect ( unsigned long hover );
	void Init ( );
	void ZoomOutComplete ( );
	void ZoomInComplete ( );
	void DoZoom ( );
	void Click ( );
	void SetZoomedIn ( unsigned long val );
	bool IsZoomedIn ( );
	class UPhysicalMaterial* GetPhysicalPassMaterial ( );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void SetBuildingLevel ( int lvl );
	void AddPhysics ( class UMaterialInstanceConstant* Mat );
	void RemovePhysics ( class UMaterialInstanceConstant* Mat );
	void SetUnhovered ( );
	void Timer ( );
	void SetHovered ( );
	struct FString GetType ( );
	bool IsZoomEnabled ( );
	bool IsHovered ( );
	int GetBuildingLevel ( );
	void SetMaterials ( TArray< struct FH7TownAssetMaterial > Materials );
	TArray< struct FH7TownAssetMaterial > GetMaterials ( );
};



// Class MMH7Game.H7TownBuilding ( Property size: 21 iter: 72) 
// Class name index: 8828 
// 0x00D0 (0x0130 - 0x0060)
class UH7TownBuilding : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     mName;                                            		// 0x0070 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mDesc;                                            		// 0x0080 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      mIsUnique : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UH7TownBuilding*                             mUpgrade;                                         		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7TownBuilding*                             mAlternate;                                       		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7TownBuilding* >                   mPrerequisites;                                   		// 0x00A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mRequiredLevel;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ResourceQuantity >               mCosts;                                           		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mProduction;                                      		// 0x00C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7TownAsset*                                mTownAsset;                                       		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AH7TownAsset* >                      mTownAssets;                                      		// 0x00E0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  mIcon;                                            		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPopup;                                           		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mAbility;                                         		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mAiBaseUtility;                                   		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7Town*                                     mTown;                                            		// 0x0108 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x0110 (0x0008) [0x0000000000000000]              
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x0118 (0x0008) [0x0000000000000000]              
	struct FString                                     mNameInst;                                        		// 0x0120 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4042 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	class UH7BaseAbility* GetAbility ( );
	class UH7TownBuilding* GetAlternateBothways ( class AH7Town* Town );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	int GetIncomeForResource ( class UH7Resource* Resource );
	float GetBuildingBaseUtility ( );
	void InitTownBuilding ( class AH7Town* Town );
	bool IsArchetype ( );
	struct FString GetIDString ( );
	struct FString GetFlashInfoIconPath ( unsigned long Build );
	TArray< class UH7TownBuilding* > GetPrerequisites ( );
	bool ShouldDisplayIncome ( );
	TArray< struct FH7ResourceQuantity > GetIncome ( );
	unsigned char GetPopup ( );
	class UH7TownBuilding* GetAlternate ( );
	class UH7TownBuilding* GetUpgrade ( );
	int CostResourceCompareGUI ( struct FH7ResourceQuantity A, struct FH7ResourceQuantity B );
	void OnBeginDay ( );
	TArray< struct FH7ResourceQuantity > GetCost ( class AH7Town* Town );
	struct FString GetArchetypeDescription ( );
	struct FString GetDesc ( );
	void DelTownAssets ( );
	bool HasTownAssetsLoaded ( );
	TArray< class AH7TownAsset* > GetTownAssets ( );
	void DelIcon ( );
	struct FString GetFlashIconPath ( );
	void DelTownAsset ( );
	bool HasTownAssetLoaded ( );
	class AH7TownAsset* GetTownAsset ( );
	void SetPrerequisiteLevel ( int Level );
	int GetPrerequisiteLevel ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	bool IsUnique ( );
	class AH7Town* GetTown ( );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	class AH7Player* GetPlayer ( );
	unsigned char GetEntityType ( );
	int GetHitPoints ( );
	int GetStackSize ( );
	void DataChanged ( struct FString cause );
	struct FIntPoint GetGridPosition ( );
	int GetID ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	void SetTown ( class AH7Town* Town );
	void LocalizeName ( );
	struct FString GetName ( );
};



// Class MMH7Game.H7BlackMarket ( Property size: 10 iter: 26) 
// Class name index: 8830 
// 0x0060 (0x0190 - 0x0130)
class UH7BlackMarket : public UH7TownBuilding
{
public:
	unsigned long                                      mUseItemPoolOverride : 1;                         		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mEnableForbiddenItemTypeList : 1;                 		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class UH7HeroItem* >                       mItemPoolOverride;                                		// 0x0134 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mRefreshOffers;                                   		// 0x0144 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            mForbiddenItemType;                               		// 0x0148 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mItemPool;                                        		// 0x0158 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mBuyPriceMultiplicator;                           		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              mSellPriceMultiplicator;                          		// 0x016C (0x0004) [0x0000000000000000]              
	TArray< int >                                      mItemRandValues;                                  		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mCurrentItems;                                    		// 0x0180 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4044 ];

		return pClassPointer;
	};

	float GetBaseStatByID ( unsigned char desiredStat );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat );
	float GetAddBoniOnStatByID ( unsigned char desiredStat );
	float GetModifiedStatByID ( unsigned char desiredStat );
	class UH7HeroItem* BuyItemByID ( int Id );
	class UH7HeroItem* GetItemByID ( int Id );
	void SetCurrentItems ( );
	void InitTownBuilding ( class AH7Town* Town );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	float GetSellPriceMultiplicator ( );
	float GetBuyPriceMultiplicator ( );
	void SetSellPriceMultiplicator ( float val );
	void SetBuyPriceMultiplicator ( float val );
	TArray< class UH7HeroItem* > GetCurrentlyAvailableItems ( );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char checkForOperation1, unsigned char checkForOperation2, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	unsigned char GetEntityType ( );
};



// Class MMH7Game.H7TownCastingStage ( Property size: 4 iter: 39) 
// Class name index: 8832 
// 0x0028 (0x0158 - 0x0130)
class UH7TownCastingStage : public UH7TownBuilding
{
public:
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x0130 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UH7BaseAbility* >                    mAbilities;                                       		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7CombatHero*                               mCaster;                                          		// 0x0148 (0x0008) [0x0000000000000000]              
	class AH7Town*                                     mTownOwner;                                       		// 0x0150 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4046 ];

		return pClassPointer;
	};

	class UH7IEffectTargetable* GetRandomTarget ( class UH7BaseAbility* Ability, TArray< class AH7CreatureStack* > stacks );
	class UH7TownMagicGuild* GetMagicGuild ( class AH7Town* Town );
	void UseCastingStageAbility ( class AH7CombatController* cmbtContrl );
	class UH7TownCastingStage* CheckAndHandleCastingStage ( class AH7AdventureArmy* attacker, class AH7AdventureArmy* defender );
	class UH7TownCastingStage* GetBuiltCastingStageInTown ( class AH7Town* Town );
	class UH7BaseAbility* GetRandomAbility ( );
	void LearnAbilities ( );
	void InitTownBuilding ( class AH7Town* Town );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLuckDestiny ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	class AH7CombatArmy* GetCombatArmy ( );
	class AH7Player* GetPlayer ( );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetLocation ( );
	bool IsDefaultAttackActive ( );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	unsigned char GetEntityType ( );
	int GetID ( );
	void DataChanged ( struct FString cause );
	class UH7EventManager* GetEventManager ( );
	class UH7EffectManager* GetEffectManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	class UH7ICaster* GetOriginal ( );
	class AH7Town* GetTownOwner ( );
	void SetTown ( class AH7Town* Town );
};



// Class MMH7Game.H7TownDwelling ( Property size: 4 iter: 19) 
// Class name index: 8834 
// 0x0024 (0x0154 - 0x0130)
class UH7TownDwelling : public UH7TownBuilding
{
public:
	struct FH7DwellingCreatureData                     mCreaturePool;                                    		// 0x0130 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDailyGrowthBuffer;                               		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                mGrowthCycle;                                     		// 0x014C (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsSabotaged : 1;                                 		// 0x0150 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4048 ];

		return pClassPointer;
	};

	void GetModifiersByID ( unsigned char desiredStat, unsigned char checkForOperation1, unsigned char checkForOperation2, unsigned long nextRound, class AH7Creature* specificCreature, TArray< struct FH7MeModifiesStat >* outStats );
	float GetBaseStatByID ( unsigned char desiredStat );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat );
	float GetAddBoniOnStatByID ( unsigned char desiredStat );
	float GetModifiedStatByID ( unsigned char desiredStat );
	TArray< class AH7Creature* > GetRecruitableCreatures ( );
	void HireUnits ( int Count );
	void CarryReserveForUpgrade ( int baseBuildingReserve );
	void ProduceUnits ( int bonus );
	void ModifyReserve ( float Mu );
	int GetCreatureIncome ( );
	bool isSabotaged ( );
	void SetSabotaged ( unsigned long isSabotaged );
	void SetCreaturePool ( struct FH7DwellingCreatureData pool );
	struct FH7DwellingCreatureData GetCreaturePool ( );
};



// Class MMH7Game.H7TownGuardGrowthEnhancer ( Property size: 3 iter: 7) 
// Class name index: 8836 
// 0x0030 (0x0160 - 0x0130)
class UH7TownGuardGrowthEnhancer : public UH7TownBuilding
{
public:
	TArray< struct FH7GuardCreatureData >              mOnBuildCreatureBonus;                            		// 0x0130 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7TownGuardModifier >              mCapacityModifier;                                		// 0x0140 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7TownGuardModifier >              mIncomeModifier;                                  		// 0x0150 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4050 ];

		return pClassPointer;
	};

	bool IsChampionGuardTower ( );
	int GetModifiedIncomeFor ( struct FH7DwellingCreatureData Data, unsigned long hasChampionDwelling, int* IsOperationSet );
	int GetModifiedCapacityFor ( struct FH7DwellingCreatureData Data, unsigned long hasChampionDwelling, int* IsOperationSet );
	void InitGrowthEnhancer ( TArray< struct FH7DwellingCreatureData >* localGuardData );
};



// Class MMH7Game.H7TownHall ( Property size: 2 iter: 4) 
// Class name index: 8838 
// 0x000C (0x013C - 0x0130)
class UH7TownHall : public UH7TownBuilding
{
public:
	class UStaticMesh*                                 mMesh;                                            		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsCapitol : 1;                                   		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4052 ];

		return pClassPointer;
	};

	bool IsCapitol ( );
	class UStaticMesh* GetMesh ( );
};



// Class MMH7Game.H7TownMagicGuild ( Property size: 12 iter: 32) 
// Class name index: 8840 
// 0x0064 (0x0194 - 0x0130)
class UH7TownMagicGuild : public UH7TownBuilding
{
public:
	unsigned char                                      mRank;                                            		// 0x0130 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7HeroAbility* >                    mSpells;                                          		// 0x0134 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mRemovedSpellBuffer;                              		// 0x0144 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mPossibleSpells;                                  		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           mSpellsRefs;                                      		// 0x0164 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mSpellsSet : 1;                                   		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mSeenByPlayer : 1;                                		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mSeenLibrarySpells : 1;                           		// 0x0174 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mWasPostSerialized : 1;                           		// 0x0174 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                mMaxSpellCount;                                   		// 0x0178 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            mMagicGuildSpecPossibilities;                     		// 0x017C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Faction*                                  mFaction;                                         		// 0x018C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4054 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void InitMaxSpellCount ( );
	void AddSpell ( class UH7HeroAbility* spell );
	void InitSpells ( TArray< class UH7HeroAbility* > predefinedSpells, class AH7Town* Town );
	void SetRandomGuildSpecialisation ( unsigned char school, class AH7Town* Town );
	void SelectRandomGuildSpecialisation ( class AH7Town* Town );
	void SetMageGuildSpecialisation ( unsigned char electedSchool, class AH7Town* Town );
	void SetFaction ( class UH7Faction* Faction );
	bool HasSeenLibrarySpells ( );
	void SetSeenLibrarySpells ( unsigned long val );
	bool WasSeenByPlayer ( );
	void SetSeenByPlayer ( unsigned long val );
	bool GetSpellSetStatus ( );
	unsigned char GetRank ( );
	int GetMaxSpellCount ( );
	TArray< class UH7HeroAbility* > GetSpells ( );
};



// Class MMH7Game.H7TownPortal ( Property size: 1 iter: 2) 
// Class name index: 8842 
// 0x0008 (0x0138 - 0x0130)
class UH7TownPortal : public UH7TownBuilding
{
public:
	class UH7HeroAbility*                              mAbilitiyToLearn;                                 		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4056 ];

		return pClassPointer;
	};

	class UH7HeroAbility* GetTownPortalSpell ( );
};



// Class MMH7Game.H7TownTearOfAsha ( Property size: 0 iter: 0) 
// Class name index: 8844 
// 0x0000 (0x0130 - 0x0130)
class UH7TownTearOfAsha : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4058 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TownThiefGuild ( Property size: 0 iter: 0) 
// Class name index: 8846 
// 0x0000 (0x0130 - 0x0130)
class UH7TownThiefGuild : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4060 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TransitionData ( Property size: 28 iter: 102) 
// Class name index: 8848 
// 0x0568 (0x05C8 - 0x0060)
class UH7TransitionData : public UObject
{
public:
	class UH7GameData*                                 mGameData;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	class UH7PlayerProfile*                            mPlayerProfile;                                   		// 0x0068 (0x0008) [0x0000000000000000]              
	class UH7ContentScanner*                           mContentScanner;                                  		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FH7ContentScannerCombatMapData              mMPLobbyCombatMapDataToCreate;                    		// 0x0078 (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7ContentScannerAdventureMapData           mMPLobbyMapDataToCreate;                          		// 0x0108 (0x031C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7ListingSavegameDataScene                 mMPLobbySaveDataToUse;                            		// 0x0424 (0x0100) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mPendingHubMatinee;                               		// 0x0524 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      mPendingHubState;                                 		// 0x0534 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     mPreviousMapName;                                 		// 0x0538 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mClientWasKicked : 1;                             		// 0x0548 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mClientCancelledLobbySession : 1;                 		// 0x0548 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mServerCancelledLobbySession : 1;                 		// 0x0548 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mClientSavegameNeededLobbySession : 1;            		// 0x0548 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mClientLostConnectionToServer : 1;                		// 0x0548 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mServerLostConnectionToClients : 1;               		// 0x0548 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mIsInMapTransition : 1;                           		// 0x0548 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mIsReplayCombat : 1;                              		// 0x0548 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mIsMainMenu : 1;                                  		// 0x0548 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mIsLoadingSave : 1;                               		// 0x0548 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mIsLoadedGame : 1;                                		// 0x0548 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mUseMe : 1;                                       		// 0x0548 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mUseMeForCampaign : 1;                            		// 0x0548 (0x0004) [0x0000000000000000] [0x00001000] 
	class UH7SavegameTask_Loading*                     mLoadingTask;                                     		// 0x054C (0x0008) [0x0000000000000000]              
	TArray< struct FPlayerLobbySelectedSettings >      mPlayersSettings;                                 		// 0x0554 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7LobbyDataMapSettings                     mMapSettings;                                     		// 0x0564 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7LobbyDataGameSettings                    mGameSettings;                                    		// 0x0584 (0x002C) [0x0000000000000000]              
	class UH7CampaignDefinition*                       mCampaignDefinition;                              		// 0x05B0 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadyForMatinee__Delegate;                    		// 0x05B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x05BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4062 ];

		return pClassPointer;
	};

	void ResetLobbyData ( );
	void TriggerReadyForMatineeListener ( );
	void SetReadyForMatineeListener ( struct FScriptDelegate callbackFunction );
	unsigned char eventGetSelectedVictoryCondition ( );
	class AH7EditorHero* eventGetPlayerStartHeroDuringGameTime ( unsigned char Number );
	class UH7Faction* eventGetPlayerFactionDuringGameTime ( unsigned char Number );
	int GetHumanPlayersCounter ( );
	struct FPlayerLobbySelectedSettings GetPlayerSettingsDuringGameTime ( unsigned char Number );
	void AdjustDuplicateStartPositions ( );
	void SetRandomStartPositions ( );
	void SetRandomHeroForPlayer ( int PlayerIndex );
	bool IsStartingCampaign ( class UH7CampaignDefinition** campRef );
	void SetPlayerArmySettings ( int PlayerIndex, class UH7Faction* Faction, class AH7EditorHero* Hero, class AH7EditorArmy* Army );
	void SetupPlayers ( );
	struct FString GetTutorialMapFileName ( );
	class UH7ContentScanner* GetContentScanner ( );
	unsigned char GetPendingCouncilState ( );
	bool GetIsMainMenu ( );
	struct FString GetPreviousMapName ( );
	bool GetIsReplayCombat ( );
	class UH7SavegameTask_Loading* GetCurrentLoadTask ( );
	bool IsLoadedGame ( );
	bool IsLoadingSave ( );
	bool GetMPClientLostConnectionToServer ( );
	bool GetMPClientSavegameNeededLobbySession ( );
	bool GetIsInMapTransition ( );
	bool GetMPServerLostConnectionToClients ( );
	bool GetMPServerCancelledLobbySession ( );
	bool GetMPClientCancelledLobbySession ( );
	bool GetMPClientWasKicked ( );
	struct FH7LobbyDataGameSettings GetGameSettings ( );
	struct FH7LobbyDataMapSettings GetMapSettings ( );
	struct FH7ContentScannerCombatMapData GetMPLobbyCombatMapDataToCreate ( );
	struct FH7ContentScannerAdventureMapData GetMPLobbyMapDataToCreate ( );
	struct FH7ListingSavegameDataScene GetMPLobbySaveDataToUse ( );
	class UH7PlayerProfile* GetPlayerProfile ( );
	struct FString GetPendingMatinee ( );
	bool useMapDefaults ( );
	class UH7GameData* GetGameData ( );
	bool UseForCampaign ( );
	bool UseMe ( );
	unsigned char GetTeamSetup ( );
	TArray< struct FPlayerLobbySelectedSettings > GetPlayersSettings ( );
	void SetContentScanner ( class UH7ContentScanner* scanner );
	void SetPendingCouncilState ( unsigned char NewState );
	void SetCampaignDefinition ( class UH7CampaignDefinition* newCampaign );
	void SetIsMainMenu ( unsigned long val );
	void SetPreviousMapName ( struct FString val );
	void SetIsReplayCombat ( unsigned long val );
	void SetCurrentLoadTask ( class UH7SavegameTask_Loading* task );
	void SetLoadedGame ( unsigned long B );
	void SetLoadingSave ( unsigned long B );
	void SetMPServerLostConnectionToClients ( unsigned long serverLostConnectionToClients );
	void SetMPClientLostConnectionToServer ( unsigned long clientLostConnectionToServer );
	void SetMPClientSavegameNeededLobbySession ( unsigned long clientSavegameNeededLobbySession );
	void SetIsInMapTransition ( unsigned long Value );
	void SetMPServerCancelledLobbySession ( unsigned long serverCancelledLobbySession );
	void SetMPClientCancelledLobbySession ( unsigned long clientCancelledLobbySession );
	void SetMPClientWasKicked ( unsigned long ClientWasKicked );
	void SetMPLobbyCombatMapDataToCreate ( struct FH7ContentScannerCombatMapData MapData );
	void SetMPLobbyMapDataToCreate ( struct FH7ContentScannerAdventureMapData MapData );
	void SetMPLobbySaveDataToUse ( struct FH7ListingSavegameDataScene saveData );
	void SetPlayerProfile ( class UH7PlayerProfile* Profile );
	void SetPendingMatinee ( struct FString matineeName );
	void SetUseMapDefaults ( unsigned long useMapDefaults );
	void SetTeamTrade ( unsigned long Value );
	void SetUseMe ( unsigned long Value );
	void SetTeamSetup ( int Value );
	void SetForceQuickCombat ( int Value );
	void SetGameSettings ( struct FH7LobbyDataGameSettings GameSettings );
	void SetMapSettings ( struct FH7LobbyDataMapSettings mapSettings );
	void SetPlayersSettings ( TArray< struct FPlayerLobbySelectedSettings > mapPlayersInfo );
	void OnReadyForMatinee ( );
	class UH7TransitionData* GetInstance ( );
};



// Class MMH7Game.H7Unit ( Property size: 79 iter: 275) 
// Class name index: 8850 
// 0x02CC (0x057C - 0x02B0)
class AH7Unit : public ASkeletalMeshActorMAT
{
public:
	struct FPointer                                    VfTable_IH7IEffectTargetable;                     		// 0x02B0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x02B8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mNeedsPrivileg : 1;                               		// 0x02C0 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      mOverrideAutoCollider : 1;                        		// 0x02C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mHasBadMoral : 1;                                 		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mDoStatusCheck : 1;                               		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mWaitClicked : 1;                                 		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mIsWaiting : 1;                                   		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mIsWaitTurn : 1;                                  		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mIsMoralTurn : 1;                                 		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mMarkForSkipTurn : 1;                             		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mIsAdditionalTurn : 1;                            		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mFinishedCommand : 1;                             		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mTriggerTurnStartEvents : 1;                      		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mTriggerTurnEndEvents : 1;                        		// 0x02C0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      mOverrideWithAI : 1;                              		// 0x02C0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      mIsDoneForAI : 1;                                 		// 0x02C0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      mSkipTurn : 1;                                    		// 0x02C0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      mIgnoreAllegiances : 1;                           		// 0x02C0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      mRotateRandom : 1;                                		// 0x02C0 (0x0004) [0x0000000000000000] [0x00020000] 
	int                                                mPrivilegID;                                      		// 0x02C4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UCylinderComponent*                          mCollider;                                        		// 0x02C8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     mName;                                            		// 0x02D0 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mLore;                                            		// 0x02E0 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              mAnimSoundSpeedManipulator;                       		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mColliderRadius;                                  		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mColliderHeight;                                  		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mNameInst;                                        		// 0x02FC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mLoreInst;                                        		// 0x030C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTexture2D*                                  mIcon;                                            		// 0x031C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mArtwork;                                         		// 0x0324 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Faction*                                  mFaction;                                         		// 0x032C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ResourceQuantity >               mUnitCost;                                        		// 0x0334 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       mProjectileStartSocket;                           		// 0x0344 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionSymbol;                                   		// 0x034C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStatCache[ 0x3D ];                               		// 0x0354 (0x00F4) [0x0000000000002000]              ( CPF_Transient )
	int                                                mInitiative;                                      		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAttack;                                          		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDefense;                                         		// 0x0450 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mLeadership;                                      		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDestiny;                                         		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinimumDamage;                                   		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaximumDamage;                                   		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMovementPoints;                                  		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mSchoolType;                                      		// 0x0468 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mLuckType;                                        		// 0x0469 (0x0001) [0x0000000000000000]              
	int                                                mMagicAbs;                                        		// 0x046C (0x0004) [0x0000000000000000]              
	class UH7BaseAbility*                              mLuckAbility;                                     		// 0x0470 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mMeleeAttackAbilityTemplate;                      		// 0x0478 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mRangedAttackAbilityTemplate;                     		// 0x0480 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mWaitAbility;                                     		// 0x0488 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mGhostWalkParticles;                              		// 0x0490 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mTeleportStartEffect;                             		// 0x0498 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mTeleportEndEffect;                               		// 0x04A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mTeleportationStartSound;                         		// 0x04A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mTeleportationEndSound;                           		// 0x04B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mSubstituteLuckAbility;                           		// 0x04B8 (0x0008) [0x0000000000000000]              
	struct FIntPoint                                   mGridPos;                                         		// 0x04C0 (0x0008) [0x0000000000000000]              
	TArray< class UH7BaseCell* >                       mLastPath;                                        		// 0x04C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mRange;                                           		// 0x04D8 (0x0004) [0x0000000000000000]              
	float                                              mFlankingBonus;                                   		// 0x04DC (0x0004) [0x0000000000000000]              
	class UH7AbilityManager*                           mAbilityManager;                                  		// 0x04E0 (0x0008) [0x0000000000000000]              
	class UH7BuffManager*                              mBuffManager;                                     		// 0x04E8 (0x0008) [0x0000000000000000]              
	class UH7EventManager*                             mEventManager;                                    		// 0x04F0 (0x0008) [0x0000000000000000]              
	class UH7EffectManager*                            mEffectManager;                                   		// 0x04F8 (0x0008) [0x0000000000000000]              
	class AH7EditorArmy*                               mArmy;                                            		// 0x0500 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmyAdventure;                                   		// 0x0508 (0x0008) [0x0000000000000000]              
	int                                                Mid;                                              		// 0x0510 (0x0004) [0x0000000000000000]              
	int                                                mAttackCount;                                     		// 0x0514 (0x0004) [0x0000000000000000]              
	int                                                mMoveCount;                                       		// 0x0518 (0x0004) [0x0000000000000000]              
	int                                                mKillsOnCurrentTurn;                              		// 0x051C (0x0004) [0x0000000000000000]              
	int                                                mAttackCountMod;                                  		// 0x0520 (0x0004) [0x0000000000000000]              
	class AH7Wave*                                     mCurrentWave;                                     		// 0x0524 (0x0008) [0x0000000000000000]              
	TArray< struct FCreaturePositon >                  mNewCreaturePosition;                             		// 0x052C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7CreatureStack* >                  mCasualtyStacks;                                  		// 0x053C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7BaseAbility*                              mWaveSource;                                      		// 0x054C (0x0008) [0x0000000000000000]              
	class AH7CombatController*                         mCombatCtrl;                                      		// 0x0554 (0x0008) [0x0000000000000000]              
	TArray< struct FH7StatModSource >                  mStatModSourceBuffer;                             		// 0x055C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UParticleSystemComponent* >          mEmitterPoolParticleComps;                        		// 0x056C (0x0010) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4064 ];

		return pClassPointer;
	};

	void ChangeUnitAnimationSoundSpeed ( float additionalSpeedMod );
	void CleanupEmitterPools ( );
	void RecyclePooledEmitter ( class UParticleSystemComponent* PSC );
	void OnPooledAttachedParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void AllocatePooledEmitter ( class UParticleSystemComponent* PSC );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void UpdateParticleTranslucency ( class UParticleSystemComponent* PSC );
	void UndoDeathMaterialFX ( TArray< struct FH7DeathMaterialEffect > deathMaterialEffects, TArray< class UMaterialInstanceConstant* > unitMaterials );
	void DoDeathMaterialEffectFading ( TArray< struct FH7DeathMaterialEffect > deathMaterialEffects, TArray< class UMaterialInstanceConstant* > unitMaterials );
	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	void Think ( );
	bool IsMyDefaultAbility ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetLuckAbility ( );
	void SetSubstituteLuckAbilty ( class UH7BaseAbility* Ability );
	int GetMovementPointsBase ( );
	int GetMovementPoints ( );
	bool MPIsYourTurn ( );
	void ClearStatCache ( );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char exclusiveFirstOT, unsigned char exclusiveSecondOT, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	TArray< struct FH7StatModSource > GetStatModSourceList ( unsigned char Stat );
	void EnableUnitMoveSound ( unsigned long Enable );
	void EnableUnitSound ( unsigned long Enable );
	void IsUnderAttack ( unsigned long isSimulated );
	void StatusChanged ( );
	void DataChanged ( struct FString cause );
	void EndMoving ( unsigned long ignoreTargetNotReachedMessage );
	void ShowFloatingText ( struct FString Text );
	void PrepareDefaultAbility ( );
	void ResetPreparedAbility ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void Wait ( );
	class UH7BaseAbility* GetSkipTurnAbility ( );
	bool CanDefend ( );
	void Defend ( );
	void EndTurn ( );
	void BeforeEndTurn ( );
	void EndAction ( );
	bool BeginTurn ( );
	void BeginAction ( );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	void eventDestroyed ( );
	void Init ( unsigned long fromSave );
	void SetInitiative ( int val );
	class AH7Player* GetPlayer ( );
	float GetMultiBoniOnStatByID ( unsigned char desiredStat, unsigned long nextRound );
	float GetAddBoniOnStatByID ( unsigned char desiredStat, unsigned long nextRound );
	float GetModifiedStatByID ( unsigned char desiredStat, unsigned long nextRound );
	void SetBaseStatByID ( unsigned char desiredStat, int NewValue );
	void DisplayStatChangeFloat ( unsigned char Stat, unsigned char Op, float Amount, class UH7EffectContainer* Source );
	void DisplayStatChangeLog ( unsigned char Stat, unsigned char Op, float Amount, class UH7EffectContainer* Source );
	void DecreaseBaseStatByID ( unsigned char desiredStat, int Amount );
	float IncreaseBaseStatByID ( unsigned char desiredStat, int Amount );
	float GetBaseStatByID ( unsigned char desiredStat );
	int GetNextInitiative ( );
	int GetInitiative ( );
	bool IsDefaultAttackActive ( );
	unsigned char DoLuckRoll ( struct FH7EventContainerStruct container );
	void GetAllShieldEffects ( TArray< class UH7EffectSpecialShieldEffect* >* shieldEffects );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	float GetResistanceModifierForTag ( unsigned char SearchTag );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetSocketLocation ( struct FName SocketName );
	void WaveCatchCreatureStack ( class UH7IEffectTargetable* Unit );
	void HitUnit ( class UH7IEffectTargetable* Target );
	void NextWaveStep ( TArray< class UH7CombatMapCell* > Cells );
	void InitCurrentWave ( class AH7Wave* myWave, struct FVector StartPos, struct FVector targetPos, TArray< class UH7IEffectTargetable* > Targets, class UH7BaseAbility* Source, unsigned long rotateRandom );
	bool MakeTurn ( unsigned long usedAttack, unsigned long usedMove );
	void RecalculatePostAnimInput ( );
	void PostBeginPlay ( );
	TArray< class UH7EffectContainer* > GetEffectContainerForStat ( unsigned char Stat );
	bool IsMoralTurn ( );
	bool IsAdditionalTurn ( );
	void SetDoneForAI ( unsigned long val );
	bool GetDoneForAI ( );
	bool IsDead ( );
	class USkeletalMeshComponent* GetMeshComponent ( );
	struct FVector GetHeightPos ( float Offset );
	struct FVector GetMeshCenter ( );
	struct FVector GetLocation ( );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void SetTriggerStartTurnEvents ( unsigned long should );
	bool TriggerStartTurnEvents ( );
	bool HasWaitClicked ( );
	void SetOverrideByAI ( unsigned long val );
	bool IsOverridenByAI ( );
	void SetWaiting ( unsigned long IsWaiting );
	bool IsWaitTurn ( );
	bool IsWaiting ( );
	bool HasPreparedAbilityId ( class UH7BaseAbility* aid );
	bool HasPreparedAbility ( );
	bool IsAttacker ( );
	bool IsCasting ( );
	bool IsMoving ( );
	class UTexture2D* GetIcon ( );
	TArray< struct FH7ResourceQuantity > GetUnitCost ( );
	struct FString GetFlashIconPath ( );
	float GetForeignMoralePenaltyModifier ( );
	float GetSurrenderCostModifier ( );
	float GetNegotiationChance ( );
	int GetLuckDestiny ( );
	int GetDestinyBase ( );
	int GetDestiny ( );
	int GetLeadershipBase ( );
	int GetLeadership ( );
	int GetDefenseBase ( );
	int GetDefense ( );
	int GetMaximumDamageBase ( );
	int GetMinimumDamageBase ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	int GetAttack ( );
	bool IsControlledByAI ( );
	void ResetLuckType ( );
	void SetSchoolType ( unsigned char school );
	int GetStackSize ( );
	int GetMagic ( );
	struct FString GetIDString ( );
	struct FString GetLore ( );
	void DeleteImage ( );
	struct FString GetFlashArtworkPath ( );
	struct FString eventGetUnitName ( );
	struct FString GetName ( );
	void SetName ( struct FString OverrideName );
	void DumpModifiers ( );
	bool HasBadMoral ( );
	void SetNewCreaturePosition ( TArray< struct FCreaturePositon > pos );
	unsigned char GetSchool ( );
	unsigned char GetAttackType ( );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	float GetColliderHeight ( );
	float GetColliderRadius ( );
	bool IsAutoColliderOverridden ( );
	int GetHitPoints ( );
	int GetLastWalkedPathLength ( );
	void SetLastWalkedPath ( TArray< class UH7BaseCell* > Path );
	TArray< class UH7BaseCell* > GetLastWalkedPath ( );
	bool GetIgnoreAllegiances ( );
	void SetIgnoreAllegiances ( unsigned long Value );
	void SetKillsOnCurrentTurn ( int Kills );
	int GetKillsOnCurrentTurn ( );
	struct FName GetProjectileStartSocketName ( );
	class UH7EffectManager* GetEffectManager ( );
	bool IsRanged ( );
	void SetWaitClick ( unsigned long Value );
	void SetCurrentLuckType ( unsigned char Luck );
	unsigned char GetCurrentLuckType ( );
	int GetID ( );
	class UH7Faction* GetFaction ( );
	unsigned char GetEntityType ( );
	class AH7AdventureArmy* GetAdventureArmy ( );
	class AH7CombatArmy* GetCombatArmy ( );
	class AH7EditorArmy* GetArmy ( );
	void SetArmy ( class AH7EditorArmy* Army );
	class UH7EventManager* GetEventManager ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	class UH7ICaster* GetOriginal ( );
	void SetUnitCosts ( TArray< struct FH7ResourceQuantity > Costs );
	void SetSkipTurn ( unsigned long newSkipTurn );
	void SetCommandFinished ( unsigned long isFinished );
	bool FinishedCommand ( );
	void MarkForTurnSkip ( unsigned long mark );
	bool IsMarkedForTurnSkip ( );
	void SetAdditionalTurn ( unsigned long boool );
	void SetMoralTurn ( unsigned long boool );
	bool CanMove ( );
	int GetMoveCount ( );
	void UseMove ( );
	bool CanAttack ( );
	int GetAttackCount ( );
	void UseAttack ( );
	void ClearTurns ( );
	void ResetTurnCount ( );
	bool HasFullAction ( );
	bool CanMakeAction ( );
	bool HasTeleportEndFX ( );
	bool HasTeleportStartFX ( );
	class UAkEvent* GetEndTeleportFXSound ( );
	class UAkEvent* GetStartTeleportFXSound ( );
	class UParticleSystem* GetTeleportEndParticleFX ( );
	class UParticleSystem* GetTeleportStartParticleFX ( );
	class UParticleSystem* GetGhostWalkParticleFX ( );
	float GetAnimSoundSpeedManipulator ( );
	void SetWaitAbility ( class UH7BaseAbility* Ability );
	void SetRangedAttackAbility ( class UH7BaseAbility* Ability );
	void SetMeleeAttackAbility ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetWaitAbility ( );
	class UH7BaseAbility* GetRangedAttackAbility ( );
	class UH7BaseAbility* GetMeleeAttackAbility ( );
	int GetUnitBaseSizeInt ( );
	unsigned char GetUnitBaseSize ( );
};



// Class MMH7Game.H7Creature ( Property size: 73 iter: 187) 
// Class name index: 8852 
// 0x0238 (0x07B4 - 0x057C)
class AH7Creature : public AH7Unit
{
public:
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x057C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IThumbnailable;                        		// 0x0584 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mTier;                                            		// 0x058C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mCreatureLevel;                                   		// 0x058D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mBaseSize;                                        		// 0x058E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mMovementType;                                    		// 0x058F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAttackRange;                                     		// 0x0590 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAiCreatureCategory;                              		// 0x0591 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7CreatureAbility* >                mAbilities;                                       		// 0x0594 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mCritAnimationForRanged : 1;                      		// 0x05A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mMeleePenalty : 1;                                		// 0x05A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mUseAmmo : 1;                                     		// 0x05A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mIsFlankable : 1;                                 		// 0x05A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIsFullFlankable : 1;                             		// 0x05A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mResurrectable : 1;                               		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mIsHovering : 1;                                  		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mIsVisible : 1;                                   		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mFadeInMaterialFX : 1;                            		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mFadeOutMaterialFX : 1;                           		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mHasPendingMaterialFX : 1;                        		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mSkipDeathAnim : 1;                               		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mUndoDeathFX : 1;                                 		// 0x05A4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      mFadeInAnimDone : 1;                              		// 0x05A4 (0x0004) [0x0000000000000000] [0x00002000] 
	int                                                mXp;                                              		// 0x05A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mUpgradeOfCoreCreature;                           		// 0x05AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mBaseCreature;                                    		// 0x05B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mHeroPediaOverwrite;                              		// 0x05BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPowerValue;                                      		// 0x05C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mHitpoints;                                       		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mRetaliationCharges;                              		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mGrowthratePercent;                               		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAmmo;                                            		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mDefendAbility;                                   		// 0x05D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mMoralAbility;                                    		// 0x05E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mRetaliationAbility;                              		// 0x05E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mMeleeRetaliationOverride;                        		// 0x05F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mRangedRetaliationOverride;                       		// 0x05F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mAiBaseUtility;                                   		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7CreatureVisuals*                          mVisuals;                                         		// 0x0604 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mTemplate;                                        		// 0x060C (0x0008) [0x0000000000000000]              
	int                                                mDeploymentSlotIDReference;                       		// 0x0614 (0x0004) [0x0000000000000000]              
	TArray< struct FH7DeathMaterialEffect >            CurrentDeathMaterialEffects;                      		// 0x0618 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAkEvent*                                    mAttackSound;                                     		// 0x0628 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mCriticalAttackSound;                             		// 0x0630 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mRangeAttackSound;                                		// 0x0638 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mGetHitSound;                                     		// 0x0640 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDieSound;                                        		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mIdleSpecialSound;                                		// 0x0650 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mCastSound;                                       		// 0x0658 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAbility1Sound;                                   		// 0x0660 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAbility1EndSound;                                		// 0x0668 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAbility2Sound;                                   		// 0x0670 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAbility2EndSound;                                		// 0x0678 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMoveStartSounds;                                 		// 0x0680 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mRandomMoveSounds;                                		// 0x0688 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopRandomMoveSoundEvent;                        		// 0x0690 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mFlyStartSounds;                                  		// 0x0698 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mFlyEndSounds;                                    		// 0x06A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mTurnLeftSounds;                                  		// 0x06A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mTurnRightSounds;                                 		// 0x06B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mVictorySound;                                    		// 0x06B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDefendSound;                                     		// 0x06C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mRandomFlySounds;                                 		// 0x06C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopRandomFlySoundEvent;                         		// 0x06D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSummonSound;                                     		// 0x06D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAdventureMapIdleSound;                           		// 0x06E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mColorLerpBuffer;                                 		// 0x06E8 (0x0004) [0x0000000000000000]              
	float                                              mTimeAtEffectStart;                               		// 0x06EC (0x0004) [0x0000000000000000]              
	class AH7CreatureAnimControl*                      mAnimControl;                                     		// 0x06F0 (0x0008) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         mCreatureMaterials;                               		// 0x06F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CreatureFX*                               mFX;                                              		// 0x0708 (0x0008) [0x0000000000000000]              
	TArray< class UH7CreatureFX* >                     mWeapFX;                                          		// 0x0710 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7FXStruct                                 mEffectToPlay;                                    		// 0x0720 (0x0094) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4066 ];

		return pClassPointer;
	};

	float GetCreaturePower ( );
	void Tick ( float DeltaTime );
	unsigned char CreatureHeading ( );
	void DoRagdoll ( );
	void UpdateParticleTranslucency ( class UParticleSystemComponent* PSC );
	void FadeBackEffectMaterialValues ( float DeltaTime );
	void SetEffectsMaterialValues ( float DeltaTime );
	void ResumeMaterialEffects ( );
	void StartSetEffectMaterialValues ( struct FH7FXStruct Effect );
	void EnableAdventureIdleBridge ( unsigned long val );
	void ChangeAnimationSpeedFX ( struct FH7FXStruct Effect );
	void PlayDeathMaterialEffects ( );
	void PlayDeathEffects ( unsigned long undo );
	void PlayAdventureMapIdleSound ( class AActor* creator );
	void StopRandomFlySound ( );
	void PlayRandomFlySound ( );
	void PlayDefendSound ( );
	void PlayVictorySound ( );
	void StopRandomMoveSound ( );
	void PlayFlyEndSound ( );
	void PlayFlyStartSound ( );
	void PlayTurnRightSound ( );
	void PlayTurnLeftSound ( );
	void PlayRandomMoveSound ( );
	void PlayMoveStartSound ( );
	void PlayAbility2Sound ( );
	void PlayAbility1EndSound ( );
	void PlayAbility1Sound ( );
	void PlayCastSound ( );
	void PlaySummonSound ( );
	void PlayIdleSpecialSound ( );
	void PlayDieSound ( );
	void PlayGetHitSound ( );
	void PlayRangeAttackSound ( );
	void PlayCriticalAttackSound ( );
	void PlayAttackSound ( );
	int GetYSize ( );
	int GetXSize ( );
	unsigned char GetTier ( );
	struct FString GetTierString ( );
	float GetHeight ( );
	struct FVector GetHeightPos ( float Offset );
	float GetFXScale ( );
	float GetMeshRadius ( );
	void ShowMeshes ( );
	void HideMeshes ( );
	bool isHovering ( );
	void SetIsHovering ( unsigned long isHovering, unsigned long evenIfBusy );
	void SetTeamColor ( int TeamID );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void InitFX ( );
	void PostBeginPlay ( );
	void CreateCreature ( class AH7Creature* Template );
	class UH7CreatureVisuals* GetVisuals ( );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char exclusiveFirstOT, unsigned char exclusiveSecondOT, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	struct FVector GetSocketLocation ( struct FName SocketName );
	struct FVector GetMeshCenter ( );
	float GetResistanceModifierFor ( unsigned char school, TArray< unsigned char > tags, unsigned long checkOnlyBuffs );
	void SetRetaliationCharges ( int newRetaliationCharges );
	void SetDeploymentSlotID ( int val );
	int GetDeploymentSlotID ( );
	bool HasDeathMaterialFX ( );
	bool HasPendingMaterialFX ( );
	float GetCreatureBaseUtility ( );
	unsigned char GetCreatureCategory ( );
	struct FString GetOverwriteIDString ( );
	void SetWeeklyGrowthRate ( int Value );
	void SetIsFullFlankable ( unsigned long Value );
	void SetIsFlankable ( unsigned long Value );
	int GetDestiny ( );
	int GetLeadership ( );
	void SkipDeathAnim ( unsigned long doSkip );
	bool GetCreatureIsVisible ( );
	class UH7BaseAbility* GetRetaliationOverrideRanged ( );
	class UH7BaseAbility* GetRetaliationOverrideMelee ( );
	class UH7BaseAbility* GetRetaliationAbility ( );
	class UH7BaseAbility* GetMoralAbility ( );
	class UH7BaseAbility* GetDefendAbility ( );
	bool IsBaseCreature ( );
	class AH7Creature* GetBaseCreature ( );
	struct FString GetBaseCreatureName ( );
	struct FString GetUpgradedName ( );
	bool eventIsUpgradeVersion ( );
	class AH7Creature* GetUpgradedCreature ( );
	bool UsesAmmo ( );
	int GetExperiencePoints ( );
	TArray< class UH7CreatureAbility* > GetAbilities ( );
	int GetAmmo ( );
	int GetRetaliationCharges ( );
	unsigned char GetMovementType ( );
	bool HasMeleePenalty ( );
	int GetHitPointsBase ( );
	unsigned char GetAttackRange ( );
	unsigned char GetBaseSize ( );
	int GetWeeklyGrowthRate ( );
	bool IsFullFlankable ( );
	bool IsFlankable ( );
	class USkeletalMeshComponent* GetSkeletalMesh ( );
	class AH7CreatureStack* GetOwner ( );
	class AH7CreatureAnimControl* GetAnimControl ( );
	bool IsResurrectable ( );
	void SetCreatureLevel ( unsigned char lvl );
	unsigned char GetCreatureLevel ( );
	bool CanMoraleInQuickCombat ( TArray< class UH7BaseAbility* > criteria );
	int GetQuickCombatSubstituteImpact ( unsigned char Substitute );
	unsigned char GetWarUnitClass ( );
	void SetFadeInAnimDone ( unsigned long V );
	bool IsCritAnimPlayedForRanged ( );
};



// Class MMH7Game.H7CreatureStack ( Property size: 73 iter: 278) 
// Class name index: 8854 
// 0x0228 (0x07A4 - 0x057C)
class AH7CreatureStack : public AH7Unit
{
public:
	int                                                mTopCreatureHealth;                               		// 0x057C (0x0004) [0x0000000000000000]              
	class AH7Creature*                                 mCreature;                                        		// 0x0580 (0x0008) [0x0000000000000000]              
	class UH7BaseCell*                                 mPreviousCell;                                    		// 0x0588 (0x0008) [0x0000000000000000]              
	class ASkeletalMeshActor*                          mGhost;                                           		// 0x0590 (0x0008) [0x0000000000000000]              
	class ASkeletalMeshActor*                          mGhostMove;                                       		// 0x0598 (0x0008) [0x0000000000000000]              
	struct FVector                                     mGhostMoveTargetLocation;                         		// 0x05A0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mGhostMoveTargetRotation;                         		// 0x05AC (0x000C) [0x0000000000000000]              
	float                                              mGhostMoveTimer;                                  		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              mFadeInTimerOpacity;                              		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              mFadeInTimerWhite;                                		// 0x05C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      mFadeInDone : 1;                                  		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mFadeInOpacityDone : 1;                           		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mFadeInWhiteDone : 1;                             		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsDiving : 1;                                    		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mDoDivingParabola : 1;                            		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mParabolaReachedZero : 1;                         		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mRestoreRotationAtEndTurn : 1;                    		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mHasTargets : 1;                                  		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mDescend : 1;                                     		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mIsVisible : 1;                                   		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mIsOrphan : 1;                                    		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mCanBeRevived : 1;                                		// 0x05C4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mHasDataChanged : 1;                              		// 0x05C4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      mHasMovedThisTurn : 1;                            		// 0x05C4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      mIsSummoned : 1;                                  		// 0x05C4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      mKilled : 1;                                      		// 0x05C4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      mSkipDeathAnim : 1;                               		// 0x05C4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      mHasCoverFromEffects : 1;                         		// 0x05C4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      mIsAlliedPassable : 1;                            		// 0x05C4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      mIsBeingTeleported : 1;                           		// 0x05C4 (0x0004) [0x0000000000000000] [0x00080000] 
	TArray< float >                                    mFadeInOpacities;                                 		// 0x05C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      mFadeInDiffuses;                                  		// 0x05D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      mFadeInEmissives;                                 		// 0x05E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         mFadeInMICs;                                      		// 0x05F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     mDivingAttackTargetHeight;                        		// 0x0608 (0x000C) [0x0000000000000000]              
	struct FVector                                     mDivingAttackCurrentHeight;                       		// 0x0614 (0x000C) [0x0000000000000000]              
	struct FVector                                     mDivingAttackStartHeight;                         		// 0x0620 (0x000C) [0x0000000000000000]              
	float                                              mDivingAttackTimer;                               		// 0x062C (0x0004) [0x0000000000000000]              
	float                                              mDivingAttackMovementSpeed;                       		// 0x0630 (0x0004) [0x0000000000000000]              
	float                                              mDivingAttackMovementSpeedDescend;                		// 0x0634 (0x0004) [0x0000000000000000]              
	struct FRotator                                    mStartRotation;                                   		// 0x0638 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mTargetRotation;                                  		// 0x0644 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mBeginTurnRotation;                               		// 0x0650 (0x000C) [0x0000000000000000]              
	class UH7CombatMapCell*                            mTargetCell;                                      		// 0x065C (0x0008) [0x0000000000000000]              
	TArray< class UH7IEffectTargetable* >              mHitUnits;                                        		// 0x0664 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Effect*                                   mEffect;                                          		// 0x0674 (0x0008) [0x0000000000000000]              
	struct FH7EventContainerStruct                     mContainer;                                       		// 0x067C (0x005C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mFlyForwardUnits;                                 		// 0x06D8 (0x0004) [0x0000000000000000]              
	int                                                mDescendFrom;                                     		// 0x06DC (0x0004) [0x0000000000000000]              
	class UH7Command*                                  mDelayedCommand;                                  		// 0x06E0 (0x0008) [0x0000000000000000]              
	int                                                mInitialStackSize;                                		// 0x06E8 (0x0004) [0x0000000000000000]              
	int                                                mStackSize;                                       		// 0x06EC (0x0004) [0x0000000000000000]              
	class AH7CreatureStackMovementControl*             mMoveControl;                                     		// 0x06F0 (0x0008) [0x0000000000000000]              
	class AH7CreatureStackFX*                          mStackFX;                                         		// 0x06F8 (0x0008) [0x0000000000000000]              
	struct FColor                                      mStackColor;                                      		// 0x0700 (0x0004) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mCombatGridController;                            		// 0x0704 (0x0008) [0x0000000000000000]              
	class UH7CombatMapPathfinder*                      mPathfinder;                                      		// 0x070C (0x0008) [0x0000000000000000]              
	class UH7UnitCoverManager*                         mCoverManager;                                    		// 0x0714 (0x0008) [0x0000000000000000]              
	class UH7BaseCreatureStack*                        mBaseCreatureStack;                               		// 0x071C (0x0008) [0x0000000000000000]              
	float                                              mCoverDamageReduction;                            		// 0x0724 (0x0004) [0x0000000000000000]              
	int                                                mAmmo;                                            		// 0x0728 (0x0004) [0x0000000000000000]              
	unsigned char                                      mMovementType;                                    		// 0x072C (0x0001) [0x0000000000000000]              
	float                                              mFakeDeathDelay;                                  		// 0x0730 (0x0004) [0x0000000000000000]              
	TArray< class UH7BaseBuff* >                       mStasisSourcesArray;                              		// 0x0734 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementSpeedModifier;                           		// 0x0744 (0x0004) [0x0000000000000000]              
	float                                              mFlyingSpeedModifier;                             		// 0x0748 (0x0004) [0x0000000000000000]              
	class UH7BaseBuff*                                 mRetaliatedBuff;                                  		// 0x074C (0x0008) [0x0000000000000000]              
	class UH7BaseAbility*                              mSubstituteMoraleAbility;                         		// 0x0754 (0x0008) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mDivingAttackTargetArea;                          		// 0x075C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASkeletalMeshActorSpawnable* >       mPlatoonCreatures;                                		// 0x076C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapCell*                            mStrikeAndReturnReferenceCell;                    		// 0x077C (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDivingAttackFlyingFinished__Delegate;         		// 0x0784 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0788 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnFaceTargetFinishedFunc__Delegate;             		// 0x0794 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0798 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4068 ];

		return pClassPointer;
	};

	bool IsOrphan ( );
	void SetOrphan ( unsigned long val );
	TArray< class AH7CreatureStack* > GetSuppressedStacks ( );
	bool canRangeAttack ( );
	struct FString GetStackSizeObfuscated ( );
	struct FVector GetFloatingTextLocation ( );
	bool IsInWaitQueue ( );
	void PlayVictoryAnim ( );
	void PlayRandomlyDelayedVictoryAnim ( );
	void ResetHasDataChanged ( );
	bool HasDataChanged ( );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	float GetAttackPowerRelation ( unsigned long capOrFloor );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char exclusiveFirstOT, unsigned char exclusiveSecondOT, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	TArray< class UH7CombatMapCell* > GetNeighbourCells ( );
	class UH7BaseBuff* GetRetaliatedBuff ( );
	int GetCellDistanceToCreature ( class AH7CreatureStack* targetStack, unsigned long useMasterCells );
	TArray< class AH7CreatureStack* > GetNeighbourHostileStacks ( class AH7CombatHero* Hero );
	TArray< class AH7CreatureStack* > GetNeighbourFriendlyStacks ( class AH7CombatHero* Hero );
	int GetCurrentMoral ( );
	void ChangeLocomotionSpeed ( struct FH7FXStruct Effect );
	unsigned char DoMoralRoll ( );
	void DebugLogSelf ( );
	unsigned char StackHeading ( );
	void DehighlightStack ( );
	void HighlightStack ( unsigned long evenIfBusy );
	void AfterStrikeAndReturnMove ( );
	void EndMoving ( unsigned long ignoreTargetNotReachedMessage );
	void FaceTarget ( class UH7IEffectTargetable* Target, struct FScriptDelegate onFaceTargetFinished );
	void OnFaceTargetFinishedFunc ( );
	void MoveCreature ( TArray< class UH7BaseCell* > Path, class UH7IEffectTargetable* Target );
	bool IsMoving ( );
	void InitStackFX ( );
	int GetMaxHitpointsTotal ( );
	int GetHitpointsTotal ( );
	void GetDamageResult ( int dmg, unsigned long didMiss, int* TopCreatureHealth, int* StackSize );
	void Kill ( );
	void DestroyCreatureStack ( );
	void SetDead ( class UH7CombatResult* Result );
	void RemoveCreature ( );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	void ApplyBuff ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, class UH7UnitSnapShot* casterSnapshot );
	void Heal ( int healAmount );
	int Resurrection ( int totalHeal, unsigned long wasDead, unsigned long preCalc, class UH7CombatResult* Result, int resultIdx, unsigned long onlyHeal );
	bool CanBeResurrected ( );
	void SetStackLocation ( struct FVector pos, float HeightOffset );
	void HideSlotFX ( class UH7CombatMapCell* myCell );
	void ShowSlotFXDeadAlly ( class UH7CombatMapCell* myCell, unsigned long isHovering );
	void ShowSlotFXAlly ( class UH7CombatMapCell* myCell, unsigned long isHovering );
	void ShowSlotFXEnemy ( class UH7CombatMapCell* myCell, unsigned long isHovering );
	void ShowSlotFXActive ( class UH7CombatMapCell* myCell );
	void HideStackFX ( );
	void ShowStackFXActive ( );
	void ShowStackFXAlly ( );
	void ShowStackFXEnemy ( );
	void TurnChanged ( );
	void UpdateAbilitySlotFX ( class UH7CombatMapCell* myCell, class UH7BaseAbility* preparedAbility, unsigned long isHovering );
	void UpdateSlotFX ( unsigned long isHovering );
	void ShowCemetary ( unsigned long Value );
	void show ( unsigned long addToCell );
	void Hide ( unsigned long removeFromCell );
	void AscendDone ( );
	void DoneEverything ( );
	void OnDivingAttackParabolaHit ( );
	void PlaceOwnerOnCell ( class UH7CombatMapCell* cell, unsigned long hasTargets );
	void ExecuteDivingAttackReappear ( class UH7Effect* Effect, struct FH7EventContainerStruct container, float Speed, float descendSpeed, int descendFrom, int flyForward );
	void DoDivingAttackFlying ( int targetHeight, int fwd, float Speed, unsigned long doParabola, unsigned long exAscendDone, unsigned long exDoneEverything, class UH7Effect* sourceEffect );
	struct FVector ParabolaLerp ( struct FVector Start, float CurrentTime, struct FRotator* currRot );
	void eventTick ( float DeltaTime );
	void CreateDecay ( );
	class UH7BaseAbility* GetSkipTurnAbility ( );
	bool CanDefend ( );
	void Defend ( );
	void EndTurn ( );
	void StartDelayedCommand ( );
	bool BeginTurn ( );
	void UseAmmo ( );
	void CreateGUIOverlay ( );
	void SetTopCreatureHealth ( int Value );
	void ApplyHeroArmyBonusBuff ( );
	void SpawnCreature ( class AH7Creature* Template );
	void Init ( unsigned long fromSave );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	int CountDeadCreatures ( );
	unsigned char GetAttackRange ( );
	unsigned char GetAttackType ( );
	int GetUnitBaseSizeInt ( );
	bool CanJump ( );
	unsigned char GetUnitBaseSize ( );
	bool CanGhostWalk ( );
	bool CanTeleport ( );
	bool CanFly ( );
	int GetBaseCreatureHealth ( );
	int GetHitPoints ( );
	int GetTopCreatureHealth ( );
	struct FString GetName ( );
	unsigned char GetEntityType ( );
	bool CouldRetaliate ( );
	bool CanRetaliate ( );
	void LerpFadeIn ( float DeltaTime );
	void StartFadeIn ( );
	void DestroyGhost ( );
	void RestoreRotation ( );
	void LerpGhostMove ( float DeltaTime );
	void CreateGhost ( class UH7CombatMapCell* destinationCell, struct FRotator Rot, unsigned long showGhostMove, float ghostOpacity );
	void RemoveStasisBuff ( class UH7BaseBuff* buff );
	void RemoveFirstStasisBuff ( );
	bool HasStasisBuff ( class UH7BaseBuff* buff );
	class UH7BaseBuff* GetStasisBuff ( );
	void AddStasisBuff ( class UH7BaseBuff* buff );
	void ShowCreatureRemains ( );
	void BuryCreature ( );
	class UH7CombatMapCell* GetCell ( );
	void RemoveCreatureFromCell ( );
	void RemoveStackFromGrid ( unsigned long removeFromCell );
	bool IsDead ( );
	class UH7BaseAbility* GetMoralAbility ( );
	void SetStrikeAndReturnCell ( class UH7CombatMapCell* cell );
	TArray< class ASkeletalMeshActorSpawnable* > GetPlatoonCreatures ( );
	void SetFlyingSpeedModifier ( float Speed );
	void SetMovementSpeedModifier ( float Speed );
	float GetFlyingSpeed ( );
	float GetMovementSpeed ( );
	class AH7CreatureStackMovementControl* GetMovementControl ( );
	void SetFullFlankability ( unsigned long Value );
	bool IsFullFullFlankable ( );
	void SetFlankability ( unsigned long Value );
	bool IsFlankable ( );
	struct FName GetProjectileStartSocketName ( );
	struct FVector GetSocketLocation ( struct FName SocketName );
	class UH7BaseAbility* GetRetaliationOverrideRanged ( );
	class UH7BaseAbility* GetRetaliationOverrideMelee ( );
	class UH7BaseAbility* GetRetaliationAbility ( );
	class UH7BaseAbility* GetLuckAbility ( );
	class UH7BaseAbility* GetWaitAbility ( );
	class UH7BaseAbility* GetDefendAbility ( );
	class UH7BaseAbility* GetRangedAttackAbility ( );
	class UH7BaseAbility* GetMeleeAttackAbility ( );
	unsigned char GetMovementType ( );
	unsigned char GetSchool ( );
	int GetBaseInitiative ( );
	void BeRevived ( unsigned long Value );
	bool CanBeRevived ( );
	class UH7UnitCoverManager* GetCoverManager ( );
	class UH7CombatMapPathfinder* GetPathfinder ( );
	bool UsesAmmo ( );
	bool IsRanged ( );
	class USkeletalMeshComponent* GetMeshComponent ( );
	float GetHeight ( );
	struct FVector GetHeightPos ( float Offset );
	float GetFXScale ( );
	struct FVector GetMeshCenter ( );
	void SetStackColor ( struct FColor Value );
	struct FColor GetStackColor ( );
	bool IsVisible ( );
	void ModifyMorale ( int toAdd );
	void ModifyLuck ( int toAdd );
	void ModifyAttack ( int toAdd );
	void ModifyDefense ( int toAdd );
	struct FString GetFlashIconPath ( );
	void SetSubstitutionMoraleAbility ( class UH7BaseAbility* Ability );
	void SetMovementType ( unsigned char Type );
	void SetBaseCreatureStack ( class UH7BaseCreatureStack* BaseStack );
	class UH7BaseCreatureStack* GetBaseCreatureStack ( );
	void OnDivingAttackFlyingFinished ( );
	void SetDivingAttackArea ( TArray< class UH7CombatMapCell* > area );
	TArray< class UH7CombatMapCell* > GetDivingAttackArea ( );
	int GetDamagePotential ( int StackSize );
	bool IsOffGrid ( );
	int GetMovementPoints ( );
	void SetMorale ( int moral );
	int GetMorale ( );
	void SetLuck ( int Luck );
	int GetLuck ( );
	void SetAmmo ( int Ammo );
	int GetAmmo ( );
	struct FIntPoint GetGridPosition ( );
	void SetGridPosition ( struct FIntPoint gp );
	int GetInitialStackSize ( );
	void SetInitialStackSize ( int Size );
	class AH7Creature* GetCreature ( );
	void SetCreature ( class AH7Creature* Creature );
	int GetStackSize ( );
	void SetStackSize ( int StackSize );
	void SetFakeDeathDelay ( float Seconds );
	bool GetSkipDeathAnim ( );
	void SetSkipDeathAnim ( unsigned long doSkip );
	bool IsSummoned ( );
	void SetIsSummoned ( unsigned long val );
	bool IsInStasis ( );
	bool HasMovedThisTurn ( );
	void SetMovedThisTurn ( unsigned long val );
	bool IsBeingTeleported ( );
	void SetIsBeingTeleported ( unsigned long val );
	bool IsAlliedPassable ( );
	void SetAlliedPassable ( unsigned long val );
	bool HasCoverFromEffects ( );
	void SetHasCoverFromEffects ( unsigned long val );
	bool HasDelayedCommand ( );
	void SetDelayedCommand ( class UH7Command* comm );
	bool ShouldRestoreRotationAfterTurn ( );
	void DoRestoreRotationAfterTurn ( );
};



// Class MMH7Game.H7EditorHero ( Property size: 104 iter: 310) 
// Class name index: 8856 
// 0x03EC (0x0968 - 0x057C)
class AH7EditorHero : public AH7Unit
{
public:
	struct FPointer                                    VfTable_IH7IThumbnailable;                        		// 0x057C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IOwnable;                              		// 0x0584 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IAliasable;                            		// 0x058C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7ILocaParamizable;                      		// 0x0594 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7EditorHero*                               mOriginArchetype;                                 		// 0x059C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     mTransientName;                                   		// 0x05A4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTexture2D*                                  mFactionSpecializationFrame;                      		// 0x05B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionBGHeroWindow;                             		// 0x05BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mImage;                                           		// 0x05C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mImageXOffset;                                    		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mImageYOffset;                                    		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      mColor;                                           		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroVisuals*                              mVisuals;                                         		// 0x05D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorWarUnit*                            mWarfareSiege;                                    		// 0x05E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroClass*                                mClass;                                           		// 0x05E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mOverrideHeroClassSkills : 1;                     		// 0x05F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mSaveHeroProgress : 1;                            		// 0x05F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mAiInHibernation : 1;                             		// 0x05F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mAiOnPatrol : 1;                                  		// 0x05F0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIsHero : 1;                                      		// 0x05F0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mIsPendingLevelUp : 1;                            		// 0x05F0 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FH7HeroSkill                                mPreLearnedSkills[ 0xA ];                         		// 0x05F4 (0x0118) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7HeroAbility*                              mStartingAbility;                                 		// 0x070C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Skill*                                    mStartSkills[ 0x2 ];                              		// 0x0714 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7HeroAbility* >                    mStartingSpellArchetypes;                         		// 0x0724 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7HeroEquipment*                            mEquipment;                                       		// 0x0734 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Inventory*                                mInventory;                                       		// 0x073C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7HeroBioData* >                    mHeroBioData;                                     		// 0x0744 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7EditorHero*                               mHeroPediaOverwrite;                              		// 0x0754 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMagic;                                           		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxManaBonus;                                    		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSpirit;                                          		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mLevel;                                           		// 0x0768 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxDeploymentNumber;                             		// 0x076C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxDeploymentRows;                               		// 0x0770 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCreatureStackProperties >          mHoHDefaultArmy;                                  		// 0x0774 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mAiControlType;                                   		// 0x0784 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAiAggressiveness;                                		// 0x0785 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAiPreferedRole;                                  		// 0x0786 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mAiRole;                                          		// 0x0787 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mScriptedBehaviour;                               		// 0x0788 (0x0001) [0x0000000000000000]              
	class AH7VisitableSite*                            mAiHomeSite;                                      		// 0x078C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mAiHomeRadius;                                    		// 0x0794 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7VisitableSite*                            mAiObjectiveSite;                                 		// 0x0798 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureArmy*                            mAiObjectiveArmy;                                 		// 0x07A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AiPatrolController*                       mAiPatrolController;                              		// 0x07A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAiRolePriority;                                  		// 0x07B0 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    mMountedAttackSound_Might;                        		// 0x07B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedRangeAttackSound_Might;                   		// 0x07BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedAbilitySound_Might;                       		// 0x07C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedDefeatSound_Might;                        		// 0x07CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedVictorySound_Might;                       		// 0x07D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedCommandSound_Might;                       		// 0x07DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStartMountedIdleSound_Might;                     		// 0x07E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEndMountedIdleSound_Might;                       		// 0x07EC (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mMountedAttackSound_Magic;                        		// 0x07F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedRangeAttackSound_Magic;                   		// 0x07FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedAbilitySound_Magic;                       		// 0x0804 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedDefeatSound_Magic;                        		// 0x080C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedVictorySound_Magic;                       		// 0x0814 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedCommandSound_Magic;                       		// 0x081C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStartMountedIdleSound_Magic;                     		// 0x0824 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEndMountedIdleSound_Magic;                       		// 0x082C (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mStartMountedRandomMoveSounds;                    		// 0x0834 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEndMountedRandomMoveSounds;                      		// 0x083C (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mStartShipRandomMoveSounds;                       		// 0x0844 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEndShipRandomMoveSounds;                         		// 0x084C (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mMountedTurnLeftSounds;                           		// 0x0854 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMountedTurnRightSounds;                          		// 0x085C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mLevelUpSounds;                                   		// 0x0864 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mCombatPopUpScreenStartSounds;                    		// 0x086C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEngageManuallySounds;                            		// 0x0874 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEngageQuickCombatSounds;                         		// 0x087C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mBoardShipSounds;                                 		// 0x0884 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mShipTurningSounds;                               		// 0x088C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStartShipIdleSounds;                             		// 0x0894 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEndShipIdleSounds;                               		// 0x089C (0x0008) [0x0000000000000000]              
	class UH7GlobalName*                               mGlobalName;                                      		// 0x08A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      mHeroSkeletalMesh;                                		// 0x08AC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        mWeaponMesh;                                      		// 0x08B4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mHorseSkeletalMesh;                               		// 0x08BC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AH7EditorHero*                               mCampaignTransitionHeroArchetype;                 		// 0x08C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroProgress*                             mXpProgress;                                      		// 0x08CC (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mOwningPlayer;                                    		// 0x08D4 (0x0008) [0x0000000000000000]              
	TArray< class UH7HeroAbility* >                    mQuickBarCombat;                                  		// 0x08DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mQuickBarAdventure;                               		// 0x08EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7HeroFX*                                   mFX;                                              		// 0x08FC (0x0008) [0x0000000000000000]              
	class AH7HeroAnimControl*                          mAnimControl;                                     		// 0x0904 (0x0008) [0x0000000000000000]              
	class UH7SkillManager*                             mSkillManager;                                    		// 0x090C (0x0008) [0x0000000000000000]              
	int                                                mXp;                                              		// 0x0914 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mSkillPoints;                                     		// 0x0918 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mCurrentMovementPoints;                           		// 0x091C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              mSaveMovementPoints;                              		// 0x0920 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mCurrentMana;                                     		// 0x0924 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mManaRegenBase;                                   		// 0x0928 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mBattleRage;                                      		// 0x092C (0x0004) [0x0000000000000000]              
	int                                                mMetamagic;                                       		// 0x0930 (0x0004) [0x0000000000000000]              
	int                                                mArcaneKnowledgeBase;                             		// 0x0934 (0x0004) [0x0000000000000000]              
	int                                                mMinDamagePerLevel;                               		// 0x0938 (0x0004) [0x0000000000000000]              
	int                                                mMaxDamagePerLevel;                               		// 0x093C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  mOverwriteIcon;                                   		// 0x0940 (0x0008) [0x0000000000000000]              
	class UH7BaseAbility*                              mCurrentPreviewAbility;                           		// 0x0948 (0x0008) [0x0000000000000000]              
	class UH7HeroEventParam*                           mHeroEventParam;                                  		// 0x0950 (0x0008) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         HeroMaterials;                                    		// 0x0958 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4070 ];

		return pClassPointer;
	};

	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void SetMovementAudioType ( );
	void EnableAdventureIdleBridge ( unsigned long val );
	void eventPlayHeroSound ( unsigned char tid, unsigned char sid );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	int GetCurrentXPForNextLevel ( );
	struct FString GetHPArchetypeID ( );
	void ClampCurrentMana ( );
	int GetClampedCurrentMana ( );
	class AH7EditorHero* CreateHero ( class AH7EditorArmy* Army, struct FName herotag, struct FVector heroLocation, unsigned long isAdventureHero, unsigned long onlyHero, unsigned long fromSave, class AH7EditorHero* oldHero );
	bool HasBuffFromAbility ( class UH7HeroAbility* Ability );
	void CheckQuickBar ( );
	void SetQuickBarSpells ( TArray< class UH7HeroAbility* > Spells, unsigned long combat );
	void AddItemBoniToDataObject ( class UH7GFxUIContainer* objectFactory, class UGFxObject** Data );
	void AddBuffsToDataObject ( class UH7GFxUIContainer* objectFactory, class UGFxObject** Data );
	struct FVector GetRelativeHeightPos ( float Offset );
	struct FVector GetHeightPos ( float Offset );
	struct FVector GetMeshCenter ( );
	void GetSpells ( TArray< class UH7HeroAbility* >* Spells );
	bool UseMovementPoints ( float Value );
	void UseMana ( int Value );
	unsigned char GetArcaneKnowledge ( );
	void eventDestroyed ( );
	void InitFX ( );
	void InvokeLevelUp ( );
	int AddXp ( int XP );
	void EndTurn ( );
	bool BeginTurn ( );
	void ClearHeroMeshData ( );
	void SpawnAnimControl ( );
	void SetMeshes ( class USkeletalMeshComponent* horseSkelMesh, class USkeletalMeshComponent* heroSkelMesh, class AH7EditorArmy* Army, struct FVector riderOffset );
	void LearnItemAbilities ( class UH7HeroItem* currentItem, unsigned long unlearnInstead );
	void SpendSkillPoint ( );
	void AddSkillPoint ( );
	void GetModifierByContainer ( unsigned char desiredStat, TArray< class UH7EffectContainer* > container, unsigned char checkForOperation1, unsigned char checkForOperation2, TArray< struct FH7MeModifiesStat >* statMods );
	void GetBoniFromItemSet ( unsigned char desiredStat, TArray< class UH7HeroItem* > container, unsigned char checkForOperation1, unsigned char checkForOperation2, TArray< struct FH7MeModifiesStat >* statMods );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char exclusiveFirstOT, unsigned char exclusiveSecondOT, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	void GetProductionEffects ( TArray< class UH7EffectSpecialAddResources* >* produc );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	void InitSkillsAndAbilities ( unsigned long fromSave );
	void AddMaxManaBonus ( int Amount );
	float AddMana ( int Amount );
	void RegenMana ( );
	void SetCurrentMana ( int Value );
	void SetBaseStatByID ( unsigned char desiredStat, int NewValue );
	void DecreaseBaseStatByID ( unsigned char desiredStat, int Amount );
	float IncreaseBaseStatByID ( unsigned char desiredStat, int Amount );
	float GetBaseStatByID ( unsigned char desiredStat );
	void SetEquipment ( class UH7HeroEquipment* equip );
	void Init ( unsigned long fromSave );
	void SetPreLearnedSkills ( struct FH7HeroSkill* preSkills );
	void SetStartingSpellArchetypes ( TArray< class UH7HeroAbility* > Abilities );
	void OverrideSkillManager ( class UH7SkillManager* manager );
	void eventOverrideBuffManager ( class UH7BuffManager* manager, class AH7EditorHero* Hero );
	void OverrideAbilityManager ( class UH7AbilityManager* manager );
	void SetHoHDefaultArmy ( TArray< struct FCreatureStackProperties > defaultArmy );
	struct FVector GetSocketLocation ( struct FName SocketName );
	float GetCurrentMovementPoints ( );
	float GetMoveCostForTerrainType ( class UH7AdventureLayerCellProperty* terrainArchetype, unsigned char MovementType );
	float GetManaCostForSpell ( class UH7HeroAbility* spell );
	void GetPreLearnedHeroSkills ( TArray< struct FH7HeroSkill >* PreLearnedSkills );
	void ClearScriptedBehaviour ( );
	TArray< class UH7BaseAbility* > GetAbilities ( );
	void SetVisuals ( class UH7HeroVisuals* Visuals );
	struct FColor GetColor ( );
	class UTexture2D* GetFactionAuraOuterDecalTexture ( );
	class UTexture2D* GetFactionAuraInnerDecalTexture ( );
	void UpdateOutline ( );
	class UH7HeroVisuals* GetVisuals ( );
	void GetDamageRangeBase ( int* minDamage, int* maxDamage );
	void DeleteImage ( );
	struct FString GetFlashImagePath ( );
	class UTexture2D* GetIcon ( );
	void eventSetIcon ( class UTexture2D* newIcon );
	bool IsMagicHero ( );
	bool IsMightHero ( );
	void SetCampaignTransitionHeroArchetype ( class AH7EditorHero* Hero );
	void SetArcangeKnowledgeBase ( int NewValue );
	void SetHeropediaOverwrite ( class AH7EditorHero* Hero );
	void SetSaveProgress ( unsigned long shouldSave );
	void SetStartSkills ( class UH7Skill** startSkills );
	void SetFactionSpecializationFrame ( class UTexture2D* Texture );
	void SetFactionBGHeroWindow ( class UTexture2D* Texture );
	void SetOriginArchetype ( class AH7EditorHero* Hero );
	void SetSiegeWarUnitTemplate ( class AH7EditorWarUnit* Unit );
	void SetSpecialization ( class UH7HeroAbility* Ability );
	void SetLevel ( int Level );
	void SetAiPreferedRole ( unsigned char nrole );
	void SetAiRolePriority ( int newPrio );
	void SetAiRole ( unsigned char nrole );
	void SetAiHomeRadius ( float Radius );
	void SetAiHomeSite ( class AH7VisitableSite* Site );
	void SetAiHibernationState ( unsigned long State );
	void SetAiAggressivness ( unsigned char ag );
	void SetAiControlType ( unsigned char ct );
	void SetManaRegeneration ( int regen );
	void SetSkillPoints ( int Points );
	void SetFaction ( class UH7Faction* Faction );
	void SetClass ( class UH7HeroClass* heroClass );
	void SetInventory ( class UH7Inventory* Inventory );
	void SetPlayer ( class AH7Player* Value );
	void SetMaxMovementPoints ( int Value );
	void SetCurrentMovementPoints ( float Value );
	void SetImageYOffset ( int val );
	void SetImageXOffset ( int val );
	void SetImage ( class UTexture2D* Image );
	void SetXp ( int XP );
	void SetDestiny ( int destiny );
	void SetLeadership ( int leadership );
	void SetTransientName ( struct FString localizedHeroName );
	void SetDefense ( int Defense );
	void SetMaximumDamage ( int maximumDamage );
	void SetMinimumDamage ( int minimumDamage );
	void SetBattleRage ( int battlerage );
	void SetAttack ( int Attack );
	void SetSpirit ( int Spirit );
	void SetMaxManaBonus ( int MaxManaBonus );
	void SetMagic ( int Magic );
	void SetInitiative ( int Initiative );
	class AH7EditorHero* GetHeropediaOverwrite ( );
	TArray< class UH7HeroBioData* > GetHeroBioData ( );
	class AH7EditorHero* GetSourceArchetype ( );
	int GetArcangeKnowlageBase ( );
	class AH7EditorHero* GetCampaignTransitionHeroArchetype ( );
	class AH7EditorHero* GetOriginArchetype ( );
	struct FString GetFactionSpecializationFrame ( );
	struct FString GetFactionBGHeroWindow ( );
	bool GetSaveProgress ( );
	class AH7HeroFX* GetHeroFX ( );
	unsigned char GetAiPreferedRole ( );
	int GetAiRolePriority ( );
	unsigned char GetAiRole ( );
	class AH7AdventureArmy* GetAiObjectiveArmy ( );
	class AH7VisitableSite* GetAiObjectiveSite ( );
	class AH7AiPatrolController* GetAiPatrolController ( );
	bool GetAiOnPatrol ( );
	float GetAiHomeRadius ( );
	class AH7VisitableSite* GetAiHomeSite ( );
	bool GetAiHibernationState ( );
	unsigned char GetAiAggressivness ( );
	unsigned char GetAiControlType ( );
	class UH7SkillManager* GetSkillManager ( );
	TArray< struct FCreatureStackProperties > GetHoHDefaultArmy ( );
	int GetSkillPoints ( );
	TArray< struct FH7ClassSkillData > GetSkillsArchetype ( );
	class UH7HeroAbility* GetSpecialization ( );
	class AH7EditorWarUnit* GetSiegeWarUnitTemplate ( );
	class UH7HeroClass* GetHeroClass ( );
	int GetLvl30XPNeeded ( );
	int GetExperiencePoints ( );
	int GetLevel ( );
	int GetManaRegen ( );
	int GetMaxMana ( );
	int GetCurrentMana ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	int GetMaximumDamagePerLevel ( );
	int GetMinimumDamagePerLevel ( );
	int GetMaxDeploymentNumber ( );
	int GetMaxDeploymentRow ( );
	int GetMetamagic ( );
	int GetBattleRage ( );
	float GetDiplomacyMod ( );
	int GetArcaneKnowledgeAsInt ( );
	int GetSpirit ( );
	int GetMagic ( );
	int GetMaxManaBonus ( );
	int GetMaxManaBase ( );
	int GetArcaneKnowledgeBaseAsInt ( );
	int GetMaximumDamageBase ( );
	int GetMinimumDamageBase ( );
	int GetManaRegenBase ( );
	int GetSpiritBase ( );
	int GetMagicBase ( );
	int GetDefenseBase ( );
	int GetAttackBase ( );
	bool GetIsScripted ( );
	void SetScriptedBehaviour ( unsigned char Value );
	void SetOverrideHeroClass ( unsigned long val );
	bool GetIsOverrideHeroClass ( );
	int GetLevelXPRange ( int Level );
	int GetNextLevelXp ( );
	int GetPrevLevelXp ( );
	struct FString GetFlashMinimapPath ( );
	TArray< class UH7HeroAbility* > GetQuickBarSpells ( unsigned long combat );
	class UH7Inventory* GetInventory ( );
	class UH7HeroEquipment* GetEquipment ( );
	class AH7Player* GetPlayer ( );
	unsigned char GetAttackRange ( );
	struct FString GetName ( );
	void RestoreSavedMovementPoints ( );
	bool HasPendingLevelUp ( );
	void SetPendingLevelUp ( unsigned long B );
	void SetCurrentPreviewAbility ( class UH7BaseAbility* ab );
	struct FVector GetHorseRiderOffset ( );
	class AH7HeroAnimControl* GetAnimControl ( );
	bool IsHero ( );
	void SetIsHero ( unsigned long Value );
	struct FString GetArchetypeID ( );
	unsigned char GetEntityType ( );
	int GetAmountOfWarcries ( );
	int GetQuickCombatSubstituteImpact ( unsigned char Substitute );
};



// Class MMH7Game.H7AdventureHero ( Property size: 16 iter: 89) 
// Class name index: 8858 
// 0x0060 (0x09C8 - 0x0968)
class AH7AdventureHero : public AH7EditorHero
{
public:
	class AH7CreatureStackMovementControl*             mMoveControl;                                     		// 0x0968 (0x0008) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mCurrentPath;                                     		// 0x0970 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7AdventureMapCell*                         mLastCellMovement;                                		// 0x0980 (0x0008) [0x0000000000000000]              
	int                                                mScoutingRadius;                                  		// 0x0988 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mTerrainCostModifier;                             		// 0x098C (0x0004) [0x0000000000000000]              
	unsigned long                                      mCanScout : 1;                                    		// 0x0990 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsAlliedWithEverybody : 1;                       		// 0x0990 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mHasFinishedCurrentTurn : 1;                      		// 0x0990 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mHasCastedSpellThisTurn : 1;                      		// 0x0990 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mHasTearOfAsha : 1;                               		// 0x0990 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< class UH7BaseAbility* >                    mGovernorAbilities;                               		// 0x0994 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Town*                                     mGovernedTown;                                    		// 0x09A4 (0x0008) [0x0000000000000000]              
	class AH7VisitableSite*                            mAiClaimedSite;                                   		// 0x09AC (0x0008) [0x0000000000000000]              
	class UH7AiActionBase*                             mAiLastScoreAction;                               		// 0x09B4 (0x0008) [0x0000000000000000]              
	class UH7AiActionParam*                            mAiLastScoreParams;                               		// 0x09BC (0x0008) [0x0000000000000000]              
	int                                                mAiLastScoreActionCounter;                        		// 0x09C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4072 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void DumpCurrentState ( );
	void DelayedTearOfAshaRevealMessageFail ( );
	void DelayedTearOfAshaRevealMessageSuccess ( );
	void SetBaseStatByID ( unsigned char desiredStat, int NewValue );
	void DecreaseBaseStatByID ( unsigned char desiredStat, int Amount );
	float IncreaseBaseStatByID ( unsigned char desiredStat, int Amount );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void RestoreSavedPath ( struct FSavegameHeroStruct SaveGameData );
	void RestoreState ( struct FSavegameHeroStruct SaveGameData );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	void DebugLogSelf ( );
	class AH7CombatHero* Convert ( class AH7CombatArmy* Army, struct FName herotag, struct FVector heroLocation, struct FRotator heroRotation );
	void UpdateSpells ( );
	bool UpdatePath ( );
	void RotateHero ( int targetYaw );
	void MoveHero ( TArray< class UH7BaseCell* > Path, class AH7Unit* targetUnit, unsigned long followCam );
	void UpdateSelectionFX ( );
	class AH7HeroFX* GetSelectionFX ( );
	void Select ( unsigned long doSelect, unsigned long doFocus );
	bool IsGovernourOfTown ( );
	void StopMoving ( );
	void EndMoving ( unsigned long ignoreTargetNotReachedMessage );
	bool IsMoving ( );
	void eventAssignMaterials ( );
	void DestroyTearOfAsha ( );
	void SetHasTearOfAsha ( unsigned long val );
	bool HasTearOfAsha ( );
	void RemoveGovernorAbility ( class UH7BaseAbility* Ability );
	void AddGovernorAbility ( class UH7BaseAbility* newAbility );
	TArray< class UH7BaseAbility* > GetGovernorAbilities ( );
	bool HasGovernorEffect ( );
	void SetDead ( unsigned long unequipItems );
	void Init ( unsigned long fromSave );
	void ForceReapplyPlayerChanged ( );
	void RecalculateAggressiveness ( );
	void SetPlayer ( class AH7Player* NewPlayer );
	class UH7HeroAbility* QuerySpellInstantRecall ( );
	void SetAiLastScoreActionCounter ( int ap );
	int GetAiLastScoreActionCounter ( );
	void SetAiLastScoreParam ( class UH7AiActionParam* ap );
	class UH7AiActionParam* GetAiLastScoreParam ( );
	void SetAiLastScoreAction ( class UH7AiActionBase* ab );
	class UH7AiActionBase* GetAiLastScoreAction ( );
	void SetCastedSpellThisTurn ( unsigned long hasCasted );
	bool HasCastedSpellThisTurn ( );
	void SetFinishedCurrentTurn ( unsigned long hasFinished );
	bool HasFinishedCurrentTurn ( );
	bool IsAlliedWithEverybody ( );
	void SetIsAlliedWithEverybody ( unsigned long val );
	bool CanScout ( );
	void SetCanScout ( unsigned long val );
	class AH7CreatureStackMovementControl* GetMoveControl ( );
	float GetTerrainCostModifierBase ( );
	float GetTerrainCostModifier ( );
	bool IsAttacker ( );
	int GetScoutingRadiusBase ( );
	int GetScoutingRadius ( );
	void SetScoutingRadius ( int NewRadius );
	void SetCurrentPath ( TArray< class UH7AdventureMapCell* > newPath );
	void SetLastCellMovement ( class UH7AdventureMapCell* newCell );
	class UH7AdventureMapCell* GetLastCellMovement ( );
	TArray< class UH7AdventureMapCell* > GetCurrentPath ( );
	class UH7AdventureMapCell* GetCell ( );
	struct FIntPoint GetGridPosition ( );
	class AH7Town* GetGovernedTown ( );
	void SetGovernedTown ( class AH7Town* Town );
	class AH7VisitableSite* GetClaimedSite ( );
	void SetClaimedSite ( class AH7VisitableSite* Site );
};



// Class MMH7Game.H7CombatHero ( Property size: 1 iter: 13) 
// Class name index: 8860 
// 0x0004 (0x096C - 0x0968)
class AH7CombatHero : public AH7EditorHero
{
public:
	unsigned long                                      mHasDataChanged : 1;                              		// 0x0968 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4074 ];

		return pClassPointer;
	};

	void DebugLogSelf ( );
	void ResetHasDataChanged ( );
	bool HasDataChanged ( );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	float AddMana ( int Amount );
	void RegenMana ( );
	void Think ( );
	void CreateGUIOverlay ( );
	void AssignMaterials ( );
	void Init ( unsigned long fromSave );
};



// Class MMH7Game.H7EditorWarUnit ( Property size: 13 iter: 36) 
// Class name index: 8862 
// 0x0068 (0x05E4 - 0x057C)
class AH7EditorWarUnit : public AH7Unit
{
public:
	struct FString                                     mDesc;                                            		// 0x057C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      mWarUnitClass;                                    		// 0x058C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mDefaultAttackAbility;                            		// 0x0590 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mDefaultAbility;                                  		// 0x0598 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mDefaultWaitAbility;                              		// 0x05A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mDefaultSupportAbility;                           		// 0x05A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseAbility*                              mSkipAbility;                                     		// 0x05B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mHitpoints;                                       		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7WarfareVisuals*                           mVisuals;                                         		// 0x05BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorWarUnit*                            mTemplate;                                        		// 0x05C4 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mGetHitSound;                                     		// 0x05CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mGetDamageSound;                                  		// 0x05D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      mSkeletalMeshAura;                                		// 0x05DC (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4076 ];

		return pClassPointer;
	};

	bool CanPlayerAffordWarUnit ( class AH7Player* Player );
	class AH7WarUnit* CreateWarUnit ( class AH7EditorArmy* unitArmy, struct FName unitTag, struct FRotator unitRotation, class AH7EditorWarUnit* Template );
	class UH7WarfareVisuals* GetVisuals ( );
	void UnloadVisuals ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	unsigned char GetSchool ( );
	int GetMovementPoints ( );
	int GetInitiative ( );
	int GetLeadership ( );
	int GetDestiny ( );
	int GetDefense ( );
	int GetAttack ( );
	unsigned char GetMovementType ( );
	unsigned char GetAttackRange ( );
	int GetHitPoints ( );
	class UH7Faction* GetFaction ( );
	TArray< struct FH7ResourceQuantity > GetUnitCost ( );
	unsigned char GetWarUnitClass ( );
	struct FString GetDesc ( );
	struct FString GetName ( );
	class UH7BaseAbility* GetDefaultAttackAbility ( );
	class UH7BaseAbility* GetDefaultSupportAbility ( );
};



// Class MMH7Game.H7TowerUnit ( Property size: 8 iter: 31) 
// Class name index: 8864 
// 0x0054 (0x05D0 - 0x057C)
class AH7TowerUnit : public AH7Unit
{
public:
	struct FVector                                     mProjectileStartPos;                              		// 0x057C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mTowerShootingSound;                              		// 0x0588 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapGridController*                  mCombatGridController;                            		// 0x0590 (0x0008) [0x0000000000000000]              
	class AH7CombatController*                         mCombatController;                                		// 0x0598 (0x0008) [0x0000000000000000]              
	class UH7CombatMapCell*                            mCell;                                            		// 0x05A0 (0x0008) [0x0000000000000000]              
	class AH7CombatMapTower*                           mTowerObstacle;                                   		// 0x05A8 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFaceTargetFinishedFunc__Delegate;             		// 0x05B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x05B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnShootFunc__Delegate;                          		// 0x05C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x05C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4078 ];

		return pClassPointer;
	};

	bool IsIdling ( );
	float GetAnimTimeLeft ( );
	void SwitchToIdle ( );
	void PlayShootAnim ( struct FScriptDelegate onShoot );
	void FaceTarget ( class AH7Unit* targetUnit, struct FScriptDelegate onFaceTargetFinished );
	void OnShootFunc ( );
	void OnFaceTargetFinishedFunc ( );
	struct FVector GetSocketLocation ( struct FName SocketName );
	void DebugLogSelf ( );
	bool BeginTurn ( );
	void Init ( unsigned long fromSave );
	void SetTowerObstacle ( class AH7CombatMapTower* towerObstacle );
	class UH7CombatMapCell* GetCell ( );
	void SetCell ( class UH7CombatMapCell* cell );
	bool IsControlledByAI ( );
	int GetCurrentHitPoints ( );
	int GetHitPoints ( );
	int GetInitialStackSize ( );
	int GetStackSize ( );
	unsigned char GetMovementType ( );
	unsigned char GetAttackRange ( );
	unsigned char GetSchool ( );
	unsigned char GetEntityType ( );
};



// Class MMH7Game.H7WarUnit ( Property size: 30 iter: 125) 
// Class name index: 8866 
// 0x00F4 (0x0670 - 0x057C)
class AH7WarUnit : public AH7Unit
{
public:
	int                                                mCurrentHitpoints;                                		// 0x057C (0x0004) [0x0000000000000000]              
	int                                                mHitpoints;                                       		// 0x0580 (0x0004) [0x0000000000000000]              
	int                                                mBaseAttack;                                      		// 0x0584 (0x0004) [0x0000000000000000]              
	int                                                mBaseDefense;                                     		// 0x0588 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsHovering : 1;                                  		// 0x058C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mAIControlled : 1;                                		// 0x058C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      mWarUnitClass;                                    		// 0x0590 (0x0001) [0x0000000000000000]              
	unsigned char                                      mOrientedAttackAnimId;                            		// 0x0591 (0x0001) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mCombatGridController;                            		// 0x0594 (0x0008) [0x0000000000000000]              
	class AH7CombatController*                         mCombatController;                                		// 0x059C (0x0008) [0x0000000000000000]              
	TArray< struct FH7DeathMaterialEffect >            mDeathMaterialFX;                                 		// 0x05A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7DeathMaterialEffect >            CurrentDeathMaterialEffects;                      		// 0x05B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7WarUnitFX*                                mFX;                                              		// 0x05C4 (0x0008) [0x0000000000000000]              
	class AH7WarUnitAnimControl*                       mAnimControl;                                     		// 0x05CC (0x0008) [0x0000000000000000]              
	TArray< struct FH7WarfareEvent >                   mAnimControlEvents;                               		// 0x05D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      mSkeletalMesh;                                    		// 0x05E4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mAimingSkeletalMesh;                              		// 0x05EC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mSkeletalMeshAura;                                		// 0x05F4 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x05FC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         mWarUnitMaterials;                                		// 0x0604 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAkEvent*                                    mDamageSoundEvent;                                		// 0x0614 (0x0008) [0x0000000000000000]              
	class UAkEvent*                                    mHitSoundEvent;                                   		// 0x061C (0x0008) [0x0000000000000000]              
	class UH7BaseAbility*                              mDefaultWarfareAbility;                           		// 0x0624 (0x0008) [0x0000000000000000]              
	class UH7BaseAbility*                              mDefaultWarfareSupportAbility;                    		// 0x062C (0x0008) [0x0000000000000000]              
	class UH7BaseAbility*                              mSkipAbility;                                     		// 0x0634 (0x0008) [0x0000000000000000]              
	struct FVector                                     mTargetLocation;                                  		// 0x063C (0x000C) [0x0000000000000000]              
	struct FRotator                                    mStartRot;                                        		// 0x0648 (0x000C) [0x0000000000000000]              
	float                                              mAimingTime;                                      		// 0x0654 (0x0004) [0x0000000000000000]              
	class AH7EditorWarUnit*                            mTemplate;                                        		// 0x0658 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFaceTargetObstacleFinishedFunc__Delegate;     		// 0x0660 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0664 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4080 ];

		return pClassPointer;
	};

	struct FVector GetFloatingTextLocation ( );
	float GetHeight ( );
	void eventTick ( float DeltaTime );
	void DebugLogSelf ( );
	void InitFX ( );
	void EndTurn ( );
	bool BeginTurn ( );
	void FaceTargetObstacle ( class UH7IEffectTargetable* Target, struct FScriptDelegate onFaceTargetObstacleFinished );
	void OnFaceTargetObstacleFinishedFunc ( );
	unsigned char GetOrientedAttackAnimFromAim ( float Aim );
	float GetOrientationToTarget ( class UH7IEffectTargetable* Target );
	struct FVector GetMeshCenter ( );
	void SetMeshes ( class USkeletalMeshComponent* SkelMesh, class USkeletalMeshComponent* AimingSkelMesh );
	void SetDeathMaterialEffects ( TArray< struct FH7DeathMaterialEffect > deathFX );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void GetDamageResult ( int dmg, int* currentHealth );
	void SetDestroyed ( );
	void PlayDeathMaterialEffects ( unsigned long undo );
	void PlayDeathEffect ( );
	void ApplyDamage ( class UH7CombatResult* Result, int resultIdx, unsigned long isForecast, unsigned long isRetaliation, unsigned long raiseEvent );
	void GetModifiersByID ( unsigned char desiredStat, unsigned char exclusiveFirstOT, unsigned char exclusiveSecondOT, unsigned long nextRound, TArray< struct FH7MeModifiesStat >* outStats );
	void DeHighlightWarfareUnit ( );
	void HighlightWarfareUnit ( );
	void HideSlotFX ( class UH7CombatMapCell* myCell );
	void ShowSlotFXDeadAlly ( class UH7CombatMapCell* myCell );
	void ShowSlotFXAlly ( class UH7CombatMapCell* myCell );
	void ShowSlotFXEnemy ( class UH7CombatMapCell* myCell );
	void ShowSlotFXActive ( class UH7CombatMapCell* myCell );
	void TurnChanged ( );
	void UpdateAbilitySlotFX ( class UH7CombatMapCell* myCell, class UH7BaseAbility* preparedAbility );
	void UpdateSlotFX ( );
	void RecalculatePostAnimInput ( );
	void PrepareDefaultAbility ( );
	void ReplaceAttackAbility ( class UH7BaseAbility* A );
	void ReplaceDefaultAbility ( class UH7BaseAbility* A );
	void ReplaceSupportAbility ( class UH7BaseAbility* A );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
	int GetMaximumDamageBase ( );
	int GetMinimumDamageBase ( );
	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	void doSkip ( );
	class UH7BaseAbility* GetSkipTurnAbility ( );
	void Init ( unsigned long fromSave );
	struct FString GetName ( );
	struct FVector GetSocketLocation ( struct FName SocketName );
	bool IsDead ( );
	void SetGetHitSoundEvent ( class UAkEvent* Sound );
	void SetDamageSoundEvent ( class UAkEvent* Sound );
	void SetBaseDefense ( int Defense );
	void SetBaseAttack ( int Attack );
	void SetSkipAbility ( class UH7BaseAbility* Ability );
	void SetRangedAttackAbility ( class UH7BaseAbility* Ability );
	void SetSupportAbility ( class UH7BaseAbility* A );
	void SetDefaultAbility ( class UH7BaseAbility* A );
	void SetDamage ( int minDmg, int maxDmg );
	int GetMovementPoints ( );
	int GetUnitBaseSizeInt ( );
	unsigned char GetUnitBaseSize ( );
	class UH7BaseAbility* GetSkipAbility ( );
	class UH7BaseAbility* GetDefaultAbility ( );
	class UH7BaseAbility* GetSupportAbility ( );
	int GetCurrentHitPoints ( );
	void SetCurrentHitPoints ( int NewValue );
	int GetHitPoints ( );
	void SetHitPointsBase ( int hp );
	int GetHitPointsBase ( );
	int GetInitialStackSize ( );
	int GetStackSize ( );
	unsigned char GetMovementType ( );
	unsigned char GetAttackRange ( );
	unsigned char GetSchool ( );
	int GetBaseDefense ( );
	int GetBaseAttack ( );
	class UTexture2D* GetIcon ( );
	bool IsControlledByAI ( );
	void SetTemplate ( class AH7EditorWarUnit* Template );
	class AH7EditorWarUnit* GetTemplate ( );
	bool HasFullAction ( );
	void SetAnimEvents ( TArray< struct FH7WarfareEvent > E );
	unsigned char GetOrientedAttackAnimId ( );
	class AH7WarUnitAnimControl* GetAnimControl ( );
	void SetIcon ( class UTexture2D* Icon );
	void SetFaction ( class UH7Faction* Faction );
	void SetWarUnitClass ( unsigned char C );
	unsigned char GetWarUnitClass ( );
	void SetAIControled ( unsigned long B );
	unsigned char GetEntityType ( );
	class UH7CombatMapCell* GetCell ( );
	struct FIntPoint GetGridPosition ( );
	void SetGridPosition ( struct FIntPoint gp );
};



// Class MMH7Game.H7UnitCoverManager ( Property size: 5 iter: 15) 
// Class name index: 8868 
// 0x003C (0x009C - 0x0060)
class UH7UnitCoverManager : public UObject
{
public:
	class AH7CreatureStack*                            mOwner;                                           		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mCoverCells;                                      		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           mCoverLines;                                      		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     mLinesOrigin;                                     		// 0x0088 (0x000C) [0x0000000000000000]              
	class UH7CombatMapCell*                            mCellLastUpdate;                                  		// 0x0094 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4082 ];

		return pClassPointer;
	};

	float eventGetRDiff ( struct FRotator A, struct FRotator B );
	void UpdatedLinesOrigin ( TArray< class UH7CombatMapCell* > Cells );
	void UpdateCoverCells ( class UH7CombatMapCell* ownerCell );
	bool HasClearShot ( TArray< class UH7CombatMapCell* > attackerCells, TArray< class UH7CombatMapCell* > coveredCells, class UH7CombatMapCell* defenderCell );
	bool isInCover ( TArray< class UH7CombatMapCell* > attackerCells, TArray< class UH7CombatMapCell* > coveredCells, class UH7CombatMapCell* defenderCell );
	TArray< class UH7CombatMapCell* > GetCoverCells ( class UH7CombatMapCell* ownerCell );
	void Init ( class AH7CreatureStack* Owner );
	class AH7CreatureStack* GetOwner ( );
	struct FVector GetLinesOrigin ( );
	TArray< struct FVector > GetCoverLines ( );
};



// Class MMH7Game.H7UnitFX ( Property size: 5 iter: 14) 
// Class name index: 8870 
// 0x0024 (0x0264 - 0x0240)
class AH7UnitFX : public AActor
{
public:
	class UH7UnitSlotFXProperties*                     mProperties;                                      		// 0x0240 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mUnit;                                            		// 0x0248 (0x0008) [0x0000000000000000]              
	class AH7PlayerController*                         mPlayerController;                                		// 0x0250 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    mSelectionFX;                                     		// 0x0258 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      mIsActive : 1;                                    		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4084 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void UpdateTargetColor ( struct FColor targetColor );
	void HideFX ( );
	void ShowFX ( );
	void DestroyFX ( );
	void CreateFX ( );
	void InitFX ( class AH7Unit* Unit );
	void PostBeginPlay ( );
	class UH7UnitSlotFXProperties* GetProperties ( );
};



// Class MMH7Game.H7HeroFX ( Property size: 2 iter: 12) 
// Class name index: 8872 
// 0x000C (0x0270 - 0x0264)
class AH7HeroFX : public AH7UnitFX
{
public:
	class ADecalActorSpawnable*                        mDecalFXActor;                                    		// 0x0264 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsDecalHidden : 1;                               		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4086 ];

		return pClassPointer;
	};

	void UpdateTargetColor ( struct FColor targetColor );
	void UpdateFXPosition ( );
	void eventDestroyed ( );
	void ShowDecalFX ( );
	void HideDecalFX ( );
	void HideFX ( );
	void ShowFX ( );
	void CreateFX ( );
	void eventInitFX ( class AH7Unit* Unit );
	bool IsDecalHidden ( );
};



// Class MMH7Game.H7UPlayTask ( Property size: 3 iter: 6) 
// Class name index: 8874 
// 0x0010 (0x0070 - 0x0060)
class UH7UPlayTask : public UObject
{
public:
	int                                                mUID;                                             		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      mTaskSucceeded : 1;                               		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    mUPlayOverlapOperation;                           		// 0x0068 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4088 ];

		return pClassPointer;
	};

	bool UpdateStatus ( );
	int GetUID ( );
	void SetUID ( int newUID );
};



// Class MMH7Game.H7AchievementTask ( Property size: 0 iter: 1) 
// Class name index: 8876 
// 0x0000 (0x0070 - 0x0070)
class UH7AchievementTask : public UH7UPlayTask
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4090 ];

		return pClassPointer;
	};

	bool EarchAchievement ( int achievementUID );
};



// Class MMH7Game.H7ActionTask ( Property size: 2 iter: 6) 
// Class name index: 8878 
// 0x000C (0x007C - 0x0070)
class UH7ActionTask : public UH7UPlayTask
{
public:
	unsigned long                                      mIsSyncing : 1;                                   		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    mUPlayActions;                                    		// 0x0074 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4092 ];

		return pClassPointer;
	};

	void SynchronizeActionsCompleted ( );
	bool SynchronizeActions ( );
	bool EarnAction ( int actionUID, unsigned long showPopup );
	bool UpdateStatus ( );
};



// Class MMH7Game.H7RewardTask ( Property size: 2 iter: 5) 
// Class name index: 8880 
// 0x0018 (0x0088 - 0x0070)
class UH7RewardTask : public UH7UPlayTask
{
public:
	TArray< struct FString >                           mUnlockedRewards;                                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    mUPlayRewards;                                    		// 0x0080 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4094 ];

		return pClassPointer;
	};

	void PullUnlockedRewardsCompleted ( );
	bool PullUnlockedRewards ( );
	bool UpdateStatus ( );
};



// Class MMH7Game.H7WalkableInterface ( Property size: 0 iter: 2) 
// Class name index: 8882 
// 0x0000 (0x0060 - 0x0060)
class UH7WalkableInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4096 ];

		return pClassPointer;
	};

	class UH7AdventureLayerCellProperty* GetScanOverrideModifier ( );
	class UPrimitiveComponent* GetScanOverrideCollider ( );
};



// Class MMH7Game.H7WalkableObject ( Property size: 6 iter: 12) 
// Class name index: 8884 
// 0x002F (0x027C - 0x024D)
class AH7WalkableObject : public AStaticMeshActor
{
public:
	struct FPointer                                    VfTable_IH7WalkableInterface;                     		// 0x0250 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IHideable;                             		// 0x0258 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IH7IThumbnailable;                        		// 0x0260 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UPrimitiveComponent*                         ScanOverride_Collider;                            		// 0x0268 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UH7AdventureLayerCellProperty*               ScanOverride_LayerCellModifier;                   		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsHidden : 1;                                    		// 0x0278 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4098 ];

		return pClassPointer;
	};

	void eventPostSerialize ( );
	void Reveal ( );
	void Hide ( );
	bool IsHiddenX ( );
	class UH7AdventureLayerCellProperty* GetScanOverrideModifier ( );
	class UPrimitiveComponent* GetScanOverrideCollider ( );
};



// Class MMH7Game.H7WeekManager ( Property size: 9 iter: 19) 
// Class name index: 8886 
// 0x006C (0x00CC - 0x0060)
class UH7WeekManager : public UObject
{
public:
	TArray< struct FString >                           mAvailableWeeks;                                  		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Week*                                     mCurrentWeek;                                     		// 0x0070 (0x0008) [0x0000000000000000]              
	class UH7Week*                                     mDefaultWeek;                                     		// 0x0078 (0x0008) [0x0000000000000000]              
	class UH7Week*                                     mUpcomingWeek;                                    		// 0x0080 (0x0008) [0x0000000000000000]              
	int                                                mDelay;                                           		// 0x0088 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           mPreviousWeeks;                                   		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mCurrentWeekRef;                                  		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mUpcomingWeekRef;                                 		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mDefaultWeekRef;                                  		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4100 ];

		return pClassPointer;
	};

	void Deserialize ( class UJsonObject* Data );
	void eventPostSerialize ( );
	class UJsonObject* Serialize ( );
	void NextWeek ( );
	void UpdatePreviousWeeks ( );
	void UpdateWeekEvents ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	class UH7Week* PickNewWeek ( unsigned long isDefaultWeek, struct FString defaultWeekClass );
	void Init ( TArray< struct FString > availableWeeks, struct FString defaultStartingWeek );
	class UH7Week* GetUpcomingWeek ( );
	class UH7Week* GetCurrentWeek ( );
};



// Class MMH7Game.H7PlayerController ( Property size: 66 iter: 271) 
// Class name index: 8888 
// 0x00C8 (0x0864 - 0x079C)
class AH7PlayerController : public ASaveGameStatePlayerController
{
public:
	unsigned long                                      mRetroFilter : 1;                                 		// 0x079C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      mAlwaysQuickCombat : 1;                           		// 0x079C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      mIsAutoSkilling : 1;                              		// 0x079C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      IsPanningMouse : 1;                               		// 0x079C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsInverted : 1;                                   		// 0x079C (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      mBorderPan : 1;                                   		// 0x079C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      MouseWheelForward : 1;                            		// 0x079C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      MouseWheelBackward : 1;                           		// 0x079C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mHUDMouseOver : 1;                                		// 0x079C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mSkipNextCursorChange : 1;                        		// 0x079C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mPopupIsOpen : 1;                                 		// 0x079C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mCameraActionIsRunning : 1;                       		// 0x079C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mAllowInput : 1;                                  		// 0x079C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      mAllowInputFromKismet : 1;                        		// 0x079C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      mMouseWheelCapturedByFlash : 1;                   		// 0x079C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      mCursorWasInit : 1;                               		// 0x079C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      mIsCaravanTurn : 1;                               		// 0x079C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      mIsCommandRequested : 1;                          		// 0x079C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      mIsInLoadingScreen : 1;                           		// 0x079C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      mShiftDown : 1;                                   		// 0x079C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      MouseRotationAllowed : 1;                         		// 0x079C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      mIsMouseMoving : 1;                               		// 0x079C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      mIsInCinematicView : 1;                           		// 0x079C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      mHideCursor : 1;                                  		// 0x079C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      mIsFlythroughRunning : 1;                         		// 0x079C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      mIsPlayInEditor : 1;                              		// 0x079C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      mBufferedCommandResolution : 1;                   		// 0x079C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      mBufferedCommandWindowMode : 1;                   		// 0x079C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      mWasCinematicRunning : 1;                         		// 0x079C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      mCinematicWasSkipped : 1;                         		// 0x079C (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      mDidToggle : 1;                                   		// 0x079C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      mGameStarted : 1;                                 		// 0x079C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      mShowUnreachableServers : 1;                      		// 0x07A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	struct FString                                     mActiveProfile;                                   		// 0x07A4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      IsPanningUp;                                      		// 0x07B4 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      IsPanningDown;                                    		// 0x07B5 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      IsPanningLeft;                                    		// 0x07B6 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      IsPanningRight;                                   		// 0x07B7 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      mBeforeSaveWindowMode;                            		// 0x07B8 (0x0001) [0x0000000000000000]              
	unsigned char                                      mBufferedCommandWindowMode_Params;                		// 0x07B9 (0x0001) [0x0000000000000000]              
	float                                              PanningMouseSensitivity;                          		// 0x07BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GeneralPanningSensitivity;                        		// 0x07C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseRotatingSensitivity;                         		// 0x07C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeyboardRotatingSensitivity;                      		// 0x07C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeyboardPanningSensitivity;                       		// 0x07CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   StartPanPosition;                                 		// 0x07D0 (0x0008) [0x0000000000000000]              
	int                                                MousePanningCache;                                		// 0x07D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseWheelHoldTimer;                              		// 0x07DC (0x0004) [0x0000000000000000]              
	struct FRotator                                    mCursorDirection;                                 		// 0x07E0 (0x000C) [0x0000000000000000]              
	int                                                mHUDMouseOverCounter;                             		// 0x07EC (0x0004) [0x0000000000000000]              
	float                                              MouseX;                                           		// 0x07F0 (0x0004) [0x0000000000000000]              
	float                                              MouseY;                                           		// 0x07F4 (0x0004) [0x0000000000000000]              
	float                                              mCacheGameSpeed;                                  		// 0x07F8 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   mLastMousePosition;                               		// 0x07FC (0x0008) [0x0000000000000000]              
	class UH7MessageSystem*                            mMessageSystem;                                   		// 0x0804 (0x0008) [0x0000000000000000]              
	class UH7OptionsManager*                           mOptionManager;                                   		// 0x080C (0x0008) [0x0000000000000000]              
	class UH7KeybindManager*                           mKeybindManager;                                  		// 0x0814 (0x0008) [0x0000000000000000]              
	class UH7PatchingController*                       mPatchingController;                              		// 0x081C (0x0008) [0x0000000000000000]              
	class UH7TownAssetLoader*                          mTownAssetLoader;                                 		// 0x0824 (0x0008) [0x0000000000000000]              
	struct FVector                                     mCurrMoveDir;                                     		// 0x082C (0x000C) [0x0000000000000000]              
	struct FIntPoint                                   mBeforeSaveResolution;                            		// 0x0838 (0x0008) [0x0000000000000000]              
	struct FIntPoint                                   mBufferedCommandResolution_Params;                		// 0x0840 (0x0008) [0x0000000000000000]              
	float                                              mCinematicTime;                                   		// 0x0848 (0x0004) [0x0000000000000000]              
	int                                                mMovieSkippedLastFrame;                           		// 0x084C (0x0004) [0x0000000000000000]              
	int                                                mResolutionRevertSeconds;                         		// 0x0850 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnDestroySessionComplete__Delegate;             		// 0x0854 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0858 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4102 ];

		return pClassPointer;
	};

	void ResetOptions ( );
	void DebugChangeFPS ( float newFPS );
	void ResetAllSteamworksStatsAndAchievements ( );
	void H7UpdateAllComponents ( );
	void H7UpdateLandscapeComponents ( );
	void Nouplay ( );
	void UnlockAllRewards ( );
	void CleanMovie ( );
	void DumpTweens ( );
	void PrintProfile ( );
	void SimTurnsClearCombat ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	void FOV ( float F );
	void ResetCutsceneFlags ( );
	void SetCinematicVisibilities ( unsigned long newCinematicView );
	void SetFlagVisibility ( unsigned long Hidden );
	void SetCinematicControls ( unsigned long newCinematicView );
	void toggleCinematicView ( unsigned long newCinematicView );
	void SetFlythroughRunning ( unsigned long val, unsigned long ToggleHUD, unsigned long toggleCinematic, unsigned long toggleFog );
	void ToggleFlythrough ( unsigned long val, unsigned long ToggleHUD, unsigned long toggleCinematicView, unsigned long toggleFog );
	void ClientLobbyStartGame ( int* Positions, int* sharedPrivileges );
	void SendLobbyStartGame ( int mapMaxPlayers );
	void eventClientWasKicked ( );
	void ClientLobbyChat ( struct FString PlayerName, struct FString chatText, unsigned char Channel );
	void ServerLobbyChat ( struct FString PlayerName, struct FString chatText, unsigned char Channel );
	void ClientLobbySystemChat ( struct FString PlayerName, struct FString locaKey );
	void SendLobbySystemChat ( struct FString PlayerName, struct FString locaKey, unsigned char Channel );
	void SendLobbyChat ( struct FString chatText, unsigned char Channel );
	void ServerLobbySetPlayerReady ( int PlayerIndex, unsigned long IsReady, int* privileges );
	void SendPlayerReady ( int PlayerIndex, unsigned long IsReady );
	void ServerLobbySetPlayerStartBonus ( int PlayerIndex, int bonusIndex );
	void ServerLobbySetPlayerHero ( int PlayerIndex, struct FString heroArchetypeID );
	void ServerLobbySetPlayerFaction ( int PlayerIndex, struct FString factionArchetypeID );
	void ServerLobbySetPlayerTeam ( int PlayerIndex, int teamEnum );
	void ServerLobbySetPlayerPosition ( int PlayerIndex, int Position );
	void ServerLobbySetPlayerColor ( int PlayerIndex, int selectedColorEnum );
	void ServerLobbySetPlayerArmy ( int PlayerIndex, int armyIndex );
	void DeleteSession ( struct FName SessionName, struct FScriptDelegate DestroyCompleteDelegate );
	void OnDestroySessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool IsServer ( );
	void SetShiftFalse ( );
	void SetShiftTrue ( );
	bool IsMouseWheelCapturedByFlash ( );
	void CaptureMouseWheel ( unsigned long val );
	void BugIt ( struct FString ScreenShotDescription );
	bool IsKeyInputAllowed ( );
	bool IsKismetAllowsInput ( );
	void SetInputAllowedFromKismet ( unsigned long isAllowed );
	bool IsUnrealAllowsInput ( );
	void SetIsUnrealInputAllowed ( unsigned long isAllowed );
	void SetCommandRequested ( unsigned long commandRequested );
	bool IsCommandRequested ( );
	void SetCaravanTurn ( unsigned long caravanTurn );
	bool IsCaravanTurn ( );
	bool IsCameraActionRunning ( );
	void SetCameraActionRunning ( unsigned long val );
	bool IsPopupOpen ( );
	void SetIsPopupOpen ( unsigned long val );
	void ResetHUDOverCounter ( );
	bool IsMouseOverHUD ( );
	void HUDMouseOut ( );
	void HUDSubElementMouseOverBeforeHudMouseOver ( );
	void HUDMouseOver ( );
	bool IsInputAllowed ( unsigned long allowInputWhenMouseOverHud );
	void SetCursor ( unsigned char cursorType, struct FRotator cursorRotation );
	void SetCursorTexture ( class UTexture2D* cursorTexture, class UTexture2D* objectTexture, int objectOffsetX, int objectOffsetY, int SizeX, int SizeY );
	void UnLoadCursorObject ( );
	class AH7MainMenuHud* GetMainMenuHud ( );
	class AH7AdventureHud* GetAdventureHud ( );
	class AH7CombatHud* GetCombatMapHud ( );
	void SetSecondaryHUD ( class AH7Hud* newHUD );
	void SetMainHUD ( class AH7Hud* newHUD );
	class AH7Hud* GetSecondaryHUD ( );
	class AH7Hud* GetMainHUD ( );
	class AH7Hud* GetHUD ( );
	void SetTempBind ( struct FName BindName, struct FString Command );
	bool DeleteKeyBindByKey ( struct FName Key );
	struct FKeyBind GetBindByKey ( struct FName Key );
	struct FKeyBind GetBindOrAliasByCommand ( struct FString Command, unsigned long recursiveCall );
	struct FKeyBind GetBindByCommand ( struct FString Command, unsigned long recursiveCall );
	class UPlayerInput* GetPlayerInput ( );
	struct FString GetLocalizedKeyCaption ( struct FName unrealKeyName );
	struct FString GetHTMLWithKeyBind ( struct FString localizedString, struct FString alias );
	void DoQuickBarAction ( int SlotIndex );
	void PrepareQuickBarAction ( int SlotIndex );
	void MoveArmy ( );
	void MoveArmyByNumpadInput ( struct FVector Direction );
	void MoveStop ( );
	void MoveNorthEast ( );
	void MoveNorth ( );
	void MoveNorthWest ( );
	void MoveEast ( );
	void MoveWest ( );
	void MoveSouthEast ( );
	void MoveSouth ( );
	void MoveSouthWest ( );
	void ToggleEventLog ( );
	void StopPanMouse ( );
	struct FVector2D GetMousePosition ( );
	void StartPanMouse ( );
	void ResetCamera ( );
	void SetMouseWheelForward ( );
	void SetMouseWheelBackward ( );
	float GetMouseWheel ( float DeltaTime );
	TArray< struct FString > GetLandscapeQualityList ( );
	void SetLandscapeQuality ( int val );
	int GetLandscapeQuality ( );
	TArray< struct FString > GetParticleQualityList ( );
	void SetParticleQuality ( int val );
	int GetParticleQuality ( );
	TArray< struct FString > GetStaticMeshQualityList ( );
	void SetStaticMeshQuality ( int val );
	int GetStaticMeshQuality ( );
	TArray< struct FString > GetSkelMeshQualityList ( );
	void SetSkelMeshQuality ( int val );
	int GetSkelMeshQuality ( );
	TArray< struct FString > GetShaderQualityList ( );
	void SetShaderQuality ( int val );
	int GetShaderQuality ( );
	void SetDistortion ( unsigned long val );
	bool GetDistortion ( );
	void SetBloom ( unsigned long val );
	bool GetBloom ( );
	void SetDynamicShadows ( unsigned long val );
	bool GetDynamicShadows ( );
	void SetMouseLockedToWindow ( unsigned long IsLocked );
	bool IsMouseLockedToWindow ( );
	void SetVSync ( unsigned long val );
	bool GetVSync ( );
	void SetWindowMode ( int windowModeInt );
	int GetWindowMode ( );
	TArray< struct FString > GetWindowModeList ( );
	struct FVector2D GetScreenResolution ( );
	struct FVector2D GetMousePanDiff ( );
	float GetRotation ( );
	float GetDolly ( );
	struct FVector PanningCameraMovement ( );
	float GetPanningHorizontal ( );
	float GetPanningVertical ( );
	bool eventIsLookInputIgnored ( );
	struct FRotator GetCursorDirection ( );
	void UpdateRotation ( float DeltaTime );
	void eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void EgoCam ( );
	void FreeCam ( unsigned long bReset );
	void SetChristmasMode ( unsigned long Value );
	void ToggleGrid ( );
	void RetroFilter ( unsigned long bSetVal, unsigned long bActivate );
	void RestartCombatHud ( );
	void TestRounding ( );
	void ApplyGameModeGfxSettings ( unsigned long bCombat );
	class UH7KeybindManager* GetKeybindManager ( );
	class UH7OptionsManager* GetOptionManager ( );
	void eventDestroyed ( );
	void RevertResolution ( );
	void TickResolution ( );
	void ApplyBufferedCommands ( unsigned long offerRevert );
	void SetBufferedCommand_WindowMode ( unsigned char windowMode );
	void SetBufferedCommand_Resolution ( int X, int Y );
	void eventPlayerTick ( float DeltaTime );
	void HandleCinematicEnd ( float DeltaTime );
	void HandleCinematics ( float DeltaTime );
	void SkipMovie ( );
	bool CurrentContextBlocksKeybind ( struct FString commandFunctionName );
	void ToggleMenu ( );
	void FindAllInterpActors ( TArray< class AInterpActor* >* searchResult );
	void SetPixellated ( unsigned long newPixellated );
	void SetBigHead ( unsigned long newBigHead );
	void ReleaseRightMouse ( );
	void HideCursor ( unsigned long val );
	void RightMouseDown ( );
	void TogglePopup ( class UH7FlashMoviePopupCntl* PopUp );
	void InitLoadingScreen ( class UMaterialInterface* newBackground, unsigned long IsCombat );
	void eventPostBeginPlay ( );
	class ULocalPlayer* GetLocalPlayer ( );
	class AH7PlayerController* GetPlayerController ( );
	void FlushKeys ( );
	bool IsShiftDown ( );
	void SetKeyboardRotatingSensitivity ( float Value );
	float GetKeyboardRotatingSensitivity ( );
	void SetMouseRotatingSensitivity ( float Value );
	float GetMouseRotatingSensitivity ( );
	void SetKeyboardPanningSensitivity ( float Value );
	float GetKeyboardPanningSensitivity ( );
	void SetGeneralPanningSensitivity ( float Value );
	float GetGeneralPanningSensitivity ( );
	void SetBorderPan ( unsigned long Value );
	bool GetBorderPan ( );
	void SetMousePanInvertion ( unsigned long Value );
	bool GetMousePanInvertion ( );
	bool GetIsMousePanning ( );
	void SetAutoSkilling ( unsigned long val );
	bool GetAutoSkilling ( );
	void SetAlwaysQuickCombat ( unsigned long val );
	bool GetAlwaysQuickCombat ( );
	void SetInLoadingScreen ( unsigned long val );
	bool IsInLoadingScreen ( );
	bool IsMouseMoving ( );
	bool IsInCinematicView ( );
	bool IsFlythroughRunning ( );
	class UH7MessageSystem* GetMessageSystem ( );
	class UH7TownAssetLoader* GetTownAssetLoader ( );
	class UH7PatchingController* GetPatchingController ( );
	class AH7PlayerReplicationInfo* GetPlayerReplicationInfo ( );
};



// Class MMH7Game.H7CombatPlayerController ( Property size: 2 iter: 68) 
// Class name index: 8890 
// 0x0008 (0x086C - 0x0864)
class AH7CombatPlayerController : public AH7PlayerController
{
public:
	unsigned long                                      mIgnoreAddToSimTurnQueue : 1;                     		// 0x0864 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              mLastTimeSynchedUpArmies;                         		// 0x0868 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4104 ];

		return pClassPointer;
	};

	void ClientDamageApply ( int CreatureStackId, int StackSize, int TopCreatureHealth );
	void ServerDamageApply ( int CreatureStackId, int StackSize, int TopCreatureHealth );
	void SendDamageApply ( int CreatureStackId, int StackSize, int TopCreatureHealth );
	void ClientCommandCancelled ( unsigned char Reason );
	void ClientCheckOutOfSynch ( int unitActionCounter, int SynchRNG, int IDCounter, int UnitsCount, int ResCount, unsigned long IsCombat );
	void ServerCheckOutOfSynch ( int unitActionCounter, int SynchRNG, int IDCounter, int UnitsCount, int ResCount, unsigned long IsCombat );
	void CheckOutOfSynch ( );
	int GetICUAC ( );
	void ClientPlayerDisconnected ( int disconnectedPlayerNum );
	void ServerPlayerDisconnected ( int disconnectedPlayerNum );
	void SendPlayerDisconnected ( int disconnectedPlayerNum );
	void ClientInstantCommand ( unsigned char instantCommandType, int unitActionCounter, struct FString stringParam, int CurrentPlayer, int* intParams );
	void ServerInstantCommand ( unsigned char instantCommandType, int unitActionCounter, struct FString stringParam, int CurrentPlayer, int* intParams );
	void SendInstantCommand ( struct FMPInstantCommand Command, unsigned long ignoreAddToSimTurnQueue );
	void ClientTacticsPhaseFinished ( unsigned long IsDefender, struct FMPUnitsPos* unitsPos );
	void ServerTacticsPhaseFinished ( unsigned long IsDefender, struct FMPUnitsPos* unitsPos );
	void SendTacticsPhaseFinished ( unsigned long IsDefender, class AH7CombatArmy* Army );
	void ClientCombatStart ( );
	void SendCombatStart ( );
	void ClientSynchUpArmy ( int heroId, struct FString stackIDStrings, int* stackCounts );
	void ClientSynchUp ( int unitActionCounter, int RNGCounter, int IDCounter );
	void ClientGameWentOOS ( struct FString msg, unsigned char oosType );
	void ServerGameWentOOS ( struct FString msg, unsigned char oosType );
	void SendGameWentOOS ( struct FString msg, unsigned char oosType );
	void ClientPlayUnitCommandConvertedPath ( int* Parameters, TArray< class UH7BaseCell* > convertedPath );
	void ClientPlayUnitCommandWithExtPath ( int* Parameters, int* Path );
	void ClientPlayUnitCommandWithPath ( int* Parameters, int* Path );
	void ClientPlayUnitCommand ( int* Parameters );
	void ServerPlayUnitCommandWithExtPath ( int* Parameters, int* Path );
	void ServerPlayUnitCommandWithPath ( int* Parameters, int* Path );
	void ServerPlayUnitCommand ( int* Parameters );
	void SendPlayCommand ( int unitActionCounter, int UnitTurnCounter, unsigned char CommandType, class UH7ICaster* Source, class UH7BaseAbility* Ability, class UH7IEffectTargetable* Target, int TeleportTarget, TArray< class UH7BaseCell* > Path, unsigned char CommandTag, unsigned char Direction, unsigned long ReplaceFakeAttacker, unsigned long InsertHead, int CurrentPlayer, class UH7CombatMapCell* TrueHitCell, unsigned long ignoreAddToSimTurnQueue, unsigned long doOOSCheck, int movementPoints );
	bool IsSimTurnCommandMode ( );
	bool IsSimTurnAIPlaying ( );
	void HostIsReady ( );
	void eventSendRefillRNGPool ( int synchSeed );
	void SendInitStartCombat ( );
	void SendPreInitStartCombat ( );
	void SetIsUnrealInputAllowed ( unsigned long isAllowed );
	void FadeFromWhite ( int Duration );
	void FadeFromBlack ( int Duration );
	void FadeToBlack ( int Duration );
	void FadeToWhite ( int Duration );
	void IntroduceHero ( );
	void ArmyVictoryCameraAction ( );
	void PresentArmy ( );
	void SelectHeroDefaultAttack ( );
	void ToggleCreatureHpBars ( );
	void ToggleMenu ( );
	void OpenSpellBook ( );
	void DoWait ( );
	void DoDefend ( );
	void ContinueContextOrChat ( );
	void CancelSpellOnMouse ( );
	void ReleaseRightMouse ( );
	void RightMouseDown ( );
	void ReleaseLeftMouse ( );
	void LeftMouseDown ( );
	class AH7CombatPlayerController* GetCombatPlayerController ( );
	void NotifyHostMigrationStarted ( );
};



// Class MMH7Game.H7AdventurePlayerController ( Property size: 11 iter: 154) 
// Class name index: 8892 
// 0x0030 (0x089C - 0x086C)
class AH7AdventurePlayerController : public AH7CombatPlayerController
{
public:
	class AH7AdventureObject*                          mSpawnAdventureObjTemplate;                       		// 0x086C (0x0008) [0x0000000000000000]              
	float                                              MAX_FLOAT;                                        		// 0x0874 (0x0004) [0x0000000000000000]              
	float                                              mLastLeftClickTime;                               		// 0x0878 (0x0004) [0x0000000000000000]              
	class AActor*                                      mLastClickedActor;                                		// 0x087C (0x0008) [0x0000000000000000]              
	unsigned long                                      mTransitioningToCombat : 1;                       		// 0x0884 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsNormalCombatAboutToBegin : 1;                  		// 0x0884 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mWasMovieRunning : 1;                             		// 0x0884 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                mHeroIdCancelTradePopUp;                          		// 0x0888 (0x0004) [0x0000000000000000]              
	class AH7AdventureArmy*                            mRetreatingArmy;                                  		// 0x088C (0x0008) [0x0000000000000000]              
	int                                                mAutoSaveFrameDelay;                              		// 0x0894 (0x0004) [0x0000000000000000]              
	int                                                mAutoSaveCurrentDelay;                            		// 0x0898 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4106 ];

		return pClassPointer;
	};

	void PerformAutoAI ( unsigned long IsActive, unsigned long AllowQuickCombat, unsigned long SkipMove );
	void CheckOutOfSynch ( );
	void SendStartCombatFinished ( unsigned long isRetreatFinished, unsigned long isCombatCanceled, unsigned long IsNormalCombatAboutToBegin );
	void SendRetreatConceded ( int heroId );
	void SendTargetIsRetreating ( );
	void SendRetreatCancelled ( int heroId );
	void SendSimTurnAnswerStartCombat ( unsigned char answer, int heroId );
	void SendCancelTrade ( );
	void SendAnswerCancelTrade ( unsigned long doCancelTrade, int heroId );
	void PopUpAnswerNotCancelTrade ( );
	void PopUpAnswerCancelTrade ( );
	void SendRequestCancelTrade ( int sourceHeroId );
	void ResetEndTurn ( );
	void RequestCancelEndTurn ( );
	void SendInteractionFinished ( int heroId );
	void SendTradeFinished ( int heroId );
	void UpdateHeroPosition ( int heroId, int cellId );
	void SendUpdateHeroPosition ( int heroId, int cellId );
	void ClientPauseTurnTimer ( unsigned long Paused );
	void ServerPauseTurnTimer ( unsigned long Paused );
	void SendInitStartAdventureMap ( );
	void SendPreInitStartAdventureMap ( );
	bool IsSimTurnCommandMode ( );
	void ClientAutoMergeRemainingPool ( int heroId );
	void ServerAutoMergeRemainingPool ( int heroId );
	void SendAutoMergeRemainingPool ( class AH7AdventureArmy* Army );
	void ClientUpdateArmyXP ( int heroId, int Exp );
	void ServerUpdateArmyXP ( int heroId, int Exp );
	void SendUpdateArmyXP ( class AH7AdventureArmy* Army );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons );
	void SetFlythroughRunning ( unsigned long val, unsigned long ToggleHUD, unsigned long toggleCinematic, unsigned long toggleFog );
	void ToggleFlythrough ( unsigned long val, unsigned long ToggleHUD, unsigned long toggleCinematicView, unsigned long toggleFog );
	void LockCamera ( );
	void BuildAllBuildingsForPlayer ( class AH7Player* pl );
	void BuildAllBuildings ( );
	void AddResourcesToLocalPlayer ( int addAmount );
	void UnlimitedBuilding ( unsigned long IsSelected );
	void UnlimitedMana ( unsigned long IsSelected );
	void UnlimitedMovement ( unsigned long IsSelected );
	class AH7AdventureObject* SpawnAdventureObject ( int X, int Y, class AH7AdventureObject* objTemplate );
	class AH7AdventureArmy* SpawnArmy ( class UH7AdventureMapCell* targetCell, int PlayerNumber, struct FRotator SpawnRotation, class AActor* Template, unsigned long isStartHero );
	void AddXp ( int XP );
	bool TeleportTo ( class UH7AdventureMapCell* targetCell, class AH7AdventureArmy* currentArmy );
	void SetTogglePlaneWithoutExploration ( unsigned long val );
	void SetWinAllCheat ( unsigned long val );
	void RevealFog ( );
	bool GetFog ( );
	void SetFog ( unsigned long val );
	void DoubleArmy ( );
	void toggleFog ( );
	void BuildAll ( );
	void PlusResources ( );
	void PlusLevel ( );
	void PlusSkillpoint ( );
	void TeleportHero ( );
	void DehighlightAdventureObjects ( );
	void OutlineAdventureObject ( class AH7AdventureObject* advObject, struct FColor OutlineColor, unsigned long showOutline );
	void HighlightAdventureObjects ( );
	void ShowRealmOverview ( );
	void ToggleMiniMapOptions ( );
	void ToggleMenu ( );
	void ContinueContext ( );
	void ContinueContextOrChat ( );
	void BuyAllRecruits ( );
	void OpenCustom2 ( );
	void OpenCustom1 ( );
	void OpenCaravan ( );
	void OpenTownDefense ( );
	void OpenGuildOfThieves ( );
	void OpenRecruitmentWindow ( );
	void OpenMagicGuild ( );
	void OpenMarketPlace ( );
	void OpenWarfare ( );
	void OpenHallOfHeroes ( );
	void OpenMainBuilding ( );
	void OpenTownPopup ( unsigned char PopUp );
	void SelectTown10 ( );
	void SelectTown9 ( );
	void SelectTown8 ( );
	void SelectTown7 ( );
	void SelectTown6 ( );
	void SelectTown5 ( );
	void SelectTown4 ( );
	void SelectTown3 ( );
	void SelectTown2 ( );
	void SelectTown1 ( );
	void SelectTown ( int Index );
	void SelectHero10 ( );
	void SelectHero9 ( );
	void SelectHero8 ( );
	void SelectHero7 ( );
	void SelectHero6 ( );
	void SelectHero5 ( );
	void SelectHero4 ( );
	void SelectHero3 ( );
	void SelectHero2 ( );
	void SelectHero1 ( );
	void SelectHero ( int Index );
	bool QuickSaveExists ( );
	void QuickLoadConfirm ( );
	void DeferredQuickLoadPopup ( );
	void QuickLoad ( );
	void eventPlayerTick ( float DeltaTime );
	void AutoSaveGameContinue ( );
	void AutoSaveGame ( );
	void QueueAutoSaveGame ( );
	void QuickSaveContinue ( );
	void QuickSave ( );
	void OpenOptions ( );
	void OpenSaveWindow ( );
	void OpenLoadWindow ( );
	void DumpCurrentState ( );
	void TestGUIHighlight ( );
	void CoverFogTest ( );
	void MergeArmyDown ( );
	void MergeArmyUp ( );
	void EndPlayerTurn ( );
	void OpenSkillwheel ( );
	void OpenHeroWindow ( );
	void ToggleTable ( );
	void OpenSpellBook ( );
	void OpenQuestLog ( );
	void ContinueHeroMove ( );
	void TownBrowse ( int Dir );
	void TownPrev ( );
	void TownNext ( );
	void SwapArmies ( );
	void ReleaseRightMouse ( );
	void RightMouseDown ( );
	void ReleaseLeftMouse ( );
	void DoubleClick ( );
	void DoCurrentArmyActionByCursor ( );
	void LeftMouseDown ( );
	void CheckInterruptHeroMovement ( );
	void FlagSelected ( class AH7CouncilFlagActor* HitActor, class AH7CouncilMapManager* managerRef );
	bool GetActorUnderMouse ( struct FImpactInfo* finalHitInfo );
	void SetTransitioningToCombat ( unsigned long val );
	void SetRetreatingArmy ( class AH7AdventureArmy* newRetreatingArmy );
	class AH7AdventureArmy* GetRetreatingArmy ( );
	void SetNormalCombatAboutToBegin ( unsigned long NewValue );
	bool IsNormalCombatAboutToBegin ( );
	bool IsMovieSkippedLastFrame ( );
	class AH7AdventurePlayerController* GetAdventurePlayerController ( );
};



// Class MMH7Game.H7AbilityManager ( Property size: 13 iter: 52) 
// Class name index: 8894 
// 0x00C0 (0x0120 - 0x0060)
class UH7AbilityManager : public UObject
{
public:
	TArray< class UH7BaseAbility* >                    mAbilities;                                       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7BaseAbility* >                    mVolatileAbilities;                               		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mLearnableAbilities;                              		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7BaseAbility*                              mPendingAbility;                                  		// 0x0090 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           mHeroSpellArchetypeReferences;                    		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mHeroSpellIDs;                                    		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           mHeroVolatileSpellArchetypeReferences;            		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mHeroVolatileSpellIDs;                            		// 0x00C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           mHeroAbilityArchetypeReferences;                  		// 0x00D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mHeroAbilityIDs;                                  		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           mPreCombatSpellArchetypeRefs;                     		// 0x00F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UH7BaseAbility*                              mPreparedAbility;                                 		// 0x0108 (0x0008) [0x0000000000000000]              
	class UH7ICaster*                                  mOwner;                                           		// 0x0110 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0118 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4108 ];

		return pClassPointer;
	};

	void eventRestoreAbilitiesFromRefs ( );
	void eventPostSerialize ( );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	void DeleteAllAbilitiesFromSkill ( class UH7Skill* Skill );
	void GetAbilitiesEffectsByTrigger ( unsigned char triggerType, TArray< class UH7Effect* >* allAbilities );
	void GetAbilitiesFromSource ( class UH7EffectContainer* container, TArray< class UH7BaseAbility* >* foundAbilities );
	void UnsuppressAbility ( class UH7BaseAbility* Ability );
	void SuppressAbility ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetSpellByName ( struct FString spellName );
	bool HasActiveAbilities ( );
	class UH7BaseAbility* GetAbilityByID ( int abilityID );
	class UH7BaseAbility* GetAbility ( class UH7BaseAbility* Ability );
	bool HasVolatileAbility ( class UH7BaseAbility* wantedAbility );
	bool HasAbility ( class UH7BaseAbility* wantedAbility );
	void UpdateAbilityEvents ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	void eventInitAbilities ( );
	void Init ( class AH7Unit* Owner, TArray< class UH7BaseAbility* > Abilities );
	void UnlearnAbility ( class UH7BaseAbility* oldAbility );
	class UH7BaseAbility* LearnAbility ( class UH7BaseAbility* Ability, class UH7EffectContainer* sourceContainer, int abilityID );
	void UnlearnVolatileAbility ( class UH7BaseAbility* oldAbility );
	class UH7BaseAbility* LearnVolatileAbility ( class UH7BaseAbility* newAbility, class UH7EffectContainer* sourceContainer, int abilityID );
	void RemoveScrollSpell ( class UH7BaseAbility* abilityToUnLearn, class UH7EffectContainer* Source, unsigned long RemoveItem );
	void LearnScrollSpell ( class UH7BaseAbility* abilityToLearn, class UH7EffectContainer* Source );
	void GetResourceProducingAbilities ( TArray< class UH7EffectSpecialAddResources* >* produc );
	void GetHeroAbilities ( TArray< class UH7HeroAbility* >* allAbilities );
	TArray< class UH7BaseAbility* > GetNonVolatileAbilities ( );
	void GetAbilities ( TArray< class UH7BaseAbility* >* allAbilities );
	void CleanAbilitiesAfterCombat ( );
	void DestroyEffectsSpecialVisualEffects ( );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void UnlearnBugTrack ( class UH7BaseAbility* removeAbility );
	void RestoreLearnedSpells ( );
	void StoreLearnedSpells ( );
	void AddLearnableAbility ( class UH7HeroAbility* Ability );
	TArray< class UH7HeroAbility* > GetLearnableAbilities ( );
	void SetOwner ( class UH7ICaster* Owner );
	TArray< struct FString > GetHeroSpellArchRefs ( );
};



// Class MMH7Game.H7AuraManager ( Property size: 5 iter: 24) 
// Class name index: 8896 
// 0x0044 (0x00A4 - 0x0060)
class UH7AuraManager : public UObject
{
public:
	TArray< struct FH7AuraInstance >                   mActiveAuras;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7AuraInstance >                   mActiveAurasBuffer;                               		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIntPoint >                         mActiveAuraPoints;                                		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7ICaster*                                  mOwner;                                           		// 0x0090 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0098 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned long                                      mIsOnCombatMap : 1;                               		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4110 ];

		return pClassPointer;
	};

	void eventClearAuras ( );
	struct FH7AuraInstance CreateAuraInstance ( class UH7BaseAbility* Ability, TArray< struct FIntPoint > affectedCells );
	void TriggerEvents ( unsigned char triggerr, unsigned long simulate, struct FH7EventContainerStruct container, class UH7ICaster* Source );
	void RemoveAurasFromCaster ( class UH7ICaster* caster );
	bool CheckTacticsDeployment ( class UH7ICaster* Initiator );
	void RemoveAuraFromSource ( class UH7EffectContainer* container );
	void AddLog ( unsigned char Event, class UH7IEffectTargetable* Target, class UH7BaseAbility* aura );
	void updateAuras ( unsigned long onlyEveryStepAuras, TArray< class UH7BaseAbility* > auras, class UH7BaseCell* newCell, class UH7BaseCell* oldCell, class UH7IEffectTargetable* Target );
	void AddAura ( struct FH7AuraInstance aura, unsigned long onlyEveryStepAuras );
	TArray< struct FH7AuraInstance > GetAuraInstancesForAbility ( class UH7BaseAbility* Ability );
	bool CheckIsInAura ( class UH7BaseCell* cell, class UH7IEffectTargetable* Target, class UH7BaseAbility* auraAbility );
	void GetAuraAbilitiesForCell ( class UH7BaseCell* cell, TArray< class UH7BaseAbility* >* foundAuras );
	int GetLatestBufferedAuraIndex ( class UH7BaseAbility* potatoAbility );
	void UpdateAurasNative ( unsigned long onlyEveryStepAuras, unsigned long forceReapplyForTactics, class UH7IEffectTargetable* targetToUpdate, TArray< class UH7BaseAbility* > auras, class UH7BaseCell* newCell, class UH7BaseCell* oldCell, TArray< class UH7IEffectTargetable* >* targetsToAdd, TArray< class UH7IEffectTargetable* >* targetsToRemove, TArray< class UH7BaseAbility* >* abilitiesToAdd, TArray< class UH7BaseAbility* >* abilitiesToRemove );
	void AddAuraNative ( struct FH7AuraInstance aura );
	void SetOwner ( class UH7ICaster* Owner );
	void SetIsOnCombatMap ( unsigned long isItReally );
	void ModifyAuraArea ( int auraIndex, TArray< struct FIntPoint > newArea );
	TArray< struct FH7AuraInstance > GetAuraInstances ( );
};



// Class MMH7Game.H7BuffManager ( Property size: 5 iter: 40) 
// Class name index: 8898 
// 0x0044 (0x00A4 - 0x0060)
class UH7BuffManager : public UObject
{
public:
	TArray< struct FSavegameBuffStruct >               mBuffReferences;                                  		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7BaseBuff* >                       mBuffs;                                           		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7BaseBuff* >                       mStoredBuffsOnDeath;                              		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7IEffectTargetable*                        mOwner;                                           		// 0x0090 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0098 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                mMaxFrameDelayCount;                              		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4112 ];

		return pClassPointer;
	};

	void DelayedInit ( );
	void eventPostSerialize ( );
	void GetBuffsFromSource ( class UH7EffectContainer* container, TArray< class UH7BaseBuff* >* buffs );
	void ResetSimDurations ( );
	void UpdateBuffEvents ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	void CleanBuffsAfterCombat ( );
	class UH7BaseBuff* GetMoralBuff ( class AH7Unit* Unit );
	class UH7BaseBuff* GetDefendBuff ( class AH7Unit* Unit );
	class UH7BaseBuff* GetWaitBuff ( class AH7Unit* Unit );
	class UH7BaseBuff* AddBuff ( class UH7BaseBuff* newBuff, class UH7ICaster* caster, class UH7EffectContainer* sourceContainer, unsigned long restoreOnResurrect );
	void UpdateBuffsDisplayDelayed ( );
	void UpdateBuffsDisplay ( );
	void RemoveBuff ( class UH7BaseBuff* buff, class UH7ICaster* caster, unsigned long showLog, unsigned long updateGui );
	class UH7BaseBuff* GetBuff ( class UH7BaseBuff* wantedBuff );
	bool CanStackBuff ( class UH7BaseBuff* newBuff, class UH7ICaster* caster );
	int GetSizeOfBuffStack ( class UH7BaseBuff* newBuff );
	bool HasBuff ( class UH7BaseBuff* wantedBuff, class UH7ICaster* caster, unsigned long isTargetConditionCheck );
	bool BuffMatches ( class UH7BaseBuff* instanciatedBuff, class UH7BaseBuff* unknownMethodBuff );
	void GetBuffsByMechanic ( class UClass* buffMechanicClass, TArray< class UH7BaseBuff* >* buffs );
	class UH7BaseBuff* GetBuffMechanic ( class UClass* buffMechanicClass );
	bool HasBuffMechanic ( class UClass* wantedBuffClass );
	void eventInitBuffs ( );
	void Init ( class UH7IEffectTargetable* Owner );
	void GetVisibleMagicBuffs ( TArray< class UH7BaseBuff* >* buffs );
	bool HasPositiveBuff ( );
	bool HasCondition ( );
	void GetActiveBuffs ( TArray< class UH7BaseBuff* >* buffs );
	void RestoreStoredBuffs ( );
	void RemoveBuffsFromDeadOwner ( );
	void RemoveAllDisplayableBuffsBySchool ( unsigned char filterBySchool );
	void RemoveAllBuffsFromMagicSource ( );
	void RemoveAllDisplayableBuffs ( unsigned long debuffsOnly );
	void RemoveAllAuraBuffs ( );
	TArray< class UH7BaseBuff* > GetBuffs ( );
	void SetOwner ( class UH7IEffectTargetable* Owner );
};



// Class MMH7Game.H7Effect ( Property size: 16 iter: 90) 
// Class name index: 8900 
// 0x03A8 (0x0408 - 0x0060)
class UH7Effect : public UObject
{
public:
	unsigned char                                      mRank;                                            		// 0x0060 (0x0001) [0x0000000000000000]              
	unsigned char                                      mEffectTarget;                                    		// 0x0061 (0x0001) [0x0000000000000000]              
	int                                                mGroup;                                           		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            mEffectTags;                                      		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7TriggerStruct                            mTrigger;                                         		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FH7ConditionStruct                          mConditions;                                      		// 0x0084 (0x0248) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7FXStruct                                 mFX;                                              		// 0x02CC (0x0094) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7EffectContainer*                          mSourceOfEffect;                                  		// 0x0360 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mCaster;                                          		// 0x0368 (0x0008) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mTarget;                                          		// 0x0370 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0378 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FH7EventContainerStruct                     mEventContainer;                                  		// 0x0380 (0x005C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7IEffectTargetable*                        mTargetOverwrite;                                 		// 0x03DC (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x03E4 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned long                                      mRemovedDuringExecution : 1;                      		// 0x03EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsBeingExecuted : 1;                             		// 0x03EC (0x0004) [0x0000000000000000] [0x00000002] 
	class UH7EffectContainer*                          mTooltipBuffInstance;                             		// 0x03F0 (0x0008) [0x0000000000000000]              
	TArray< class UH7IEffectTargetable* >              mTempTargets;                                     		// 0x03F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4114 ];

		return pClassPointer;
	};

	void UnpackContainer ( );
	void DebugFunction ( unsigned long isSimulated );
	struct FString GetHumanReadablePercentInt ( float Percent );
	struct FString GetHumanReadablePercentAbs ( float Percent );
	struct FString GetHumanReadablePercentAbsInt ( float Percent );
	struct FString GetHumanReadablePercent ( float Percent );
	struct FString GetHumanReadableMultiplierAbs ( float Multiplier );
	struct FString GetHumanReadableMultiplierAbsInt ( float Multiplier );
	struct FString GetHumanReadableMultiplier ( float Multiplier );
	struct FString GetTooltipReplacement ( unsigned long resolveBuff );
	struct FString GetDefaultString ( );
	struct FString GetHumanReadableStatMod ( struct FH7MeModifiesStat StatMod );
	struct FString GetAbsValueAsString ( );
	struct FString GetIconString ( );
	struct FString GetMaxString ( );
	struct FString GetMaxCap ( );
	struct FString GetMinCap ( );
	struct FString GetMinString ( );
	struct FString GetName ( );
	struct FString GetValueAsString ( );
	float GetValue ( );
	struct FString GetOperationString ( unsigned char Op, float Value );
	struct FString GetOperation ( );
	struct FString GetTooltipLine ( unsigned long extendedVersion, class UH7IEffectTargetable* actualTarget, unsigned long showRank, unsigned long showCause );
	struct FString LocalizeFailSafe ( struct FString locaKey );
	struct FString GetLocaNameForSpellOperation ( unsigned char Op );
	struct FString GetLocaNameForTrigger ( unsigned char h7trigger );
	struct FString GetProperty ( struct FString prop, unsigned char considerOnlyEffectsOfRank, class UH7UnitSnapShot* myCaster );
	void GetTagsPlusBaseTags ( TArray< unsigned char >* tags );
	bool HasTag ( unsigned char SearchTag );
	void UnregisterTrigger ( );
	class UH7IEventManagingObject* GetRegistrator ( );
	void RegisterTrigger ( );
	class UH7CombatResult* GenerateCombatAction ( class UH7CombatResult* baseCombatAction );
	void SetAreaAroundXTargets ( unsigned char effectTarget, TArray< class UH7IEffectTargetable* >* Targets );
	void GetTargets ( unsigned long ignoreImmunity, TArray< class UH7IEffectTargetable* >* Targets );
	bool CheckMagicSynergy ( class UH7ICaster* attacker, class UH7IEffectTargetable* Target );
	bool CompareRank ( unsigned char myRank, unsigned char skillType );
	bool RankCheck ( class UH7ICaster* Unit );
	bool IsPreventedByImmunityOf ( class UH7IEffectTargetable* Target );
	unsigned char GetAlignmentType ( class UH7ICaster* caster, class UH7IEffectTargetable* Target );
	bool AttackConditionCheck ( );
	bool TargetConditionCheck ( class UH7IEffectTargetable* Target, struct FH7ConditionStructExtendedTarget condition, class UH7ICaster* Initiator, class UH7ICaster* caster );
	bool CasterConditionCheck ( class UH7ICaster* Initiator );
	bool ConditionCheck ( class UH7IEffectTargetable* Target, class UH7ICaster* Initiator, unsigned long targetCheckOnly );
	bool IsPreventedByImmunityOfOnArchetype ( class UH7IEffectTargetable* Target, struct FH7SpellEffect Data, TArray< unsigned char > tags, unsigned char abilitySchool, unsigned long isSpellEffect );
	bool AttackConditionCheckOnArchetype ( struct FH7ConditionStructExtendAttack condition, struct FH7EventContainerStruct eventContainer, class UH7ICaster* Initiator, class UH7ICaster* Owner, class UH7ICaster* caster, unsigned long isPersistentStatEffect );
	bool TargetConditionCheckOnArchetype ( struct FH7ConditionStructExtendedTarget condition, class UH7IEffectTargetable* Target, class UH7ICaster* Initiator, class UH7ICaster* caster, class UH7ICaster* Owner, unsigned long isPersistentStatEffect );
	bool CasterConditionCheckOnArchetype ( struct FH7CasterConditionStruct condition, class UH7ICaster* Initiator, class UH7ICaster* itemOwner, class UH7ICaster* buffOwner );
	bool ConditionCheckOnArchetype ( struct FH7ConditionStruct conditions, class UH7IEffectTargetable* Target, class UH7ICaster* Initiator, class UH7ICaster* Owner, class UH7ICaster* caster, struct FH7EventContainerStruct eventContainer, unsigned long targetCheckOnly, unsigned long isStatEffect, unsigned long isPersistentStatEffect, unsigned long isTeleportSpell, int teleportSpellRange );
	bool DoOperationBool ( unsigned char Op, int ValueA, int ValueB );
	void GetValidTargets ( unsigned long ignoreImmunity, TArray< class UH7IEffectTargetable* >* Targets, TArray< class UH7IEffectTargetable* >* validTargets );
	void GetTargetsByEffectTarget ( unsigned char effectTarget, TArray< class UH7IEffectTargetable* >* Targets );
	void eventExecute ( unsigned long isSimulated );
	void ExecuteSave ( unsigned long isSimulated );
	void TriggerEffect ( unsigned long isSimulated );
	void EventListener ( class UObject* Sender, unsigned long isSimulated, struct FH7EventContainerStruct container );
	void InitEffect ( struct FH7EffectProperties Properties, class UH7EffectContainer* Source, unsigned long registerEffect );
	void ClearTooltipContainerInstance ( );
	float GetChance ( );
	void ClearCachedTargets ( );
	TArray< class UH7IEffectTargetable* > GetCachedTargets ( );
	int GetGroup ( );
	unsigned char GetTargetEnum ( );
	bool eventShowInTooltip ( );
	struct FH7EventContainerStruct GetEventContainer ( );
	void SetEventContainer ( struct FH7EventContainerStruct container );
	void SetUnitTargetOverwrite ( class UH7IEffectTargetable* Target );
	struct FH7ConditionStruct GetConditons ( );
	TArray< unsigned char > GetTags ( );
	struct FH7FXStruct GetFX ( );
	unsigned char GetRequiredRank ( );
	struct FH7TriggerStruct GetTrigger ( );
	class UH7EffectContainer* GetSource ( );
};



// Class MMH7Game.H7EffectAudioVisual ( Property size: 1 iter: 6) 
// Class name index: 8902 
// 0x0318 (0x0720 - 0x0408)
class UH7EffectAudioVisual : public UH7Effect
{
public:
	struct FH7AudioVisualEffect                        mData;                                            		// 0x0408 (0x0318) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4116 ];

		return pClassPointer;
	};

	void UnpackContainer ( );
	void eventExecute ( unsigned long isSimulated );
	void eventInitSpecific ( struct FH7AudioVisualEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool ShowInTooltip ( );
	struct FH7AudioVisualEffect GetData ( );
};



// Class MMH7Game.H7EffectCharges ( Property size: 1 iter: 6) 
// Class name index: 8904 
// 0x0320 (0x0728 - 0x0408)
class UH7EffectCharges : public UH7Effect
{
public:
	struct FH7ChargeEffect                             mData;                                            		// 0x0408 (0x0320) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4118 ];

		return pClassPointer;
	};

	void eventExecute ( unsigned long isSimulated );
	void SetData ( );
	void eventInitSpecific ( struct FH7ChargeEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool eventShowInTooltip ( );
	struct FH7ChargeEffect GetData ( );
};



// Class MMH7Game.H7EffectCommand ( Property size: 2 iter: 9) 
// Class name index: 8906 
// 0x0448 (0x0850 - 0x0408)
class UH7EffectCommand : public UH7Effect
{
public:
	struct FH7CommandEffect                            mData;                                            		// 0x0408 (0x0440) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7CommandQueue*                             mCommandQueue;                                    		// 0x0848 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4120 ];

		return pClassPointer;
	};

	void eventExecute ( unsigned long isSimulated );
	class UH7CombatResult* GenerateCombatAction ( class UH7CombatResult* baseCombatAction );
	void ValidateRecipients ( TArray< class UH7IEffectTargetable* >* Targets );
	void AddCommandToQueue ( class UH7IEffectTargetable* Target, struct FH7FXStruct fx, class UH7CommandQueue** queue );
	void eventInitSpecific ( struct FH7CommandEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool eventShowInTooltip ( );
	struct FH7CommandEffect GetData ( );
};



// Class MMH7Game.H7EffectDamage ( Property size: 2 iter: 13) 
// Class name index: 8908 
// 0x03C0 (0x07C8 - 0x0408)
class UH7EffectDamage : public UH7Effect
{
public:
	struct FH7RangeValue                               mDamage;                                          		// 0x0408 (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7DamageEffect                             mData;                                            		// 0x0430 (0x0398) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4122 ];

		return pClassPointer;
	};

	void UnpackContainer ( );
	void eventExecute ( unsigned long isSimulated );
	bool OwnerIsDead ( );
	class UH7CombatResult* GenerateCombatAction ( class UH7CombatResult* baseCombatAction );
	struct FH7RangeValue GetDamageRange ( );
	struct FH7RangeValue GetDamageRangeFinal ( unsigned long resetContainer );
	int SpellScaling ( struct FH7SpellScaling spellScalingStruct, class UH7ICaster* caster, struct FString* formular );
	void eventInitSpecific ( struct FH7DamageEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool IsHeal ( );
	bool eventShowInTooltip ( );
	struct FH7DamageEffect GetData ( );
};



// Class MMH7Game.H7EffectDurationModifier ( Property size: 3 iter: 7) 
// Class name index: 8910 
// 0x0325 (0x072D - 0x0408)
class UH7EffectDurationModifier : public UH7Effect
{
public:
	struct FH7DurationModifierEffect                   mData;                                            		// 0x0408 (0x0320) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mModifierValue;                                   		// 0x0728 (0x0004) [0x0000000000000000]              
	unsigned char                                      mOperatorType;                                    		// 0x072C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4124 ];

		return pClassPointer;
	};

	void eventExecute ( unsigned long isSimulated );
	void eventInitSpecific ( struct FH7DurationModifierEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool eventShowInTooltip ( );
	struct FH7DurationModifierEffect GetData ( );
};



// Class MMH7Game.H7EffectOnResistance ( Property size: 2 iter: 8) 
// Class name index: 8912 
// 0x0350 (0x0758 - 0x0408)
class UH7EffectOnResistance : public UH7Effect
{
public:
	struct FH7ResistanceStruct                         mResMod;                                          		// 0x0408 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7ResistanceEffect                         mData;                                            		// 0x0424 (0x0334) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4126 ];

		return pClassPointer;
	};

	struct FString GetTagList ( );
	bool Matches ( unsigned char attackSchool, TArray< unsigned char > tags );
	void eventExecute ( unsigned long isSimulated );
	void eventInitSpecific ( struct FH7ResistanceEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool eventShowInTooltip ( );
	struct FH7ResistanceEffect GetData ( );
};



// Class MMH7Game.H7EffectOnStats ( Property size: 2 iter: 12) 
// Class name index: 8914 
// 0x0384 (0x078C - 0x0408)
class UH7EffectOnStats : public UH7Effect
{
public:
	struct FH7StatEffect                               mData;                                            		// 0x0408 (0x0380) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mIsValueCalculated : 1;                           		// 0x0788 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4128 ];

		return pClassPointer;
	};

	void eventExecute ( unsigned long isSimulated );
	void SetModifier ( );
	void eventInitSpecific ( struct FH7StatEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	float GetStatModValue ( );
	bool eventShowInTooltip ( );
	void SetData ( struct FH7StatEffect Effect );
	bool IsValueCalculated ( );
	unsigned char GetStatModCombineOp ( );
	unsigned char GetStatModType ( );
	struct FH7StatEffect GetData ( );
};



// Class MMH7Game.H7EffectSpecial ( Property size: 3 iter: 10) 
// Class name index: 8916 
// 0x0340 (0x0748 - 0x0408)
class UH7EffectSpecial : public UH7Effect
{
public:
	struct FH7SpecialEffect                            mData;                                            		// 0x0408 (0x032C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7IEffectDelegate*                          mFunctionProvider;                                		// 0x0734 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x073C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned long                                      mDoesDamage : 1;                                  		// 0x0744 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4130 ];

		return pClassPointer;
	};

	void eventExecute ( unsigned long isSimulated );
	struct FH7SpecialEffect GetData ( );
	void eventInitSpecific ( struct FH7SpecialEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	void RemoveEvent ( unsigned long Value );
	bool DoesDamage ( );
	bool eventShowInTooltip ( );
	class UH7IEffectDelegate* GetFunctionProvider ( );
};



// Class MMH7Game.H7EffectWithSpells ( Property size: 4 iter: 12) 
// Class name index: 8918 
// 0x0334 (0x073C - 0x0408)
class UH7EffectWithSpells : public UH7Effect
{
public:
	class UH7EffectContainer*                          mContainer;                                       		// 0x0408 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FH7SpellEffect                              mData;                                            		// 0x0410 (0x0328) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mSuppressesRetaliation : 1;                       		// 0x0738 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mCheckedSuppressesRetaliation : 1;                		// 0x0738 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4132 ];

		return pClassPointer;
	};

	void CheckSuppressesRetaliation ( );
	void CheckUpdateGUI ( TArray< class UH7IEffectTargetable* > Targets );
	void eventExecute ( unsigned long isSimulated );
	class UH7CombatResult* GenerateCombatAction ( class UH7CombatResult* baseCombatAction );
	void eventInitSpecific ( struct FH7SpellEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool SuppressesRetaliation ( );
	bool eventShowInTooltip ( );
	struct FH7SpellEffect GetData ( );
};



// Class MMH7Game.H7EffectAddRandomBuffFromList ( Property size: 14 iter: 21) 
// Class name index: 8920 
// 0x0044 (0x00A4 - 0x0060)
class UH7EffectAddRandomBuffFromList : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mCheckVulnerability : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mRemoveCurrentDebuffs : 1;                        		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mFakeRandom : 1;                                  		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mUseOnAllTargets : 1;                             		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mUseRandomTarget : 1;                             		// 0x0068 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mUseOnlyAlliedCreatures : 1;                      		// 0x0068 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mUseOnlyOnCreatures : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mHasFakeRandomNumbers : 1;                        		// 0x0068 (0x0004) [0x0000000000000000] [0x00000080] 
	TArray< class UH7BaseBuff* >                       mBuffList;                                        		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7BaseBuff* >                       mCurrentBuffList;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7BaseBuff* >                       mCurrentVulnerabiltyBuffList;                     		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mCurrentRandomBuff;                               		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                mCurrentRandomTarget;                             		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4134 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	class UH7IEffectTargetable* PickRandomCreature ( TArray< class UH7IEffectTargetable* > units );
	class UH7BaseBuff* PickRandomBuff ( );
	class UH7BaseBuff* PickRandomBuffFromVulList ( );
	bool AddBuff ( class UH7Effect* Effect, class UH7IEffectTargetable* Creature );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectCharge ( Property size: 10 iter: 18) 
// Class name index: 8922 
// 0x00AC (0x010C - 0x0060)
class UH7EffectCharge : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7BaseBuff*                                 mBuff;                                            		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            mStatsToModify;                                   		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mValuePerStep;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7Effect*                                   mEffect;                                          		// 0x0084 (0x0008) [0x0000000000000000]              
	class AH7CreatureStack*                            mOwner;                                           		// 0x008C (0x0008) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mTarget;                                          		// 0x0094 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x009C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class AH7CombatController*                         mCombatController;                                		// 0x00A4 (0x0008) [0x0000000000000000]              
	struct FH7EventContainerStruct                     mContainer;                                       		// 0x00AC (0x005C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsSimulated : 1;                                 		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4136 ];

		return pClassPointer;
	};

	struct FString GetStatList ( );
	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	bool GetStatModifier ( class UH7EffectContainer* container, TArray< class UH7EffectOnStats* >* Modifier );
	int GetDistance ( class UH7IEffectTargetable* Target );
	void IncreaseStatMods ( class AH7CreatureStack* caster );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7HeroAbility ( Property size: 9 iter: 30) 
// Class name index: 8924 
// 0x001C (0x05D0 - 0x05B4)
class UH7HeroAbility : public UH7BaseAbility
{
public:
	unsigned long                                      mIsSpell : 1;                                     		// 0x05B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsCombatAbility : 1;                             		// 0x05B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mIsUltimate : 1;                                  		// 0x05B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                mManaCost;                                        		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCooldownTimer;                                   		// 0x05BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRank;                                            		// 0x05C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mMinimumRankOverride;                             		// 0x05C1 (0x0001) [0x0000000000000000]              
	class UAkEvent*                                    mAbilitySound;                                    		// 0x05C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCooldownTimerCurrent;                            		// 0x05CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4138 ];

		return pClassPointer;
	};

	struct FString GetInfoBox ( class AH7EditorHero* Hero, unsigned long withCastOnInfo );
	void ExecuteHeroAbility ( );
	bool IsUtilityFilter ( );
	bool IsDamageFilter ( );
	void DoSpellFinishUpdates ( );
	void DoSpellStartUpdates ( );
	bool CanCast ( struct FString* blockReason );
	void OnInit ( class UH7ICaster* Owner, struct FH7EventContainerStruct container, int abilityID );
	float GetQuickCombatValue ( float armyRelation, float relationThreshold );
	int GetManaCost ( );
	bool IsOnCooldown ( );
	void UpdateCooldownTimer ( );
	int GetCooldownTimerCurrent ( );
	int GetCooldownTimer ( );
	bool IsSpell ( );
	bool IsGrandMasterAbility ( );
	unsigned char GetRank ( );
	void SetManaCost ( int Cost );
	bool IsCombatAbility ( );
	void SetMinimumRankOverride ( unsigned char R );
	unsigned char GetMinimumRankOverride ( );
};



// Class MMH7Game.H7WarfareAbility ( Property size: 3 iter: 7) 
// Class name index: 8926 
// 0x032C (0x08E0 - 0x05B4)
class UH7WarfareAbility : public UH7BaseAbility
{
public:
	unsigned long                                      mHasCharges : 1;                                  		// 0x05B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FH7ChargeEffect                             mCharge;                                          		// 0x05B8 (0x0320) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkEvent*                                    mAbilitySound;                                    		// 0x08D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4140 ];

		return pClassPointer;
	};

	struct FString GetTooltip ( unsigned long extendedVersion, struct FString overwriteBaseString, unsigned char considerOnlyEffectsOfRank, unsigned long resetRankOverride );
	void ExecuteCreatureAbility ( );
	bool CanCast ( struct FString* blockReason );
	void OnInit ( class UH7ICaster* caster, struct FH7EventContainerStruct container, int abilityID );
};



// Class MMH7Game.H7BaseBuff ( Property size: 16 iter: 50) 
// Class name index: 8928 
// 0x0054 (0x021C - 0x01C8)
class UH7BaseBuff : public UH7EffectContainer
{
public:
	unsigned long                                      mIsDebuff : 1;                                    		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsFromMagicSource : 1;                           		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mIsMultipleBuffable : 1;                          		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mIsStackable : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mIsCombatBuff : 1;                                		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mIsOverPortrait : 1;                              		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mIsActive : 1;                                    		// 0x01C8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	int                                                mMaximumStackables;                               		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7DurationEffect >                 mDurationEffects;                                 		// 0x01D0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7DurationModifierEffect >         mDurationModifierEffects;                         		// 0x01E0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            mTags;                                            		// 0x01F0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mFloatingTextOption;                              		// 0x0200 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mLogTextOption;                                   		// 0x0201 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDuration;                                        		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                mCurrentDuration;                                 		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FH7SimDuration >                    mSimDurations;                                    		// 0x020C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4142 ];

		return pClassPointer;
	};

	void GetPermanentStatModsNextRound ( class UH7IEffectTargetable* Unit, TArray< struct FH7MeModifiesStat >* outStats );
	bool ChangesInitiative ( );
	struct FString GetTooltipByCaster ( class UH7ICaster* caster );
	struct FString GetTooltip ( unsigned long extendedVersion, struct FString overwriteBaseString, unsigned char considerOnlyEffectsOfRank, unsigned long resetRankOverride );
	void OnExpire ( unsigned long expireCompletely );
	void SetCurrentDuration ( int Value, unsigned long updateGui );
	int GetWouldBeDurationIfInitedProperly ( );
	void OnApply ( unsigned long simulate );
	void InstanciateEffectsFromStructData ( unsigned long registerEffects );
	void Init ( class UH7IEffectTargetable* Target, class UH7ICaster* caster, unsigned long simulate );
	unsigned char GetDurationModifierTrigger ( );
	void SetDurationModifierEffects ( TArray< struct FH7DurationModifierEffect > Effects );
	TArray< struct FH7DurationModifierEffect > GetDurationModifierEffects ( );
	unsigned char GetLogTextOption ( );
	unsigned char GetFloatingTextOption ( );
	bool IsOverPortrait ( );
	int GetMaxAmountStackable ( );
	bool IsStackable ( );
	bool IsMultipleBuffable ( );
	TArray< unsigned char > GetTags ( );
	bool IsFromMagicSource ( );
	int GetCurrentDuration ( );
	void SetActive ( unsigned long IsActive );
	bool IsActive ( );
	bool IsDebuff ( );
	void SetDuration ( int Value );
	int GetDuration ( );
	struct FString GetFlashIconPath ( );
	class UTexture2D* GetIcon ( );
	bool IsBuff ( );
	bool IsCombatBuff ( );
	void ResetSimDuration ( );
	int GetSimulatedDuration ( );
	void AddSimulatedDuration ( class UH7Effect* Effect, int Duration );
};



// Class MMH7Game.H7BuffHeroArmyBonus ( Property size: 0 iter: 3) 
// Class name index: 8930 
// 0x0000 (0x021C - 0x021C)
class UH7BuffHeroArmyBonus : public UH7BaseBuff
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4144 ];

		return pClassPointer;
	};

	void BuildDynamicEffects ( );
	void OnApply ( unsigned long simulate );
	struct FString GetName ( );
};



// Class MMH7Game.H7Skill ( Property size: 9 iter: 30) 
// Class name index: 8932 
// 0x009C (0x0264 - 0x01C8)
class UH7Skill : public UH7EffectContainer
{
public:
	struct FString                                     mDescriptions[ 0x5 ];                             		// 0x01C8 (0x0050) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mSkillAbilitiesArchetype;                         		// 0x0218 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7HeroAbility*                              mSkillUltimateAbilityArchetype;                   		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPreSetSkillRank;                                 		// 0x0230 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mCurrentSkillRank;                                		// 0x0231 (0x0001) [0x0000000000000000]              
	unsigned char                                      mSkillTier;                                       		// 0x0232 (0x0001) [0x0000000000000000]              
	class UTexture2D*                                  mIcons[ 0x5 ];                                    		// 0x0234 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	int                                                Mid;                                              		// 0x025C (0x0004) [0x0000000000000000]              
	unsigned long                                      mUltimateRequirment : 1;                          		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4146 ];

		return pClassPointer;
	};

	int GetInvestedPointsCount ( );
	unsigned char GetNextSkillRank ( );
	unsigned char GetPreviousSkillRank ( );
	bool CanLearnAbility ( class UH7HeroAbility* Ability );
	TArray< class UH7HeroAbility* > GetAbilitiesArchetypesByRank ( unsigned char Rank, unsigned long onlyThisRank );
	void OnInit ( class AH7Unit* Owner );
	struct FString GetArchetypeDescription ( unsigned char Rank );
	struct FString GetDescription ( unsigned char Rank );
	void SetSkillID ( int Id );
	void SetSkillTier ( unsigned char Tier );
	unsigned char GetSkillTier ( );
	void SetUltimateRequirment ( unsigned long B );
	bool GetUltimateReqirement ( );
	bool IsSkill ( );
	void SetCurrentSkillRank ( unsigned char Value );
	unsigned char GetCurrentSkillRank ( );
	class UH7HeroAbility* GetUltimateSkillAbiliyArchetype ( );
	TArray< class UH7HeroAbility* > GetAllSkillAbilitiesArchetype ( );
	struct FString GetFlashIconPath ( unsigned char Rank );
	class UTexture2D* GetSkillIcon ( unsigned char Rank );
	int GetID ( );
};



// Class MMH7Game.H7Week ( Property size: 2 iter: 8) 
// Class name index: 8934 
// 0x0014 (0x01DC - 0x01C8)
class UH7Week : public UH7EffectContainer
{
public:
	struct FString                                     mDescription;                                     		// 0x01C8 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                mDelay;                                           		// 0x01D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4148 ];

		return pClassPointer;
	};

	void OnInit ( class UH7ICaster* caster );
	struct FString GetArchetypeDescription ( );
	struct FString GetDescription ( );
	void Reduce ( );
	void SetDelay ( int Delay );
	int GetDelay ( );
};



// Class MMH7Game.H7EffectDelegateRevealMap ( Property size: 4 iter: 8) 
// Class name index: 8936 
// 0x001C (0x007C - 0x0060)
class UH7EffectDelegateRevealMap : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mRevealRadius;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureHero*                            mActiveHero;                                      		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7HeroAbility*                              mSourceAbility;                                   		// 0x0074 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4150 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectDivergeEnemyHeroManaCost ( Property size: 2 iter: 7) 
// Class name index: 8938 
// 0x000C (0x006C - 0x0060)
class UH7EffectDivergeEnemyHeroManaCost : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mDivergeManaGainModifier;                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4152 ];

		return pClassPointer;
	};

	class UTexture2D* GetIcon ( );
	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectFlanking ( Property size: 5 iter: 12) 
// Class name index: 8940 
// 0x001C (0x007C - 0x0060)
class UH7EffectFlanking : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mOnlyAllowOnOwningAbility : 1;                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              mFlankingMultiplier;                              		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFullFlankingMultiplier;                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapGridController*                  mGridController;                                  		// 0x0074 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4154 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void AddMultiplier ( unsigned char multiplierType, class UH7CombatResult* Result, int Index, float multBonus );
	unsigned char CalculateFlankingType ( class UH7ICaster* attacker, class UH7IEffectTargetable* Target, unsigned long simulate, float* multBonus );
	void CheckForFlanking ( class UH7Effect* Effect, class UH7CombatResult* Result, unsigned long simulate );
	bool PreparedAbilityHasFlanking ( class UH7Effect* Effect );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectLearnSpell ( Property size: 2 iter: 5) 
// Class name index: 8942 
// 0x0018 (0x0078 - 0x0060)
class UH7EffectLearnSpell : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< unsigned char >                            mForbiddenSkills;                                 		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4156 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectLink ( Property size: 8 iter: 15) 
// Class name index: 8944 
// 0x002C (0x008C - 0x0060)
class UH7EffectLink : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsShieldingEffect : 1;                           		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mNoChains : 1;                                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                mDamageToOwner;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDamageToTargets;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatController*                         mCombatController;                                		// 0x0074 (0x0008) [0x0000000000000000]              
	class AH7AdventureController*                      mAdventureController;                             		// 0x007C (0x0008) [0x0000000000000000]              
	class UH7Effect*                                   mEffect;                                          		// 0x0084 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4158 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	int GetUntaggedDefender ( class UH7IEffectTargetable* Unit, TArray< class UH7IEffectTargetable* >* units, class UH7CombatResult** Result );
	void AddToResults ( class UH7IEffectTargetable* Target, class UH7IEffectTargetable* Victim, class UH7CombatResult** Result, TArray< class UH7IEffectTargetable* >* defenders );
	void LinkEffects ( TArray< class UH7IEffectTargetable* > Targets, class UH7IEffectTargetable* Target, class UH7CombatResult** Result );
	struct FVector GetFXPosition ( class AH7Unit* Unit, struct FString SocketName );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectLuck ( Property size: 3 iter: 7) 
// Class name index: 8946 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectLuck : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mGoodLuck : 1;                                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              mModifierValue;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4160 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectMagicAbsorption ( Property size: 1 iter: 4) 
// Class name index: 8948 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectMagicAbsorption : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4162 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectModifyBuffDuration ( Property size: 3 iter: 7) 
// Class name index: 8950 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectModifyBuffDuration : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mDurationModifierValue;                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mHasNoBuffs : 1;                                  		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4164 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectModifySpellRank ( Property size: 6 iter: 9) 
// Class name index: 8952 
// 0x0018 (0x0078 - 0x0060)
class UH7EffectModifySpellRank : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mRankToSet;                                       		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRankToCompare;                                   		// 0x0069 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIncreaseRank : 1;                                		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDoNotDowngrade : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UH7HeroAbility*                              mSpecificSpell;                                   		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4166 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectOverrideHeroNegotiation ( Property size: 1 iter: 4) 
// Class name index: 8954 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectOverrideHeroNegotiation : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4168 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectPortalOfAsha ( Property size: 7 iter: 22) 
// Class name index: 8956 
// 0x0040 (0x00A0 - 0x0060)
class UH7EffectPortalOfAsha : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureController*                      mAdventureController;                             		// 0x0068 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mActiveHero;                                      		// 0x0070 (0x0008) [0x0000000000000000]              
	class AH7Camera*                                   mCamera;                                          		// 0x0078 (0x0008) [0x0000000000000000]              
	class AH7Town*                                     mTargetTown;                                      		// 0x0080 (0x0008) [0x0000000000000000]              
	class UH7HeroAbility*                              mSourceAbility;                                   		// 0x0088 (0x0008) [0x0000000000000000]              
	TArray< class AH7Town* >                           mTownsWithPortals;                                		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4170 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	bool OwnTown ( class AH7Town* Town, class AH7AdventureHero* Hero );
	int GetDistance ( class AH7Town* Town, class AH7AdventureHero* Hero );
	bool IsEntranceFree ( class AH7Town* Town );
	bool HasTownPortal ( class AH7Town* Town );
	class AH7Town* GetClosestTown ( class AH7AdventureHero* Hero );
	bool FindClosestAccessibleTown ( );
	bool FindOwnedTownPortals ( );
	void ScrollBackToHero ( );
	bool ScrollToTown ( );
	void AbortAbility ( );
	void ActivateTeleportation ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	bool CanCast ( class UH7ICaster* caster, struct FString* blockReason );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectRefundManaCost ( Property size: 2 iter: 6) 
// Class name index: 8958 
// 0x000C (0x006C - 0x0060)
class UH7EffectRefundManaCost : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mReduceManaCost;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4172 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectResetRandomBuffDuration ( Property size: 3 iter: 7) 
// Class name index: 8960 
// 0x000C (0x006C - 0x0060)
class UH7EffectResetRandomBuffDuration : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mForConditions : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mForBuffs : 1;                                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4174 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	class UH7BaseBuff* PickRandomBuff ( TArray< class UH7BaseBuff* > buffs );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialAdditionalCounter ( Property size: 4 iter: 8) 
// Class name index: 8962 
// 0x0014 (0x0074 - 0x0060)
class UH7EffectSpecialAdditionalCounter : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                currentCount;                                     		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                countTo;                                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      missAttack : 1;                                   		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4176 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialAddResources ( Property size: 6 iter: 11) 
// Class name index: 8964 
// 0x001C (0x007C - 0x0060)
class UH7EffectSpecialAddResources : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mUseRandomResource : 1;                           		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mAddInstantly : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      mResourceRank;                                    		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UH7Resource*                                 mResource;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAmount;                                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4178 ];

		return pClassPointer;
	};

	class UTexture2D* GetIcon ( );
	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialAddResourcesToTarget ( Property size: 6 iter: 11) 
// Class name index: 8966 
// 0x0048 (0x00A8 - 0x0060)
class UH7EffectSpecialAddResourcesToTarget : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mUseRandomResource : 1;                           		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                mAmount;                                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ResourceQuantity >               mPossibleResourcesMin;                            		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mPossibleResourcesMax;                            		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7ResourceQuantity                         mPreparedResources;                               		// 0x0090 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4180 ];

		return pClassPointer;
	};

	class UTexture2D* GetIcon ( );
	struct FString GetTooltipReplacement ( );
	struct FString GetDefaultString ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialAllowAlliedMoveThrough ( Property size: 2 iter: 5) 
// Class name index: 8968 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialAllowAlliedMoveThrough : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mSetMoveThrough : 1;                              		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4182 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialBuffDurationModifier ( Property size: 4 iter: 9) 
// Class name index: 8970 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialBuffDurationModifier : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mModifierValue;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mModifyDebuffs : 1;                               		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mModifyBuffs : 1;                                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4184 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void ModifyBuffs ( TArray< class UH7BaseBuff* > buffs, class AH7Unit* Unit );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialCapStat ( Property size: 3 iter: 9) 
// Class name index: 8972 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialCapStat : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mCapOrFloor : 1;                                  		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              mCap;                                             		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4186 ];

		return pClassPointer;
	};

	class UTexture2D* GetIcon ( );
	struct FString GetDefaultString ( );
	struct FString GetValue ( int nr );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialCastOnRandomTarget ( Property size: 8 iter: 14) 
// Class name index: 8974 
// 0x0040 (0x00A0 - 0x0060)
class UH7EffectSpecialCastOnRandomTarget : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7BaseAbility*                              mAbilityTemplate;                                 		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAmountOfCasts;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mCastOnlyOnceOnTarget : 1;                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mFakeRandom : 1;                                  		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UH7BaseAbility*                              mAbility;                                         		// 0x0078 (0x0008) [0x0000000000000000]              
	TArray< unsigned char >                            mAbilityTags;                                     		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IEffectTargetable* >              mPreviousTargets;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4188 ];

		return pClassPointer;
	};

	void AddSupportBuff ( class AH7CombatHero* Hero, float additionals, class UH7EffectContainer* Src );
	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void InitAbility ( class UH7Effect* Effect );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialChainLightning ( Property size: 10 iter: 22) 
// Class name index: 8976 
// 0x005C (0x00BC - 0x0060)
class UH7EffectSpecialChainLightning : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mBranchAmount;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mJumpAmount;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDamageModifierPerJump;                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7CombatResult*                             mResult;                                          		// 0x0074 (0x0008) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mRootTarget;                                      		// 0x007C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0084 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UH7IEffectTargetable* >              mTargets;                                         		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7CombatMapGridController*                  mCombatGridController;                            		// 0x009C (0x0008) [0x0000000000000000]              
	TArray< struct FH7TargetableArray >                mChainTargets;                                    		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Effect*                                   mEffect;                                          		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4190 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	int GetSize ( class UH7IEffectTargetable* Target );
	float GetDistance ( class UH7IEffectTargetable* Source, class UH7IEffectTargetable* Target );
	bool IsProcessed ( class UH7IEffectTargetable* Target );
	TArray< class UH7IEffectTargetable* > GetClosestTargets ( class UH7IEffectTargetable* Target );
	float GetDamageModifier ( int jumpCount );
	void AddTargetsToResult ( );
	void GatherChainTargets ( );
	struct FVector GetFXPosition ( class UH7IEffectTargetable* Unit, struct FString SocketName );
	void PlayFX ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialChangeAnimationAndMoveSpeed ( Property size: 1 iter: 4) 
// Class name index: 8978 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialChangeAnimationAndMoveSpeed : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4192 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialChangeFlankability ( Property size: 5 iter: 8) 
// Class name index: 8980 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialChangeFlankability : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mChangeFullFlanking : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mAllowFullFlanking : 1;                           		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mChangeFlanking : 1;                              		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mAllowFlanking : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4194 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialChangeMovementType ( Property size: 3 iter: 6) 
// Class name index: 8982 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialChangeMovementType : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mNewMovementType;                                 		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mSetToOriginal : 1;                               		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4196 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialCollapseAbility ( Property size: 2 iter: 5) 
// Class name index: 8984 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialCollapseAbility : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mModifierValue;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4198 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialConditionalStatMod ( Property size: 3 iter: 10) 
// Class name index: 8986 
// 0x0074 (0x00D4 - 0x0060)
class UH7EffectSpecialConditionalStatMod : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FH7MeModifiesStat                           mStatMod;                                         		// 0x0068 (0x0064) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7Effect*                                   mSourceEffect;                                    		// 0x00CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4200 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetValue ( int nr );
	class UTexture2D* GetIcon ( );
	struct FString GetTooltipReplacement ( );
	void DisplaySignsAndFeedback ( struct FConditionalStatMod C );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialCreaturePoolModify ( Property size: 2 iter: 5) 
// Class name index: 8988 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialCreaturePoolModify : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mCreaturePoolMultiplier;                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4202 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialCreatureUpgradeCostModifier ( Property size: 3 iter: 6) 
// Class name index: 8990 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialCreatureUpgradeCostModifier : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mHasCreatureUpradeCostModifier : 1;               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              mCreatureUpradeCostModifier;                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4204 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialDeathMarch ( Property size: 3 iter: 14) 
// Class name index: 8992 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialDeathMarch : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mStackReduction;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDeathCount;                                      		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4206 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void StarvingStacks ( TArray< class UH7BaseCreatureStack* > stacks );
	void StarvingArmy ( class AH7AdventureArmy* Army );
	void StarvingTowns ( class AH7Player* targetPlayer );
	void StarvingForts ( class AH7Player* targetPlayer );
	void StarvingArmies ( TArray< class AH7AdventureArmy* > armies );
	void StarvingGarrison ( class AH7Player* targetPlayer );
	void SendNotes ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialDecreaseBuildingCosts ( Property size: 2 iter: 6) 
// Class name index: 8994 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialDecreaseBuildingCosts : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mPercentage;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4208 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialDecreaseRecruitingCosts ( Property size: 2 iter: 6) 
// Class name index: 8996 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialDecreaseRecruitingCosts : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mPercentage;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4210 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialDisableFleeSurrender ( Property size: 1 iter: 4) 
// Class name index: 8998 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialDisableFleeSurrender : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4212 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialEnableScouting ( Property size: 1 iter: 4) 
// Class name index: 9000 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialEnableScouting : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4214 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialExpandGrowthEffects ( Property size: 1 iter: 4) 
// Class name index: 9002 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialExpandGrowthEffects : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4216 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialFaceOfFear ( Property size: 7 iter: 18) 
// Class name index: 9004 
// 0x002C (0x008C - 0x0060)
class UH7EffectSpecialFaceOfFear : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mFleeingDistance;                                 		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                mFleeingDistanceDiagonal;                         		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned long                                      mShowDebugPosition : 1;                           		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsSimulated : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	class AH7CreatureStack*                            mAttackingStack;                                  		// 0x0074 (0x0008) [0x0000000000000000]              
	TArray< class UH7IEffectTargetable* >              mTargets;                                         		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4218 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	TArray< class UH7CombatMapCell* > GetAttackerPosition ( );
	void ShowCellHighlight ( TArray< class UH7CombatMapCell* > Cells );
	void MoveToCells ( class AH7CreatureStack* Stack, TArray< class UH7CombatMapCell* > Cells );
	void GetClosestCells ( class AH7CreatureStack* attacker, class AH7CreatureStack* defender, class UH7CombatMapCell** attackerCell, class UH7CombatMapCell** defenderCell );
	bool CanReachCell ( class AH7CreatureStack* Stack, class UH7CombatMapCell* cell );
	class UH7CombatMapCell* GetMirroredCell ( class UH7CombatMapCell* cellToMirror, class UH7CombatMapCell* mirrorCenter, class AH7CreatureStack* Stack );
	TArray< class UH7CombatMapCell* > GetFleeingCells ( class AH7CreatureStack* Stack );
	void HandleFearEffect ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialFamiliarTerrain ( Property size: 4 iter: 8) 
// Class name index: 9006 
// 0x0028 (0x0088 - 0x0060)
class UH7EffectSpecialFamiliarTerrain : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7BaseAbility*                              mAbility;                                         		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AH7Town* >                           mOldTownList;                                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Player*                                   mPlayer;                                          		// 0x0080 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4220 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialGlobalRuler ( Property size: 3 iter: 8) 
// Class name index: 9008 
// 0x0020 (0x0080 - 0x0060)
class UH7EffectSpecialGlobalRuler : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7Effect*                                   mEffect;                                          		// 0x0068 (0x0008) [0x0000000000000000]              
	TArray< class AH7Town* >                           mTowns;                                           		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4222 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void ApplyGovernourAurasOnTowns ( );
	void DestroyCurrentGovernorAuras ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialGlobalTradeModifier ( Property size: 2 iter: 5) 
// Class name index: 9010 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialGlobalTradeModifier : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mGlobelTradeModifier;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4224 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialImplosion ( Property size: 10 iter: 19) 
// Class name index: 9012 
// 0x0050 (0x00B0 - 0x0060)
class UH7EffectSpecialImplosion : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mPullDistance;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mFaceMainTarget : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsSimulated : 1;                                 		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsAiCaster : 1;                                  		// 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< class AH7CreatureStack* >                  mTargets;                                         		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7CreatureStack*                            mMainTarget;                                      		// 0x0080 (0x0008) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mCombatMapGridController;                         		// 0x0088 (0x0008) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mHighlightCells;                                  		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mOccupiedCells;                                   		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4226 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void ShowCellPreview ( class UH7CombatMapCell* cell, class AH7CreatureStack* Stack, struct FRotator Rot );
	void RepositionCreatureStack ( class AH7CreatureStack* Stack, class UH7CombatMapCell* cell );
	bool FindValidCell ( class AH7CreatureStack* Stack, TArray< class UH7CombatMapCell* > Cells, class UH7CombatMapCell** validCell, int* HasObstacle );
	void HandlePullEffect ( );
	void GetDistances ( TArray< float >* distances );
	void SortTargets ( TArray< float >* distances );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialIncreaseAuraSize ( Property size: 6 iter: 12) 
// Class name index: 9014 
// 0x0038 (0x0098 - 0x0060)
class UH7EffectSpecialIncreaseAuraSize : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FIntPoint                                   mAreaGrowth;                                      		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Effect*                                   mEffect;                                          		// 0x0070 (0x0008) [0x0000000000000000]              
	class UH7AuraManager*                              mAuraManager;                                     		// 0x0078 (0x0008) [0x0000000000000000]              
	TArray< struct FH7AuraInstance >                   mAuraInstances;                                   		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7BaseAbility*                              mSourceAbility;                                   		// 0x0090 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4228 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void FindAuraInstances ( );
	TArray< struct FIntPoint > GetIncreasedAuraSize ( int Index );
	void ModifyAuras ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialIncreaseBuildingAmountPerDay ( Property size: 2 iter: 5) 
// Class name index: 9016 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialIncreaseBuildingAmountPerDay : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mAmount;                                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4230 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialInitialDamageReduction ( Property size: 7 iter: 12) 
// Class name index: 9018 
// 0x0040 (0x00A0 - 0x0060)
class UH7EffectSpecialInitialDamageReduction : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mMultiplier;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mMultiplyOnTick : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mSetDamage : 1;                                   		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mCurrentDamage;                                   		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mInitialDamage;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FH7RangeValue                               mDamageRange;                                     		// 0x0078 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4232 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetValue ( int I );
	struct FString GetDefaultString ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialInstantReinforcements ( Property size: 6 iter: 16) 
// Class name index: 9020 
// 0x00C4 (0x0124 - 0x0060)
class UH7EffectSpecialInstantReinforcements : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7AdventureController*                      mAdventureController;                             		// 0x0068 (0x0008) [0x0000000000000000]              
	class UH7HeroAbility*                              mSourceAbility;                                   		// 0x0070 (0x0008) [0x0000000000000000]              
	class UH7Effect*                                   mEffect;                                          		// 0x0078 (0x0008) [0x0000000000000000]              
	TArray< struct FH7TeleportCosts >                  mTeleportCosts;                                   		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7FXStruct                                 mCasterFXS;                                       		// 0x0090 (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4234 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	bool OwnTown ( class AH7Town* Town, class AH7AdventureHero* Hero );
	int GetDistance ( class AH7Town* Town, class AH7AdventureHero* Hero );
	bool HasTownPortal ( class AH7Town* Town );
	bool IsOnSameGrid ( class AH7Town* Town, class AH7AdventureHero* Hero );
	class AH7Town* GetNearestTown ( class AH7AdventureHero* Hero );
	struct FH7TeleportCosts GetTeleportCostsForCaster ( class AH7AdventureHero* caster );
	void ManaCostDelegate ( unsigned long creatureWasTransferred );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialKill ( Property size: 1 iter: 4) 
// Class name index: 9022 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialKill : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4236 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialKillCreaturesOnHeroArmy ( Property size: 3 iter: 10) 
// Class name index: 9024 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialKillCreaturesOnHeroArmy : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mStackReduction;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDeathCount;                                      		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4238 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void StarvingStacks ( TArray< class UH7BaseCreatureStack* > stacks );
	void StarvingArmy ( class AH7EditorArmy* Army );
	void SendNotes ( class AH7EditorHero* Hero );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialKillTopCreature ( Property size: 1 iter: 4) 
// Class name index: 9026 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialKillTopCreature : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4240 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialLifeDrain ( Property size: 4 iter: 7) 
// Class name index: 9028 
// 0x0038 (0x0098 - 0x0060)
class UH7EffectSpecialLifeDrain : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mPercentDamageToHeal;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentDamage;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	struct FH7RangeValue                               mDamageRange;                                     		// 0x0070 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4242 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialLoseAction ( Property size: 5 iter: 8) 
// Class name index: 9030 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialLoseAction : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mActiveUnit : 1;                                  		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUseCustomDelay : 1;                              		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mNoDelay : 1;                                     		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              mSkipTurnDelay;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4244 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialManeuver ( Property size: 2 iter: 8) 
// Class name index: 9032 
// 0x0018 (0x0078 - 0x0060)
class UH7EffectSpecialManeuver : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UH7CreatureAbility* >                mInterruptThese;                                  		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4246 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	class UH7CombatMapCell* GetManeuverPosition ( class AH7CreatureStack* maneuverer, class AH7CreatureStack* attacker );
	bool CheckInterrupt ( class AH7CreatureStack* maneuverer );
	void ForceEndTurnForInterrupted ( class AH7CreatureStack* theInterrupted );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialModifiedDamageOverTime ( Property size: 10 iter: 15) 
// Class name index: 9034 
// 0x0058 (0x00B8 - 0x0060)
class UH7EffectSpecialModifiedDamageOverTime : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mInitialDamage;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDamageModifierOverTime;                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseStackSize : 1;                                		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mSetDamage : 1;                                   		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mCurrentDamage;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                mInitialStackSize;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	class UH7ICaster*                                  mCaster;                                          		// 0x007C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0084 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FH7RangeValue                               mDamageRange;                                     		// 0x008C (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mEstimatedDamage;                                 		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4248 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetValue ( int nr );
	struct FString GetDefaultString ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialModifyManaCost ( Property size: 2 iter: 8) 
// Class name index: 9036 
// 0x0018 (0x0078 - 0x0060)
class UH7EffectSpecialModifyManaCost : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7ManaCostModifier >               mManaCostModifiers;                               		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4250 ];

		return pClassPointer;
	};

	class UTexture2D* GetIcon ( );
	struct FString GetDefaultString ( );
	struct FString GetValue ( int nr );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialModifyStackSize ( Property size: 6 iter: 12) 
// Class name index: 9038 
// 0x0014 (0x0074 - 0x0060)
class UH7EffectSpecialModifyStackSize : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mOperationType;                                   		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              mModifier;                                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mUseInitialStackSize : 1;                         		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mOverrideInitialStackSize : 1;                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mTakeCasultiesFromReinforcements : 1;             		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4252 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	int GetStackSize ( class AH7CreatureStack* Stack );
	void ModifyStackSize ( class AH7CreatureStack* Stack );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialModifyStatBoniFromBuffs ( Property size: 2 iter: 6) 
// Class name index: 9040 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialModifyStatBoniFromBuffs : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mModifierValue;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4254 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void ModifyStatMods ( class UH7BaseBuff* buff, class UH7IEffectTargetable* Target );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialModifyTargetType ( Property size: 6 iter: 9) 
// Class name index: 9042 
// 0x003C (0x009C - 0x0060)
class UH7EffectSpecialModifyTargetType : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mNewTargetType;                                   		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FIntPoint                                   mAreaOfEffectSize;                                		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FIntPoint >                         mAreaOfEffectShape;                               		// 0x0074 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7ConeStruct                               mTargetCone;                                      		// 0x0084 (0x0014) [0x0000000000080001]              ( CPF_Edit | CPF_Component )
	unsigned long                                      mIsAreaFilled : 1;                                		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4256 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialModifyTerrainMovementCost ( Property size: 2 iter: 5) 
// Class name index: 9044 
// 0x0018 (0x0078 - 0x0060)
class UH7EffectSpecialModifyTerrainMovementCost : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7TerrainCostModifier >            mMovementCostModifiers;                           		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4258 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialNecromancy ( Property size: 8 iter: 15) 
// Class name index: 9046 
// 0x003C (0x009C - 0x0060)
class UH7EffectSpecialNecromancy : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mUseCreatureArchetype : 1;                        		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mModifyWithStat : 1;                              		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AH7Creature*                                 mRaisedCreature;                                  		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mRaisePercentage;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxResCreatures;                                 		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseAbility* >                    mAbilityRestrictions;                             		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7Creature* >                       mOmittedCreatures;                                		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4260 ];

		return pClassPointer;
	};

	struct FString GetValue ( int nr );
	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	bool CanRaise ( class AH7Creature* Creature );
	void GetHealthPoolSumForArmy ( TArray< class UH7BaseCreatureStack* > currentArmy, TArray< class UH7BaseCreatureStack* > advArmy, unsigned long isWinningArmy, unsigned long isElrath, int Rate, int* healthPool );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialNeutralGrowthMultiplier ( Property size: 2 iter: 5) 
// Class name index: 9048 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialNeutralGrowthMultiplier : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mMultiplier;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4262 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialOverrideMinimumRank ( Property size: 3 iter: 6) 
// Class name index: 9050 
// 0x0014 (0x0074 - 0x0060)
class UH7EffectSpecialOverrideMinimumRank : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mRankToSet;                                       		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroAbility*                              mSpecificSpell;                                   		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4264 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialPerfectOffense ( Property size: 4 iter: 8) 
// Class name index: 9052 
// 0x0012 (0x0072 - 0x0060)
class UH7EffectSpecialPerfectOffense : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UH7BaseBuff*                                 mBuff;                                            		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mStatToModify;                                    		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mStatToUse;                                       		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4266 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void AdjustStatModifier ( class UH7BaseBuff* buff, float NewValue );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialProvideCover ( Property size: 2 iter: 5) 
// Class name index: 9054 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialProvideCover : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mSetCoverValue : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4268 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialPushback ( Property size: 9 iter: 20) 
// Class name index: 9056 
// 0x0034 (0x0094 - 0x0060)
class UH7EffectSpecialPushback : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mPushDistance;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPushDistanceDiagonal;                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mGhostOpacity;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsSimulated : 1;                                 		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsAiCaster : 1;                                  		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class UH7IEffectTargetable* >              mTargets;                                         		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      mPushDirection;                                   		// 0x0088 (0x0001) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mCombatMapGridController;                         		// 0x008C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4270 ];

		return pClassPointer;
	};

	struct FString GetValue ( int nr );
	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void ShowCellPreview ( class UH7CombatMapCell* cell );
	void RepositionCreatureStack ( class AH7CreatureStack* Stack, class UH7CombatMapCell* cell );
	bool CanReachCell ( class AH7CreatureStack* Stack, class UH7CombatMapCell* cell );
	class UH7CombatMapCell* GetPushTargetCell ( class UH7CombatMapCell* directionCell, class AH7CreatureStack* Stack );
	void HandlePushBackEffect ( );
	void DestroyPreviousGhosts ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialReappearCreatureOnGrid ( Property size: 6 iter: 10) 
// Class name index: 9058 
// 0x0020 (0x0080 - 0x0060)
class UH7EffectSpecialReappearCreatureOnGrid : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mSpeed;                                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mFlyForwardUnits;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDescendFrom;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDescendSpeed;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7CreatureStack*                            mOwner;                                           		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4272 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetDefaultString ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialRecruitersOutpost ( Property size: 6 iter: 10) 
// Class name index: 9060 
// 0x0034 (0x0094 - 0x0060)
class UH7EffectSpecialRecruitersOutpost : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FH7TownBuffToAoCData >              mData;                                            		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7Town*                                     myOwner;                                          		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned long                                      mDidRegisterListener : 1;                         		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsDestroying : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class UH7IEffectTargetable* >              myTargets;                                        		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4274 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void RemoveBuffsFromInvalidTargets ( TArray< class UH7IEffectTargetable* > invalidTargets );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialRefundResourceCost ( Property size: 2 iter: 5) 
// Class name index: 9062 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialRefundResourceCost : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mPercentage;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4276 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialRemoveBuffs ( Property size: 7 iter: 12) 
// Class name index: 9064 
// 0x0011 (0x0071 - 0x0060)
class UH7EffectSpecialRemoveBuffs : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mRemoveRandom : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mRemoveDebuff : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mBySchool : 1;                                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mAllMagicSource : 1;                              		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                mAmount;                                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRemoveSchool;                                    		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4278 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetDefaultString ( );
	class UH7BaseBuff* PickARandomBuff ( TArray< class UH7BaseBuff* > buffs );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialRemoveCreatureFromGrid ( Property size: 7 iter: 12) 
// Class name index: 9066 
// 0x0030 (0x0090 - 0x0060)
class UH7EffectSpecialRemoveCreatureFromGrid : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mSpeed;                                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxHeight;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mLookTowardsTargetArea : 1;                       		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                mFlyForwardUnits;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7CombatMapCell* >                  mTargetCells;                                     		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7CreatureStack*                            mOwner;                                           		// 0x0088 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4280 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetDefaultString ( );
	void OnFaceTargetDone ( class UH7Effect* Effect );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialReplaceTargets ( Property size: 5 iter: 15) 
// Class name index: 9068 
// 0x0038 (0x0098 - 0x0060)
class UH7EffectSpecialReplaceTargets : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FIntPoint                                   mArea;                                            		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7IEffectTargetable* >              mTargets;                                         		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7CombatMapCell* >                  mTargetArea;                                      		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapGrid*                            mGrid;                                            		// 0x0090 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4282 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void SetRandomRotation ( class AH7CreatureStack* Stack );
	void RepositionCreatureStack ( class AH7CreatureStack* Stack, class UH7CombatMapCell* cell );
	bool CanPlaceHere ( class AH7CreatureStack* Stack, class UH7CombatMapCell* targetCell );
	TArray< class UH7CombatMapCell* > GetPossibleTargetCells ( class AH7CreatureStack* Stack );
	void InitTargetArea ( class UH7IEffectTargetable* Target );
	int SortFunction ( class AH7CreatureStack* stack1, class AH7CreatureStack* stack2 );
	void HandleRepositioning ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialResetIdolOfFertility ( Property size: 1 iter: 4) 
// Class name index: 9070 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialResetIdolOfFertility : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4284 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialRetrieveTearOfAsha ( Property size: 5 iter: 9) 
// Class name index: 9072 
// 0x0024 (0x0084 - 0x0060)
class UH7EffectSpecialRetrieveTearOfAsha : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UParticleSystem*                             mRevealFX;                                        		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mRevealFailFX;                                    		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mRevealTimer;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7AdventureHero*                            mHero;                                            		// 0x007C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4286 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void RevealFog ( class UH7AdventureMapCell* cell );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialReturnToPosition ( Property size: 2 iter: 6) 
// Class name index: 9074 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialReturnToPosition : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mRestoreRotation : 1;                             		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4288 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	bool CheckPlaceability ( class UH7BaseCell* cell, class UH7ICaster* caster );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialShadowOfDeath ( Property size: 2 iter: 9) 
// Class name index: 9076 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialShadowOfDeath : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              mPercentage;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4290 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetMessageLog ( );
	struct FString GetFloatingText ( int Size );
	struct FString GetTooltipReplacement ( );
	void Imprison ( class AH7CreatureStack* Stack );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialShieldEffect ( Property size: 6 iter: 13) 
// Class name index: 9078 
// 0x0040 (0x00A0 - 0x0060)
class UH7EffectSpecialShieldEffect : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FH7SpellScaling                             mMinShieldValue;                                  		// 0x0068 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FH7SpellScaling                             mMaxShieldValue;                                  		// 0x007C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mMultiplyByMetamagic : 1;                         		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                mShieldValue;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	class UH7Effect*                                   mEffect;                                          		// 0x0098 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4292 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetDefaultString ( );
	struct FString GetValue ( int nr );
	void ApplyShield ( int resultIdx, unsigned long isForecast, class UH7CombatResult** Result );
	struct FH7RangeValue GetFinalDamageRange ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialSoulReaver ( Property size: 2 iter: 6) 
// Class name index: 9080 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialSoulReaver : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mStealFromEnemy : 1;                              		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4294 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetDefaultString ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialStackRegeneration ( Property size: 2 iter: 6) 
// Class name index: 9082 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialStackRegeneration : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mRegenPercentage;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4296 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialStasis ( Property size: 2 iter: 5) 
// Class name index: 9084 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialStasis : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mSetStasis : 1;                                   		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4298 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialStormLord ( Property size: 7 iter: 23) 
// Class name index: 9086 
// 0x004C (0x00AC - 0x0060)
class UH7EffectSpecialStormLord : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mMaxDistance;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7ChainEffectPair >                mChainPairs;                                      		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7ChainEffectPair >                mAllPairDistances;                                		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7CreatureStack* >                  mTargets;                                         		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Effect*                                   mEffect;                                          		// 0x009C (0x0008) [0x0000000000000000]              
	class UH7AuraManager*                              mAuraManager;                                     		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4300 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	bool IsInChain ( struct FH7ChainEffectPair Pair );
	void AddToFinalPairs ( struct FH7ChainEffectPair Pair );
	void CreateAndAddPair ( class AH7CreatureStack* A, class AH7CreatureStack* B, int Distance );
	TArray< struct FH7ChainEffectPair > GetNextClosestPairs ( );
	void ConnectClosestPairs ( );
	int SortFunction ( struct FH7ChainEffectPair A, struct FH7ChainEffectPair B );
	void CalculateAllDistances ( TArray< class AH7CreatureStack* > stacks );
	struct FVector GetFXPosition ( class UH7IEffectTargetable* Unit, struct FString SocketName );
	void DestroyFX ( );
	void SpawnFX ( );
	void DestroyAuras ( );
	void InitAuras ( );
	void HandleChainEffect ( TArray< class UH7IEffectTargetable* > Targets );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialSummonCreatureStack ( Property size: 13 iter: 23) 
// Class name index: 9088 
// 0x0070 (0x00D0 - 0x0060)
class UH7EffectSpecialSummonCreatureStack : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mIsCopy : 1;                                      		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mPlayDeathAnim : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class AH7Creature* >                       mCreaturePool;                                    		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7SpellScaling                             mScalingStruct;                                   		// 0x007C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class UH7BaseBuff*                                 mBuff;                                            		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFakeDyingDelay;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mCellHighlight;                                   		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatMapGridController*                  mCombatMapGridController;                         		// 0x00A0 (0x0008) [0x0000000000000000]              
	float                                              mPercent;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                mStackSize;                                       		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FString                                     mFormular;                                        		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7ICaster*                                  mCaster;                                          		// 0x00C0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00C8 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4302 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetValue ( int nr );
	struct FString GetDefaultString ( );
	int SpellScaling ( class UH7ICaster* caster );
	class AH7CreatureStack* SpawnStack ( class AH7Creature* Creature, int Size, class AH7CombatHero* Hero );
	void ShowCellPreview ( TArray< class UH7IEffectTargetable* > Cells );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
	bool DoesCopyStack ( );
	void SetCaster ( class UH7ICaster* caster );
};



// Class MMH7Game.H7EffectSpecialSummonShip ( Property size: 2 iter: 5) 
// Class name index: 9090 
// 0x0010 (0x0070 - 0x0060)
class UH7EffectSpecialSummonShip : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Ship*                                     mShip;                                            		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4304 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialSummonWarfareUnit ( Property size: 4 iter: 7) 
// Class name index: 9092 
// 0x0014 (0x0074 - 0x0060)
class UH7EffectSpecialSummonWarfareUnit : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      mUseFactionDefault : 1;                           		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDefaultTypeAttack : 1;                           		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AH7EditorWarUnit*                            mWarUnit;                                         		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4306 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialTeleport ( Property size: 2 iter: 7) 
// Class name index: 9094 
// 0x000C (0x006C - 0x0060)
class UH7EffectSpecialTeleport : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mRange;                                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4308 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	struct FString GetDefaultString ( );
	int GetRange ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectSpecialTsunami ( Property size: 14 iter: 30) 
// Class name index: 9096 
// 0x005C (0x00BC - 0x0060)
class UH7EffectSpecialTsunami : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AH7Wave*                                     mWaveEffect;                                      		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSmallCreatureShift;                              		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mBigCreatureShift;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mRotateRandom : 1;                                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsDiv2 : 1;                                      		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsAttacker : 1;                                  		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsAiCaster : 1;                                  		// 0x0078 (0x0004) [0x0000000000000000] [0x00000008] 
	class UH7BaseAbility*                              mSource;                                          		// 0x007C (0x0008) [0x0000000000000000]              
	struct FVector                                     mStartPos;                                        		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     mTargetPos;                                       		// 0x0090 (0x000C) [0x0000000000000000]              
	class AH7Wave*                                     mTsunami;                                         		// 0x009C (0x0008) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mGridCnt;                                         		// 0x00A4 (0x0008) [0x0000000000000000]              
	TArray< struct FCreaturePositon >                  mNewCreaturePosition;                             		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4310 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Reset ( );
	void PreviewCreaturePositions ( );
	void SetStartPos ( );
	void SetEndPos ( );
	void CalculateInitialVectors ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
	struct FCreaturePositon CreateCreaturePosition ( struct FIntPoint NewPos, class AH7CreatureStack* creatureStack );
	bool IsCellOnGrid ( struct FIntPoint cellPos );
	bool IsCellIsAlreadyTaken ( struct FIntPoint cellPos );
	bool IsSpaceFree ( struct FIntPoint Position );
	bool IsStackShifted ( class AH7CreatureStack* creatureStack );
	void PreviewSiftToNewPosition ( class UH7IEffectTargetable* Target );
	void PreCalculateNewCreaturePostitions ( TArray< class UH7IEffectTargetable* > Targets );
	bool IsTargetOnPosition ( TArray< class UH7IEffectTargetable* > Targets, struct FIntPoint cellPos );
};



// Class MMH7Game.H7EffectSpecialWait ( Property size: 1 iter: 4) 
// Class name index: 9098 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectSpecialWait : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4312 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectTeachExperience ( Property size: 2 iter: 6) 
// Class name index: 9100 
// 0x000C (0x006C - 0x0060)
class UH7EffectTeachExperience : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mExperienceCap;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4314 ];

		return pClassPointer;
	};

	struct FString GetDefaultString ( );
	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectTeachSpells ( Property size: 1 iter: 4) 
// Class name index: 9102 
// 0x0008 (0x0068 - 0x0060)
class UH7EffectTeachSpells : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4316 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7EffectWarunitControl ( Property size: 2 iter: 5) 
// Class name index: 9104 
// 0x0009 (0x0069 - 0x0060)
class UH7EffectWarunitControl : public UObject
{
public:
	struct FPointer                                    VfTable_IH7IEffectDelegate;                       		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      mEffectedWarType;                                 		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4318 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7IEffectDelegate ( Property size: 0 iter: 3) 
// Class name index: 9106 
// 0x0000 (0x0060 - 0x0060)
class UH7IEffectDelegate : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4320 ];

		return pClassPointer;
	};

	struct FString GetTooltipReplacement ( );
	void Execute ( class UH7Effect* Effect, struct FH7EventContainerStruct container, unsigned long isSimulated );
	void Initialize ( class UH7Effect* Effect );
};



// Class MMH7Game.H7SkillManager ( Property size: 6 iter: 45) 
// Class name index: 9108 
// 0x003C (0x009C - 0x0060)
class UH7SkillManager : public UObject
{
public:
	TArray< class UH7Skill* >                          mAvailableSkills;                                 		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroAbility* >                    mLearnedAbilities;                                		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7EditorHero*                               mOwner;                                           		// 0x0080 (0x0008) [0x0000000000000000]              
	class UH7RndSkillManager*                          mRndSkillManager;                                 		// 0x0088 (0x0008) [0x0000000000000000]              
	class UH7HeroEventParam*                           mEventParam;                                      		// 0x0090 (0x0008) [0x0000000000000000]              
	int                                                mSkillPointsSpend;                                		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4322 ];

		return pClassPointer;
	};

	void DumpCurrentState ( );
	void GetAbilityByAbilityId ( struct FString abilityID );
	void raiseEvent ( unsigned char triggerEvent, unsigned long simulate, struct FH7EventContainerStruct container );
	bool HasLearnedAbility ( class UH7HeroAbility* Ability );
	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	TArray< class UH7HeroAbility* > GetAllUnlearnedAbilites ( unsigned long onlyForCurrRank );
	void RemoveFromLearnedAbilities ( class UH7HeroAbility* Ability );
	void AddToLearnedAbilities ( class UH7HeroAbility* Ability );
	void DoLearnAbility ( class UH7HeroAbility* Ability );
	void InitializePreLearnedAbilities ( TArray< class UH7HeroAbility* > Abilities );
	class UH7Skill* GetSkillBySkillType ( unsigned char Type );
	void GetProductionSkills ( TArray< class UH7EffectSpecialAddResources* >* produc );
	class UH7Skill* GetSkillInstance ( int Id, class UH7Skill* Skill );
	int GetSkillIndex ( int Id );
	void LearnUltimate ( int SkillID, struct FString abilityID );
	bool CanLearnUltimate ( int SkillID );
	void OverwriteSkillComplete ( int oldSkillID, struct FString newSkillAID );
	void OverwriteSkill ( int oldSkillID, struct FString newSkillAID );
	bool LearnAbilityfromSkill ( int SkillID, struct FString AbilityName );
	bool LearnAbilityfromSkillByIDComplete ( int SkillID, struct FString abilityID );
	void LearnAbilityfromSkillByID ( int SkillID, struct FString abilityID );
	bool HasSkillMaxedOut ( int SkillID, unsigned char Tier );
	bool IncreaseSkillRankComplete ( int SkillID, unsigned long overwriteCheck, unsigned long forfree );
	void IncreaseSkillRank ( int SkillID, unsigned long overwriteCheck, unsigned long forfree );
	bool CanLearnSkillRank ( int SkillID, unsigned char desiredRank );
	bool CanIncreaseSkillRank ( int SkillID );
	class UH7HeroAbility* GetAbilityByArchetypeID ( int SkillID, struct FString abilityArchetypeID );
	void IncreaseRandomMightSkillRank ( );
	void IncreaseRandomMagicSkillRank ( );
	void CleanSkillsAfterCombat ( );
	void AddLearnableAbilities ( class UH7Skill* forSkill );
	void InitializeSkill ( class UH7Skill* Skill, unsigned char Tier, int overWriteIndex );
	void Init ( class AH7Unit* Owner );
	class UH7RndSkillManager* GetRndSkillManager ( );
	TArray< class UH7HeroAbility* > GetLearnedAbilites ( );
	TArray< class UH7Skill* > GetAllSkills ( );
	void SetSkillPointsSpend ( int Value );
	void SetOwner ( class AH7EditorHero* Owner );
};



// Class MMH7Game.H7UnitSnapShot ( Property size: 10 iter: 41) 
// Class name index: 9110 
// 0x0038 (0x0098 - 0x0060)
class UH7UnitSnapShot : public UObject
{
public:
	struct FPointer                                    VfTable_IH7ICaster;                               		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                mDamageMin;                                       		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                mDamageMax;                                       		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                mAttack;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mLuckDestiny;                                     		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                mMagic;                                           		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                mStackSize;                                       		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                mMoraleLeadership;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned char                                      mSchool;                                          		// 0x0084 (0x0001) [0x0000000000000000]              
	class UH7ICaster*                                  mCasterOriginal;                                  		// 0x0088 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0090 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4324 ];

		return pClassPointer;
	};

	void UpdateSnapShot ( unsigned long updateLuck, unsigned long updateLeadership, unsigned long clearCache );
	void TakeSnapShot ( class UH7ICaster* Unit );
	void SetMagic ( int Magic );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	int GetID ( );
	bool IsDefaultAttackActive ( );
	class AH7CombatArmy* GetCombatArmy ( );
	unsigned char GetEntityType ( );
	class UH7BuffManager* GetBuffManager ( );
	class UH7AbilityManager* GetAbilityManager ( );
	class AH7Player* GetPlayer ( );
	struct FIntPoint GetGridPosition ( );
	struct FVector GetLocation ( );
	int GetLuckDestiny ( );
	class UH7ICaster* GetOriginal ( );
	unsigned char GetActionID ( class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetPreparedAbility ( );
	void UsePreparedAbility ( class UH7IEffectTargetable* Target );
	void PrepareAbility ( class UH7BaseAbility* Ability );
	void DataChanged ( struct FString cause );
	class UH7EventManager* GetEventManager ( );
	class UH7EffectManager* GetEffectManager ( );
	bool is ( struct FName myName );
	struct FString GetName ( );
	unsigned char GetSchool ( );
	int GetStackSize ( );
	int GetMagic ( );
	int GetLeadership ( );
	int GetAttack ( );
	float GetMaximumDamage ( );
	float GetMinimumDamage ( );
};



// Class MMH7Game.H7RMGAreaTemplateBuilder ( Property size: 4 iter: 6) 
// Class name index: 9112 
// 0x001C (0x007C - 0x0060)
class UH7RMGAreaTemplateBuilder : public UObject
{
public:
	TArray< class UH7RMGZoneTemplate* >                mTemplates;                                       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mCurrentPZ;                                       		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              mMaxPZ;                                           		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                mPlayerCount;                                     		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4326 ];

		return pClassPointer;
	};

	void DestroyTemplateBuilder ( );
	bool CreateMapTemplates ( struct FH7RMGProperties* Properties, struct FPointer* outTemplates );
};



// Class MMH7Game.H7RMGBuilding ( Property size: 32 iter: 34) 
// Class name index: 9114 
// 0x0074 (0x00D4 - 0x0060)
class UH7RMGBuilding : public UObject
{
public:
	unsigned char                                      mBuildingType;                                    		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mRoundingType;                                    		// 0x0061 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mPlayerNum;                                       		// 0x0062 (0x0001) [0x0000000000000000]              
	class AH7VisitableSite*                            mBuildingArchetype;                               		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FIntPoint                                   mDimension;                                       		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Faction*                                  mFaction;                                         		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsGuarded : 1;                                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mHasRoadConnection : 1;                           		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mUseAsChance : 1;                                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mAtLeastOne : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mNotMoreThanOne : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mNotMoreThanOnePerZone : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mModifiedByRichness : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mUniformDistribution : 1;                         		// 0x007C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      mCanBePlacedInStartZone : 1;                      		// 0x007C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      mCountByType : 1;                                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      mOnlyWithTearOfAsha : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      mIgnoredByClusters : 1;                           		// 0x007C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      mOnePerCluster : 1;                               		// 0x007C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	float                                              mGuardModifier;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinDistanceToBorder;                             		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinDistanceToSiteLord;                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxDistanceToSiteLord;                           		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinDistanceToEqualType;                          		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinDistanceToDifferentType;                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinDistanceToMapBorder;                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mPlacementModifier;                               		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mShareWeight;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7RMGZoneTemplateRule >            mZoneLordRules;                                   		// 0x00A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7RMGCell*                                  mCell;                                            		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FIntPoint                                   mTranslation;                                     		// 0x00BC (0x0008) [0x0000000000000000]              
	TArray< class AH7VisitableSite* >                  mSpawnedSites;                                    		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4328 ];

		return pClassPointer;
	};

	bool CanPlaceHere ( class UH7RMGCell* targetCell, class UH7RMGGrid* Grid, class UH7RMGZoneTemplate* ZoneTemplate );
	class AH7VisitableSite* eventGetBuildingArchetype ( );
};



// Class MMH7Game.H7RMGResourceCluster ( Property size: 2 iter: 3) 
// Class name index: 9116 
// 0x0020 (0x00F4 - 0x00D4)
class UH7RMGResourceCluster : public UH7RMGBuilding
{
public:
	TArray< class UH7RMGBuilding* >                    mClusterBuildings;                                		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIntPoint >                         mTranslations;                                    		// 0x00E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4330 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGTeleporter ( Property size: 3 iter: 3) 
// Class name index: 9118 
// 0x0018 (0x00EC - 0x00D4)
class UH7RMGTeleporter : public UH7RMGBuilding
{
public:
	class UH7RMGTeleporter*                            mTargetTeleporter;                                		// 0x00D4 (0x0008) [0x0000000000000000]              
	class UH7RMGZoneTemplate*                          mZoneTemplate;                                    		// 0x00DC (0x0008) [0x0000000000000000]              
	class AH7Teleporter*                               mSpawnedTeleporter;                               		// 0x00E4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4332 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGTreasureMarker ( Property size: 0 iter: 2) 
// Class name index: 9120 
// 0x0000 (0x00D4 - 0x00D4)
class UH7RMGTreasureMarker : public UH7RMGBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4334 ];

		return pClassPointer;
	};

	class AH7VisitableSite* eventGetBuildingArchetype ( );
	class UClass* eventGetTreasureMarkerClass ( );
};



// Class MMH7Game.H7RMGCell ( Property size: 15 iter: 18) 
// Class name index: 9122 
// 0x0064 (0x00C4 - 0x0060)
class UH7RMGCell : public UObject
{
public:
	struct FIntPoint                                   mPosition;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FVector                                     mLocation;                                        		// 0x0068 (0x000C) [0x0000000000000000]              
	struct FH7RMGCellPathfinderData                    mPathfinderData;                                  		// 0x0074 (0x0010) [0x0000000000000000]              
	TArray< class UH7RMGCell* >                        mNeighbours;                                      		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGCell* >                        mMergedCells;                                     		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7RMGCell*                                  mMasterCell;                                      		// 0x00A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsBlocked : 1;                                   		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mHasPickup : 1;                                   		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mHasNeighborPickup : 1;                           		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mHasVisibleRoad : 1;                              		// 0x00AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mHasInvisibleRoad : 1;                            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mForcePassabiltiy : 1;                            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mIsAreaBorder : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000040] 
	struct FH7RMGZoneInfluence                         mZoneInfluence;                                   		// 0x00B0 (0x000C) [0x0000000000000000]              
	class UH7RMGBuilding*                              mBuilding;                                        		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4336 ];

		return pClassPointer;
	};

	bool IsNextToBorder ( int Distance, class UH7RMGGrid* Grid );
	struct FVector GetCellLocation ( );
	struct FIntPoint GetPosition ( );
};



// Class MMH7Game.H7RMGCirclePacker ( Property size: 1 iter: 5) 
// Class name index: 9124 
// 0x0008 (0x0068 - 0x0060)
class UH7RMGCirclePacker : public UObject
{
public:
	struct FVector2D                                   mCenter;                                          		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4338 ];

		return pClassPointer;
	};

	void eventSortArray ( TArray< class UH7RMGZoneTemplate* > Templates );
	int Comparer ( class UH7RMGZoneTemplate* T1, class UH7RMGZoneTemplate* t2 );
	float DistanceToCenterSq ( class UH7RMGZoneTemplate* Temp );
	float SizeSquared ( struct FVector2D Temp );
};



// Class MMH7Game.H7RMGConnectionPrefab ( Property size: 1 iter: 1) 
// Class name index: 9126 
// 0x0010 (0x0070 - 0x0060)
class UH7RMGConnectionPrefab : public UObject
{
public:
	TArray< struct FH7RMGTemplateConnections >         mTemplateConnections;                             		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4340 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGData ( Property size: 20 iter: 25) 
// Class name index: 9128 
// 0x0908 (0x0968 - 0x0060)
class UH7RMGData : public UObject
{
public:
	TArray< struct FH7RMGFactionData >                 mFactionData;                                     		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7RMGCreatureArray                         mNeuteralCreatures[ 0x3 ];                        		// 0x0070 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AH7RandomCreatureStack*                      mRandomCreature;                                  		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstanceConstant* >         mRandomCreatureMaterials;                         		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mUseRandomCreatures : 1;                          		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mEnableSparePickups : 1;                          		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FMapInfoPlayerProperty                      mDefaultPlayerProperties[ 0xA ];                  		// 0x00BC (0x0780) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7RMGZoneTemplate* >                mZoneTemplates;                                   		// 0x083C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UH7RMGBuilding* >                    mAdditionalBuildings;                             		// 0x084C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7RMGShareBuildings >              mShareBuildings;                                  		// 0x085C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7RMGTeleporter*                            mTeleporters[ 0x3 ];                              		// 0x086C (0x0018) [0x0000000000000001]              ( CPF_Edit )
	class UH7RMGBuilding*                              mSiteLords[ 0x3 ];                                		// 0x0884 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7RMGBuilding* >                    mSpareBuildings;                                  		// 0x089C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mPickupEveryN;                                    		// 0x08AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPickupChance;                                    		// 0x08B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPickupRichnessMod;                               		// 0x08B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mPickupMaxHeight;                                 		// 0x08B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mPickupDist;                                      		// 0x08BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AH7PlayerStart*                              mPlayerStart;                                     		// 0x08C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FH7RMGLandscapeProperties                   mLandscapeProperties[ 0x4 ];                      		// 0x08C8 (0x00A0) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4342 ];

		return pClassPointer;
	};

	void eventSortCreaturesAscending ( TArray< class AH7Creature* >* Creatures );
	int CreatureCompare ( class AH7Creature* A, class AH7Creature* B );
	void eventSortBuildings ( unsigned long ascending, TArray< class UH7RMGBuilding* >* buildings );
	int AscendingCompare ( class UH7RMGBuilding* B1, class UH7RMGBuilding* B2 );
	int DescendingCompare ( class UH7RMGBuilding* B1, class UH7RMGBuilding* B2 );
};



// Class MMH7Game.H7RMGFoliageTool ( Property size: 1 iter: 1) 
// Class name index: 9130 
// 0x0008 (0x0068 - 0x0060)
class UH7RMGFoliageTool : public UObject
{
public:
	class AInstancedFoliageActor*                      mIFA;                                             		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4344 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGGrid ( Property size: 7 iter: 21) 
// Class name index: 9132 
// 0x005C (0x00BC - 0x0060)
class UH7RMGGrid : public UObject
{
public:
	struct FVector                                     mWorldPosition;                                   		// 0x0060 (0x000C) [0x0000000000000000]              
	class ALandscape*                                  mLandscape;                                       		// 0x006C (0x0008) [0x0000000000000000]              
	TArray< struct FH7RMGGridColumns >                 mGrid;                                            		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureMapGridController*               mEditorGrid;                                      		// 0x0084 (0x0008) [0x0000000000000000]              
	TArray< struct FH7RMGPath >                        mRoadPaths;                                       		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7RMGPath >                        mInvisibleRoadPaths;                              		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7RMGPathCells >                   mRoadPathCells;                                   		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4346 ];

		return pClassPointer;
	};

	void eventShuffleArray ( TArray< class UH7RMGCell* >* arr );
	int ShuffleComparer ( class UH7RMGCell* A, class UH7RMGCell* B );
	void ShuffleCells ( TArray< class UH7RMGCell* >* arr );
	void DestroyGrid ( );
	void InitAoCs ( );
	void InitEditorGrid ( class AH7EditorAdventureGridManager* gridManager, unsigned long skipGameplayObj );
	void GetGridParts ( int Amount, int Buffer, TArray< struct FH7RMGGridPart >* parts );
	void GetGridPart ( int fromX, int toX, int fromY, int toY, TArray< struct FH7RMGGridColumns >* Part );
	void AddZoneInfluence ( class UH7RMGZoneTemplate* Temp, int Radius );
	void InitRMGGrid ( class ALandscape* Landscape, struct FH7RMGProperties* Props );
	int GetHeight ( );
	int GetWidth ( );
	class UH7RMGCell* GetCellByPoint ( int X, int Y );
	class UH7RMGCell* GetCellByIntPoint ( struct FIntPoint P );
};



// Class MMH7Game.H7RMGHeightmapBuilder ( Property size: 2 iter: 3) 
// Class name index: 9134 
// 0x0018 (0x0078 - 0x0060)
class UH7RMGHeightmapBuilder : public UObject
{
public:
	class UH7RMGLandscapeBuilder*                      mLandscapeBuilder;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< unsigned char >                            mSlopeMap;                                        		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4348 ];

		return pClassPointer;
	};

	void InitHeightmapBuilder ( class UH7RMGLandscapeBuilder* builder );
};



// Class MMH7Game.H7RMGKamadaKawaiLayout ( Property size: 0 iter: 5) 
// Class name index: 9136 
// 0x0000 (0x0060 - 0x0060)
class UH7RMGKamadaKawaiLayout : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4350 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGKawaiiUtil ( Property size: 4 iter: 4) 
// Class name index: 9138 
// 0x0024 (0x0084 - 0x0060)
class UH7RMGKawaiiUtil : public UObject
{
public:
	int                                                mNodeCount;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	TArray< class UH7RMGZoneTemplate* >                mCheckedTemplates;                                		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    mCurrentComponents;                               		// 0x0074 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    mCurrentComponent;                                		// 0x007C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4352 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGLandscapeBuilder ( Property size: 7 iter: 7) 
// Class name index: 9140 
// 0x0034 (0x0094 - 0x0060)
class UH7RMGLandscapeBuilder : public UObject
{
public:
	class UH7RMGHeightmapBuilder*                      mHeightmapBuilder;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	class UH7RMGWeightmapBuilder*                      mWeightmapBuilder;                                		// 0x0068 (0x0008) [0x0000000000000000]              
	class ALandscape*                                  mLandscape;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   mDimension;                                       		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   mQuadCount;                                       		// 0x0080 (0x0008) [0x0000000000000000]              
	int                                                mHeightmapSize;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FIntPoint                                   mEdgeSize;                                        		// 0x008C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4354 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGLandscapeThemes ( Property size: 2 iter: 2) 
// Class name index: 9142 
// 0x0020 (0x0080 - 0x0060)
class UH7RMGLandscapeThemes : public UObject
{
public:
	TArray< struct FH7RMGLandscapeTheme >              mLandscapeThemes;                                 		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7RMGLandscapeTheme >              mUndergroundThemes;                               		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4356 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGMain ( Property size: 8 iter: 14) 
// Class name index: 9144 
// 0x00CC (0x012C - 0x0060)
class UH7RMGMain : public UObject
{
public:
	class AH7EditorAdventureGridManager*               mGridManager;                                     		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FH7RMGProperties                            mProperties;                                      		// 0x0068 (0x008C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGGrid* >                        mGridList;                                        		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7RMGRandom*                                mRandom;                                          		// 0x0104 (0x0008) [0x0000000000000000]              
	class UH7RMGPathfinder*                            mPathfinder;                                      		// 0x010C (0x0008) [0x0000000000000000]              
	class UH7RMGLandscapeBuilder*                      mLandscapeBuilder;                                		// 0x0114 (0x0008) [0x0000000000000000]              
	class UH7RMGAreaTemplateBuilder*                   mAreaTemplateBuilder;                             		// 0x011C (0x0008) [0x0000000000000000]              
	class UH7RMGTemplateSpawner*                       mTemplateSpawner;                                 		// 0x0124 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4358 ];

		return pClassPointer;
	};

	void GenerateMapNative ( );
	void GenerateMap ( );
	bool LoadMap ( unsigned char MapSize );
	void SpawnLandscapes ( );
	void InitNative ( struct FH7RMGProperties* Properties );
	void eventInit ( struct FH7RMGProperties* Properties );
};



// Class MMH7Game.H7RMGMinimalSpanningTree ( Property size: 0 iter: 0) 
// Class name index: 9146 
// 0x0000 (0x0060 - 0x0060)
class UH7RMGMinimalSpanningTree : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4360 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGPathfinder ( Property size: 2 iter: 2) 
// Class name index: 9148 
// 0x0020 (0x0080 - 0x0060)
class UH7RMGPathfinder : public UObject
{
public:
	TArray< class UH7RMGCell* >                        mOpenList;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGGrid* >                        mGridList;                                        		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4362 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGPerlinNoise ( Property size: 9 iter: 9) 
// Class name index: 9150 
// 0x002C (0x008C - 0x0060)
class UH7RMGPerlinNoise : public UObject
{
public:
	struct FPointer                                    mPermutation;                                     		// 0x0060 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    mPerlin;                                          		// 0x0068 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                mPermutationLength;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mPLength;                                         		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              mFrequency;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              mAmplitude;                                       		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              mPersistency;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                mOctaves;                                         		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                mSeed;                                            		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4364 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGRandom ( Property size: 1 iter: 5) 
// Class name index: 9152 
// 0x0004 (0x0064 - 0x0060)
class UH7RMGRandom : public UObject
{
public:
	int                                                mSeed;                                            		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4366 ];

		return pClassPointer;
	};

	int GetSeed ( );
	float GetFloat ( );
	int GetIntRange ( int Min, int Max );
	int GetInt ( int Max );
};



// Class MMH7Game.H7RMGRoadConnector ( Property size: 1 iter: 1) 
// Class name index: 9154 
// 0x0008 (0x0068 - 0x0060)
class UH7RMGRoadConnector : public UObject
{
public:
	class UH7RMGPathfinder*                            mPathfinder;                                      		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4368 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGStructsAndEnums ( Property size: 0 iter: 39) 
// Class name index: 9156 
// 0x0000 (0x0060 - 0x0060)
class UH7RMGStructsAndEnums : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4370 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGTemplateSpawner ( Property size: 2 iter: 3) 
// Class name index: 9158 
// 0x0018 (0x0078 - 0x0060)
class UH7RMGTemplateSpawner : public UObject
{
public:
	TArray< class UH7RMGBuilding* >                    mPlacedBuildings;                                 		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    mZoneTemplates;                                   		// 0x0070 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4372 ];

		return pClassPointer;
	};

	void DestroyTemplateSpawner ( );
};



// Class MMH7Game.H7RMGTopologySetup ( Property size: 14 iter: 14) 
// Class name index: 9160 
// 0x014C (0x01AC - 0x0060)
class UH7RMGTopologySetup : public UObject
{
public:
	struct FH7PerlinNoiseProperties                    mPerlinNoise;                                     		// 0x0060 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FH7PerlinNoiseProperties                    mBaseNoise;                                       		// 0x008C (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FH7RMGErosionProperties                     mErosion;                                         		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FH7RMGWeightmapProperties                   mWeightMap;                                       		// 0x00C4 (0x0038) [0x0000000000000001]              ( CPF_Edit )
	struct FH7RMGFoliageProperties                     mFoliageProperties;                               		// 0x00FC (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7RMGLayerInfos                            mLayerInfo;                                       		// 0x0124 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   mLandscapeMaterial;                               		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   mWaterMaterial;                                   		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7RMGLayerInfo >                   mWaterLayerInfos;                                 		// 0x0144 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7RMGAtmosphericSetup                      mAtmosphereProperties;                            		// 0x0154 (0x0038) [0x0000000000000001]              ( CPF_Edit )
	int                                                mGridBorderExtensionRadius;                       		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mUnblockedRadiusForBuildings;                     		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mUnblockedRadiusForRoads;                         		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FH7RMGBuildingLight                         mBuildingLights;                                  		// 0x0198 (0x0014) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4374 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGWeightmapBuilder ( Property size: 1 iter: 1) 
// Class name index: 9162 
// 0x0010 (0x0070 - 0x0060)
class UH7RMGWeightmapBuilder : public UObject
{
public:
	TArray< struct FPointer >                          mLayerData;                                       		// 0x0060 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4376 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGZoneGraphBuilder ( Property size: 1 iter: 1) 
// Class name index: 9164 
// 0x0008 (0x0068 - 0x0060)
class UH7RMGZoneGraphBuilder : public UObject
{
public:
	struct FPointer                                    mZoneTemplates;                                   		// 0x0060 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4378 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7RMGZoneTemplate ( Property size: 36 iter: 41) 
// Class name index: 9166 
// 0x015C (0x01BC - 0x0060)
class UH7RMGZoneTemplate : public UObject
{
public:
	struct FString                                     mName;                                            		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mSize;                                            		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mDistanceNormMod;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7Faction*                                  mFaction;                                         		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mCritterStrength;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mLordType;                                        		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mConnectorType;                                   		// 0x0085 (0x0001) [0x0000000000000000]              
	unsigned char                                      mPlayerNum;                                       		// 0x0086 (0x0001) [0x0000000000000000]              
	unsigned long                                      mIsStartingZone : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mCanConSmall : 1;                                 		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              mProbability;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxConnections;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSharePerDistance;                                		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mShareValues[ 0x8 ];                              		// 0x0098 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	int                                                mDwellings[ 0x3 ];                                		// 0x00B8 (0x000C) [0x0000000000000000]              
	TArray< struct FH7RMGBuildingData >                mPredefinedBuildings;                             		// 0x00C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7RMGBuildingData >                mAdditionalBuildings;                             		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGZoneTemplate* >                mConnectedZones;                                  		// 0x00E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGZoneTemplate* >                mGraphConnections;                                		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGZoneTemplate* >                mCreatedConnections;                              		// 0x0104 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mDistanceToStart;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                mTmpDistance;                                     		// 0x0118 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   mPosition;                                        		// 0x011C (0x0008) [0x0000000000000000]              
	float                                              mTmpVDistance;                                    		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                mIndex;                                           		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                mTheme;                                           		// 0x012C (0x0004) [0x0000000000000000]              
	TArray< class UH7RMGCell* >                        mAreaCells;                                       		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGCell* >                        mAreaBorderCells;                                 		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGBuilding* >                    mPlacedBuildings;                                 		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mSpawnedBuildings;                                		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureArmy* >                  mSpawnedArmies;                                   		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7RandomCreatureStack* >            mSpawnedCreatures;                                		// 0x0180 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7PlayerStart*                              mPlayerStart;                                     		// 0x0190 (0x0008) [0x0000000000000000]              
	TArray< struct FH7RMGCellPair >                    mEntranceCells;                                   		// 0x0198 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7RMGCell* >                        mEntrances;                                       		// 0x01A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mGridIndex;                                       		// 0x01B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4380 ];

		return pClassPointer;
	};

	void eventShuffleArray ( TArray< class UH7RMGBuilding* >* arr );
	int ShuffleComparer ( class UH7RMGBuilding* A, class UH7RMGBuilding* B );
	void eventSortBuildings ( );
	int SortComparer ( struct FH7RMGBuildingData Data1, struct FH7RMGBuildingData Data2 );
};



// Class MMH7Game.DecalActorSpawnable ( Property size: 0 iter: 0) 
// Class name index: 38433 
// 0x0000 (0x0250 - 0x0250)
class ADecalActorSpawnable : public ADecalActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48103 ];

		return pClassPointer;
	};

};



// Class MMH7Game.GFxInputField ( Property size: 0 iter: 2) 
// Class name index: 43596 
// 0x0000 (0x00A0 - 0x00A0)
class UGFxInputField : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48106 ];

		return pClassPointer;
	};

	struct FString SetInput ( struct FString Str );
	struct FString GetInput ( );
};



// Class MMH7Game.H7CombatMapTower ( Property size: 17 iter: 36) 
// Class name index: 44131 
// 0x0084 (0x045C - 0x03D8)
class AH7CombatMapTower : public AH7CombatObstacleFracturedObject
{
public:
	class AH7TowerUnit*                                mTowerUnitArchetype;                              		// 0x03D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CombatObstacleFracturedObject*            mObstacleArchetype;                               		// 0x03E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsAlwaysPilar : 1;                               		// 0x03E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mUseStaticAimingMesh : 1;                         		// 0x03E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mShouldAimingMeshRotate : 1;                      		// 0x03E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UStaticMeshComponent*                        mAimingMesh;                                      		// 0x03EC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              mShootingEventTime;                               		// 0x03F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mShootingSound;                                   		// 0x03F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7TowerUnit*                                mTowerUnit;                                       		// 0x0400 (0x0008) [0x0000000000000000]              
	class UMeshComponent*                              mCurrentMesh;                                     		// 0x0408 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mSkeletalAimingMesh;                              		// 0x0410 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimNodePlayCustomAnim*                     mAnimNode;                                        		// 0x0418 (0x0008) [0x0000000000000000]              
	struct FVector                                     mTargetLocation;                                  		// 0x0420 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mStartRot;                                        		// 0x042C (0x000C) [0x0000000000000000]              
	float                                              mAimingTime;                                      		// 0x0438 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFaceTargetFinishedFunc__Delegate;             		// 0x043C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0440 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnShootFunc__Delegate;                          		// 0x044C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0450 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48784 ];

		return pClassPointer;
	};

	void FinishShootAnim ( );
	void StartShoot ( );
	float GetAnimTimeLeft ( );
	void SwitchToIdle ( );
	void PlayShootAnim ( struct FScriptDelegate onShoot );
	void FaceTarget ( class UH7IEffectTargetable* Target, struct FScriptDelegate onFaceTargetFinished );
	void OnShootFunc ( );
	void OnFaceTargetFinishedFunc ( );
	struct FVector GetProjectileImpactPos ( );
	class AH7CombatObstacleObject* PlaceObstacle ( struct FH7SiegeTownData siegeTownData, struct FVector SpawnLocation );
	unsigned char GetLevel ( );
	void ModifyHitpoints ( int modval );
	void Init ( );
	class AH7TowerUnit* GetTowerUnit ( );
	class AH7TowerUnit* GetTowerUnitArchetype ( );
	bool IsIdling ( );
};



// Class MMH7Game.H7GameInfo ( Property size: 2 iter: 15) 
// Class name index: 44234 
// 0x000C (0x0498 - 0x048C)
class AH7GameInfo : public AGameInfo
{
public:
	class AH7CombatController*                         m_OverrideController;                             		// 0x048C (0x0008) [0x0000000000000000]              
	float                                              m_OverrideGameSpeed;                              		// 0x0494 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49487 ];

		return pClassPointer;
	};

	void HostGame ( struct FString URL, unsigned long bAbsolute, unsigned long bSkipGameNotify );
	void RegisterServer ( );
	bool AtCapacity ( unsigned long bSpectator, struct FString PlayerName );
	void Logout ( class AController* Exiting );
	void GenericPlayerInitialization ( class AController* Controller );
	bool ArePlayersNeeded ( );
	bool ArePlayersReady ( );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void RestartPlayer ( class AController* NewPlayer );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	float GetGameSpeed ( );
	class AH7CombatController* GetCombatController ( );
	class AH7GameInfo* GetH7GameInfoInstance ( );
};



// Class MMH7Game.H7MultiplayerGameManager ( Property size: 12 iter: 46) 
// Class name index: 44495 
// 0x0058 (0x00B8 - 0x0060)
class UH7MultiplayerGameManager : public UObject
{
public:
	unsigned long                                      bIsSearching : 1;                                 		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsJoining : 1;                                   		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBlockInputForTravel : 1;                         		// 0x0060 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      mInviteDelayed : 1;                               		// 0x0060 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class UH7LANSearch*                                SearchSettings;                                   		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedIndexToJoin;                              		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrSelectedIndex;                                		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FOnlineGameSearchResult >           SearchResults;                                    		// 0x0074 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                mInviteSessionId;                                 		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPrivilegesContainer >              mSharedPrivileges;                                		// 0x0088 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UH7MeshBeaconClient* >               mClientBeaconArray;                               		// 0x0098 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDestroyPartForSystemLinkComplete__Delegate;   		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49536 ];

		return pClassPointer;
	};

	void Update ( );
	void OnCancelSearchComplete ( unsigned long bWasSuccessful );
	void OnLANSearchComplete ( );
	void OnFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	void JoinToHostFailed ( );
	void OnJoinPartyComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RemovePrivilegesOfPlayerIndex ( int Index );
	TArray< int > GetSharedPrivileges ( );
	void AddSharedPrivileges ( struct FPrivilegesContainer newPrivileges );
	void ErrorMessageConfirmed ( );
	void OnCreateH7GameSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	class ULocalPlayer* GetLP ( );
	void OnDestroyPartyForSystemLinkJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void DestroyPartyForSystemLink ( struct FScriptDelegate DestroyCompleteDelegate );
	void OnDestroyPartForSystemLinkComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartFilteringBrowserList ( );
	bool CanJoinSelectedGame ( class UH7OnlineGameSettings* mySettings );
	void CancelFindOnlineGames ( );
	void SearchOnlineGames ( unsigned long IsLAN, unsigned long IsDuel );
	void RefreshOnlineGames ( );
	void JoinSystemLink ( );
	void JoinSelected ( int SelectedIndex );
	void PublishCurrentGame ( );
	void CreateOnlineGame ( unsigned long IsLAN, unsigned long IsDuel, int NumPlayers, struct FH7ContentScannerAdventureMapData MapData, struct FH7ContentScannerCombatMapData CombatMapData, struct FH7ListingSavegameDataScene basedOnSaveGame );
	void QuitToDesktop ( );
	void OnFindOnlineGamesForInviteComplete ( unsigned long bWasSuccessful );
	void OnUPlayInvite ( int SessionId );
	void OnUPlayMessage ( unsigned char uplayMessage );
	void ShutDown ( );
	void Initialize ( );
	void FilterUnreachableServers ( );
	void InitClientBeacon ( struct FOnlineGameSearchResult DesiredHost );
	class UH7OnlineGameSettings* GetOnlineGameSettings ( );
	class UH7MultiplayerGameManager* GetInstance ( );
};



// Class MMH7Game.H7OnlineGameSettings ( Property size: 0 iter: 53) 
// Class name index: 44504 
// 0x0000 (0x00E4 - 0x00E4)
class UH7OnlineGameSettings : public UOnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49539 ];

		return pClassPointer;
	};

	struct FString GetTeamSetupAsString ( );
	unsigned char GetTeamSetup ( );
	struct FString GetDifficultyAsString ( );
	void SetTeamSetup ( unsigned char teamSetup );
	unsigned char GetDifficulty ( );
	void SetDifficulty ( unsigned char Difficulty );
	bool GetTeamsCanTrade ( );
	void SetTeamsCanTrade ( unsigned long teamsCanTrade );
	struct FString GetForceQuickCombatAsStringLocalized ( );
	unsigned char GetForceQuickCombat ( );
	void SetForceQuickCombat ( unsigned char forceQuickCombat );
	struct FString GetTimerAdvAsString ( );
	unsigned char GetTimerAdv ( );
	void SetTimerAdv ( unsigned char timerAdv );
	struct FString GetTimerCombatAsString ( );
	unsigned char GetTimerCombat ( );
	void SetTimerCombat ( unsigned char timerCombat );
	float GetGameSpeedCombat ( );
	void SetGameSpeedCombat ( float gameSpeedCombat );
	float GetGameSpeedAdventureAI ( );
	void SetGameSpeedAdventureAI ( float gameSpeedAdventureAI );
	float GetGameSpeedAdventure ( );
	void SetGameSpeedAdventure ( float gameSpeedAdventure );
	bool GetUseRandomStartPosition ( );
	void SetUseRandomStartPosition ( unsigned long useRandomStartPosition );
	struct FString GetVictoryConditionAsStringLocalized ( );
	unsigned char GetVictoryCondition ( );
	void SetVictoryCondition ( unsigned char victoryCondition );
	bool isSavedGame ( );
	void SetIsSavedGame ( unsigned long isSavedGame );
	int GetSessionID ( );
	bool isGameStarted ( );
	void SetIsGameStarted ( unsigned long isGameStarted );
	int GetGameType ( );
	void SetGameType ( int GameType );
	int GetNumAISlots ( );
	void SetNumAISlots ( int numAISlots );
	int GetNumClosedSlots ( );
	void SetNumClosedSlots ( int numClosedSlots );
	struct FString GetSkillTypeAsStringLocalized ( );
	int GetSkillType ( );
	void SetSkillType ( int skillType );
	struct FString GetTurnTypeAsStringLocalized ( );
	int GetTurnType ( );
	void SetTurnType ( int turnType );
	unsigned char GetNATType ( );
	struct FString GetMapFilepath ( );
	void SetMapFilepath ( struct FString MapName );
	struct FString GetMapNameLocalized ( );
	int GetMapInfoNumber ( );
	void SetMapInfoNumber ( int mapInfoNumber );
	struct FString GetServerName ( );
	void SetServerName ( struct FString ServerName );
};



// Class MMH7Game.H7AdventureMapInfo ( Property size: 4 iter: 12) 
// Class name index: 43760 
// 0x0020 (0x04B8 - 0x0498)
class AH7AdventureMapInfo : public AH7GameInfo
{
public:
	float                                              mCurrentStartMatchWaitTime;                       		// 0x0498 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsSimTurns : 1;                                  		// 0x049C (0x0004) [0x0000000000000000] [0x00000001] 
	class APawn*                                       PendingPlayerPawn;                                		// 0x04A0 (0x0008) [0x0000000000000000]              
	struct FString                                     PendingSaveGameFileName;                          		// 0x04A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49562 ];

		return pClassPointer;
	};

	bool AtCapacity ( unsigned long bSpectator, struct FString PlayerName );
	bool ArePlayersNeeded ( );
	void GenericPlayerInitialization ( class AController* Controller );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	bool isSimTurns ( );
	class AH7AdventureMapInfo* GetInstance ( );
};



// Class MMH7Game.H7Hud ( Property size: 56 iter: 173) 
// Class name index: 44360 
// 0x0184 (0x06E4 - 0x0560)
class AH7Hud : public AHUD
{
public:
	class AWorldInfo*                                  mWorld;                                           		// 0x0560 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   mOldRes;                                          		// 0x0568 (0x0008) [0x0000000000000000]              
	int                                                mUnrealWidth;                                     		// 0x0570 (0x0004) [0x0000000000000000]              
	int                                                mUnrealHeight;                                    		// 0x0574 (0x0004) [0x0000000000000000]              
	int                                                mFramesDone;                                      		// 0x0578 (0x0004) [0x0000000000000000]              
	unsigned long                                      mDelayInit : 1;                                   		// 0x057C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsLoaded : 1;                                    		// 0x057C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mRightClickThisFrame : 1;                         		// 0x057C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mRightMouseDown : 1;                              		// 0x057C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mLeftMouseDown : 1;                               		// 0x057C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mLeftClickThisFrame : 1;                          		// 0x057C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mTickFunctionality : 1;                           		// 0x057C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mTickFunctionalityInited : 1;                     		// 0x057C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mPreventAllPendingHighlights : 1;                 		// 0x057C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mFirstTimeHardwareCursor : 1;                     		// 0x057C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mOverwriteHardwareCursor : 1;                     		// 0x057C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mPopupWasRequester : 1;                           		// 0x057C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      HideH7HUD : 1;                                    		// 0x057C (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	int                                                mFinishHudAtFrame;                                		// 0x0580 (0x0004) [0x0000000000000000]              
	class AH7FCTController*                            mFCTController;                                   		// 0x0584 (0x0008) [0x0000000000000000]              
	class UH7ListeningManager*                         mListeningManager;                                		// 0x058C (0x0008) [0x0000000000000000]              
	int                                                mRightMouseDownSince;                             		// 0x0594 (0x0004) [0x0000000000000000]              
	int                                                mLeftMouseDownSince;                              		// 0x0598 (0x0004) [0x0000000000000000]              
	class UH7FlashMovieCntl*                           mCurrentLoadingMovie;                             		// 0x059C (0x0008) [0x0000000000000000]              
	int                                                mCurrentLoadingMovieStartTime;                    		// 0x05A4 (0x0004) [0x0000000000000000]              
	TArray< struct FH7StartupEntry >                   mStartupLog;                                      		// 0x05A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      mHudMode;                                         		// 0x05B8 (0x0001) [0x0000000000000000]              
	TArray< struct FH7TutorialClickListener >          mTutorialClickListeners;                          		// 0x05BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7GUIGeneralProperties*                     mProperties;                                      		// 0x05CC (0x0008) [0x0000000000000000]              
	TArray< class UH7FlashMovieCntl* >                 mMovies;                                          		// 0x05D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7FlashMovieCntl* >                 mMoviesToDelete;                                  		// 0x05E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7MouseCntl*                                mMouseCntl;                                       		// 0x05F4 (0x0008) [0x0000000000000000]              
	class UH7BackgroundImageCntl*                      mBackgroundImageCntl;                             		// 0x05FC (0x0008) [0x0000000000000000]              
	class UH7OptionsMenuCntl*                          mOptionsMenuCntl;                                 		// 0x0604 (0x0008) [0x0000000000000000]              
	class UH7CheatWindowCntl*                          mCheatWindowCntl;                                 		// 0x060C (0x0008) [0x0000000000000000]              
	class UH7RequestPopupCntl*                         mRequestPopupCntl;                                		// 0x0614 (0x0008) [0x0000000000000000]              
	class UH7SpellbookCntl*                            mSpellbookCntl;                                   		// 0x061C (0x0008) [0x0000000000000000]              
	class UH7OverlaySystemCntl*                        mOverlaySystemCntl;                               		// 0x0624 (0x0008) [0x0000000000000000]              
	class UH7GUIOverlaySystemCntl*                     mGUIOverlaySystemCntl;                            		// 0x062C (0x0008) [0x0000000000000000]              
	class UH7PauseMenuCntl*                            mPauseMenuCntl;                                   		// 0x0634 (0x0008) [0x0000000000000000]              
	class UH7LoadSaveWindowCntl*                       mLoadSaveWindowCntl;                              		// 0x063C (0x0008) [0x0000000000000000]              
	class UH7CombatPopUpCntl*                          mCombatPopUpCntl;                                 		// 0x0644 (0x0008) [0x0000000000000000]              
	class UH7LoadingScreenCntl*                        mLoadingScreenCntl;                               		// 0x064C (0x0008) [0x0000000000000000]              
	class UH7DialogCntl*                               mDialogCntl;                                      		// 0x0654 (0x0008) [0x0000000000000000]              
	class UH7LogSystemCntl*                            mLogSystemCntl;                                   		// 0x065C (0x0008) [0x0000000000000000]              
	class UH7HeropediaCntl*                            mHeropediaCntl;                                   		// 0x0664 (0x0008) [0x0000000000000000]              
	class UH7FlashMovieCntl*                           mFocusMovie;                                      		// 0x066C (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  mCursorTexture;                                   		// 0x0674 (0x0008) [0x0000000000000000]              
	struct FRotator                                    mCursorRotation;                                  		// 0x067C (0x000C) [0x0000000000000000]              
	class UTexture2D*                                  mObjectTexture;                                   		// 0x0688 (0x0008) [0x0000000000000000]              
	struct FRotator                                    mObjectRotation;                                  		// 0x0690 (0x000C) [0x0000000000000000]              
	class UH7FlashMoviePopupCntl*                      mCurrentContext;                                  		// 0x069C (0x0008) [0x0000000000000000]              
	TArray< struct FH7FrameTimer >                     mFrameTimers;                                     		// 0x06A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7SecondsTimer >                   mSecondsTimers;                                   		// 0x06B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFrameReached__Delegate;                       		// 0x06C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x06C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnHudCompleted__Delegate;                       		// 0x06D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x06D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49614 ];

		return pClassPointer;
	};

	void UpdateBorderBlack ( );
	void TickFrameTimers ( );
	void SetFrameTimer ( int framesToWait, struct FScriptDelegate callbackFunction );
	void TickSecondsTimers ( );
	void ClearSelfMadeTimer ( struct FScriptDelegate callbackFunction );
	void SetSelfMadeTimer ( float secondsToWait, struct FScriptDelegate callbackFunction );
	void ShowStartupLog ( );
	void LogEnd ( class UH7FlashMovieCntl* Movie );
	void LogStart ( class UH7FlashMovieCntl* Movie );
	void SetFocusMovie ( class UH7FlashMovieCntl* Movie );
	class UH7FlashMovieCntl* GetFocusMovie ( );
	void LoseFocusOnInput ( );
	bool IsFocusOnInput ( );
	class UH7ListeningManager* GetListeningManager ( );
	bool IsMouseInGame ( );
	void RotateCursor ( );
	class UTexture2D* GetCursorTexture ( );
	void RenderCanvasCursor ( );
	int UnLoadCursorObject ( );
	bool IsOverwritingHardwareCursor ( );
	void SetSoftwareCursor ( class UTexture2D* cursorTexture, struct FRotator cursorRotation, float cursorOffsetX, float cursorOffsetY, class UTexture2D* objectTexture, struct FRotator objectRotation, int objectOffsetX, int objectOffsetY, int obsizeX, int obsizeY );
	bool CloseCurrentPopup ( unsigned long wasCanceled, unsigned long forceClose );
	void SetCurrentContext ( class UH7FlashMoviePopupCntl* PopUp );
	void TriggerKismetNodePathSet ( );
	void TriggerKismetNodeClosePopup ( struct FString popupName );
	void TriggerKismetNodeOpenPopup ( struct FString popupName );
	void PopupWasClosed ( unsigned long setCurrentToNone );
	void UnblockHeropedia ( );
	void UnblockAllFlashMovies ( );
	void BlockAllFlashMovies ( );
	void BlockFlashBelow ( class UH7FlashMovieCntl* popupMovie, unsigned long withBlockLayer );
	void UnblockUnreal ( );
	void BlockUnreal ( );
	void PopupWasOpened ( class UH7FlashMoviePopupCntl* popupMovie );
	bool CanOpenPopup ( class UH7FlashMoviePopupCntl* PopUp );
	bool IsLeftClickThisFrame ( );
	void SetLeftClickThisFrame ( unsigned long val );
	int GetLeftMouseDownSince ( );
	bool IsLeftMouseDown ( );
	bool GetLeftMouseDown ( );
	void SetLeftMouseDown ( unsigned long val );
	bool IsRightClickThisFrame ( );
	void SetRightClickThisFrame ( unsigned long val );
	int GetRightMouseDownSince ( );
	bool IsRightMouseDown ( );
	bool GetRightMouseDown ( );
	void SetRightMouseDown ( unsigned long val );
	int GetTimeMS ( );
	float GetRealTimeSeconds ( );
	int GetTimeStamp ( );
	int GetPlayTime ( );
	struct FVector2D GetUnrealSize ( );
	void ResolutionChanged ( struct FVector2D newRes );
	void CheckForResolutionChange ( );
	void SetHUDMode ( unsigned char Mode, unsigned char onlyFromMode );
	unsigned char GetHUDMode ( );
	void HideHUD ( );
	void ShowHUD ( );
	void SetAdditionalElements ( unsigned long val );
	void ToggleHUD ( );
	void EnsureInit ( class UH7FlashMovieCntl* Movie );
	void eventDestroyed ( );
	bool isLoaded ( );
	void DisplayKismetMessages ( );
	void StopUnnecessaryPopups ( );
	void eventPostRender ( );
	bool IsRemoveWhenClicked ( struct FString containerName, struct FString ElementName );
	void TriggerNoteElementClick ( struct FString containerName, struct FString ElementName );
	void DeleteAllHighlights ( );
	bool IsPreventingAllPendingHighlights ( );
	void ResetPreventAllPendingHighlights ( );
	void PreventAllPendingHighlights ( );
	void HighlightGUIElement ( struct FString container, struct FString Element, struct FString Text, class UH7SeqAct_HighlightGUIElement* Node );
	void CloseAllWindows ( );
	void SetAdventureHudVisible ( unsigned long Visible );
	bool GetTickEnabled ( );
	void EnableTickFunctionality ( );
	bool IsAllowFocus ( );
	void ChildCompleted ( );
	void CompleteHUD ( );
	void RestartMovie ( class UH7FlashMovieCntl* Movie );
	void InitHUD ( );
	void PostInit ( );
	void PreInit ( );
	void Init ( );
	int GetFramesDones ( );
	void OnHudCompleted ( );
	class UH7MagicSchoolIcons* GetSchoolIcons ( );
	class UH7StatIcons* GetStatIconsInText ( );
	class UH7StatIcons* GetStatIcons ( );
	class UH7HeropediaCntl* GetHeropedia ( );
	class UH7LogSystemCntl* GetLogCntl ( );
	class UH7MouseCntl* GetMouseCntl ( );
	class UH7LoadingScreenCntl* GetLoadingScreen ( );
	class UH7FlashMoviePopupCntl* GetCurrentContext ( );
	class UH7CombatPopUpCntl* GetCombatPopUpCntl ( );
	class UH7LoadSaveWindowCntl* GetLoadSaveWindowCntl ( );
	class UH7PauseMenuCntl* GetPauseMenuCntl ( );
	class UH7GUIOverlaySystemCntl* GetGUIOverlaySystemCntl ( );
	class UH7OverlaySystemCntl* GetOverlaySystemCntl ( );
	class UH7SpellbookCntl* GetSpellbookCntl ( );
	class UH7DialogCntl* GetDialogCntl ( );
	class UH7RequestPopupCntl* GetPopupCntl ( );
	class UH7RequestPopupCntl* GetRequestPopupCntl ( );
	class UH7CheatWindowCntl* GetCheatWindowCntl ( );
	class UH7OptionsMenuCntl* GetOptionsMenuCntl ( );
	class UH7BackgroundImageCntl* GetBackgroundImageCntl ( );
	class UH7GUIGeneralProperties* GetProperties ( );
	void OnFrameReached ( );
};



// Class MMH7Game.H7CombatHud ( Property size: 15 iter: 31) 
// Class name index: 44122 
// 0x0050 (0x0734 - 0x06E4)
class AH7CombatHud : public AH7Hud
{
public:
	class UH7CombatHudCntl*                            mCombatHudCntl;                                   		// 0x06E4 (0x0008) [0x0000000000000000]              
	class UH7CombatUnitInfoCntl*                       mUnitInfoWindowCntl;                              		// 0x06EC (0x0008) [0x0000000000000000]              
	class UH7SpectatorHUDCntl*                         mSpectatorHUDCntl;                                		// 0x06F4 (0x0008) [0x0000000000000000]              
	class UH7CombatMapTestCntl*                        mTestMovie;                                       		// 0x06FC (0x0008) [0x0000000000000000]              
	class AH7CreatureStackPlateController*             mCreatureStackPlateController;                    		// 0x0704 (0x0008) [0x0000000000000000]              
	class AH7FCTController*                            mCombatMapFCTController;                          		// 0x070C (0x0008) [0x0000000000000000]              
	class AH7CombatMapStatusBarController*             mCombatMapStatusBarController;                    		// 0x0714 (0x0008) [0x0000000000000000]              
	int                                                mDelayedXPWinner;                                 		// 0x071C (0x0004) [0x0000000000000000]              
	int                                                mDelayedXPLoser;                                  		// 0x0720 (0x0004) [0x0000000000000000]              
	class AH7CombatArmy*                               mDelayedarmy;                                     		// 0x0724 (0x0008) [0x0000000000000000]              
	unsigned long                                      mDelayedfled : 1;                                 		// 0x072C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mDelayedsurrendered : 1;                          		// 0x072C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsPlayerVictory : 1;                             		// 0x072C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsInitialised : 1;                               		// 0x072C (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                mDelayedpaidGold;                                 		// 0x0730 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49629 ];

		return pClassPointer;
	};

	void ShowPreparedScreen ( );
	void PrepareFleeOrSurrenderScreen ( class AH7CombatArmy* Army, unsigned long isFlee, int XPWinner, int XPLoser, int paidGold );
	void PrepareVictoryOrDefeatScreen ( class AH7CombatArmy* Army, unsigned long isVictory, int XPWinner, int XPLoser, unsigned long isVictoryFlee, int victorySurrenderGold );
	void ResolutionChanged ( struct FVector2D newRes );
	void eventPostRender ( );
	void SetCombatHudVisible ( unsigned long Visible, unsigned long leaveLogAlone );
	void Hide ( );
	void ChildCompleted ( );
	void InitCombatHud ( unsigned long fromAdventure );
	void Init ( );
	class UH7MouseCntl* GetMouseCntl ( );
	class UH7CombatUnitInfoCntl* GetUnitInfoCntl ( );
	class UH7SpectatorHUDCntl* GetSpectatorHUDCntl ( );
	class UH7CombatHudCntl* GetCombatHudCntl ( );
	class AH7CombatHud* GetCombatHud ( );
	class AH7CombatHud* GetInstance ( );
};



// Class MMH7Game.H7AdventureHud ( Property size: 28 iter: 66) 
// Class name index: 43758 
// 0x00E0 (0x0814 - 0x0734)
class AH7AdventureHud : public AH7CombatHud
{
public:
	class UH7AdventureHudCntl*                         mAdventureHud;                                    		// 0x0734 (0x0008) [0x0000000000000000]              
	class UH7WindowWeeklyCntl*                         mWindowWeeklyCntl;                                		// 0x073C (0x0008) [0x0000000000000000]              
	class UH7HeroWindowCntl*                           mHeroWindowCntl;                                  		// 0x0744 (0x0008) [0x0000000000000000]              
	class UH7SkillwheelCntl*                           mSkillwheelCntl;                                  		// 0x074C (0x0008) [0x0000000000000000]              
	class UH7TownHudCntl*                              mTownHudCntl;                                     		// 0x0754 (0x0008) [0x0000000000000000]              
	class UH7TownRecruitmentPopupCntl*                 mTownRecruitmentCntl;                             		// 0x075C (0x0008) [0x0000000000000000]              
	class UH7TownBuildingPopupCntl*                    mTownBuildingCntl;                                		// 0x0764 (0x0008) [0x0000000000000000]              
	class UH7MarketPlacePopupCntl*                     mMarketPlaceCntl;                                 		// 0x076C (0x0008) [0x0000000000000000]              
	class UH7HallOfHerosPopupCntl*                     mHallOfHerosCntl;                                 		// 0x0774 (0x0008) [0x0000000000000000]              
	class UH7MagicGuildPopupCntl*                      mMagicGuildCntl;                                  		// 0x077C (0x0008) [0x0000000000000000]              
	class UH7ThievesGuildPopupCntl*                    mThievesGuildCntl;                                		// 0x0784 (0x0008) [0x0000000000000000]              
	class UH7TownCaravanPopupCntl*                     mCaravanCntl;                                     		// 0x078C (0x0008) [0x0000000000000000]              
	class UH7TownWarfarePopupCntl*                     mWarfareCntl;                                     		// 0x0794 (0x0008) [0x0000000000000000]              
	class UH7HeroTradeWindowCntl*                      mHeroTradeWindowCntl;                             		// 0x079C (0x0008) [0x0000000000000000]              
	class UH7TownGuardPopupCntl*                       mTownGuardCntl;                                   		// 0x07A4 (0x0008) [0x0000000000000000]              
	class UH7GateGuardPopupCntl*                       mGateGuardCntl;                                   		// 0x07AC (0x0008) [0x0000000000000000]              
	class UH7TurnOverCntl*                             mTurnOverPopup;                                   		// 0x07B4 (0x0008) [0x0000000000000000]              
	class UH7QuestLogCntl*                             mQuestLogCntl;                                    		// 0x07BC (0x0008) [0x0000000000000000]              
	class UH7QuestCompleteCntl*                        mQuestCompleteCntl;                               		// 0x07C4 (0x0008) [0x0000000000000000]              
	class UH7TradeResultCntl*                          mTradeResultCntl;                                 		// 0x07CC (0x0008) [0x0000000000000000]              
	class UH7MerchantPopUpCntl*                        mMerchantPopUpCntl;                               		// 0x07D4 (0x0008) [0x0000000000000000]              
	class UH7TrainingGroundsPopUpCntl*                 mTrainingGroundsPopUpCntl;                        		// 0x07DC (0x0008) [0x0000000000000000]              
	class UH7ArtifactRecyclerPopupCntl*                mArtifactRecyclerCntl;                            		// 0x07E4 (0x0008) [0x0000000000000000]              
	class UH7InscriberPopupCntl*                       mInscriberCntl;                                   		// 0x07EC (0x0008) [0x0000000000000000]              
	class UH7AltarOfSacrificeCntl*                     mAltarOfSacrificeCntl;                            		// 0x07F4 (0x0008) [0x0000000000000000]              
	class UH7ContainerCntl*                            mTownPopupCntl;                                   		// 0x07FC (0x0008) [0x0000000000000000]              
	class UH7TreasureHuntCntl*                         mTreasureHuntCntl;                                		// 0x0804 (0x0008) [0x0000000000000000]              
	class UH7RandomSkillingPopUpCntl*                  mRandomSkillingPopUpCntl;                         		// 0x080C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49628 ];

		return pClassPointer;
	};

	void SetAdventureHudVisible ( unsigned long Visible );
	void eventTick ( float DeltaTime );
	class ADynamicSMActor_Spawnable* GetBlackPreviewPlane ( );
	void DebugSimTurns ( );
	void DebugDrawAoC ( );
	void eventPostRender ( );
	void ResolutionChanged ( struct FVector2D newRes );
	void ChildCompleted ( );
	void Init ( );
	class UH7RandomSkillingPopUpCntl* GetRandomSkillingPopUpCntl ( );
	class UH7TreasureHuntCntl* GetTreasureHuntCntl ( );
	class UH7ContainerCntl* GetTownPopupContainerCntl ( );
	class UH7TownWarfarePopupCntl* GetTownWarfareCntl ( );
	class UH7TradeResultCntl* GetTradeResultCntl ( );
	class UH7QuestCompleteCntl* GetQuestCompleteCntl ( );
	class UH7QuestLogCntl* GetQuestLogCntl ( );
	class UH7TurnOverCntl* GetTurnOverCntl ( );
	class UH7HeroTradeWindowCntl* GetHeroTradeWindowCntl ( );
	class UH7TownCaravanPopupCntl* GetCaravanCntl ( );
	class UH7GateGuardPopupCntl* GetGateGuardCntl ( );
	class UH7TownGuardPopupCntl* GetTownGuardCntl ( );
	class UH7AltarOfSacrificeCntl* GetAltarOfSacrificeCntl ( );
	class UH7InscriberPopupCntl* GetInscriberCntl ( );
	class UH7ArtifactRecyclerPopupCntl* GetArtifactRecyclerCntl ( );
	class UH7TrainingGroundsPopUpCntl* GetTrainingGroundsPopUpCntl ( );
	class UH7MerchantPopUpCntl* GetMerchantPopUpCntl ( );
	class UH7HallOfHerosPopupCntl* GetHallOfHerosCntl ( );
	class UH7ThievesGuildPopupCntl* GetThievesGuildCntl ( );
	class UH7MagicGuildPopupCntl* GetMagicGuildCntl ( );
	class UH7MarketPlacePopupCntl* GetMarketPlaceCntl ( );
	class UH7TownBuildingPopupCntl* GetTownBuildingCntl ( );
	class UH7TownRecruitmentPopupCntl* GetTownRecruitmentCntl ( );
	class UH7TownHudCntl* GetTownHudCntl ( );
	class UH7SkillwheelCntl* GetSkillwheelCntl ( );
	class UH7HeroWindowCntl* GetHeroWindowCntl ( );
	class UH7WindowWeeklyCntl* GetWindowWeeklyCntl ( );
	class UH7AdventureHudCntl* GetAdventureHudCntl ( );
	class AH7AdventureHud* GetAdventureHud ( );
};



// Class MMH7Game.H73PGameInfo ( Property size: 0 iter: 0) 
// Class name index: 43732 
// 0x0000 (0x04B8 - 0x04B8)
class AH73PGameInfo : public AH7AdventureMapInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49630 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H73PPlayerController ( Property size: 1 iter: 7) 
// Class name index: 43733 
// 0x000C (0x08A8 - 0x089C)
class AH73PPlayerController : public AH7AdventurePlayerController
{
public:
	struct FVector                                     mCurrFreeMoveDir;                                 		// 0x089C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49632 ];

		return pClassPointer;
	};

	void FreeMoveArmy ( float DeltaTime );
	float GetPanningHorizontal ( );
	float GetPanningVertical ( );
	void eventPlayerTick ( float DeltaTime );
	void InitSetup ( );
	void eventPostBeginPlay ( );
};



// Class MMH7Game.H7StructsAndEnums ( Property size: 0 iter: 72) 
// Class name index: 44689 
// 0x0000 (0x0060 - 0x0060)
class UH7StructsAndEnums : public UH7StructsAndEnumsNative
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49655 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7MessageCallbacks ( Property size: 4 iter: 6) 
// Class name index: 44483 
// 0x0040 (0x00A0 - 0x0060)
class UH7MessageCallbacks : public UObject
{
public:
	struct FString                                     yesCaption;                                       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     noCaption;                                        		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnYes__Delegate;                                		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0084 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnNo__Delegate;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0094 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49703 ];

		return pClassPointer;
	};

	void OnNo ( );
	void OnYes ( );
};



// Class MMH7Game.H7AiActionBase ( Property size: 1 iter: 8) 
// Class name index: 43770 
// 0x0001 (0x0061 - 0x0060)
class UH7AiActionBase : public UObject
{
public:
	unsigned char                                      mABID;                                            		// 0x0060 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49852 ];

		return pClassPointer;
	};

	struct FString DebugName ( );
	bool PerformActionTown ( class AH7AreaOfControlSiteLord* Site, struct FAiActionScore Score );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	unsigned char GetAdvActionID ( );
	void RunScoresTown ( class UH7AiAdventureSensors* sensors, class AH7AreaOfControlSiteLord* currentControlSite, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
};



// Class MMH7Game.H7AiActionParam ( Property size: 14 iter: 46) 
// Class name index: 43785 
// 0x0178 (0x01D8 - 0x0060)
class UH7AiActionParam : public UObject
{
public:
	unsigned char                                      mParamType[ 0x3 ];                                		// 0x0060 (0x0003) [0x0000000000000000]              
	class AH7Unit*                                     mUnit[ 0x3 ];                                     		// 0x0064 (0x0018) [0x0000000000000000]              
	class UH7CombatMapCell*                            mCMapCell[ 0x3 ];                                 		// 0x007C (0x0018) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mAMapCell[ 0x3 ];                                 		// 0x0094 (0x0018) [0x0000000000000000]              
	class AH7CombatArmy*                               mCombatArmy[ 0x3 ];                               		// 0x00AC (0x0018) [0x0000000000000000]              
	class AH7AdventureArmy*                            mAdventureArmy[ 0x3 ];                            		// 0x00C4 (0x0018) [0x0000000000000000]              
	class AH7VisitableSite*                            mVisSite[ 0x3 ];                                  		// 0x00DC (0x0018) [0x0000000000000000]              
	class AH7Player*                                   mPlayer[ 0x3 ];                                   		// 0x00F4 (0x0018) [0x0000000000000000]              
	class UH7TownBuilding*                             mBuilding[ 0x3 ];                                 		// 0x010C (0x0018) [0x0000000000000000]              
	class UH7BaseAbility*                              mAbility[ 0x3 ];                                  		// 0x0124 (0x0018) [0x0000000000000000]              
	class AH7Teleporter*                               mTeleporter[ 0x3 ];                               		// 0x013C (0x0018) [0x0000000000000000]              
	struct FResourceStockpile                          mResourceStockpile[ 0x3 ];                        		// 0x0154 (0x0030) [0x0000000000000000]              
	struct FRecruitHeroData                            mRecruitHeroData[ 0x3 ];                          		// 0x0184 (0x003C) [0x0000000000000000]              
	class UH7BaseCreatureStack*                        mBaseCreatureStack[ 0x3 ];                        		// 0x01C0 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49854 ];

		return pClassPointer;
	};

	void Clear ( );
	struct FString DebugString ( unsigned char pid );
	void Copy ( class UH7AiActionParam* Other );
	bool Compare ( class UH7AiActionParam* Other );
	void SetBaseCreatureStack ( unsigned char pid, class UH7BaseCreatureStack* C );
	class UH7BaseCreatureStack* GetBaseCreatureStack ( unsigned char pid );
	void SetRecruitHeroData ( unsigned char pid, struct FRecruitHeroData rhd );
	struct FRecruitHeroData GetRecruitHeroData ( unsigned char pid );
	void SetResource ( unsigned char pid, struct FResourceStockpile rs );
	struct FResourceStockpile GetResource ( unsigned char pid );
	void SetTeleporter ( unsigned char pid, class AH7Teleporter* tele );
	class AH7Teleporter* GetTeleporter ( unsigned char pid );
	void SetAbility ( unsigned char pid, class UH7BaseAbility* Ability );
	class UH7BaseAbility* GetAbility ( unsigned char pid );
	void SetTownBuilding ( unsigned char pid, class UH7TownBuilding* Build );
	class UH7TownBuilding* GetTownBuilding ( unsigned char pid );
	void SetPlayer ( unsigned char pid, class AH7Player* Player );
	class AH7Player* GetPlayer ( unsigned char pid );
	void SetVisSite ( unsigned char pid, class AH7VisitableSite* Site );
	class AH7VisitableSite* GetVisSite ( unsigned char pid );
	void SetAdventureArmy ( unsigned char pid, class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetAdventureArmy ( unsigned char pid );
	void SetCombatArmy ( unsigned char pid, class AH7CombatArmy* Army );
	class AH7CombatArmy* GetCombatArmy ( unsigned char pid );
	void SetAMapCell ( unsigned char pid, class UH7AdventureMapCell* cell );
	class UH7AdventureMapCell* GetAMapCell ( unsigned char pid );
	void SetCMapCell ( unsigned char pid, class UH7CombatMapCell* cell );
	class UH7CombatMapCell* GetCMapCell ( unsigned char pid );
	void SetUnit ( unsigned char pid, class AH7Unit* Unit );
	class AH7Unit* GetUnit ( unsigned char pid );
	void SetPType ( unsigned char pid, unsigned char ptype );
	unsigned char GetPType ( unsigned char pid );
};



// Class MMH7Game.H7FlashMoviePopupCntl ( Property size: 9 iter: 29) 
// Class name index: 44220 
// 0x0028 (0x0248 - 0x0220)
class UH7FlashMoviePopupCntl : public UH7FlashMovieCntl
{
public:
	unsigned char                                      mKeybindCategory;                                 		// 0x0220 (0x0001) [0x0000000000000000]              
	TArray< struct FH7Keybind >                        mWindowSpecificKeybinds;                          		// 0x0224 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mBlockUnreal : 1;                                 		// 0x0234 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mBlockFlash : 1;                                  		// 0x0234 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mFullscreen : 1;                                  		// 0x0234 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mHideSidebar : 1;                                 		// 0x0234 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mBlockStandardKeys : 1;                           		// 0x0234 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mOpenedThisFrame : 1;                             		// 0x0234 (0x0004) [0x0000000000000000] [0x00000020] 
	TArray< struct FString >                           mAllowedStandardCommands;                         		// 0x0238 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50034 ];

		return pClassPointer;
	};

	bool KeybindUsedByPopup ( struct FKeyBind Key );
	struct FH7Keybind WriteUserKeysInto ( struct FH7Keybind defaultPopupKeybind );
	void CreatePopupKeybind ( struct FName Key, struct FString Command, struct FScriptDelegate keybindFunction, struct FName SecondaryKey );
	void InitWindowKeyBinds ( );
	class UH7GFxUIContainer* GetPopup ( );
	void Closed ( );
	void ClosePopup ( );
	void QueueFinished ( class UH7Message* Message );
	void PutPopupIntoQueue ( struct FH7PopupParameters Params, unsigned char Recipient, unsigned char creationContext );
	bool CanOpenPopup ( );
	bool OpenPopup ( );
	bool Initialize ( );
	bool IsBlockingFlash ( unsigned long treatExceptionAsNonBlocking );
	void ResetOpenedThisFrame ( );
	bool WasOpenedThisFrame ( );
	bool IsAllowingCommandFunction ( struct FString Cmd );
	bool IsFullscreen ( );
	bool IsHidingSidebar ( );
	bool IsBlockingStandardKeys ( );
	bool IsBlockingUnreal ( );
};



// Class MMH7Game.H7FlashMovieBlockPopupCntl ( Property size: 0 iter: 3) 
// Class name index: 44219 
// 0x0000 (0x0248 - 0x0248)
class UH7FlashMovieBlockPopupCntl : public UH7FlashMoviePopupCntl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50033 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	bool OpenPopup ( );
	bool Initialize ( );
};



// Class MMH7Game.H7LoadSaveWindowCntl ( Property size: 12 iter: 52) 
// Class name index: 44452 
// 0x003C (0x0284 - 0x0248)
class UH7LoadSaveWindowCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxLoadSaveWindow*                        mLoadSaveWindow;                                  		// 0x0248 (0x0008) [0x0000000000000000]              
	struct FString                                     mSelectedSaveGameFileName;                        		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mSelectedSaveGameSaveName;                        		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mLoadSelectedSaveGameAfterZoomIn : 1;             		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mScreenshotInProgress : 1;                        		// 0x0270 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mSavedBufferActive : 1;                           		// 0x0270 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mSaveMode : 1;                                    		// 0x0270 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mMainMenuMode : 1;                                		// 0x0270 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mCanExit : 1;                                     		// 0x0270 (0x0004) [0x0000000000000000] [0x00000020] 
	class UTextureRenderTarget2D*                      mScreenshot;                                      		// 0x0274 (0x0008) [0x0000000000000000]              
	float                                              mSavedBufferRatio;                                		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                mPendingSlotToSaveScreenshot;                     		// 0x0280 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50032 ];

		return pClassPointer;
	};

	int GetIndexOf ( struct FString Filename );
	struct FString GetDefaultSaveGameName ( );
	bool HasUnsavedChanges ( );
	int GetResolutionHeight ( );
	int GetResolutionWidth ( );
	class UTextureRenderTarget2D* GetScreenshot ( );
	void InformFlashOfPath ( struct FString Path );
	void LoadScreenshot ( struct FString Filename );
	void SaveCurrentScreenshotTo ( struct FString Filename );
	void SavedGameToSlot ( int SlotIndex );
	void StopTakeScreenshot ( );
	void TakeScreenShot ( );
	void DeleteGameComplete ( );
	void DeleteGameConfirm ( );
	void DeleteGame ( struct FString Id );
	void DeleteCurrentSave ( );
	void ZoomInComplete ( );
	void LoadMultiplayerGame ( unsigned long IsLAN );
	void LoadMultiplayerGameINET ( );
	void LoadMultiplayerGameLAN ( );
	void LoadGameConfirm ( );
	void LoadGame ( struct FString Filename );
	void SaveGameConfirm ( );
	void SaveGameName ( struct FString Filename, struct FString saveName );
	void ProcessInput ( );
	struct FString GetSaveNameFromFileName ( struct FString Filename );
	void Savegame ( struct FString Filename );
	void StopAdvanceReally ( );
	void StopAdvance ( );
	void StartAdvance ( );
	void ClosePopup ( );
	void Closed ( );
	void Open ( unsigned long mainMenuMode, unsigned long saveMode );
	void OpenSave ( );
	void OpenLoad ( unsigned long mainMenuMode, unsigned long canExit );
	void InitWindowKeyBinds ( );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxLoadSaveWindow* GetLoadSaveWindow ( );
	class UH7LoadSaveWindowCntl* GetInstance ( );
};



// Class MMH7Game.PlayerProfileState ( Property size: 1 iter: 3) 
// Class name index: 53517 
// 0x0010 (0x0070 - 0x0060)
class UPlayerProfileState : public UObject
{
public:
	TArray< struct FHeroTransitionSaveStruct >         HeroProfileSaveData;                              		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50039 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SaveGameHeaderManager ( Property size: 2 iter: 28) 
// Class name index: 44600 
// 0x00E9 (0x0149 - 0x0060)
class UH7SaveGameHeaderManager : public UObject
{
public:
	struct FH7SavegameData                             mHeaderData;                                      		// 0x0060 (0x00E8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      mStatus;                                          		// 0x0148 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50040 ];

		return pClassPointer;
	};

	struct FString AddZero ( int Value );
	void Setup ( unsigned char saveType, struct FString userInputName, unsigned long generateCheckSum );
	int GetTimeStamp ( );
	struct FString GetSkillTypeAsString ( );
	struct FString GetMapTypeAsString ( );
	struct FString GetSaveTypeAsString ( );
	struct FString GetDifficultyAsString ( );
	struct FString GetGameModeAsString ( );
	unsigned char GetMapType ( );
	struct FString GetVictoryConditionAsString ( );
	struct FString GetMapLocaName ( );
	struct FString GetMapFileName ( );
	struct FString GetSaveTime ( );
	unsigned char GetSaveType ( );
	unsigned char GetDifficulty ( );
	unsigned char GetGameMode ( );
	int GetSaveTimeUnix ( );
	TArray< struct FPlayerLobbySelectedSettings > GetPlayerSettings ( );
	struct FH7LobbyDataMapSettings GetMapSettings ( );
	struct FH7LobbyDataGameSettings GetGameSettings ( );
	bool IsUnsupported ( );
	bool IsCorrupted ( );
	struct FH7SavegameData GetData ( );
	void SetData ( struct FH7SavegameData Data, unsigned char Status );
	void SetName ( struct FString saveName );
	struct FString GetName ( );
};



// Class MMH7Game.H7RequestPopupCntl ( Property size: 1 iter: 12) 
// Class name index: 44549 
// 0x0008 (0x0250 - 0x0248)
class UH7RequestPopupCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxRequestPopup*                          mRequestPopup;                                    		// 0x0248 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50050 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	bool OpenPopup ( );
	void Closed ( );
	void OnNegativeResponse ( );
	void OnPositiveResponse ( );
	void InitWindowKeyBinds ( );
	void OpenPopupByMessage ( class UH7Message* Message );
	bool Initialize ( );
	class UH7RequestPopupCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxRequestPopup* GetRequestPopup ( );
};



// Class MMH7Game.H7InstantCommandBase ( Property size: 0 iter: 6) 
// Class name index: 44367 
// 0x0000 (0x0060 - 0x0060)
class UH7InstantCommandBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50054 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand mpData );
};



// Class MMH7Game.H7InstantCommandSaveGame ( Property size: 2 iter: 7) 
// Class name index: 44411 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandSaveGame : public UH7InstantCommandBase
{
public:
	int                                                mSaveGameSlotIndex;                               		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FString                                     mSaveGameName;                                    		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50053 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( int saveGameSlot, struct FString SaveGameName );
};



// Class MMH7Game.H7InstantCommandManager ( Property size: 0 iter: 3) 
// Class name index: 44395 
// 0x0000 (0x0060 - 0x0060)
class UH7InstantCommandManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50057 ];

		return pClassPointer;
	};

	class UH7InstantCommandBase* CreateInstantCommand ( struct FMPInstantCommand Data );
	void ExecuteInstantCommand ( class UH7InstantCommandBase* Command );
	bool StartCommand ( class UH7InstantCommandBase* Command );
};



// Class MMH7Game.H7GFxListener ( Property size: 0 iter: 2) 
// Class name index: 44275 
// 0x0000 (0x00A0 - 0x00A0)
class UH7GFxListener : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50065 ];

		return pClassPointer;
	};

	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void ListenTo ( class UObject* gameEntity );
};



// Class MMH7Game.H7GFxUIContainer ( Property size: 1 iter: 43) 
// Class name index: 44330 
// 0x0004 (0x00A4 - 0x00A0)
class UH7GFxUIContainer : public UH7GFxListener
{
public:
	unsigned long                                      mVisible : 1;                                     		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50064 ];

		return pClassPointer;
	};

	class UGFxObject* GetBattleSiteRewardsObject ( class AH7EditorHero* Hero, class AH7BattleSite* currentBattleSite );
	void SetStatModSourceList ( TArray< struct FH7StatModSource > List );
	class UGFxObject* CreateCostArray ( TArray< struct FH7ResourceQuantity > Costs );
	class UGFxObject* CreatePreReqArray ( class UH7TownBuilding* Building, class AH7Town* Town );
	class UGFxObject* CreateBuildingCostArray ( class UH7TownBuilding* Building, class AH7Town* Town );
	class UGFxObject* CreateBuildingObjectFromBuildng ( class UH7TownBuilding* Building, class AH7Town* Town );
	class UGFxObject* CreateBuildingObject ( struct FH7TownBuildingData Building, class AH7Town* Town );
	class UGFxObject* CreateItemObject ( class UH7HeroItem* Item, class AH7EditorHero* Hero, struct FIntPoint pos );
	class UGFxObject* CreateWarfareUnitObject ( class AH7EditorWarUnit* warUnit );
	class UGFxObject* CreateWarefareUnitsObject ( class AH7EditorArmy* Army, struct FColor fallbackColor );
	class UGFxObject* CreateHeroObject ( class AH7EditorHero* Hero );
	class UGFxObject* CreateUnitObjectFromPool ( class AH7AreaOfControlSite* Site, struct FH7DwellingCreatureData Unit, unsigned long obfuscateStackSize );
	class UGFxObject* CreateArmyObjectFromPool ( class AH7AreaOfControlSite* Site );
	class UGFxObject* CreateUnitObjectFromStack ( class UH7BaseCreatureStack* Stack );
	class UGFxObject* CreateArmyObjectFromStacks ( TArray< class UH7BaseCreatureStack* > stacks );
	class UGFxObject* CreateUnitObjectAdvanced ( class AH7Creature* Creature );
	class UGFxObject* CreateCreatureStackObject ( class UH7BaseCreatureStack* Stack );
	class UGFxObject* CreateCombatArmyObject ( class AH7CombatArmy* Army );
	class UGFxObject* CreateLocalGuardObject ( TArray< class UH7BaseCreatureStack* > localGuardStacks, class AH7EditorHero* commandingHero );
	class UGFxObject* CreateArmyObject ( class AH7EditorArmy* Army, unsigned long obfuscateStackSize, struct FColor fallbackColor, unsigned long addManaCost, struct FH7TeleportCosts Costs );
	class UGFxObject* CreateArmyObjectFromSite ( class AH7AreaOfControlSite* Site, unsigned long obfuscateStackSize );
	class UGFxObject* CreateCaravanObject ( class AH7CaravanArmy* Army );
	class UGFxObject* CreateCaravanObjectFromData ( struct FArrivedCaravan Army );
	class UGFxObject* CreateResourceArray ( TArray< struct FH7ResourceQuantity > Resources );
	class UGFxObject* CreateColorObject ( struct FColor ucolor );
	struct FString GetFlashPath ( class UTexture2D* Asset );
	void ResetDragAndDrop ( );
	void Reset ( );
	void PlayOpenAnimation ( );
	void PlayOpenAnimationNextFrame ( );
	void Hide ( );
	class UGFxObject* CreateDataObject ( );
	class UGFxObject* GetNewArray ( );
	class UGFxObject* GetNewObject ( );
	void BlockInputTemporary ( unsigned long verbose );
	bool IsVisible ( );
	void SetVisibleSave ( unsigned long val );
	bool IsLocaKey ( struct FString Unknown );
	class AH7Hud* GetHUD ( );
	void RealignAdventureMap ( int flashWidth, int flashHeight );
	void Realign ( int flashWidth, int flashHeight );
	struct FString GetFlashName ( );
};



// Class MMH7Game.H7GUIOverlaySystemCntl ( Property size: 2 iter: 7) 
// Class name index: 44340 
// 0x0010 (0x0230 - 0x0220)
class UH7GUIOverlaySystemCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxSideBar*                               mSideBar;                                         		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxUplayNote*                             mUplayNote;                                       		// 0x0228 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50688 ];

		return pClassPointer;
	};

	void ClickMessage ( int Id );
	bool Initialize ( );
	class UH7GFxUplayNote* GetUplayNote ( );
	class UH7GFxSideBar* GetSideBar ( );
	class UH7GUIOverlaySystemCntl* GetInstance ( );
};



// Class MMH7Game.H7CombatHudCntl ( Property size: 26 iter: 99) 
// Class name index: 44123 
// 0x00BC (0x02DC - 0x0220)
class UH7CombatHudCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxInitiativeList*                        mInitiativeList;                                  		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxCreatureAbilityButtonPanel*            mCreatureAbilityButtonPanel;                      		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxCombatMenu*                            mCombatMenu;                                      		// 0x0230 (0x0008) [0x0000000000000000]              
	class UH7GFxDamageTooltipSystem*                   mDamageTooltipSystem;                             		// 0x0238 (0x0008) [0x0000000000000000]              
	class UH7GFxDeploymentBar*                         mDeploymentBar;                                   		// 0x0240 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mHeroPanel;                                       		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxTacticsBanner*                         mTacticsBanner;                                   		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7GFxSimTurnInfo*                           mTimer;                                           		// 0x0258 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              WaitButtonHero;                                   		// 0x0260 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              SpellbookButton;                                  		// 0x0268 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              HeroAttackButton;                                 		// 0x0270 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ChangeCombatButton;                               		// 0x0278 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              AutoButton;                                       		// 0x0280 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              PauseMenuButton;                                  		// 0x0288 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              CheatWindowButton;                                		// 0x0290 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnPlay;                                          		// 0x0298 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnFastForward;                                   		// 0x02A0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnFastForward2;                                  		// 0x02A8 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  mSpeedControls;                                   		// 0x02B0 (0x0008) [0x0000000000000000]              
	unsigned long                                      mBeginCombatOnInit : 1;                           		// 0x02B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsWaitingForOtherPlayer : 1;                     		// 0x02B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mAutoDeployDoneThisFrame : 1;                     		// 0x02B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mNoAbilityReset : 1;                              		// 0x02B8 (0x0004) [0x0000000000000000] [0x00000008] 
	class AH7Unit*                                     mPrevUnit;                                        		// 0x02BC (0x0008) [0x0000000000000000]              
	TArray< class UH7BaseAbility* >                    mAbilities;                                       		// 0x02C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Unit*                                     mUnit;                                            		// 0x02D4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50695 ];

		return pClassPointer;
	};

	void CompleteTransfer ( unsigned long Success, unsigned long transfer );
	void RequestTransfer ( int fromArmy, int fromIndex, int toArmy, int ToIndex, int splitAmount );
	void Closed ( struct FString infoWindowName );
	void GetStatModSourceList ( struct FString statStr, int unrealID );
	void ShowCreatureAbilityButtons ( );
	void HideCreatureAbilityButtons ( );
	void HighlightButtonFor ( class UH7BaseAbility* Ability, unsigned long noReset );
	void BtnAbilityClicked ( int btnNumber );
	int AbilityCompare ( class UH7BaseAbility* A, class UH7BaseAbility* B );
	void SetCreatureAbilities ( class AH7Unit* Unit );
	void SetCreatureAbilityData ( class AH7Unit* Unit );
	void HideAbilityPreview ( struct FString RequestingFunction );
	void UpdateAbilityPreviewPosition ( );
	void ShowAbilityPreview ( class UH7CombatResult* Result );
	void BtnFastForward2Click ( struct FEventData Data );
	void BtnFastForwardClick ( struct FEventData Data );
	void BtnPlayClick ( struct FEventData Data );
	void CheatWindowButtonClick ( struct FEventData Data );
	void PauseMenuButtonClick ( struct FEventData Data );
	void SetAutoCombat ( unsigned long val );
	void EnableAutoCombat ( );
	void QuitPopUpAutoCombat ( );
	void AutoCombatToggle ( );
	bool CanAutoCombat ( );
	bool CanAutoDeploy ( );
	class AH7Player* GetAutoCombatPlayer ( );
	void AutoButtonClick ( struct FEventData Data );
	void ResetAutoDeployDoneThisFrame ( );
	void SurrenderFromCombatClick ( );
	void FleeFromCombatClick ( );
	void OpenFleeSurrenderPopup ( );
	void ChangeCombatButtonClick ( struct FEventData Data );
	void WaitButtonClick ( struct FEventData Data );
	void HeroAttackToggle ( );
	void HeroAttackButtonClick ( struct FEventData Data );
	void SpellbookButtonClickNoParams ( );
	void SpellbookButtonClick ( struct FEventData Data );
	void SetWaitingForPlayers ( unsigned long Waiting );
	void SetTacticsWaiting ( unsigned long Waiting );
	void SetMyTurn ( unsigned long myTurn );
	void InitTacticsBanner ( struct FString Header, struct FString Text );
	void ShowTacticsGUI ( );
	void UpdateFleeSurrenderButton ( );
	void CombatBegin ( );
	void StartAdvance ( );
	void DeselectSlot ( int UnitId );
	void SelectSlot ( int UnitId );
	int GetStackIndexByID ( int UnitId );
	void DehighlightSlots ( int UnitId );
	void HightlightSlots ( int UnitId );
	void UnitUpdateBuffs ( int Id );
	void UnitClick ( int Id );
	void UnitDownLong ( );
	void UnitDown ( int Id );
	void UnitUp ( int Id );
	void UnitOut ( int Id );
	void UnitOver ( int Id );
	void UnitPickedFromBar ( int Id );
	void RemoveUnitFromCursor ( );
	void UnitDroppedOnBar ( int Id );
	void SetCombatHudCntlVisible ( unsigned long Visible );
	void BlockInputTemporary ( );
	bool Initialize ( );
	bool IsWaitingForOtherPlayer ( );
	class UH7GFxSimTurnInfo* GetTimer ( );
	class UH7GFxCreatureAbilityButtonPanel* GetCreatureAbilityButtonPanel ( );
	class UH7GFxDeploymentBar* GetDeploymentBar ( );
	class UH7GFxTacticsBanner* GetTacticsBanner ( );
	class UH7GFxDamageTooltipSystem* GetDamageTooltipSystem ( );
	class UH7GFxUIContainer* GetHeroPanel ( );
	class UH7GFxCombatMenu* GetCombatMenu ( );
	class UH7GFxInitiativeList* GetInitiativeList ( );
	class UH7CombatHudCntl* GetInstance ( );
};



// Class MMH7Game.H7PostprocessManager ( Property size: 18 iter: 37) 
// Class name index: 44529 
// 0x0078 (0x02B8 - 0x0240)
class AH7PostprocessManager : public AActor
{
public:
	unsigned long                                      mUseAA : 1;                                       		// 0x0240 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      mUseFog : 1;                                      		// 0x0240 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      mUsePixellated : 1;                               		// 0x0240 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                mPostProcessQuality;                              		// 0x0244 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UMaterialEffect*                             mOutlinesPP;                                      		// 0x0248 (0x0008) [0x0000000000000000]              
	class URenderTargetMaterialEffect*                 mPreOutlinesPP;                                   		// 0x0250 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mOutlinesPPMat;                                   		// 0x0258 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mPreOutlinesPPMat;                                		// 0x0260 (0x0008) [0x0000000000000000]              
	class UMaterialEffect*                             mSharpenPP;                                       		// 0x0268 (0x0008) [0x0000000000000000]              
	class UMaterialEffect*                             mCinematicPP;                                     		// 0x0270 (0x0008) [0x0000000000000000]              
	class URenderTargetMaterialEffect*                 mFOWPPBlur;                                       		// 0x0278 (0x0008) [0x0000000000000000]              
	class UMaterialEffect*                             mFOWPP;                                           		// 0x0280 (0x0008) [0x0000000000000000]              
	class UUberPostProcessEffect*                      mUberPP;                                          		// 0x0288 (0x0008) [0x0000000000000000]              
	class UMaterialEffect*                             mArtisticPP;                                      		// 0x0290 (0x0008) [0x0000000000000000]              
	class URenderTargetMaterialEffect*                 mAtmosphericPrePass;                              		// 0x0298 (0x0008) [0x0000000000000000]              
	class UDynamicMaterialEffect*                      mAtmosphericPostPass;                             		// 0x02A0 (0x0008) [0x0000000000000000]              
	class URenderTargetMaterialEffect*                 mPrePixelPP;                                      		// 0x02A8 (0x0008) [0x0000000000000000]              
	class UMaterialEffect*                             mPixelPP;                                         		// 0x02B0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50704 ];

		return pClassPointer;
	};

	void ResetOptions ( );
	void SetOutlineActive ( unsigned long bActivated );
	void InitFog ( );
	void SetFog ( unsigned long bVal );
	bool GetFog ( );
	void InitPPQuality ( );
	TArray< struct FString > GetPostProcessQualityList ( );
	void SetPostProcessQuality ( int val );
	int GetPostProcessQuality ( );
	void SetPixellated ( unsigned long val );
	void InitPixellated ( );
	void InitAA ( );
	void ApplyGameTypeEffect ( unsigned long bCombat, unsigned long bSkipFoW );
	void InitOutline ( );
	void SetAA ( unsigned long bVal );
	bool GetAA ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	class UMaterialEffect* GetOutlinesPP ( );
};



// Class MMH7Game.H7MainMenuHud ( Property size: 5 iter: 18) 
// Class name index: 44466 
// 0x0028 (0x070C - 0x06E4)
class AH7MainMenuHud : public AH7Hud
{
public:
	class UH7MainMenuCntl*                             mMainMenuCntl;                                    		// 0x06E4 (0x0008) [0x0000000000000000]              
	class UH7MapSelectCntl*                            mMapSelectCntl;                                   		// 0x06EC (0x0008) [0x0000000000000000]              
	class UH7JoinGameMenuCntl*                         mLobbySelectCntl;                                 		// 0x06F4 (0x0008) [0x0000000000000000]              
	class UH7SkirmishSetupWindowCntl*                  mSkirmishSetupCntl;                               		// 0x06FC (0x0008) [0x0000000000000000]              
	class UH7DuelSetupWindowCntl*                      mDuelSetupCntl;                                   		// 0x0704 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50728 ];

		return pClassPointer;
	};

	void LoadBG ( );
	void eventPostRender ( );
	void ResolutionChanged ( struct FVector2D newRes );
	void CreateLobbyGUIWhenEverythingReady ( );
	void ChildCompleted ( );
	void Init ( );
	void PostBeginPlay ( );
	class AH7MainMenuHud* GetInstance ( );
	class UH7DuelSetupWindowCntl* GetDuelSetupWindowCntl ( );
	class UH7SkirmishSetupWindowCntl* GetSkirmishSetupWindowCntl ( );
	class UH7JoinGameMenuCntl* GetLobbySelectCntl ( );
	class UH7MapSelectCntl* GetMapSelectCntl ( );
	class UH7MainMenuCntl* GetMainMenuCntl ( );
};



// Class MMH7Game.H7LogSystemCntl ( Property size: 4 iter: 17) 
// Class name index: 44459 
// 0x0020 (0x0240 - 0x0220)
class UH7LogSystemCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxLog*                                   mLog;                                             		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxLogQA*                                 mQALog;                                           		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxLogChat*                               mChat;                                            		// 0x0230 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mBorderBlack;                                     		// 0x0238 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50737 ];

		return pClassPointer;
	};

	void AddChatLine ( struct FString Line, struct FString PlayerName, unsigned char Channel );
	void SendChatLine ( struct FString Line, int Channel );
	void SetLogStatus ( struct FString logName, unsigned long Status );
	void LogClick ( int Id );
	void Logout ( int Id );
	void LogOver ( int Id );
	void SetVisible ( unsigned long Visible );
	bool Initialize ( );
	class UH7GFxUIContainer* GetBorderBlack ( );
	class UH7GFxLogQA* GetQALog ( );
	class UH7GFxLogChat* GetChat ( );
	class UH7GFxLog* GetLog ( );
	class UH7LogSystemCntl* GetInstance ( );
};



// Class MMH7Game.H7KeybindManager ( Property size: 3 iter: 39) 
// Class name index: 44440 
// 0x0028 (0x0088 - 0x0060)
class UH7KeybindManager : public UObject
{
public:
	TArray< struct FH7Keybind >                        mKeybindList;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7PopupKeybindings*                         mPopupKeybindings;                                		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __KeybindFunctionDelegate__Delegate;              		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x007C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50809 ];

		return pClassPointer;
	};

	struct FH7Keybind GetConflictKeyComboFromManagerList ( struct FKeyBind KeyBind );
	bool CausesConflict ( struct FString Command, struct FString Key, unsigned long Shift, unsigned long Alt, unsigned long Control );
	bool IsAlias ( struct FName aliasOrKey );
	bool IsRealKey ( struct FName keyStr );
	bool HasRealKey ( struct FKeyBind KeyBind );
	struct FString GetKeyComboString ( struct FKeyBind KeyBind );
	struct FString GetDebugString ( struct FKeyBind KeyBind );
	struct FKeyBind GetConflictUnrealKeybind ( struct FKeyBind newKeybind );
	bool HasEqualKeyCombo ( struct FKeyBind key1, struct FKeyBind key2 );
	void AddToUnreal ( struct FKeyBind KeyBind, struct FKeyBind oldKeybind );
	bool SetKeybind ( struct FString Command, unsigned long pshift, unsigned long palt, unsigned long pcontrol, struct FString pkey, unsigned long sshift, unsigned long salt, unsigned long scontrol, struct FString skey );
	void DeleteFromUnreal ( struct FString Command );
	void DeletePopupKeybinding ( struct FString Command );
	struct FH7Keybind CollapseKeybinds ( TArray< struct FH7Keybind > keybinds );
	unsigned char GetCategoryForCommand ( struct FString Command );
	void CallKeybindFunction ( struct FH7Keybind KeyBind );
	void OrderList ( );
	int KeybindCompare ( struct FH7Keybind A, struct FH7Keybind B );
	TArray< struct FH7Keybind > SplitKeybind ( struct FKeyBind KeyBind );
	void AddPopupKeybindToManager ( struct FH7Keybind popupKeybind );
	void SaveNewPopupKeybind ( struct FH7Keybind newKeybind );
	void OverwritePopupKeybindToManagerAndIniList ( struct FH7Keybind newKeybind );
	void AddKeybindToManager ( struct FH7Keybind newKeybind );
	struct FKeyBind ApplyPostLaunchFixes ( struct FKeyBind userKeybind );
	void CreateSetup ( );
	struct FH7Keybind GetKeybindByCommand ( struct FString Command );
	struct FKeyBind GetPreferedKeybindByCommand ( struct FString Command );
	TArray< struct FH7Keybind > GetKeybindListByCategory ( unsigned char cat );
	TArray< struct FH7Keybind > GetKeybindList ( );
	class UH7PopupKeybindings* GetPopupKeybindingUserSettings ( );
	bool IsPopupCategory ( unsigned char Category );
	struct FString GetConflictCategory ( unsigned char Category );
	class UH7KeybindManager* GetInstance ( );
	void KeybindFunctionDelegate ( );
};



// Class MMH7Game.H7TownHudCntl ( Property size: 36 iter: 120) 
// Class name index: 44723 
// 0x00F0 (0x0310 - 0x0220)
class UH7TownHudCntl : public UH7FlashMovieCntl
{
public:
	class UTexture2D*                                  mDummyTown;                                       		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxMiddleHUD*                             mMiddleHUD;                                       		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxTownInfo*                              mTownInfo;                                        		// 0x0230 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsActive : 1;                                    		// 0x0238 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsInDwelling : 1;                                		// 0x0238 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsInFort : 1;                                    		// 0x0238 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mNewBuildingToSpawn : 1;                          		// 0x0238 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mPreventTownscreenInView : 1;                     		// 0x0238 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mDismissArmy : 1;                                 		// 0x0238 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mCaravanHighlight : 1;                            		// 0x0238 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mAllowHeroTransfer : 1;                           		// 0x0238 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mPendingPopupOpen : 1;                            		// 0x0238 (0x0004) [0x0000000000000000] [0x00000100] 
	class AH7AreaOfControlSite*                        mVisitingSite;                                    		// 0x023C (0x0008) [0x0000000000000000]              
	class AH7Town*                                     mTown;                                            		// 0x0244 (0x0008) [0x0000000000000000]              
	class AH7Fort*                                     mFort;                                            		// 0x024C (0x0008) [0x0000000000000000]              
	class AH7Dwelling*                                 mDwelling;                                        		// 0x0254 (0x0008) [0x0000000000000000]              
	class AH7CustomNeutralDwelling*                    mNeutralDwelling;                                 		// 0x025C (0x0008) [0x0000000000000000]              
	class AH7TownAsset*                                mZoomedInAsset;                                   		// 0x0264 (0x0008) [0x0000000000000000]              
	class AH7TownAsset*                                mCurrentlyZoomingAsset;                           		// 0x026C (0x0008) [0x0000000000000000]              
	class AActor*                                      mCurrent3DTownScreen;                             		// 0x0274 (0x0008) [0x0000000000000000]              
	int                                                mDismissIndex;                                    		// 0x027C (0x0004) [0x0000000000000000]              
	TArray< class UParticleSystemComponent* >          mParticleSystems;                                 		// 0x0280 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class AActor* >                            mSpawnedActors;                                   		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7TownAsset* >                      mSpawnedAssets;                                   		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7TownBuilding* >                   mFadeInQueue;                                     		// 0x02B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureHero*                            mPendingNewGovernor;                              		// 0x02C0 (0x0008) [0x0000000000000000]              
	class UH7BaseCreatureStack*                        mDraggedStack;                                    		// 0x02C8 (0x0008) [0x0000000000000000]              
	int                                                mDraggedStackIndex;                               		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                mDraggedStackArmyNumber;                          		// 0x02D4 (0x0004) [0x0000000000000000]              
	class AActor*                                      mPrefabOwner;                                     		// 0x02D8 (0x0008) [0x0000000000000000]              
	class UPrefab*                                     mPrefabGroup;                                     		// 0x02E0 (0x0008) [0x0000000000000000]              
	float                                              PosX;                                             		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              PosY;                                             		// 0x02EC (0x0004) [0x0000000000000000]              
	struct FRotator                                    StartRotation;                                    		// 0x02F0 (0x000C) [0x0000000000000000]              
	struct FVector                                     mPreTownScreenCameraPos;                          		// 0x02FC (0x000C) [0x0000000000000000]              
	class UH7PlayerEventParam*                         mPlayerEventParam;                                		// 0x0308 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50828 ];

		return pClassPointer;
	};

	bool IsCaravanHighlight ( );
	void SetCaravanHighlight ( unsigned long Active );
	void UnSpawnTownScreen ( unsigned long onlySwapping );
	bool IsInFadeInQueue ( class UH7TownBuilding* Building );
	void AddToFadeInQueue ( class UH7TownBuilding* Building );
	void SpawnTownScreenForReal ( );
	void SpawnTownScreen ( class AActor* PrefabOwner, class UPrefab* PrefabGroup );
	void RecruitHeroComplete ( int heroId );
	void RecruitHero ( int heroId );
	class AH7TownAsset* GetTownAsset ( class AH7TownAsset* townAssetArchetype );
	void OnGovernorCancel ( );
	void GovernorConfirmComplete ( );
	void OnGovernorConfirm ( );
	void AssignGovernor ( int fromArmy );
	void UpdateHUD ( );
	class AH7AdventureArmy* GetArmy ( int Number );
	int GetArmyNumber ( class AH7AdventureArmy* Army );
	void RequestTransferCaravanData ( struct FArrivedCaravan caravan, int fromIndex, int toArmy, int ToIndex, int splitAmount );
	void CompleteTransfer ( unsigned long Success, int TargetIndex, class AH7AdventureArmy* altArmy, unsigned long transfer );
	void RequestTransfer ( int fromArmy, int fromIndex, int toArmy, int ToIndex, int splitAmount );
	void CompleteHeroTransfer ( unsigned long Success );
	void allowHeroTransfer ( );
	void RequestHeroTransfer ( int fromArmy, int toArmy );
	bool CanSwap ( );
	void CompleteMergeArmies ( unsigned long Success );
	void RequestArmyMerge ( int fromArmy, int toArmy );
	void SplitToUnknownTarget ( );
	void DismissCancel ( );
	void DismissConfirm ( );
	void DismissUnit ( unsigned long visitor, int Index );
	void UpgradeCreature ( int slotID, unsigned long isVisitor, int Count );
	void SetDraggedSlotUnused ( );
	void RemoveUnitFromCursor ( );
	void SetDraggedSlotInUse ( );
	void PutUnitOnCursorNew ( int armyNr, int Index );
	void PutUnitOnCursorByBaseStack ( class UH7BaseCreatureStack* BaseStack );
	unsigned char GetOpenTownPopup ( );
	void UpdateAfterDestroy ( );
	void SwitchTownScreen ( class AH7Town* Town );
	void SelectTown ( int Id );
	void UpdatePos ( );
	void TownscreenIsInView ( );
	void ZoomOutComplete ( class AH7TownAsset* Asset );
	void ZoomOutAndBuild ( );
	void TownPopupWasClosed ( class UH7FlashMoviePopupCntl* cntl );
	bool isOpen ( int popupID );
	void ClosePopupByID ( int popupID );
	class UH7FlashMoviePopupCntl* GetTownPopupCntlByID ( int popupID );
	void OpenTownPopup ( unsigned char popupID );
	void ZoomInComplete ( class AH7TownAsset* Asset );
	void ZoomOutStart ( class AH7TownAsset* Asset );
	void ZoomInStart ( class AH7TownAsset* Asset );
	void ToggleVisitTownBuilding ( int popupID, class AH7TownAsset* specificAsset );
	void ResetPendingPopupOpen ( );
	void HighlightButton ( int popupID, unsigned long val );
	void AssetClicked ( class AH7TownAsset* Asset );
	void OpenPopup ( int popupID );
	void GotoAnyScreen ( );
	void LeaveAnyScreen ( );
	void Leave ( );
	void LeaveFortScreen ( );
	void GoToFortScreen ( class AH7Fort* fort );
	void LeaveGarrisonScreen ( );
	void GoToGarrisonScreen ( class AH7Garrison* garrison );
	void LeaveDwellingScreen ( );
	void GoToNeutralDwellingScreen ( class AH7Dwelling* Dwelling );
	void GoToDwellingScreen ( class AH7Dwelling* Dwelling );
	void LeaveTownScreen ( unsigned long onlySwapping );
	void GotoTownScreen ( class AH7Town* Town );
	void SetVisitingSite ( class AH7AreaOfControlSite* Site );
	bool Initialize ( );
	bool IsInAnyScreen ( );
	bool IsInFortScreen ( );
	bool IsInDwellingScreen ( );
	bool IsInTownScreen ( );
	int GetDraggedStackArmyNr ( );
	int GetDraggedStackIndex ( );
	class UH7BaseCreatureStack* GetDraggedStack ( );
	class AH7AreaOfControlSite* GetSite ( );
	class AH7Town* GetTown ( );
	class UH7TownHudCntl* GetInstance ( );
	class AH7TownAsset* GetZoomedInAsset ( );
	class UH7GFxTownInfo* GetTownInfo ( );
	class UH7GFxMiddleHUD* GetMiddleHUD ( );
};



// Class MMH7Game.H7SpellbookCntl ( Property size: 5 iter: 21) 
// Class name index: 44674 
// 0x001C (0x0264 - 0x0248)
class UH7SpellbookCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxSpellbook*                             mSpellbook;                                       		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxQuickBar*                              mQuickBar;                                        		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7EditorHero*                               mCurrentHero;                                     		// 0x0258 (0x0008) [0x0000000000000000]              
	unsigned long                                      mHasSpellOnCursor : 1;                            		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mFilterIconsSet : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50840 ];

		return pClassPointer;
	};

	void SaveQuickBar ( TArray< int > spellIDs );
	void ClosePopup ( );
	void Closed ( );
	void RemoveSpellFromCursor ( );
	void AddSpellIconToCursor ( struct FString spellName, int spellID );
	void SpellClicked ( int spellID, unsigned long fromQuickBar );
	void HeroClick ( int Id );
	void SetHero ( class AH7EditorHero* Hero );
	void SetData ( class AH7EditorHero* Hero );
	bool CanBeStopped ( );
	bool Initialize ( );
	class UH7SpellbookCntl* GetInstance ( );
	bool HasSpellOnCursor ( );
	class UH7GFxQuickBar* GetQuickBar ( );
	class UH7GFxSpellbook* GetSpellbook ( );
	class UH7GFxUIContainer* GetPopup ( );
};



// Class MMH7Game.H7OptionsManager ( Property size: 10 iter: 47) 
// Class name index: 44509 
// 0x0094 (0x00F4 - 0x0060)
class UH7OptionsManager : public UObject
{
public:
	TArray< struct FOptionStruct >                     mOptionList;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mRewardOptionsBuilded : 1;                        		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __SetBoolDelegate__Delegate;                      		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0078 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __GetBoolDelegate__Delegate;                      		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SetFloatDelegate__Delegate;                     		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0098 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __GetFloatDelegate__Delegate;                     		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __GetFloatConstraintsDelegate__Delegate;          		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x00B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SetEnumDelegate__Delegate;                      		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x00C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __GetEnumDelegate__Delegate;                      		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x00D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __GetEnumListDelegate__Delegate;                  		// 0x00E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x00E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50896 ];

		return pClassPointer;
	};

	int GetSettingIndex ( struct FString Key );
	struct FOptionStruct GetSetting ( struct FString Key );
	struct FVector2D GetSettingConstraints ( struct FString Key );
	void SetSettingEnum ( struct FString Key, int val );
	void SetSettingFloat ( struct FString Key, float val );
	void SetSettingBool ( struct FString Key, unsigned long val );
	TArray< struct FString > GetSettingEnumList ( struct FString Key );
	int GetSettingEnum ( struct FString Key );
	float GetSettingFloat ( struct FString Key );
	bool GetSettingBool ( struct FString Key );
	struct FVector2D GetPanningPercentConstraints ( );
	struct FVector2D GetPercentConstraints ( );
	struct FVector2D GetSoundConstraints ( );
	void CreateOptionsFromKeybinds ( );
	void CreateRewardOptions ( );
	void CreateSetup ( );
	void ResetAllOptions ( );
	void SaveAllConfigs ( );
	struct FOptionStruct GetOptionStruct ( struct FString optionKey );
	TArray< struct FOptionStruct > GetOptions ( );
	class UH7OptionsManager* GetInstance ( );
	TArray< struct FString > GetEnumListDelegate ( );
	int GetEnumDelegate ( );
	void SetEnumDelegate ( int val );
	struct FVector2D GetFloatConstraintsDelegate ( );
	float GetFloatDelegate ( );
	void SetFloatDelegate ( float val );
	bool GetBoolDelegate ( );
	void SetBoolDelegate ( unsigned long val );
};



// Class MMH7Game.H7MessageSystem ( Property size: 9 iter: 44) 
// Class name index: 44487 
// 0x005C (0x00BC - 0x0060)
class UH7MessageSystem : public UObject
{
public:
	int                                                mMessageCounter;                                  		// 0x0060 (0x0004) [0x0000000000000000]              
	TArray< class UH7Message* >                        mMessages;                                        		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Message* >                        mMessageQueue;                                    		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Log*                                      mLog;                                             		// 0x0084 (0x0008) [0x0000000000000000]              
	class UH7Log*                                      mQALog;                                           		// 0x008C (0x0008) [0x0000000000000000]              
	class UH7Log*                                      mChat;                                            		// 0x0094 (0x0008) [0x0000000000000000]              
	class UH7SideBar*                                  mSideBar;                                         		// 0x009C (0x0008) [0x0000000000000000]              
	class UH7SideBar*                                  mNoteBar;                                         		// 0x00A4 (0x0008) [0x0000000000000000]              
	TArray< struct FH7TooltipReplacementEntry >        mReplBuffer;                                      		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50897 ];

		return pClassPointer;
	};

	unsigned char GetCurrentContext ( );
	class UH7MessageMapping* GetMessageTemplates ( );
	void CreateFloat ( unsigned char Type, struct FVector StartPosition, class AH7Player* Initiator, struct FString Text, struct FColor TextColor, class UTexture2D* Icon );
	void CreatePopup ( struct FString MessageText, struct FString yesCaption, struct FScriptDelegate yesDelegate, struct FString noCaption, struct FScriptDelegate noDelegate );
	void DeleteAllMessagesFromNoteBar ( );
	void DeleteAllMessagesFromSideBar ( );
	void DeleteMessagesFrom ( class UObject* Initiator, unsigned char Destination );
	void DeleteMessagesByAction ( unsigned char Action );
	void DeleteMessage ( class UH7Message* Message );
	void BlinkMessages ( TArray< class UH7Message* > Messages );
	void AssignMessage ( class UH7Message* Message );
	bool IsMessageObsolete ( class UH7Message* Message );
	bool CanBeAssigned ( class UH7Message* Message );
	void TryToAssignMessages ( );
	class UH7Message* GetMergedMessage ( class UH7Message* message1, class UH7Message* message2 );
	bool IsEqual ( class UH7Message* message1, class UH7Message* message2 );
	bool MessageWasAddedByMerging ( class UH7Message* Message, int endIndex );
	void CheckForDublicateMessages ( );
	bool IsNotYetLocalPlayer ( unsigned char Player );
	bool CanBecomeLocalPlayer ( unsigned char Player );
	bool MessageWasRejected ( class UH7Message* Message );
	TArray< class UH7Message* > GetMessagesWithActiveAction ( unsigned char Action, class UObject* requiredOb );
	class UH7Message* GetMessageByReference ( class UObject* ob, class UObject* Template );
	class UH7Message* GetMessage ( int Id );
	void SendMessage ( class UH7Message* Message );
	void CreateAndSendMessage ( struct FString messageTextorLocaKey, unsigned char Destination, struct FH7MessageSettings advancedSettings, unsigned char Recipient );
	void AddReplForNextMessage ( struct FString placeholder, struct FString Value );
	void Init ( );
	class UH7MessageSystem* GetInstance ( );
	class UH7SideBar* GetNoteBar ( );
	class UH7SideBar* GetSideBar ( );
	class UH7Log* GetQALog ( );
	class UH7Log* GetChat ( );
	class UH7Log* GetLog ( );
};



// Class MMH7Game.H7PauseMenuCntl ( Property size: 14 iter: 71) 
// Class name index: 44520 
// 0x0078 (0x02C0 - 0x0248)
class UH7PauseMenuCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxPauseMenu*                             mPauseMenu;                                       		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxMapResultPopUp*                        mMapResultPopUp;                                  		// 0x0250 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mResume;                                          		// 0x0258 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mLoad;                                            		// 0x0260 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mSave;                                            		// 0x0268 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mQuit;                                            		// 0x0270 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mUplay;                                           		// 0x0278 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mRestart;                                         		// 0x0280 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mOptions;                                         		// 0x0288 (0x0008) [0x0000000000000000]              
	TArray< struct FKeyBind >                          mTempKeyBinds;                                    		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKeyBind >                          mRestoreKeyBinds;                                 		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7GFxUIContainer*                           mCurrentPopup;                                    		// 0x02B0 (0x0008) [0x0000000000000000]              
	struct FH7DifficultyParameters                     mSelectedDifficulty;                              		// 0x02B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      mCustomDifficultyPopUpVisible : 1;                		// 0x02BC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50918 ];

		return pClassPointer;
	};

	void RestartMapKeyPressed ( );
	void SaveGameKeyPressed ( );
	void QuitGameKeyPressed ( );
	void OptionsKeyPressed ( );
	void LoadGameKeyPressed ( );
	void ResumeKeyPressed ( );
	void UplayButtonClick ( struct FEventData Data );
	void RestartButtonClick ( struct FEventData Data );
	void QuitButtonClick ( struct FEventData Data );
	void OptionButtonClick ( struct FEventData Data );
	void SaveButtonClick ( struct FEventData Data );
	void LoadButtonClick ( struct FEventData Data );
	void ResumeButtonClick ( struct FEventData Data );
	bool CanQuit ( );
	bool CanRestart ( );
	bool CanOption ( );
	bool CanSave ( );
	bool CanLoad ( );
	bool CanResume ( );
	void ResumeGame ( );
	void QuitToMainMenu ( );
	void QuitToDesktop ( );
	void RestartConfirm ( );
	void RestartMap ( );
	void QuitGame ( );
	void OpenOptionMenu ( );
	void OpenLoadMenu ( );
	void OpenSaveMenu ( );
	void Specator ( );
	void LoadSavegame ( );
	void NextMap ( );
	void GotoCouncilHub ( );
	void GoToMainMenu ( unsigned long confirm );
	void GotoMainMenuConfirm ( );
	void PlayAgain ( );
	void ApplySettings ( );
	void SetCustomDifficulty ( struct FString enumName, int Value );
	void CloseCustomDifficultyPopUp ( );
	void SetCustomDifficultyVisible ( unsigned long Visible );
	TArray< struct FH7DropDownEntry > GetEnumListByObject ( int enumMax, class UObject* enumObject );
	TArray< struct FH7DropDownEntry > GetEnumList ( struct FString enumName, int PlayerIndex );
	void ReOpenLastPopup ( );
	void OpenPopupFromQueue ( struct FH7PopupParameters Params );
	void UpdateResultPopUpLose ( unsigned long isEndOfGame );
	void UpdateResultPopUpWin ( );
	bool CanBeStopped ( );
	void ClosePopup ( );
	bool IsHost ( );
	bool OpenPopup ( );
	void InitWindowKeyBinds ( );
	bool Initialize ( );
	bool CustomDifficultyPopUpOpen ( );
	bool isOpen ( );
	class UH7GFxMapResultPopUp* GetMapResultPopUp ( );
	class UH7GFxPauseMenu* GetPauseMenu ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7PauseMenuCntl* GetInstance ( );
};



// Class MMH7Game.H7HeropediaCntl ( Property size: 6 iter: 21) 
// Class name index: 44352 
// 0x0050 (0x0298 - 0x0248)
class UH7HeropediaCntl : public UH7FlashMoviePopupCntl
{
public:
	class UH7GFxHeropedia*                             mHeropedia;                                       		// 0x0248 (0x0008) [0x0000000000000000]              
	TArray< class AH7EditorHero* >                     Heroes;                                           		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Creature* >                       mActualCreatureArray;                             		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7GeneralLoreEntry* >               mGeneralLore;                                     		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7EditorWarUnit* >                  mWarUnits;                                        		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7FlashMoviePopupCntl*                      mPreviousContext;                                 		// 0x0290 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50923 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	bool IsHeroDataAvailable ( struct FString archetypeID );
	void GetCreatureData ( struct FString idString );
	void GetHeroData ( struct FString archetypeID );
	bool OpenPopup ( );
	void OpenWithCreature ( struct FString stringID );
	void OpenWithHero ( struct FString archetypeID );
	void OpenHeropedia ( );
	void UpdateTest ( );
	void AddMapSpecificCreatures ( );
	void AddMapSpecificHeroes ( );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7HeropediaCntl* GetInstance ( );
};



// Class MMH7Game.H7SkirmishSetupWindowCntl ( Property size: 17 iter: 103) 
// Class name index: 44668 
// 0x0054 (0x0274 - 0x0220)
class UH7SkirmishSetupWindowCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxSkirmishSetupWindow*                   mSkirmishSetup;                                   		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxHeroSelection*                         mHeroSelection;                                   		// 0x0228 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnBack;                                         		// 0x0230 (0x0008) [0x0000000000000000]              
	class UH7GFxLog*                                   mChatWindow;                                      		// 0x0238 (0x0008) [0x0000000000000000]              
	class UH7Log*                                      mChatLog;                                         		// 0x0240 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mPopUpCustomDifficulty;                           		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7Texture2DStreamLoad*                      mMapThumbnail;                                    		// 0x0250 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsMultiplayer : 1;                               		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsLoadedGame : 1;                                		// 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mIsMaster : 1;                                    		// 0x0258 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mIsHotSeat : 1;                                   		// 0x0258 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mHeroSelectionVisible : 1;                        		// 0x0258 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mCustomDifficultyVisible : 1;                     		// 0x0258 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mNatUpdaterActive : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00000040] 
	int                                                mPendingKickPlayerIndex;                          		// 0x025C (0x0004) [0x0000000000000000]              
	unsigned char                                      mPendingKickAI;                                   		// 0x0260 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnKickDoneDelegate__Delegate;                   		// 0x0264 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0268 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50927 ];

		return pClassPointer;
	};

	void ClosePopupForReal ( );
	void ClosePopup ( );
	void CloseCustomDifficulty ( );
	void CloseHeroSelection ( );
	void Closed ( );
	void btnBackClick ( struct FEventData Data );
	struct FString GetGameType ( unsigned long Online );
	void TrackGameStart ( unsigned long Online );
	void SetNewList ( struct FString dropDownName, TArray< struct FH7DropDownEntry > List, int PlayerIndex, unsigned long blockSendingToUnreal );
	void WriteLobbyDataToTransitionData ( );
	void StartGame ( );
	void SetCombatTimer ( int Index, int Value );
	void SetAdvTimer ( int Index, int Value );
	void SetCustomDifficulty ( struct FString enumName, int Value );
	void SetDifficulty ( int Index, int Value );
	void SetTeamTrade ( int Index, int Value );
	void SetSpectatorMode ( int Index, int Data );
	void SetSkillType ( int Index, int Value );
	void SetQuickCombat ( int Index, int Value );
	void SetTurnType ( int Index, int Value );
	void SetSpeedAI ( float val );
	void SetSpeedCombat ( float val );
	void SetSpeedAdv ( float val );
	void DisplayGameSettings ( struct FH7LobbyDataGameSettings* GameSettings );
	void RequestGameSettings ( );
	void SetTeam ( int Index, int teamEnum );
	void SetStartPositions ( int Index, int Random );
	void SetStartBonus ( int Index, int fromMap );
	void SetVictoryCondition ( int Index, int victoryConditionEnum );
	void updateThumbnail ( );
	void DisplayMapSettings ( struct FH7LobbyDataMapSettings* mapSettings );
	void UpdateAfterPlayerLeaving ( int PlayerIndex );
	void KickDone ( );
	void KickAIDone ( );
	void KickCloseDone ( );
	void KickConfirm ( );
	void KickPlayerPopup ( int PlayerIndex, struct FScriptDelegate Callback );
	void KickPlayer ( int PlayerIndex );
	void SetPlayerReady ( int PlayerIndex, unsigned long IsReady );
	void SetPlayerStartBonus ( int PlayerIndex, int bonusIndex );
	void SetPlayerHero ( int PlayerIndex, struct FString heroArchetypeID );
	void SetPlayerFaction ( int PlayerIndex, struct FString factionArchetypeID );
	void SetPlayerTeam ( int PlayerIndex, int teamEnum );
	void FixHeroSetting ( int PlayerIndex );
	void FixFactionSetting ( int PlayerIndex );
	bool GetFirstLegalOption ( TArray< struct FH7DropDownEntry > List, struct FH7DropDownEntry* firstLegalOption );
	void FixPositions ( );
	void FixSlotSetting ( int PlayerIndex );
	void SetPlayerPosition ( int PlayerIndex, int Position );
	void SetPlayerColor ( int PlayerIndex, int selectedColorEnum );
	void SetPlayerSlot ( int PlayerIndex, int slotType );
	void DisplayPlayerSettings ( int PlayerIndex, struct FPlayerLobbySelectedSettings PlayerData );
	TArray< struct FH7DropDownEntry > GetSlotEnumList ( int PlayerIndex );
	void GetHeroInfo ( struct FString heroArchetypeID );
	TArray< struct FString > GetHeroesEnumList ( int PlayerIndex, unsigned long showHeroSelectionPopUp, class UH7Faction* Faction );
	TArray< struct FH7DropDownEntry > GetBonusEnumList ( int PlayerIndex );
	TArray< struct FH7DropDownEntry > GetFactionEnumList ( int PlayerIndex );
	TArray< struct FH7DropDownEntry > GetEnumListByObject ( int enumMax, class UObject* enumObject );
	TArray< struct FH7DropDownEntry > GetVictoryConditionEnumList ( );
	TArray< struct FH7DropDownEntry > GetColorEnumList ( );
	void AddEntry ( struct FString Caption, int Data, unsigned long Enabled, struct FString strData, struct FString Icon, TArray< struct FH7DropDownEntry >* List );
	bool NoOneElseHasPosition ( int PlayerIndex, unsigned char pos );
	bool CanUserBeInSlot ( struct FPlayerLobbySelectedSettings User, struct FH7MapHeaderPlayerInfoProperty Slot );
	TArray< struct FH7DropDownEntry > GetPositionEnumList ( int PlayerIndex );
	TArray< struct FH7DropDownEntry > GetEnumList ( struct FString enumName, int PlayerIndex );
	bool CanStartSkirmish ( struct FString* blockReason );
	void CheckStartConditions ( );
	void AddChatLine ( struct FString Line, struct FString PlayerName );
	void SendChatLine ( struct FString Line );
	void SetCustomDifficultyVisible ( unsigned long Visible );
	void SetHeroSelectionVisible ( unsigned long Visible );
	void DisplayAllPlayerSettings ( );
	void InitAllPlayerHeroes ( );
	void CheckOwnFaction ( );
	void UpdateNatDisplay ( );
	void RegisterNatUpdater ( unsigned long Register );
	void OpenPopup ( unsigned long isMaster, unsigned long isMultiplayer, unsigned long IsLoadedGame, unsigned long IsHotSeat, struct FH7LobbyData* lobbyData );
	bool Initialize ( );
	bool IsSkirmish ( );
	bool isScenario ( );
	bool IsCustomDifficultyVisible ( );
	bool IsHeroSelectionVisible ( );
	class UH7GFxSkirmishSetupWindow* GetSkirmishWindow ( );
	class UH7SkirmishSetupWindowCntl* GetInstance ( );
	void OnKickDoneDelegate ( );
};



// Class MMH7Game.H7TownAssetLoader ( Property size: 1 iter: 5) 
// Class name index: 44705 
// 0x0010 (0x0070 - 0x0060)
class UH7TownAssetLoader : public UObject
{
public:
	TArray< class UH7TownBuilding* >                   mLoadingQueue;                                    		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50946 ];

		return pClassPointer;
	};

	void ProcessQueueNextFrame ( );
	void ProcessQueue ( );
	void AddToLoadingQueue ( class UH7TownBuilding* Building );
	class UH7TownAssetLoader* GetInstance ( );
};



// Class MMH7Game.H7PatchingController ( Property size: 4 iter: 7) 
// Class name index: 44515 
// 0x0004 (0x0064 - 0x0060)
class UH7PatchingController : public UObject
{
public:
	unsigned long                                      mAppliedGameplayWaitsForAnimFix : 1;              		// 0x0060 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      mAppliedRotateFix : 1;                            		// 0x0060 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      mAppliedPopupKeybinding : 1;                      		// 0x0060 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      mAppliedInitialSubtitle : 1;                      		// 0x0060 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50947 ];

		return pClassPointer;
	};

	void PerformPopupKeyBindingPatching ( class UH7PopupKeybindings* keybinds );
	void PerformGUIPatching ( class UH7GUIGeneralProperties* guiprop );
	class UH7PatchingController* GetInstance ( );
};



// Class MMH7Game.H7CameraActionController ( Property size: 25 iter: 58) 
// Class name index: 44102 
// 0x00B8 (0x02F8 - 0x0240)
class AH7CameraActionController : public AActor
{
public:
	class AH7ZoomInCameraAction*                       mZoomInTemplate;                                  		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7ZoomOutCameraAction*                      mZoomOutTemplate;                                 		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AMEventCameraAction*                      mAMEventTemplate;                                 		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7PresentArmyCameraAction*                  mPresentArmyTemplate;                             		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AttackCameraAction*                       mMeleeAttackTemplate;                             		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AttackCameraAction*                       mRangedAttackTemplate;                            		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7AbilityCastCameraAction*                  mAbilityCastTemplate;                             		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7ArmyVictoryCameraAction*                  mArmyVictoryTemplate;                             		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7IntroduceHeroCameraAction*                mIntroduceHeroTemplate;                           		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialEffect*                             mFadeToBlackPP;                                   		// 0x0288 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mFadeToBlackPPMat;                                		// 0x0290 (0x0008) [0x0000000000000000]              
	float                                              mFadeToBlackAlpha;                                		// 0x0298 (0x0004) [0x0000000000000000]              
	class UMaterialEffect*                             mCombatStartEffect;                               		// 0x029C (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   mCombatStartEffectMat;                            		// 0x02A4 (0x0008) [0x0000000000000000]              
	float                                              mFadingDuration;                                  		// 0x02AC (0x0004) [0x0000000000000000]              
	unsigned long                                      bFadingToBlack : 1;                               		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFadingToNormal : 1;                              		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000002] 
	class AH7CameraAction*                             mCurrentAction;                                   		// 0x02B4 (0x0008) [0x0000000000000000]              
	class AH7AMEventCameraAction*                      mContinuingAction;                                		// 0x02BC (0x0008) [0x0000000000000000]              
	float                                              mPreviousViewDistance;                            		// 0x02C4 (0x0004) [0x0000000000000000]              
	float                                              mPreviousFOV;                                     		// 0x02C8 (0x0004) [0x0000000000000000]              
	struct FVector                                     mPreviousVRP;                                     		// 0x02CC (0x000C) [0x0000000000000000]              
	class AH7Unit*                                     mLastAttacker;                                    		// 0x02D8 (0x0008) [0x0000000000000000]              
	class AH7Unit*                                     mLastDefender;                                    		// 0x02E0 (0x0008) [0x0000000000000000]              
	TArray< struct FAMEventAction >                    mAMEventQueue;                                    		// 0x02E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51243 ];

		return pClassPointer;
	};

	bool CanPlayCombatCoolCamByChance ( );
	bool IsCoolCamCameraActionDisabled ( );
	void Tick ( float DeltaTime );
	void StartIntroduceHero ( struct FScriptDelegate actionCompletedFunction, class AH7IntroduceHeroCameraAction* introduceHeroTemplate );
	void StartArmyVictory ( struct FScriptDelegate actionCompletedFunction, class AH7ArmyVictoryCameraAction* armyVictoryTemplate );
	void StartPresentArmy ( struct FScriptDelegate actionCompletedFunction, class AH7PresentArmyCameraAction* presentArmyTemplate );
	void StartAbilityCastAction ( class AH7Unit* caster );
	void StartAttackAction ( class AH7Unit* attacker, class AH7Unit* defender, unsigned long isRetaliation, unsigned long IsRanged );
	void StartSpawnedAMEventAction ( class AH7AMEventCameraAction* Action, class AActor* startTarget, class AActor* endTarget, unsigned long continues, struct FScriptDelegate actionCompletedFunction );
	void StartAMEventAction ( class AActor* startTarget, class AActor* endTarget, struct FScriptDelegate actionCompletedFunction, struct FScriptDelegate midActionFunction, class AH7AMEventCameraAction* amEventTemplate );
	void StartZoomOutAction ( unsigned long toGridCenter, float TargetViewDistance, float TargetFoV, struct FScriptDelegate actionCompletedFunction );
	void StartZoomOutToPreviousValues ( unsigned long armyOfLocalPlayer );
	void StartZoomInAction ( struct FVector targetPos, struct FScriptDelegate actionCompletedFunction );
	void StartAction ( class AH7CameraAction* Action );
	void SetCombatStartEffectStrength ( float Strength );
	void SetFadeColor ( struct FLinearColor Col );
	void SetFadeAlpha ( float val );
	float GetFadeAlpha ( );
	void FadeFromWhite ( float Duration );
	void FadeFromBlack ( float Duration );
	void FadeFromColor ( float Duration, struct FLinearColor SourceColor );
	void FadeToWhite ( float Duration );
	void FadeToBlack ( float Duration );
	void FadeToColor ( float Duration, struct FLinearColor targetColor );
	void ClearCurrentAction ( );
	void ClearLastAttackerDefender ( );
	void PostBeginPlay ( );
	void CancelCurrentCameraAction ( );
	bool CanCancelCurrentCameraAction ( );
	bool HasAMEventActionsInQueue ( );
	class AH7CameraAction* GetCurrentAction ( );
	class AH7CameraActionController* GetInstance ( );
};



// Class MMH7Game.H7OverlaySystemCntl ( Property size: 4 iter: 13) 
// Class name index: 44513 
// 0x0028 (0x0248 - 0x0220)
class UH7OverlaySystemCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxFloatingSystem*                        mFloatingSystem;                                  		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxStatusBarSystem*                       mStatusBarSystem;                                 		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxStackPlateSystem*                      mStackPlateSystem;                                		// 0x0230 (0x0008) [0x0000000000000000]              
	TArray< struct FBar >                              mActiveBars;                                      		// 0x0238 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51254 ];

		return pClassPointer;
	};

	void removeBar ( class AH7Unit* Unit );
	struct FVector2D UnitProject ( class UCanvas* myCanvas, class AH7Unit* Unit );
	void Update ( class UCanvas* Canvas );
	void CreateProgressBar ( class AH7Unit* Unit, int Percent );
	bool Initialize ( );
	class UH7GFxStackPlateSystem* GetStackPlateSystem ( );
	class UH7GFxStatusBarSystem* GetStatusBarSystem ( );
	class UH7GFxFloatingSystem* GetFloatingSystem ( );
	class UH7OverlaySystemCntl* GetInstance ( );
};



// Class MMH7Game.H7GFxStatusBarSystem ( Property size: 2 iter: 13) 
// Class name index: 44313 
// 0x000C (0x00AC - 0x00A0)
class UH7GFxStatusBarSystem : public UGFxObject
{
public:
	unsigned long                                      mIsCurrentlyVisible : 1;                          		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxObject*                                  mMultiUpdateList;                                 		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51259 ];

		return pClassPointer;
	};

	void Clear ( );
	void MultiUpdate ( );
	void AddUpdate ( int Id, int X, int Y, int Percent, unsigned long Visible );
	void StartMultiUpdate ( );
	void SetSystemVisible ( unsigned long val );
	void removeBar ( int Id );
	void UpdateBar ( int Id, int X, int Y, int Percent, unsigned long Visible );
	int CreateManaBar ( int X, int Y, int Percent, int Width );
	int CreateHealthBar ( int X, int Y, int Percent, int Width );
	int CreateProgressBar ( int X, int Y, int Percent, int Width );
	bool IsCurrentlyVisibleHealtBars ( );
};



// Class MMH7Game.H7SpectatorHUDCntl ( Property size: 3 iter: 11) 
// Class name index: 44672 
// 0x0014 (0x025C - 0x0248)
class UH7SpectatorHUDCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxSpecatorHUD*                           mSpectatorHUD;                                    		// 0x0248 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnPauseMenu;                                    		// 0x0250 (0x0008) [0x0000000000000000]              
	int                                                mPreviousSpecatorProgress;                        		// 0x0258 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51270 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	void btnPauseMenuClicked ( struct FEventData Data );
	void UpdateProgress ( int Progress );
	void Update ( );
	bool Initialize ( );
	class UH7SpectatorHUDCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
};



// Class MMH7Game.H7OptionsMenuCntl ( Property size: 7 iter: 32) 
// Class name index: 44511 
// 0x002D (0x0275 - 0x0248)
class UH7OptionsMenuCntl : public UH7FlashMoviePopupCntl
{
public:
	class UH7GFxOptionsMenu*                           mOptionsMenu;                                     		// 0x0248 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mOkButton;                                        		// 0x0250 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mCLoseButton;                                     		// 0x0258 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           mConflictList;                                    		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mRefreshKeybindingsOnSave : 1;                    		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mCurrentResolutionListIncludeCurrent : 1;         		// 0x0270 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      mCurrentResolutionListWindowMode;                 		// 0x0274 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51275 ];

		return pClassPointer;
	};

	struct FString VirtualKeyToChar ( int keycode );
	bool GetCurrentResolutionListIncludeCurrent ( );
	unsigned char GetCurrentResolutionListWindowMode ( );
	void RefreshResolutionList ( int windowMode );
	void WarnConflict ( );
	void AddConflict ( struct FString optionName );
	void PrepareConflict ( );
	void SaveAllConfigs ( );
	void ResetConfirm ( );
	void ChangeLanguage ( struct FString ext );
	void Reset ( );
	void RequestUpdate ( );
	bool CausesConflict ( struct FString Id, unsigned long Shift, unsigned long Alt, unsigned long Control, struct FString Key );
	bool SetOptionKeyBind ( struct FString Id, unsigned long pshift, unsigned long palt, unsigned long pcontrol, struct FString pkey, unsigned long sshift, unsigned long salt, unsigned long scontrol, struct FString skey );
	void SetOptionEnum ( struct FString Key, int val );
	void SetOptionBool ( struct FString Key, unsigned long val );
	void SetOptionFloat ( struct FString Key, float val );
	void ClosePopup ( );
	void Closed ( );
	void OKButtonClick ( struct FEventData Data );
	bool OpenPopup ( );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxOptionsMenu* GetOptionsMenu ( );
	class UH7OptionsMenuCntl* GetInstance ( );
};



// Class MMH7Game.H7GUISoundPlayer ( Property size: 92 iter: 94) 
// Class name index: 44342 
// 0x02E0 (0x0340 - 0x0060)
class UH7GUISoundPlayer : public UObject
{
public:
	class UAkEvent*                                    mClickCommandButton;                              		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickInactiveCommandButton;                      		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickCloseCommandButton;                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mInventoryItemGrabbed;                            		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mInventoryItemDropped;                            		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mHoverButtonSound;                                		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPopUpOpenSound;                                  		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mPopUpCloseSound;                                 		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickCheckBox;                                   		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mRadioButtonSound;                                		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mToggleSound;                                     		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mIconSelected;                                    		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mInvalid;                                         		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mTextButtonSelected;                              		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickFleeSurrenderAbortButton;                   		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mFleeSurrenderWindowShown;                        		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickFleeSurrenderTextButton;                    		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEnterCombat;                                     		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mVictoryWindowShown;                              		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDefeatWindowShown;                               		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mGainXPSound;                                     		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mGainXPEndSound;                                  		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mLostUnitsSound;                                  		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mLostUnitsEndSound;                               		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mFightAgainSound;                                 		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWaitSound;                                       		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDefendSound;                                     		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopCombatJingleSound;                           		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEngageQuickCombat;                               		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEngageCombat;                                    		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAbilitySound;                                    		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWinQuickCombatSound;                             		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mLoseQuickCombatSound;                            		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickSpellBookButton;                            		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickSpellBookCloseButton;                       		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickSelectSpell;                                		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSpellBookTurnPageUpSound;                        		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSpellBookTurnPageDownSound;                      		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSpellBookMagicSchoolSound;                       		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAddSpellIcon;                                    		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mRemoveSpellIcon;                                 		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mBuildBuilding;                                   		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAddBuilding;                                     		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mBuyHeroSound;                                    		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mRecruitArmySound;                                		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEnterSound;                                      		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mLeaveSound;                                      		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSplitStackSound;                                 		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mUpgradeUnitSound;                                		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDestroyBuildingLevelSound;                       		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOpenBuildTree;                                   		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketGoldSound;                                 		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketOreSound;                                  		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketWoodSound;                                 		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketDragonBloodCrystalSound;                   		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketDragonSteelSound;                          		// 0x0218 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketShadowSteelSound;                          		// 0x0220 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketStarSilverSound;                           		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mMarketTradeSound;                                		// 0x0230 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEndTurnSound;                                    		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mNextWeekSound;                                   		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mVictorySound;                                    		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDefeatSound;                                     		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mAlreadyVisited;                                  		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mCannotMoveThere;                                 		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mNotEnoughMovePoints;                             		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mBlockedByArmy;                                   		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mClickHeroPortraitSound;                          		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSelectSpellSound;                                		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetHeroButtonSound;                           		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetSpellbookButtonSound;                      		// 0x0290 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetSkillWheelButtonSound;                     		// 0x0298 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetQuestlogButtonSound;                       		// 0x02A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetMoveButtonSound;                           		// 0x02A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetMinimapMenu;                               		// 0x02B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetMinimapAoc;                                		// 0x02B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetMinimapPlane;                              		// 0x02C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWidgetMinimapToggle;                             		// 0x02C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mQuestComplete;                                   		// 0x02D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mQuestRecieved;                                   		// 0x02D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mDestroyedArmy;                                   		// 0x02E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mWinMapSound;                                     		// 0x02E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mLoseMapSound;                                    		// 0x02F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopMapResultJingle;                             		// 0x02F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mUnEquipItem;                                     		// 0x0300 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mEquipItem;                                       		// 0x0308 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mOpenSkillWheelSound;                             		// 0x0310 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mCloseSkillWheelSound;                            		// 0x0318 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mConfirmSkillWheelSound;                          		// 0x0320 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mSelectSkillWheelSound;                           		// 0x0328 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mHeroScreenOpenSound;                             		// 0x0330 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mHeroScreenCloseSound;                            		// 0x0338 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51297 ];

		return pClassPointer;
	};

	class UH7GUISoundPlayer* GetInstance ( );
	void PlaySoundStr ( struct FString Str );
};



// Class MMH7Game.H7CombatUnitInfoCntl ( Property size: 3 iter: 11) 
// Class name index: 44137 
// 0x0018 (0x0238 - 0x0220)
class UH7CombatUnitInfoCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxUnitInfo*                              mUnitInfoAttacker;                                		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxUnitInfo*                              mUnitInfoDefender;                                		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxObstacleInfo*                          mObstacleInfo;                                    		// 0x0230 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51306 ];

		return pClassPointer;
	};

	void CloseAll ( );
	void UpdateHeroMana ( class AH7EditorHero* Hero, int CurrentMana, int maxMana );
	void ShowObstacleInfo ( class AH7CombatObstacleObject* OBSTACLE );
	void ShowUnitInfo ( class AH7Unit* Unit );
	bool Initialize ( );
	class UH7GFxObstacleInfo* GetObstacleInfo ( );
	class UH7GFxUnitInfo* GetUnitInfoDefender ( );
	class UH7GFxUnitInfo* GetUnitInfoAttacker ( );
};



// Class MMH7Game.H7GFxDamageTooltipSystem ( Property size: 3 iter: 18) 
// Class name index: 44254 
// 0x0008 (0x00B8 - 0x00B0)
class UH7GFxDamageTooltipSystem : public UGFxClikWidget
{
public:
	int                                                mRightMouseDownSince;                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      mFlashShowsBar : 1;                               		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mVisible : 1;                                     		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51335 ];

		return pClassPointer;
	};

	bool IsVisible ( );
	void ShowTooltip ( unsigned long val );
	bool IsAllowedToShow ( );
	void Update ( );
	bool AddDamageAndEffectParameters ( class UH7CombatResult* Result, int I, unsigned long forceDamageShow, class UGFxObject** TempObj );
	class UGFxObject* CreateModListObject ( class UH7CombatResult* Result, int Idx );
	class UGFxObject* CreateTriggeredEffectListObject ( class UH7CombatResult* Result, int Idx );
	bool HasModifiers ( class UH7CombatResult* Result );
	bool ShowExtentedTooltip ( );
	void SwitchToAppropiateState ( );
	int GetExtendDelayTimeMS ( );
	void CorrectPlacement ( );
	void ShowDeadTooltip ( class AH7CreatureStack* Stack );
	bool WillRetaliate ( class UH7CombatResult* Result, int defenderIndex );
	bool ShowAbilityPreview ( class UH7CombatResult* Result );
};



// Class MMH7Game.H7AiAdventureMap ( Property size: 36 iter: 56) 
// Class name index: 43809 
// 0x0124 (0x0364 - 0x0240)
class AH7AiAdventureMap : public AActor
{
public:
	class UH7AiAdventureSensors*                       mSensors;                                         		// 0x0240 (0x0008) [0x0000000000000000]              
	float                                              mDeferTimer;                                      		// 0x0248 (0x0004) [0x0000000000000000]              
	class UH7AiActionAttackTargetArmy*                 mActionAttackTargetArmy;                          		// 0x024C (0x0008) [0x0000000000000000]              
	class UH7AiActionAttackTargetBorderArmy*           mActionAttackTargetBorderArmy;                    		// 0x0254 (0x0008) [0x0000000000000000]              
	class UH7AiActionAttackTargetAoC*                  mActionAttackTargetAoC;                           		// 0x025C (0x0008) [0x0000000000000000]              
	class UH7AiActionAttackTargetCity*                 mActionAttackTargetCity;                          		// 0x0264 (0x0008) [0x0000000000000000]              
	class UH7AiActionAttackTargetEnemy*                mActionAttackTargetEnemy;                         		// 0x026C (0x0008) [0x0000000000000000]              
	class UH7AiActionReinforce*                        mActionReinforce;                                 		// 0x0274 (0x0008) [0x0000000000000000]              
	class UH7AiActionDevelopTownBuilding*              mActionDevelopTownBuilding;                       		// 0x027C (0x0008) [0x0000000000000000]              
	class UH7AiActionRecruitment*                      mActionRecruitment;                               		// 0x0284 (0x0008) [0x0000000000000000]              
	class UH7AiActionTrade*                            mActionTrade;                                     		// 0x028C (0x0008) [0x0000000000000000]              
	class UH7AiActionGarrisonTown*                     mActionGarrisonTown;                              		// 0x0294 (0x0008) [0x0000000000000000]              
	class UH7AiActionHireHero*                         mActionHireHero;                                  		// 0x029C (0x0008) [0x0000000000000000]              
	class UH7AiActionExplore*                          mActionExplore;                                   		// 0x02A4 (0x0008) [0x0000000000000000]              
	class UH7AiActionRepairTarget*                     mActionRepair;                                    		// 0x02AC (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite*                          mActionUseSite;                                   		// 0x02B4 (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Boost*                    mActionUseSiteBoost;                              		// 0x02BC (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Commission*               mActionUseSiteCommission;                         		// 0x02C4 (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Exercise*                 mActionUseSiteExercise;                           		// 0x02CC (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Observe*                  mActionUseSiteObserve;                            		// 0x02D4 (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Shop*                     mActionUseSiteShop;                               		// 0x02DC (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Study*                    mActionUseSiteStudy;                              		// 0x02E4 (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Keymaster*                mActionUseSiteKeymaster;                          		// 0x02EC (0x0008) [0x0000000000000000]              
	class UH7AiActionUseSite_Obelisk*                  mActionUseSiteObelisk;                            		// 0x02F4 (0x0008) [0x0000000000000000]              
	class UH7AiActionPlunder*                          mActionPlunder;                                   		// 0x02FC (0x0008) [0x0000000000000000]              
	class UH7AiActionPickup*                           mActionPickup;                                    		// 0x0304 (0x0008) [0x0000000000000000]              
	class UH7AiActionGather*                           mActionGather;                                    		// 0x030C (0x0008) [0x0000000000000000]              
	class UH7AiActionFlee*                             mActionFlee;                                      		// 0x0314 (0x0008) [0x0000000000000000]              
	class UH7AiActionChillAroundTown*                  mActionChill;                                     		// 0x031C (0x0008) [0x0000000000000000]              
	class UH7AiActionCongregate*                       mActionCongregate;                                		// 0x0324 (0x0008) [0x0000000000000000]              
	class UH7AiActionUpgradeCreatures*                 mActionUpgradeCreature;                           		// 0x032C (0x0008) [0x0000000000000000]              
	class UH7AiActionReplenish*                        mActionReplenish;                                 		// 0x0334 (0x0008) [0x0000000000000000]              
	int                                                mThinkStep;                                       		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                mRecruitStep;                                     		// 0x0340 (0x0004) [0x0000000000000000]              
	TArray< struct FAiActionScore >                    mScores;                                          		// 0x0344 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ScoreSort__Delegate;                            		// 0x0354 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0358 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51706 ];

		return pClassPointer;
	};

	void UpdateTensionParameters ( class AH7Player* Player );
	void MergeArmyCreatureStacks ( class AH7Player* Player );
	void AutoequipHeroes ( class AH7Player* Player );
	void AutoequipHero ( class AH7AdventureHero* Hero );
	void SearchReplaceEquipment ( class AH7AdventureHero* Hero, unsigned char itype );
	void ReassignHeroRoles ( class AH7Player* Player );
	bool CheckDiscoveryThreshold ( class AH7Player* Player, float Threshold );
	void LevelUpHeroes ( class AH7Player* Player );
	bool LevelUpHero ( class AH7AdventureHero* Hero );
	void AutoassignGovernorFromGarrison ( class AH7Town* Town );
	void ThinkTown ( class AH7AreaOfControlSiteLord* Site );
	void Think ( class AH7Unit* Unit, float DeltaTime );
	void ResetThink ( );
	void DeferExecution ( float Seconds );
	bool IsAiEnabled ( );
	int ScoreSort ( struct FAiActionScore A, struct FAiActionScore B );
	void PostBeginPlay ( );
	class UH7AiAdventureSensors* GetSensors ( );
	void SetRecruitStep ( int V );
	int GetRecruitStep ( );
};



// Class MMH7Game.H7AdventureHudCntl ( Property size: 25 iter: 94) 
// Class name index: 43759 
// 0x00B8 (0x02D8 - 0x0220)
class UH7AdventureHudCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxHeroHUD*                               mHeroHUD;                                         		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxCommandPanel*                          mCommandPanel;                                    		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxTopBar*                                mTopBar;                                          		// 0x0230 (0x0008) [0x0000000000000000]              
	class UH7GFxMinimap*                               mMinimap;                                         		// 0x0238 (0x0008) [0x0000000000000000]              
	class UH7GFxActorTooltip*                          mActorTooltip;                                    		// 0x0240 (0x0008) [0x0000000000000000]              
	class UH7GFxTownList*                              mTownList;                                        		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxPlayerBuffs*                           mPlayerBuffs;                                     		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7GFxSimTurnInfo*                           mMPTurnInfo;                                      		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7GFxSideBar*                               mNoteBar;                                         		// 0x0260 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              SpellbookButton;                                  		// 0x0268 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              QuestlogButton;                                   		// 0x0270 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              MoveButton;                                       		// 0x0278 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              HeroButton;                                       		// 0x0280 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              SkillButton;                                      		// 0x0288 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              EndTurnButton;                                    		// 0x0290 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              SettingsButton;                                   		// 0x0298 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              TableButton;                                      		// 0x02A0 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  mSpeedControls;                                   		// 0x02A8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              CheatWindowButton;                                		// 0x02B0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnPlay;                                          		// 0x02B8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnFastForward;                                   		// 0x02C0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnFastForward2;                                  		// 0x02C8 (0x0008) [0x0000000000000000]              
	int                                                mHoveredHeroID;                                   		// 0x02D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      mHeroIconClicked : 1;                             		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsWaitingForReturningPlayersPopupOpen : 1;       		// 0x02D4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51724 ];

		return pClassPointer;
	};

	void ClickMessage ( int Id );
	void SetNoteBarState ( unsigned long val );
	void SetWaitingForReturningPlayers ( unsigned long Waiting );
	bool IsWaitingForReturningPlayersPopupOpen ( );
	void SetWaitingForPlayers ( unsigned long Waiting );
	void BtnFastForward2Click ( struct FEventData Data );
	void BtnFastForwardClick ( struct FEventData Data );
	void BtnPlayClick ( struct FEventData Data );
	void ToggleEndTurn ( );
	void ToggleHeroMovement ( );
	void ToggleSkillWheel ( );
	void ToggleHeroWindow ( );
	void ToggleSpellBook ( );
	void ToggleQuestLog ( );
	void ToggleTable ( );
	struct FString GetTooltipForBtnEndTurn ( );
	void EndTurnButtonClick ( struct FEventData Data );
	void CheatWindowButtonClick ( struct FEventData Data );
	void TableButtonClick ( struct FEventData Data );
	void SettingsButtonClick ( struct FEventData Data );
	void MoveButtonClick ( struct FEventData Data );
	void SkillButtonClick ( struct FEventData Data );
	void HeroButtonClick ( struct FEventData Data );
	void QuestLogButtonClick ( struct FEventData Data );
	void SpellbookButtonClick ( struct FEventData Data );
	void HeroDoubleClick ( int Id );
	void SoundHeroClicked ( );
	void RightMouseDownOnHeroHudSlot ( int Id, int X1, int Y1, int X2, int Y2 );
	void HeroClick ( int Id, unsigned long openPopupIfSelected );
	void HeroOut ( int Id );
	void ShowHeroHud ( unsigned long show );
	int GetHoveredHero ( );
	void HeroOutPortrait ( );
	void HeroOverPortrait ( int Id, int X, int Y, int X2, int Y2 );
	void HeroOver ( int Id, int X, int Y, int X2, int Y2 );
	void CheckForAdventureController ( );
	bool HasTreasure ( );
	void ToggleRealmWindow ( );
	void TogglePlane ( );
	void MinimapInteractionSound ( );
	void ResetIconVisibility ( );
	void MinimapCameraShift ( int gridXCenterOffset, int gridYCenterOffset );
	void MinimapCameraShiftGrid ( int gridX, int gridY );
	void MinimapIconOut ( );
	void MinimapQuestIconOver ( struct FString questID, int locationID );
	void MinimapIconOver ( int Id );
	void SetMinimapOption ( struct FString categoryID, unsigned long Value );
	bool GetMinimapOption ( struct FString categoryID, unsigned long defaultVisible );
	void ShowCaravanPath ( int Id );
	void EnableHeroHUDMiniMapTownList ( );
	void DisableHeroHUDMiniMapTownList ( );
	void OnTownSlotDoubleClick ( int Id );
	void SelectTown ( int Id, unsigned long idIsIndex );
	void SelectTownAndOpenTownHall ( int Id );
	class AH7Town* GetTownByID ( int Id );
	class AH7Town* GetTownByIndex ( int Index );
	void SetVisible ( unsigned long Visible );
	void CheckCampaign ( );
	bool Initialize ( );
	class UH7AdventureHudCntl* GetInstance ( );
	class UH7GFxSideBar* GetNoteBar ( );
	class UH7GFxSimTurnInfo* GetMPTurnInfo ( );
	class UH7GFxPlayerBuffs* GetPlayerBuffs ( );
	class UH7GFxTownList* GetTownList ( );
	class UH7GFxActorTooltip* GetActorTooltip ( );
	class UH7GFxMinimap* GetMinimap ( );
	class UH7GFxTopBar* GetTopBar ( );
	class UH7GFxCommandPanel* GetCommandPanel ( );
	class UH7GFxHeroHUD* GetHeroHUD ( );
};



// Class MMH7Game.H7InstantCommandBuildAll ( Property size: 1 iter: 6) 
// Class name index: 44369 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandBuildAll : public UH7InstantCommandBase
{
public:
	class AH7Player*                                   mPlayer;                                          		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51785 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Player* Player );
};



// Class MMH7Game.H7InstantCommandIncreaseResource ( Property size: 4 iter: 9) 
// Class name index: 44389 
// 0x0024 (0x0084 - 0x0060)
class UH7InstantCommandIncreaseResource : public UH7InstantCommandBase
{
public:
	class AH7Player*                                   mTargetPlayer;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FString                                     mResourceName;                                    		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mResourceQuantity;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	class AH7ResourcePile*                             mPile;                                            		// 0x007C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51790 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Player* targetPlayer, struct FString resourceName, int resourceQuantity, class AH7ResourcePile* pile );
};



// Class MMH7Game.H7InstantCommandHeroAddXp ( Property size: 3 iter: 8) 
// Class name index: 44387 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandHeroAddXp : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mExpToAdd;                                        		// 0x0068 (0x0004) [0x0000000000000000]              
	class AH7ResourcePile*                             mPile;                                            		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51795 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, int expToAdd, class AH7ResourcePile* pile );
};



// Class MMH7Game.H7InstantCommandDoubleArmy ( Property size: 1 iter: 6) 
// Class name index: 44383 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandDoubleArmy : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51816 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7GFxOptionsMenu ( Property size: 0 iter: 9) 
// Class name index: 44297 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxOptionsMenu : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51843 ];

		return pClassPointer;
	};

	void DiscardAllChanges ( );
	int IsInAssignMode ( );
	void SetCheckBox ( struct FString optionKey, unsigned long val );
	void SetDropDownList ( struct FString optionKey );
	void RefreshResolutionList ( int windowMode );
	struct FString GetDisplayOfKey ( struct FName unrealKeyName );
	class UGFxObject* CreateGFXKeyCombo ( struct FKeyBind KeyBind );
	void Update ( );
	class UGFxObject* CreateOptionObject ( struct FOptionStruct Option );
};



// Class MMH7Game.H7FlashMovieTownPopupCntl ( Property size: 1 iter: 6) 
// Class name index: 44221 
// 0x0008 (0x0250 - 0x0248)
class UH7FlashMovieTownPopupCntl : public UH7FlashMoviePopupCntl
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0248 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51849 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	bool OpenPopup ( );
	void LoadComplete ( );
	void LinkToTownPopupContainer ( );
	void Update ( class AH7Town* Town );
};



// Class MMH7Game.H7ThievesGuildPopupCntl ( Property size: 7 iter: 25) 
// Class name index: 44698 
// 0x0034 (0x0284 - 0x0250)
class UH7ThievesGuildPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxThievesGuildPopup*                     mThievesGuildPopup;                               		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mArmyRow;                                         		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7GFxWarfareUnitRow*                        mWarfareUnitRow;                                  		// 0x0260 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mHeroInfo;                                        		// 0x0268 (0x0008) [0x0000000000000000]              
	unsigned long                                      mHeroInfoOpen : 1;                                		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 
	class AH7DenOfThieves*                             mDen;                                             		// 0x0274 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            clickedHero;                                      		// 0x027C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51848 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void ClosePopup ( );
	void Closed ( );
	void BtnSabotageClicked ( int PlayerID );
	void BtnPlunderClicked ( int PlayerID );
	void CloseHeroInfo ( );
	void HeroInfoClosed ( );
	void SendSpy ( int PlayerID, struct FString infoType );
	void GetStatModSourceList ( struct FString statStr, int unrealID );
	void ClickedHeroSlot ( int PlayerID );
	void UpdateFromDenOfThieves ( class AH7DenOfThieves* den );
	void Update ( class AH7Town* pTown );
	void LoadComplete ( );
	bool Initialize ( );
	bool IsHeroInfoOpen ( );
	void SetDenOfThieves ( class AH7DenOfThieves* Site );
	class UH7GFxThievesGuildPopup* GetThievesGuildPopup ( );
	class UH7ThievesGuildPopupCntl* GetInstance ( );
};



// Class MMH7Game.H7TownRecruitmentPopupCntl ( Property size: 9 iter: 35) 
// Class name index: 44728 
// 0x0058 (0x02A8 - 0x0250)
class UH7TownRecruitmentPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxTownRecruitmentPopup*                  mRecruitmentPopup;                                		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSite*                        mCurrentLocation;                                 		// 0x0258 (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSite*                        mInitialLocation;                                 		// 0x0260 (0x0008) [0x0000000000000000]              
	class AH7Dwelling*                                 mNeutralDwelling;                                 		// 0x0268 (0x0008) [0x0000000000000000]              
	TArray< class AH7Dwelling* >                       mOutsideDwellings;                                		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Town* >                           Towns;                                            		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AreaOfControlSiteLord* >          lords;                                            		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                lordID;                                           		// 0x02A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      mCaravanRecruitment : 1;                          		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51871 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void ClosePopup ( );
	void Closed ( );
	void SetLordID ( int Id );
	void RecruitAll ( );
	void StartCaravan ( class AH7AreaOfControlSiteLord* lord );
	void RecruitUnitsComplete ( class AH7AreaOfControlSiteLord* lord, int SlotIndex, unsigned char enforcedArmy, unsigned long recruitToCaravan );
	void RecruitUnits ( struct FString unitName, int Amount, int townOrDwellingID, unsigned long recruitToCaravan, unsigned long doUpdate );
	int UseFertility ( struct FString creatureName, int townID );
	void UpgradeDwellingComplete ( );
	void UpgradeDwelling ( int dwellingToUpgradeID );
	void SetTownsAndDwellings ( );
	bool CheckFreeSlotOnUnitSlotClick ( struct FString unitName );
	void UpdateMiddleHudTargetBarHighlight ( );
	void GetCaravanDataFromLord ( int AocLordID );
	void UpdateAfterModifyingArmy ( );
	bool OpenPopup ( );
	void UpdateFromNeutralDwelling ( class AH7Dwelling* Dwelling );
	void UpdateFromDwelling ( class AH7Dwelling* currentDwelling );
	void UpdateFromLord ( class AH7AreaOfControlSiteLord* lord );
	void Update ( class AH7Town* Town );
	void LoadComplete ( );
	bool Initialize ( );
	void SetIsCaravanRecruitment ( unsigned long val );
	bool GetIsCaravanRecruitment ( );
	class UH7GFxTownRecruitmentPopup* GetRecruitmentPopup ( );
};



// Class MMH7Game.H7GFxHeroHUD ( Property size: 3 iter: 14) 
// Class name index: 44265 
// 0x0020 (0x00C4 - 0x00A4)
class UH7GFxHeroHUD : public UH7GFxUIContainer
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              
	TArray< class AH7AdventureHero* >                  mHeroes;                                          		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7AdventureHero*                            mPendingHero;                                     		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51880 ];

		return pClassPointer;
	};

	class UGFxObject* BuildBuffs ( TArray< class UH7BaseBuff* > buffs );
	void UpdateMovement ( );
	void EnableMe ( );
	void DisableMe ( );
	int HudPositionToHeroId ( int Index );
	void SelectHero ( int Id, unsigned long canSpendSkillPoints );
	void SelectHeroByHeroDelayed ( );
	void SelectHeroByHero ( class AH7AdventureHero* Hero );
	void Update ( );
	void SetHeroesDelayed ( );
	void SetHeroes ( TArray< class AH7AdventureHero* > Heroes );
};



// Class MMH7Game.H7CouncilInteractive ( Property size: 1 iter: 9) 
// Class name index: 44154 
// 0x0007 (0x0254 - 0x024D)
class AH7CouncilInteractive : public AStaticMeshActor
{
public:
	unsigned long                                      mMouseOver : 1;                                   		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51919 ];

		return pClassPointer;
	};

	void MouseOverStop ( );
	void MouseOverStart ( );
	void ClickedOn ( );
	void DisableOutline ( );
	void EnableOutline ( struct FColor OutlineColor );
	void show ( );
	void Hide ( );
	bool IsMouseOver ( );
};



// Class MMH7Game.H7CouncilFlagActor ( Property size: 3 iter: 9) 
// Class name index: 44150 
// 0x001C (0x0270 - 0x0254)
class AH7CouncilFlagActor : public AH7CouncilInteractive
{
public:
	class UH7CampaignDefinition*                       mCampaign;                                        		// 0x0254 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mMapName;                                         		// 0x025C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mFirstCampaignMap : 1;                            		// 0x026C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51918 ];

		return pClassPointer;
	};

	void MouseOverStop ( );
	void MouseOverStart ( );
	void ClickedOn ( );
	bool IsFirstMap ( );
	struct FString GetMapName ( );
	class UH7CampaignDefinition* GetCampaign ( );
};



// Class MMH7Game.H7CouncilMapManager ( Property size: 17 iter: 43) 
// Class name index: 44157 
// 0x0074 (0x02B4 - 0x0240)
class AH7CouncilMapManager : public AActor
{
public:
	struct FColor                                      mCampaignHighlight;                               		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      mSelectedHighlight;                               		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACameraActor*                                mCameraActor;                                     		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessChain*                           mMapPP;                                           		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AStaticMeshActor*                            mContinentMesh;                                   		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AStaticMeshActor*                            mTableMesh;                                       		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7CouncilScrollActor*                       mCouncilScroll;                                   		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCampaignsMapData >                 mCampaignMaps;                                    		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsActive : 1;                                    		// 0x0280 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                mHighlightedCampaignIndex;                        		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                mHighlightedFlagIndex;                            		// 0x0288 (0x0004) [0x0000000000000000]              
	class AH7CouncilGameInfo*                          mCouncilGameInfo;                                 		// 0x028C (0x0008) [0x0000000000000000]              
	class AH7AdventureMapInfo*                         mAdventureGameInfo;                               		// 0x0294 (0x0008) [0x0000000000000000]              
	class UH7PlayerProfile*                            mPlayerProfile;                                   		// 0x029C (0x0008) [0x0000000000000000]              
	class AH7CouncilPlayerController*                  mCouncilPlayerController;                         		// 0x02A4 (0x0008) [0x0000000000000000]              
	int                                                mSelectedCampaignIndex;                           		// 0x02AC (0x0004) [0x0000000000000000]              
	int                                                mSelectedFlagIndex;                               		// 0x02B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51924 ];

		return pClassPointer;
	};

	void DeactivateFlagEffects ( );
	void SelectFlag ( class AH7CouncilFlagActor* TestActor, unsigned long sendEventToGUI );
	void SelectCampaignFlags ( class UH7CampaignDefinition* CampaignRef );
	void PlayCouncillorSelectedVoiceOver ( class UH7CampaignDefinition* CampaignRef );
	void ChangeSelectedCampaign ( class UH7CampaignDefinition* CampaignRef );
	int GetFlagIndex ( class AActor* flagActor );
	int GetFlagIndexByMapName ( struct FString MapName );
	class AH7CouncilFlagActor* GetFlagByMapName ( struct FString MapName );
	int GetCampaignIndex ( class UH7CampaignDefinition* CampaignRef );
	struct FString GetSelectedMapName ( );
	void GetUnlockedMapsName ( TArray< struct FString >* mapsName );
	void ShowAllUnlockedFlags ( );
	void SortFlags ( TArray< class AH7CouncilFlagActor* > Flags, TArray< struct FCampaignsMapData >* campaignInfo );
	void FindAllCampaignFlags ( );
	void UpdateMap ( );
	void DeactivateMap ( );
	void ActivateMap ( );
	void PostBeginPlay ( );
	TArray< struct FCampaignsMapData > GetCampaignFlags ( );
	class UPostProcessChain* GetMapPP ( );
	class ACameraActor* GetMapCamera ( );
	class AStaticMeshActor* GetTableMesh ( );
	class AStaticMeshActor* GetContinentMesh ( );
	class AH7CouncilScrollActor* GetScroll ( );
	bool IsActive ( );
	class AH7CouncilMapManager* GetInstance ( );
};



// Class MMH7Game.H7CameraAction ( Property size: 10 iter: 25) 
// Class name index: 44101 
// 0x0048 (0x0288 - 0x0240)
class AH7CameraAction : public AActor
{
public:
	float                                              mDuration;                                        		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              mTimer;                                           		// 0x0244 (0x0004) [0x0000000000000000]              
	class AH7Camera*                                   mCam;                                             		// 0x0248 (0x0008) [0x0000000000000000]              
	struct FVector                                     mInitialVRP;                                      		// 0x0250 (0x000C) [0x0000000000000000]              
	float                                              mInitialViewingDistance;                          		// 0x025C (0x0004) [0x0000000000000000]              
	struct FRotator                                    mInitialRotation;                                 		// 0x0260 (0x000C) [0x0000000000000000]              
	float                                              mInitialFOV;                                      		// 0x026C (0x0004) [0x0000000000000000]              
	int                                                mCurrentStep;                                     		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                mMaxSteps;                                        		// 0x0274 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnActionCompleted__Delegate;                    		// 0x0278 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x027C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51955 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void RevertCamToInitialValues ( );
	void StopAction ( );
	void StartAction ( );
	void ResetDuration ( );
	float GetDuration ( );
	void SetDuration ( float Duration );
	bool IsActionFinished ( );
	void BaseInit ( float Duration, struct FScriptDelegate actionCompletedFunction );
	float GetTimePassedInPer ( );
	void OnActionCompleted ( );
	float GetInitialFOV ( );
	struct FRotator GetInitialRotation ( );
	float GetInitialViewingDistance ( );
	struct FVector GetInitialVRP ( );
};



// Class MMH7Game.H7AbilityCastCameraAction ( Property size: 15 iter: 20) 
// Class name index: 43743 
// 0x0050 (0x02D8 - 0x0288)
class AH7AbilityCastCameraAction : public AH7CameraAction
{
public:
	float                                              mCasterStartYawOffset;                            		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCasterStartPitchOffset;                          		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCasterEndYawOffset;                              		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCasterFOV;                                       		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCasterViewingDistance;                           		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCastDuration;                                    		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    mBaseRotation;                                    		// 0x02A0 (0x000C) [0x0000000000000000]              
	struct FVector                                     mTargetPos;                                       		// 0x02AC (0x000C) [0x0000000000000000]              
	class AH7Unit*                                     mCaster;                                          		// 0x02B8 (0x0008) [0x0000000000000000]              
	float                                              mCurrentYawOffset;                                		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              mTargetYawOffset;                                 		// 0x02C4 (0x0004) [0x0000000000000000]              
	float                                              mCurrentPitchOffset;                              		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              mTargetPitchOffset;                               		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              mRandomOffsetDuration;                            		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              mRandomOffsetTimer;                               		// 0x02D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51997 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void StopAction ( );
	void StartNewRandomOffset ( );
	void StartAction ( );
	void Init ( class AH7Unit* caster );
};



// Class MMH7Game.H7Message ( Property size: 12 iter: 21) 
// Class name index: 44482 
// 0x00C4 (0x0124 - 0x0060)
class UH7Message : public UObject
{
public:
	struct FString                                     textTemplate;                                     		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      Destination;                                      		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      creationContext;                                  		// 0x0071 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      mPlayerNumber;                                    		// 0x0072 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FH7MessageSettings                          Settings;                                         		// 0x0074 (0x0074) [0x0000000000000001]              ( CPF_Edit )
	int                                                Id;                                               		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CreationTime;                                     		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     Text;                                             		// 0x00F0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mTooltip;                                         		// 0x0100 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      mWaitingForOtherLocalPlayer : 1;                  		// 0x0110 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      mWasAssigned : 1;                                 		// 0x0110 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FH7TooltipReplacementEntry >        mTooltipMapping;                                  		// 0x0114 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52208 ];

		return pClassPointer;
	};

	void GUIWriteInto ( class UGFxObject** Data );
	struct FString GetFormatedText ( );
	bool IsLocaKey ( struct FString Unknown );
	void mergeMapping ( TArray< struct FH7TooltipReplacementEntry > mergeMapping );
	bool CanMergeMapping ( TArray< struct FH7TooltipReplacementEntry > mergeMapping );
	TArray< struct FH7TooltipReplacementEntry > GetMapping ( );
	void AddRepl ( struct FString placeholder, struct FString Value );
	class UH7Message* CreateMessageBasedOnMe ( );
	struct FString GetTextTemplateLocalized ( );
};



// Class MMH7Game.H7ActorFactoryAdventureArmy ( Property size: 0 iter: 0) 
// Class name index: 43746 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryAdventureArmy : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52370 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ActorFactoryArea ( Property size: 0 iter: 0) 
// Class name index: 43747 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryArea : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52372 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ActorFactoryCellChangerActor ( Property size: 0 iter: 0) 
// Class name index: 43748 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryCellChangerActor : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52374 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ActorFactoryCellFoWMarker ( Property size: 0 iter: 0) 
// Class name index: 43749 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryCellFoWMarker : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52376 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ActorFactoryCellTrigger_Army ( Property size: 0 iter: 0) 
// Class name index: 43750 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryCellTrigger_Army : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52378 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ActorFactoryDeploymentArea ( Property size: 0 iter: 0) 
// Class name index: 43751 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryDeploymentArea : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52380 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7DeploymentArea ( Property size: 0 iter: 2) 
// Class name index: 44184 
// 0x0000 (0x0310 - 0x0310)
class AH7DeploymentArea : public AH7Area
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52382 ];

		return pClassPointer;
	};

	int GetSizeY ( );
	int GetSizeX ( );
};



// Class MMH7Game.H7ActorFactoryDestructibleObjectManipulator ( Property size: 0 iter: 0) 
// Class name index: 43752 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryDestructibleObjectManipulator : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52383 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ActorFactoryTileMarker ( Property size: 0 iter: 0) 
// Class name index: 43753 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryTileMarker : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52385 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ActorFactoryTreasureMarker ( Property size: 0 iter: 0) 
// Class name index: 43754 
// 0x0000 (0x009C - 0x009C)
class UH7ActorFactoryTreasureMarker : public UH7ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52387 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7EmitterSpawnable ( Property size: 0 iter: 0) 
// Class name index: 44205 
// 0x0000 (0x0254 - 0x0254)
class AH7EmitterSpawnable : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52780 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7InstantCommandSplitCreatureStack ( Property size: 8 iter: 16) 
// Class name index: 44416 
// 0x0030 (0x0090 - 0x0060)
class UH7InstantCommandSplitCreatureStack : public UH7InstantCommandBase
{
public:
	class AH7EditorArmy*                               mSourceArmy;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7EditorArmy*                               mTargetArmy;                                      		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                mSourceIndex;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mSplitCount;                                      		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                mTargetIndex;                                     		// 0x0078 (0x0004) [0x0000000000000000]              
	class AH7EditorArmy*                               mRequesterArmy;                                   		// 0x007C (0x0008) [0x0000000000000000]              
	unsigned long                                      mForceTransferToTargetArmy : 1;                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	class AH7Player*                                   mPlayerRequester;                                 		// 0x0088 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52785 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void SplitCreatureStackComplete ( unsigned long Success, unsigned long transfer );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7EditorArmy* sourceArmy, class AH7EditorArmy* targetArmy, int SourceIndex, int splitCount, int TargetIndex, class AH7EditorArmy* requesterArmy, unsigned long forceTransferToTargetArmy );
};



// Class MMH7Game.H7Deployment ( Property size: 2 iter: 27) 
// Class name index: 44183 
// 0x0024 (0x0084 - 0x0060)
class UH7Deployment : public UObject
{
public:
	struct FH7DeploymentData                           mDeploymentData;                                  		// 0x0060 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mIsCustomized : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52796 ];

		return pClassPointer;
	};

	void DebugLogSelf ( );
	void Reset ( );
	void RecalcStackOrdinal ( );
	TArray< struct FH7StackDeployment > GetDeploymentByOrdinals ( );
	void SetStackInfo ( int Idx, int sourceId, class UH7BaseCreatureStack* BaseStack, class AH7CreatureStack* creatureStack );
	void SetStackSpacing ( int slotID, int SpacingTop, int SpacingBottom );
	void SetStackGridPos ( int slotID, struct FIntPoint gp );
	int GetIdOfCreatureStack ( class AH7CreatureStack* creatureStack );
	void RemoveStackDeplyomentData ( int slotID );
	struct FH7StackDeployment GetStackDeployment ( int slotID );
	TArray< struct FH7StackDeployment > GetStackDeployments ( );
	void IncNumberOfStacksToDeploy ( );
	void SetNumberOfStacksToDeploy ( int Num );
	int GetNumberOfStacksToDeploy ( );
	void SetNumberOfDeployedStacks ( int Num );
	int GetNumberOfDeployedStacks ( );
	void SetForceAutodeployment ( unsigned long forceAD );
	bool GetForceAutodeployment ( );
	void SetOriginalMapHeight ( int Height );
	int GetOriginalMapHeight ( );
	void SetDeploymentData ( struct FH7DeploymentData Data );
	struct FH7DeploymentData GetDeploymentData ( );
	void SetIsCustomized ( unsigned long B );
	bool IsCustomized ( );
};



// Class MMH7Game.H7ListeningManager ( Property size: 4 iter: 12) 
// Class name index: 44446 
// 0x0028 (0x0088 - 0x0060)
class UH7ListeningManager : public UObject
{
public:
	TArray< struct FH7ListeningEntry >                 mListener;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IGUIListenable* >                 mDataChangedThisFrame;                            		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mFramesWaited;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                mResumeAtListener;                                		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53496 ];

		return pClassPointer;
	};

	void Update ( );
	bool CanUseFrameTime ( );
	int GetMSTimeStamp ( );
	void DataChanged ( class UH7IGUIListenable* gameEntity );
	void AddListener ( class UH7IGUIListenable* ob, class UGFxObject* newListener, unsigned char Focus );
	void RemoveListener ( class UGFxObject* newListener );
	class UH7ListeningManager* GetInstance ( );
};



// Class MMH7Game.H7IGUIListenable ( Property size: 0 iter: 3) 
// Class name index: 44361 
// 0x0000 (0x0060 - 0x0060)
class UH7IGUIListenable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53499 ];

		return pClassPointer;
	};

	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
};



// Class MMH7Game.H7TownUtilityUnitDwelling ( Property size: 2 iter: 9) 
// Class name index: 44734 
// 0x0010 (0x0140 - 0x0130)
class UH7TownUtilityUnitDwelling : public UH7TownBuilding
{
public:
	class AH7EditorWarUnit*                            mEditorWarUnit;                                   		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7EditorWarUnit*                            mWarUnit;                                         		// 0x0138 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53502 ];

		return pClassPointer;
	};

	void InitTownBuilding ( class AH7Town* Town );
	bool HireWarUnit ( class AH7AdventureArmy* Army );
	bool CanPlayerAffordWarUnit ( class AH7Player* Player );
	bool CanAffordWarUnit ( class AH7AdventureArmy* Army );
	bool CanHireWarUnit ( class AH7AdventureArmy* Army );
	TArray< class AH7AdventureArmy* > GetTownArmies ( );
	class AH7EditorWarUnit* GetWarunitTemplate ( );
};



// Class MMH7Game.H7AiActionCongregate ( Property size: 1 iter: 8) 
// Class name index: 43774 
// 0x000B (0x006C - 0x0061)
class UH7AiActionCongregate : public UH7AiActionBase
{
public:
	class UH7AiUtilityCongregate*                      mUCongregate;                                     		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53507 ];

		return pClassPointer;
	};

	float GetStackSizeGlobal ( class AH7Player* dasPlayer, class AH7Creature* StackType );
	float GetStackStrengthGlobal ( class AH7Player* dasPlayer, class AH7Creature* StackType );
	bool ShouldCongregate ( class AH7AdventureArmy* Army, class AH7AdventureArmy* receivingArmy );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7InstantCommandMergeArmiesAI ( Property size: 3 iter: 8) 
// Class name index: 44397 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandMergeArmiesAI : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mSourceArmy;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mReceivingArmy;                                   		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                mThreshold;                                       		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53523 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* sourceArmy, class AH7AdventureArmy* receivingArmy, int Threshold );
};



// Class MMH7Game.H7InstantCommandJoinArmy ( Property size: 4 iter: 9) 
// Class name index: 44392 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandJoinArmy : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mArmyToJoin;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmyJoiner;                                      		// 0x0068 (0x0008) [0x0000000000000000]              
	unsigned long                                      mJoin : 1;                                        		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mCanMerge : 1;                                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53529 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* armyToJoin, class AH7AdventureArmy* armyJoiner, unsigned long join, unsigned long canMerge );
};



// Class MMH7Game.H7InstantCommandDismissCreatureStack ( Property size: 2 iter: 7) 
// Class name index: 44380 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandDismissCreatureStack : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mCreatureStackIndex;                              		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53577 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, int creatureStackIndex );
};



// Class MMH7Game.H7InstantCommandUnifyStacks ( Property size: 1 iter: 6) 
// Class name index: 44425 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandUnifyStacks : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53586 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7Caravan ( Property size: 1 iter: 7) 
// Class name index: 44106 
// 0x0008 (0x09D0 - 0x09C8)
class AH7Caravan : public AH7AdventureHero
{
public:
	class UTexture2D*                                  mCaravanIcon;                                     		// 0x09C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53591 ];

		return pClassPointer;
	};

	void EndMoving ( unsigned long ignoreTargetNotReachedMessage );
	class AH7EditorHero* CreateHero ( class AH7EditorArmy* Army, struct FName herotag, struct FVector heroLocation, unsigned long isAdventureHero, unsigned long onlyHero, unsigned long fromSave, class AH7EditorHero* oldHero );
	struct FString GetFlashMinimapPath ( );
	bool IsHero ( );
	struct FString GetName ( );
	class AH7CaravanArmy* GetCaravanArmy ( );
};



// Class MMH7Game.H7ITooltipable ( Property size: 0 iter: 1) 
// Class name index: 44436 
// 0x0000 (0x0060 - 0x0060)
class UH7ITooltipable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53700 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
};



// Class MMH7Game.H7AdventureArmySpawnable ( Property size: 0 iter: 0) 
// Class name index: 43755 
// 0x0000 (0x06A8 - 0x06A8)
class AH7AdventureArmySpawnable : public AH7AdventureArmy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53702 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7ZoomInCameraAction ( Property size: 4 iter: 7) 
// Class name index: 44772 
// 0x0018 (0x02A0 - 0x0288)
class AH7ZoomInCameraAction : public AH7CameraAction
{
public:
	float                                              mTargetFOV;                                       		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mTargetViewDistance;                              		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mZoomDuration;                                    		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mTargetPos;                                       		// 0x0294 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53882 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void StopAction ( );
	void Init ( struct FVector targetPos, struct FScriptDelegate actionCompletedFunction );
};



// Class MMH7Game.H7ZoomOutCameraAction ( Property size: 6 iter: 9) 
// Class name index: 44773 
// 0x0018 (0x02A0 - 0x0288)
class AH7ZoomOutCameraAction : public AH7CameraAction
{
public:
	float                                              mZoomDuration;                                    		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartViewingDistance;                            		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartFOV;                                        		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartDelay;                                      		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mTargetViewDistance;                              		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              mTargetFOV;                                       		// 0x029C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53898 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void StopAction ( );
	void Init ( unsigned long toGridCenter, float TargetViewDistance, float TargetFoV, struct FScriptDelegate actionCompletedFunction );
};



// Class MMH7Game.H7AMEventCameraAction ( Property size: 26 iter: 54) 
// Class name index: 44077 
// 0x0070 (0x02F8 - 0x0288)
class AH7AMEventCameraAction : public AH7CameraAction
{
public:
	float                                              mStartPitch;                                      		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndPitch;                                        		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartYaw;                                        		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndYaw;                                          		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartViewingDistance;                            		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndViewingDistance;                              		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartFOV;                                        		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndFOV;                                          		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mLerpDuration;                                    		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mLerpOutDuration;                                 		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mAnimDuration;                                    		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mLerpToCameraStartPosition : 1;                   		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mLerpToPreviousPosition : 1;                      		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mEaseInOutAnimation : 1;                          		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      mEaseInOutLerp : 1;                               		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      mFlipYawToNearerSide : 1;                         		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      mToggleCinimaticView : 1;                         		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      mToggleHud : 1;                                   		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      mFollowTarget : 1;                                		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      mContinues : 1;                                   		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000100] 
	struct FVector                                     mStartTargetPos;                                  		// 0x02B8 (0x000C) [0x0000000000000000]              
	struct FVector                                     mEndTargetPos;                                    		// 0x02C4 (0x000C) [0x0000000000000000]              
	class AActor*                                      mStartTarget;                                     		// 0x02D0 (0x0008) [0x0000000000000000]              
	class AActor*                                      mEndTarget;                                       		// 0x02D8 (0x0008) [0x0000000000000000]              
	class AH7AMEventCameraAction*                      mContinuingAction;                                		// 0x02E0 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMidAction__Delegate;                          		// 0x02E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02EC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53919 ];

		return pClassPointer;
	};

	void UpdatePositions ( );
	void StopAction ( );
	void StartAction ( );
	void Init ( class AActor* startTarget, class AActor* endTarget, unsigned long continues, struct FScriptDelegate actionCompletedFunction, struct FScriptDelegate midActionFunction );
	void SetContinuingAction ( class AH7AMEventCameraAction* continuingAction );
	void SetFollowTarget ( unsigned long Value );
	void SetToggleHud ( unsigned long Value );
	void SetToggleCinimaticView ( unsigned long Value );
	void SetFlipYawToNearerSide ( unsigned long Value );
	void SetEaseInOutLerp ( unsigned long Value );
	void SetEaseInOutAnimation ( unsigned long Value );
	void SetLerpToPreviousPosition ( unsigned long Value );
	void SetLerpToCameraStartPosition ( unsigned long Value );
	void SetAnimDuration ( float Value );
	void SetLerpOutDuration ( float Value );
	void SetLerpDuration ( float Value );
	void SetEndFOV ( float Value );
	void SetStartFOV ( float Value );
	void SetEndViewingDistance ( float Value );
	void SetStartViewingDistance ( float Value );
	void SetEndYaw ( float Value );
	void SetStartYaw ( float Value );
	void SetEndPitch ( float Value );
	void SetStartPitch ( float Value );
	void OnMidAction ( );
};



// Class MMH7Game.H7WaypointBasedCameraAction ( Property size: 5 iter: 16) 
// Class name index: 44768 
// 0x0020 (0x02A8 - 0x0288)
class AH7WaypointBasedCameraAction : public AH7CameraAction
{
public:
	float                                              CLAMP_HEIGHT_MIN;                                 		// 0x0288 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FH7CameraWaypoint >                 mWaypoints;                                       		// 0x028C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mWaypointIdx;                                     		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              mStepTimer;                                       		// 0x02A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsRunning : 1;                                   		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54026 ];

		return pClassPointer;
	};

	float CalcInterpPercentForWP ( int wpIdx, float timePassed );
	float GetTimePassedForStep ( );
	void AddWaypointHero ( class AH7CombatHero* Hero, unsigned char InterpType, int Yaw, int Pitch, int Roll, struct FVector Offset, int viewDist, float FOV, unsigned char HeroAnim, float Duration );
	void AddWaypointStack ( class AH7CreatureStack* Stack, unsigned char InterpType, int Yaw, int Pitch, int Roll, struct FVector Offset, int viewDist, float FOV, unsigned char CreatureAnim, float Duration );
	void AddWaypoint ( struct FVector targetPosition, struct FRotator TargetRotation, float targetViewDist, float TargetFoV, unsigned char InterpType, float Duration );
	void MoveCameraFromTo ( float Percent, struct FH7CameraWaypoint fromWaypoint, struct FH7CameraWaypoint toWaypoint );
	void StopAction ( );
	void JumpCameraTo ( struct FH7CameraWaypoint toWaypoint );
	void StartAction ( );
};



// Class MMH7Game.H7PresentArmyCameraAction ( Property size: 26 iter: 33) 
// Class name index: 44530 
// 0x0090 (0x0338 - 0x02A8)
class AH7PresentArmyCameraAction : public AH7WaypointBasedCameraAction
{
public:
	float                                              CREATURE_DISTANCE;                                		// 0x02A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CREATURE_OFFSET_START;                            		// 0x02AC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_PITCH_CREATURE_START;                         		// 0x02B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_ROLL_CREATURE_START;                          		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_YAW_CREATURE_START;                           		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_FOV_CREATURE_START;                           		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CREATURE_OFFSET_END;                              		// 0x02C8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_PITCH_CREATURE_END;                           		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_ROLL_CREATURE_END;                            		// 0x02D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_YAW_CREATURE_END;                             		// 0x02DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_FOV_CREATURE_END;                             		// 0x02E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CREATURE_OFFSET_EXTRA;                            		// 0x02E4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_PITCH_CREATURE_EXTRA;                         		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_ROLL_CREATURE_EXTRA;                          		// 0x02F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_YAW_CREATURE_EXTRA;                           		// 0x02F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_FOV_CREATURE_EXTRA;                           		// 0x02FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bPresentCreatureJumpTo : 1;                       		// 0x0300 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseExtraPoint : 1;                               		// 0x0300 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      mSmoothMoveRunning : 1;                           		// 0x0300 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              mFadeTime;                                        		// 0x0304 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mPresentArmyDuration;                             		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mExtraPointDuration;                              		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mEndPointDuration;                                		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mSmoothMoveTimer;                                 		// 0x0314 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __SortFromNorthToSouth__Delegate;                 		// 0x0318 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x031C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SortFromSouthToNorth__Delegate;                 		// 0x0328 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x032C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54111 ];

		return pClassPointer;
	};

	int SortFromSouthToNorth ( class AH7CreatureStack* A, class AH7CreatureStack* B );
	int SortFromNorthToSouth ( class AH7CreatureStack* A, class AH7CreatureStack* B );
	float GetTimePassedForSmoothMove ( );
	void Update ( float DeltaTime );
	void StopAction ( );
	void StartAction ( );
	void Init ( struct FScriptDelegate actionCompletedFunction );
};



// Class MMH7Game.H7AttackCameraAction ( Property size: 25 iter: 37) 
// Class name index: 44088 
// 0x0094 (0x031C - 0x0288)
class AH7AttackCameraAction : public AH7CameraAction
{
public:
	float                                              mStartYawOffset;                                  		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartPitchOffset;                                		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mPitchCreatureHeightMultiplicator;                		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mYawSpeed;                                        		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStartFOV;                                        		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mViewingDistance;                                 		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mViewingDistanceCreatureHeightMultiplicator;      		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mTargetPositionZOffset;                           		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mTargetPositionSideOffset;                        		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsRanged : 1;                                    		// 0x02AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDidShake : 1;                                    		// 0x02AC (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              mAnimDuration;                                    		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    mBaseRotation;                                    		// 0x02B4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mDirection;                                       		// 0x02C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     mTargetPos;                                       		// 0x02CC (0x000C) [0x0000000000000000]              
	class AH7Unit*                                     mAttacker;                                        		// 0x02D8 (0x0008) [0x0000000000000000]              
	class UH7IEffectTargetable*                        mDefender;                                        		// 0x02E0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x02E8 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UH7IEffectTargetable*                        mPrimaryTarget;                                   		// 0x02F0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x02F8 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                mYawMoveDirection;                                		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              mCurrentYawOffset;                                		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              mTargetYawOffset;                                 		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              mCurrentPitchOffset;                              		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              mTargetPitchOffset;                               		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              mRandomOffsetDuration;                            		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              mRandomOffsetTimer;                               		// 0x0318 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54167 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void CalculateCamAngle ( unsigned long invert );
	void CalculateTargetPos ( );
	void StopAction ( );
	void StartNewRandomOffset ( );
	float GetMaxCreatureHeight ( );
	bool CheckColission ( struct FVector Start, struct FVector End );
	bool CheckForObstacles ( class UH7IEffectTargetable* Target, unsigned long endPosition );
	void StartAction ( );
	void Init ( class AH7Unit* attacker, class UH7IEffectTargetable* defender );
};



// Class MMH7Game.H7IntroduceHeroCameraAction ( Property size: 17 iter: 22) 
// Class name index: 44429 
// 0x0050 (0x02F8 - 0x02A8)
class AH7IntroduceHeroCameraAction : public AH7WaypointBasedCameraAction
{
public:
	float                                              HERO_DISTANCE;                                    		// 0x02A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HERO_OFFSET_START;                                		// 0x02AC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_PITCH_HERO_START;                             		// 0x02B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_ROLL_HERO_START;                              		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_YAW_HERO_START;                               		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_FOV_HERO_START;                               		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HERO_OFFSET_END;                                  		// 0x02C8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_PITCH_HERO_END;                               		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_ROLL_HERO_END;                                		// 0x02D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_YAW_HERO_END;                                 		// 0x02DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_FOV_HERO_END;                                 		// 0x02E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      mHeroAnim;                                        		// 0x02E4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bPresentHeroJumpTo : 1;                           		// 0x02E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mSmoothMoveRunning : 1;                           		// 0x02E8 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              mPresentDuration;                                 		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFadeTime;                                        		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mSmoothMoveTimer;                                 		// 0x02F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54391 ];

		return pClassPointer;
	};

	float GetTimePassedForSmoothMove ( );
	void Update ( float DeltaTime );
	void StopAction ( );
	void StartAction ( );
	void Init ( struct FScriptDelegate actionCompletedFunction );
};



// Class MMH7Game.H7ArmyVictoryCameraAction ( Property size: 16 iter: 20) 
// Class name index: 44082 
// 0x0054 (0x02FC - 0x02A8)
class AH7ArmyVictoryCameraAction : public AH7WaypointBasedCameraAction
{
public:
	class AH7CreatureStack*                            mTargetStack;                                     		// 0x02A8 (0x0008) [0x0000000000000000]              
	struct FVector                                     CAM_OFFSET_START;                                 		// 0x02B0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_YAW_START;                                    		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_PITCH_START;                                  		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_ROLL_START;                                   		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_VIEWDIST_START;                               		// 0x02C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_FOV_START;                                    		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CAM_OFFSET_END;                                   		// 0x02D0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_YAW_END;                                      		// 0x02DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_PITCH_END;                                    		// 0x02E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_ROLL_END;                                     		// 0x02E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_VIEWDIST_END;                                 		// 0x02E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CAM_FOV_END;                                      		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      mCreatureAnim;                                    		// 0x02F0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mPresentCreatureDuration;                         		// 0x02F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              mZoomOutDuration;                                 		// 0x02F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54392 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void StopAction ( );
	void StartAction ( );
	void Init ( struct FScriptDelegate actionCompletedFunction );
};



// Class MMH7Game.H7SimTurnCommandManager ( Property size: 8 iter: 41) 
// Class name index: 44659 
// 0x0060 (0x00C0 - 0x0060)
class UH7SimTurnCommandManager : public UObject
{
public:
	TArray< class UH7SimTurnBaseCommand* >             mCommandQueue;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mUnitActionCounter;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	TArray< struct FMPSimTurnOngoingTrade >            mOngoingTrades;                                   		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureHero* >                  mOngoingInteractions;                             		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMPSimTurnOngoingStartCombat                mOngoingStartCombat;                              		// 0x0094 (0x001C) [0x0000000000000000]              
	float                                              mStartCombatTime;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	class AH7CombatPlayerController*                   mNextAddCommandPlayerController;                  		// 0x00B4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsNormalCombatTriggered : 1;                     		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55758 ];

		return pClassPointer;
	};

	void RenderDebug ( class UCanvas* myCanvas );
	void OnEndTurn ( );
	void OnStartNormalCombat ( );
	void OnEndNormalCombat ( );
	bool IsOngoingInteractionAround ( struct FVector initialPos, struct FVector targetPos );
	bool IsOngoingTradeAround ( struct FVector initialPos, struct FVector targetPos );
	bool IsOngoingStartCombatAround ( struct FVector initialPos, struct FVector targetPos, class AH7AdventureHero* Hero );
	bool IsOngoingStartCombat ( class AH7AdventureHero* Hero );
	void ResetOngoingStartCombat ( );
	void HandleRetreatCancelled ( int heroId );
	void FinishOngoingStartCombat ( unsigned long isRetreatFinished, unsigned long isCombatCanceled, unsigned long IsNormalCombatAboutToBegin );
	void HandleAnswerStartCombat ( unsigned char answer, int heroId );
	void InsertOngoingStartCombat ( class AH7AdventureHero* Source, class AH7AdventureHero* Target );
	void RemoveCommandsBySource ( int sourceId );
	void CancelTrade ( unsigned long doCancelTrade, int heroId );
	void CancelAllInteractions ( );
	void CancelAllTrades ( );
	bool IsInOngoingTrade ( class AH7AdventureHero* Hero );
	void RemoveOngoingTrade ( class AH7AdventureHero* Source );
	void InsertOngoingTrade ( class AH7AdventureHero* Source, class AH7AdventureHero* Target );
	void RemoveOngoingInteraction ( class AH7AdventureHero* Source );
	void InsergOngoingInteraction ( class AH7AdventureHero* Source );
	class UH7SimTurnBaseCommand* GetCommandAttachedToMove ( class UH7SimTurnBaseCommand* moveCommand );
	bool IsFirstCommandOfPlayer ( class UH7SimTurnBaseCommand* Command );
	void RemoveAllNormalCommands ( class AH7CombatPlayerController* thePlayer );
	void RemoveAllCommands ( class AH7CombatPlayerController* thePlayer );
	bool Update ( );
	void AddInstantCommand ( struct FMPInstantCommand instantCommand );
	void AddCommand ( int unitActionCounter, unsigned char Command, unsigned char CommandTag, class UH7ICaster* CommandSource, class UH7IEffectTargetable* Target, int TeleportTarget, TArray< class UH7BaseCell* > Path, class UH7BaseAbility* Ability, unsigned char Direction, unsigned long ReplaceFakeAttacker, unsigned long InsertHead, class UH7CombatMapCell* TrueHitCell, unsigned long doOOSCheck, int movementPoints );
	struct FMPSimTurnOngoingStartCombat GetOngoingStartCombat ( );
	int GetUnitActionCounter ( );
	void UpdateUnitActionCounter ( int newUnitActionCounter );
	void SetNextAddCommandPlayerController ( class AH7CombatPlayerController* newPlayerController );
};



// Class MMH7Game.H7MessageMapping ( Property size: 38 iter: 38) 
// Class name index: 44485 
// 0x0130 (0x0190 - 0x0060)
class UH7MessageMapping : public UObject
{
public:
	class UH7Message*                                  mLastHeroChance;                                  		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mOtherPlayerTurn;                                 		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mAITurn;                                          		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeroSpellLearned;                                		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeroLevelUp;                                     		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeroSkillpoints;                                 		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeroSkillpointsRandom;                           		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeroSkillIncrease;                               		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mQuestNew;                                        		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mQuestCompleted;                                  		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mQuestFailed;                                     		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mQuestUpdated;                                    		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mCaravanArrived;                                  		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mCaravanUnload;                                   		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mCaravanBlocked;                                  		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mCaravanReturn;                                   		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mCaravanContinue;                                 		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeroReceivedCreatures;                           		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeroReceivedItems;                               		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mMinePlunder;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mMinePlunderPlunderer;                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mSabotage;                                        		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mSabotageSuccess;                                 		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mSabotageFail;                                    		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mTownlost;                                        		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mFortlost;                                        		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mMagicGuildSpec;                                  		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mTGUpdated;                                       		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mPlunderSuccess;                                  		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mPlunderFail;                                     		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mTearFound;                                       		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mPlayerDefeated;                                  		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mPlayerSentResources;                             		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mPlayerDisconnected;                              		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mHeropedia;                                       		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mGameSaved;                                       		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mStarvation;                                      		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7Message*                                  mCyclopsBuff;                                     		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55787 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CombatPopUpCntl ( Property size: 39 iter: 102) 
// Class name index: 44135 
// 0x00DC (0x0324 - 0x0248)
class UH7CombatPopUpCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxCombatPopUp*                           mCombatPopup;                                     		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mSiegeCombatPopUp;                                		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mNegoPopup;                                       		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mUpperArmy;                                       		// 0x0260 (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mLowerArmy;                                       		// 0x0268 (0x0008) [0x0000000000000000]              
	class UH7GFxArmyMergePopup*                        mArmyMergePopup;                                  		// 0x0270 (0x0008) [0x0000000000000000]              
	class AH7EditorHero*                               mOwner;                                           		// 0x0278 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mAttackingArmy;                                   		// 0x0280 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mDefendingArmy;                                   		// 0x0288 (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mAttackingArmyCombat;                             		// 0x0290 (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mDefendingArmyCombat;                             		// 0x0298 (0x0008) [0x0000000000000000]              
	TArray< class UH7BaseCreatureStack* >              mSourceStacks;                                    		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7BaseCreatureStack* >              mLocalGuardStacks;                                		// 0x02B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mPoolKey;                                         		// 0x02C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mActivePlayerIsAttacker : 1;                      		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mAttackerWon : 1;                                 		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mOnCombatMap : 1;                                 		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mCheckMOnCombatMap : 1;                           		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mQuickCombatDone : 1;                             		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mQuickCombatDoneWasTrue : 1;                      		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      mCanFight : 1;                                    		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      mReceivedUnits : 1;                               		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      mMergeStandAlone : 1;                             		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      mCaravanMerge : 1;                                		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      mIsSiege : 1;                                     		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      mUseSourceStacks : 1;                             		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      mIsAlreadyClosing : 1;                            		// 0x02D0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      mDontCallBtnClose : 1;                            		// 0x02D0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      mNegoPopUpUsingMerger : 1;                        		// 0x02D0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      mIsReinforcement : 1;                             		// 0x02D0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      mCombatPopupNeedAnswer : 1;                       		// 0x02D0 (0x0004) [0x0000000000000000] [0x00010000] 
	int                                                mDismissArmyIndex;                                		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                mDismissIndex;                                    		// 0x02D8 (0x0004) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mCurrentPopup;                                    		// 0x02DC (0x0008) [0x0000000000000000]              
	TArray< struct FH7ResourceQuantity >               mCreatureArmyCost;                                		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7TeleportCosts                            mMergeCost;                                       		// 0x02F4 (0x0010) [0x0000000000000000]              
	class AH7AreaOfControlSite*                        mConquerSite;                                     		// 0x0304 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mConquerHero;                                     		// 0x030C (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReinforceComplete__Delegate;                  		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0318 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55796 ];

		return pClassPointer;
	};

	void ExecuteConquer ( );
	void QueueConquer ( class AH7AreaOfControlSite* conquerSite, class AH7AdventureHero* conquerHero );
	void ResetTeleportComplete ( );
	void ResetTeleport ( );
	void ConfirmTeleport ( int manaCost );
	void MergeCompleted ( );
	void AcceptAbandon ( );
	void MergerAccepted ( unsigned long unitsLeft );
	void RemoveUnitFromCursor ( );
	void CompleteTransfer ( unsigned long Success );
	void CompleteTransferForNonArmy ( unsigned long Success, TArray< class UH7BaseCreatureStack* > PoolStacks );
	void RequestTransfer ( int dragSlotArmyID, int dragSlotIndex, int dropSlotArmyID, int dropSlotIndex, int Amount );
	void AddUnitIconToCursor ( int SlotIndex, int armyID );
	void DismissDenied ( );
	void DismissConfirm ( );
	void DismissStack ( int unitIndex, int armyIndex );
	TArray< struct FH7StackCount > GetStackCount ( TArray< class UH7BaseCreatureStack* > OldState );
	TArray< struct FH7StackCount > GetStackCountDiff ( TArray< struct FH7StackCount > OldState, TArray< struct FH7StackCount > NewState );
	void PostCombatMergeComplete ( unsigned long Success );
	void HandleArmyMerging ( );
	bool UpdateMergeCost ( unsigned long payForReal );
	void StartReinforceMerger ( class AH7AdventureArmy* Army, class AH7Town* Town, struct FH7TeleportCosts Costs, struct FScriptDelegate callbackFunction );
	void StartCaravanMerger ( class AH7EditorArmy* heroArmy, class AH7EditorArmy* caravanArmy, struct FScriptDelegate callbackFunction );
	void StartQuestMerger ( class AH7AdventureArmy* Army, TArray< class UH7BaseCreatureStack* > joiners, struct FScriptDelegate callbackFunction );
	void StartPostCombatMerger ( class AH7AdventureArmy* Army, TArray< class UH7BaseCreatureStack* > joiners, struct FString PoolKey, struct FScriptDelegate callbackFunction );
	void NegoPopUsingMerger ( );
	void Reset ( );
	void ClosePopup ( );
	void ClosePopupHard ( );
	void Closed ( );
	bool WillCombatStart ( );
	class AH7AdventureArmy* GetWinningArmy ( );
	bool ContainesUnits ( TArray< class UH7BaseCreatureStack* > stacks );
	bool HasArmyToMerge ( );
	void SetWinningArmy ( class AH7AdventureArmy* Army );
	int GetNextLevelMaxXP ( unsigned long forAttackerHero );
	void BtnCancelClicked ( );
	void UpdateArmiesEndCombat ( );
	void CompleteQuickCombat ( );
	void BtnStartQuickCombatClicked ( struct FEventData Data );
	void BtnStartCombatClicked ( struct FEventData Data );
	void UpdateFromCombatMap ( int XPWinner, int XPLoser, class AH7CombatArmy* Army, unsigned long fled, unsigned long surrendered, int paidGold );
	void NegoBtnLetThemGoClicked ( );
	void NegoBtnAttackClicked ( );
	void NegoBtnRefuseClicked ( );
	void JoinArmyComplete ( );
	void NegoBtnAcceptClicked ( unsigned long join, unsigned long canMerge );
	void UpdateNegotiationPopUp ( class AH7AdventureArmy* heroArmy, class AH7AdventureArmy* creatureArmy, unsigned long join, TArray< struct FH7ResourceQuantity > Cost, unsigned long Force );
	void ArmyMergerTimerFinished ( );
	void NegotiationPopUpTimerFinished ( );
	void CombatPopUpTimerFinished ( );
	void UpdateCombatPopup ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy );
	void ShowStartCombatPopUp ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy );
	void StartCombatNeg ( );
	void StartCombat ( );
	void InitWindowKeyBinds ( );
	bool Initialize ( );
	bool CanClose ( );
	class UH7CombatPopUpCntl* GetInstance ( );
	class AH7AdventureArmy* GetDefendingArmy ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxCombatPopUp* GetCombatPopUp ( );
	void OnReinforceComplete ( unsigned long Success );
};



// Class MMH7Game.H7WindowWeeklyCntl ( Property size: 2 iter: 12) 
// Class name index: 44770 
// 0x0010 (0x0258 - 0x0248)
class UH7WindowWeeklyCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxWindowWeeklyEffect*                    mWindowWeeklyEffect;                              		// 0x0248 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnOk;                                           		// 0x0250 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55988 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void OKButtonClicked ( );
	void SetShowInFuture ( unsigned long val );
	bool OpenPopup ( );
	void SetData ( struct FString weeklyEffectTitle, struct FString weeklyEffectDescription );
	void InitWindowKeyBinds ( );
	bool Initialize ( );
	class UH7WindowWeeklyCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxWindowWeeklyEffect* GetWindowWeeklyEffect ( );
};



// Class MMH7Game.H7TradeResultCntl ( Property size: 5 iter: 19) 
// Class name index: 44738 
// 0x0068 (0x02B0 - 0x0248)
class UH7TradeResultCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxTradeResult*                           mTradeResultPopup;                                		// 0x0248 (0x0008) [0x0000000000000000]              
	TArray< struct FH7AlliedTradeData >                mTradeData;                                       		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FH7AlliedTradeData                          mCurrentTradeData;                                		// 0x0260 (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mFound : 1;                                       		// 0x02A8 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                mFoundIndex;                                      		// 0x02AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55999 ];

		return pClassPointer;
	};

	void Closed ( );
	void resetLogic ( );
	void ClearTradeList ( );
	bool PlayerReceivedItemsCreautes ( );
	struct FH7AlliedTradeData GetTradeDataByReceivingPlayer ( class AH7Player* Player );
	void setTradeEntry ( class AH7AdventureHero* receivingHero, class AH7AdventureHero* givingHero );
	void CheckAndRemoveEmptyTradeData ( );
	void AddReceivedCreature ( struct FH7StackCount stackCount, class AH7AdventureHero* receivingHero, class AH7AdventureHero* givingHero );
	void RemoveReceivedItem ( int ItemId, class AH7AdventureHero* receivingHero, class AH7AdventureHero* givingHero );
	void AddReceivedItem ( int ItemId, class AH7AdventureHero* receivingHero, class AH7AdventureHero* givingHero );
	void Update ( );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxTradeResult* GetTradeResultPopup ( );
};



// Class MMH7Game.H7ItemSlotMovieCntl ( Property size: 5 iter: 22) 
// Class name index: 44435 
// 0x0024 (0x026C - 0x0248)
class UH7ItemSlotMovieCntl : public UH7FlashMoviePopupCntl
{
public:
	int                                                cursorItemID;                                     		// 0x0248 (0x0004) [0x0000000000000000]              
	class AH7AdventureHero*                            mCurrentHero;                                     		// 0x024C (0x0008) [0x0000000000000000]              
	class UH7GFxInventory*                             mInventory;                                       		// 0x0254 (0x0008) [0x0000000000000000]              
	class UH7GFxHeroEquip*                             mHeroEquip;                                       		// 0x025C (0x0008) [0x0000000000000000]              
	class UH7HeroItem*                                 dragItem;                                         		// 0x0264 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56004 ];

		return pClassPointer;
	};

	void ConsumePotion ( int ItemId );
	bool isItemOnCursor ( );
	bool CanEquipItem ( unsigned long checkCurrentHero );
	void UnequipItem ( int dropSlotX, int dropSlotY );
	void SwitchItemsFromEquipToInventory ( int itemIDinDropSlot );
	void SwitchItemsInEquip ( int itemIDinDropSlot );
	bool EquipItemByDoubleClick ( int ItemId );
	bool EquipItem ( );
	void SwitchItemsFromInventoryToEquip ( int itemIDinDropSlot, int dropSlotX, int dropSlotY );
	void MergeItemsInInventory ( int itemIDinDropSlot, int dragSlotX, int dragSlotY, int dropSlotX, int dropSlotY );
	void SwitchItemsInInventory ( int itemIDinDropSlot, int dragSlotX, int dragSlotY, int dropSlotX, int dropSlotY );
	void DropItemInInventory ( int X, int Y );
	void ChangeItemPosStack ( int ItemId, int X, int Y );
	void ChangeItemPos ( int ItemId, int X, int Y );
	void RemoveItemIconFromCursor ( );
	void AddItemIconToCursor ( int ItemId, unsigned long itemIsStackable );
	void AddItemToCursor ( int ItemId );
};



// Class MMH7Game.H7InstantCommandEndturn ( Property size: 1 iter: 6) 
// Class name index: 44384 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandEndturn : public UH7InstantCommandBase
{
public:
	class AH7Player*                                   mPlayer;                                          		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56008 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Player* Player );
};



// Class MMH7Game.H7InstantCommandDoCombat ( Property size: 5 iter: 15) 
// Class name index: 44382 
// 0x001C (0x007C - 0x0060)
class UH7InstantCommandDoCombat : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mAttackingHero;                                   		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mDefendingHero;                                   		// 0x0068 (0x0008) [0x0000000000000000]              
	class AH7VisitableSite*                            mSite;                                            		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsQuickCombat : 1;                               		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsReplay : 1;                                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56059 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void StartCombatMap ( );
	void ShowStartingGUI ( );
	void Show2SecondsGUI ( );
	void Show1SecondGUI ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* attackingHero, class AH7AdventureHero* defendingHero, unsigned long isQuickCombat, unsigned long IsReplay, class AH7VisitableSite* Site );
	bool isQuickCombat ( );
};



// Class MMH7Game.H7InstantCommandLetEnemyFlee ( Property size: 2 iter: 7) 
// Class name index: 44394 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandLetEnemyFlee : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mRemoveThisArmy;                                  		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mRemover;                                         		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56062 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* removeThis, class AH7AdventureArmy* remover );
};



// Class MMH7Game.H7AdventureCursor ( Property size: 1 iter: 6) 
// Class name index: 43756 
// 0x0004 (0x0064 - 0x0060)
class UH7AdventureCursor : public UObject
{
public:
	unsigned long                                      mDrag : 1;                                        		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56122 ];

		return pClassPointer;
	};

	void UpdateAdventureCursorWithWarfareUnit ( class AH7EditorWarUnit* Unit );
	void UpdateAdventureCursorWithStack ( class UH7BaseCreatureStack* Stack );
	void UpdateAdventureCursorWithSpell ( class UH7BaseAbility* spell );
	void UpdateAdventureCursorWithItem ( class UH7HeroItem* Item );
	void SetCursor ( unsigned char cursorType );
};



// Class MMH7Game.H7AiAdventureSensors ( Property size: 6 iter: 17) 
// Class name index: 43810 
// 0x003C (0x009C - 0x0060)
class UH7AiAdventureSensors : public UH7AiSensorBase
{
public:
	TArray< class UH7AiSensorBase* >                   mSensors;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7AiSensorInputConst*                       mConsts;                                          		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned char                                      mConstSelect[ 0x2 ];                              		// 0x0078 (0x0002) [0x0000000000000000]              
	int                                                mConstIter[ 0x2 ];                                		// 0x007C (0x0008) [0x0000000000000000]              
	int                                                mConstLength[ 0x2 ];                              		// 0x0084 (0x0008) [0x0000000000000000]              
	class UH7AiSensorParam*                            mParam[ 0x2 ];                                    		// 0x008C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56123 ];

		return pClassPointer;
	};

	void Setup ( );
	bool CallNext ( );
	void CallBegin ( unsigned char sic0, unsigned char sic1 );
	float CallSensor ( unsigned char sensor );
	void ResetCalc ( );
	void ResetConsts ( );
	void UpdateConsts ( unsigned long isTown );
	class UH7AiSensorInputConst* GetSensorIConsts ( );
	class UH7AiSensorParam* GetParam1 ( );
	class UH7AiSensorParam* GetParam0 ( );
	class UH7AiSensorBase* GetSensor ( unsigned char sensor );
};



// Class MMH7Game.H7DialogCntl ( Property size: 13 iter: 56) 
// Class name index: 44187 
// 0x0068 (0x02B0 - 0x0248)
class UH7DialogCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxDialog*                                mDialog;                                          		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxCouncilDialog*                         mCouncilDialog;                                   		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7GFxNarrationDialog*                       mNarrationDialog;                                 		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mNarrationTop;                                    		// 0x0260 (0x0008) [0x0000000000000000]              
	class UH7GFxMapControls*                           mMapControls;                                     		// 0x0268 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mSubtitle;                                        		// 0x0270 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mPopUpCustomDifficulty;                           		// 0x0278 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mCurrentDialog;                                   		// 0x0280 (0x0008) [0x0000000000000000]              
	class UH7SeqAct_BaseDialogue*                      mNode;                                            		// 0x0288 (0x0008) [0x0000000000000000]              
	class UH7CampaignDefinition*                       mSelectedCampaign;                                		// 0x0290 (0x0008) [0x0000000000000000]              
	struct FString                                     mSelectedMap;                                     		// 0x0298 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mSelectedPrevOnIndex;                             		// 0x02A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      mCustomDifficultyVisible : 1;                     		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56132 ];

		return pClassPointer;
	};

	void HideSubtitle ( );
	void ShowSubtitle ( struct FString Text );
	void SetMapPixel ( struct FString Map, int pixel );
	void SetDifficulty ( int Index, int Value );
	void SetCustomDifficulty ( struct FString enumName, int Value );
	TArray< struct FH7DropDownEntry > GetEnumList ( struct FString enumName );
	bool IsInAdvMap ( );
	struct FString GetActionCaptionForMap ( struct FString MapFilename );
	void StartCurrentContext ( );
	void HideMapGUI ( );
	void CloseCustomDifficulty ( );
	bool IsCustomDifficultyVisible ( );
	void SetCustomDifficultyVisible ( unsigned long Visible );
	void DisplayDifficulty ( );
	void DisplayPrevOn ( class AH7EditorHero* speaker, TArray< int > storyPoints, struct FString MapFilename, int displayedPoint );
	struct FString GetFailSaveMapDescription ( struct FString MapFilename, int* descriptionFailed );
	bool IsDialogInProgress ( );
	void ShowMapGUI ( class UH7CampaignDefinition* selectedCampaign, struct FString MapFilename, int prevOnIndex );
	void InitMapGUI ( );
	void DisplayMap ( struct FString MapFilename );
	void SelectMap ( struct FString MapFilename );
	void SelectCampaign ( struct FString campaignAID );
	void OpenPopupSpecific ( class UH7GFxUIContainer* Element, unsigned long blockLayer, unsigned long blockInput );
	void SetNode ( class UH7SeqAct_BaseDialogue* Node );
	void Closed ( );
	void ClosePopup ( );
	void Play ( );
	void Stop ( );
	void GoForward ( );
	void GoBack ( );
	bool GetCurrentAutoPlay ( );
	void InitWindowKeyBinds ( );
	bool Initialize ( );
	class UH7CampaignDefinition* GetSelectedCampaign ( );
	void SetVisible ( unsigned long Visible );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxUIContainer* GetSubtitle ( );
	class UH7GFxMapControls* GetMapControls ( );
	class UH7GFxUIContainer* GetNarrationTop ( );
	class UH7GFxNarrationDialog* GetNarrationDialog ( );
	class UH7GFxCouncilDialog* GetCouncilDialog ( );
	class UH7GFxDialog* GetDialog ( );
	class UH7DialogCntl* GetInstance ( );
};



// Class MMH7Game.H7CheatWindowCntl ( Property size: 25 iter: 68) 
// Class name index: 44115 
// 0x00D0 (0x0318 - 0x0248)
class UH7CheatWindowCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	struct FString                                     mCurrentMap;                                      		// 0x0248 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7GFxCheatWindow*                           mCheatWindow;                                     		// 0x0258 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mTeleportButton;                                  		// 0x0260 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mCLoseButton;                                     		// 0x0268 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnWin;                                          		// 0x0270 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnLose;                                         		// 0x0278 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mHeroStatsCheat;                                  		// 0x0280 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat1;                                     		// 0x0288 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat1;                                     		// 0x0290 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat2;                                     		// 0x0298 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat2;                                     		// 0x02A0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat3;                                     		// 0x02A8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat3;                                     		// 0x02B0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat4;                                     		// 0x02B8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat4;                                     		// 0x02C0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat5;                                     		// 0x02C8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat5;                                     		// 0x02D0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat6;                                     		// 0x02D8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat6;                                     		// 0x02E0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat7;                                     		// 0x02E8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat7;                                     		// 0x02F0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat8;                                     		// 0x02F8 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat8;                                     		// 0x0300 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnIncStat9;                                     		// 0x0308 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnDecStat9;                                     		// 0x0310 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56652 ];

		return pClassPointer;
	};

	bool OpenPopup ( );
	void SkillOverwrite ( int oldSkillID, struct FString newSkillAID );
	void AbilityUp ( int SkillID, struct FString abilityID );
	void SkillUp ( int SkillID );
	void BuildAllBuildings ( );
	void AddResources ( int addAmount );
	void TurnOverPopup ( unsigned long IsSelected );
	void UnlimitedBuilding ( unsigned long IsSelected );
	void UnlimitedMana ( unsigned long IsSelected );
	void UnlimitedMovement ( unsigned long IsSelected );
	void AddXp ( int XP );
	void ToggleFogOfWar ( unsigned long B );
	bool TeleportHero ( class AH7AdventureHero* currentHero, class UH7AdventureMapCell* cell );
	void Teleport ( struct FVector vec );
	void TeleportButtonClick ( struct FEventData Data );
	void BtnDecLuckClicked ( struct FEventData Data );
	void BtnIncLuckClicked ( struct FEventData Data );
	void BtnDecMoveClicked ( struct FEventData Data );
	void BtnIncMoveClicked ( struct FEventData Data );
	void BtnDecIniClicked ( struct FEventData Data );
	void BtnIncIniClicked ( struct FEventData Data );
	void BtnDecMoralClicked ( struct FEventData Data );
	void BtnIncMoralClicked ( struct FEventData Data );
	void BtnDecDmgClicked ( struct FEventData Data );
	void BtnIncDmgClicked ( struct FEventData Data );
	void BtnDecDefClicked ( struct FEventData Data );
	void BtnIncDefClicked ( struct FEventData Data );
	void BtnDecSpiritClicked ( struct FEventData Data );
	void BtnIncSpiritClicked ( struct FEventData Data );
	void BtnDecMagicClicked ( struct FEventData Data );
	void BtnIncMagicClicked ( struct FEventData Data );
	void BtnDecAttClicked ( struct FEventData Data );
	void BtnIncAttClicked ( struct FEventData Data );
	void ChangeStat ( unsigned char Stat, int incValue );
	void BtnLoseClicked ( struct FEventData Data );
	void BtnWinClicked ( struct FEventData Data );
	void Closed ( );
	void ClosePopup ( );
	void SetData ( struct FString Map );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxCheatWindow* GetCheatWindow ( );
};



// Class MMH7Game.H7BasePathPreviewer ( Property size: 2 iter: 4) 
// Class name index: 44097 
// 0x0020 (0x0260 - 0x0240)
class AH7BasePathPreviewer : public AActor
{
public:
	TArray< class AH7PathDot* >                        mUnusedDots;                                      		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7PathDot* >                        mUsedDots;                                        		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56674 ];

		return pClassPointer;
	};

	void HidePreview ( );
};



// Class MMH7Game.H7AdventureMapPathPreviewer ( Property size: 1 iter: 21) 
// Class name index: 43761 
// 0x0008 (0x0268 - 0x0260)
class AH7AdventureMapPathPreviewer : public AH7BasePathPreviewer
{
public:
	class AH7PathDot*                                  mHoverDot;                                        		// 0x0260 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56673 ];

		return pClassPointer;
	};

	bool IsHoverDotInactive ( );
	void RemoveHoverDot ( );
	void SetHoverDot ( class UH7AdventureMapCell* cell, unsigned char Action );
	void UpdatePreview ( );
	class AH7PathDot* SpawnDotAt ( struct FString materialName, struct FLinearColor Col, struct FVector Loc, struct FRotator Rot, int Width, int Height, struct FString TextureName );
	void InitDot ( class AH7PathDot* Dot, struct FString materialName, struct FLinearColor Col, struct FVector Loc, struct FRotator Rot, int Width, int Height, struct FString TextureName, unsigned long lookAtView, unsigned long isWater );
	void MakeDotAt ( struct FString materialName, struct FLinearColor Col, struct FVector Loc, struct FRotator Rot, int Width, int Height, struct FString TextureName, unsigned long lookAtView, unsigned long isWater );
	void ShowPreview ( TArray< class UH7AdventureMapCell* > Path, int numOfWalkableCells, int currentMovePoints, int maxMovePoints, TArray< float > pathCosts, int conflictCellIndex );
};



// Class MMH7Game.SaveGameState ( Property size: 10 iter: 24) 
// Class name index: 54630 
// 0x00A0 (0x0100 - 0x0060)
class USaveGameState : public UObject
{
public:
	struct FString                                     PersistentMapFileName;                            		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameInfoClassName;                                		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           StreamingMapFileNames;                            		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           SerializedWorldData;                              		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mSaveGameInfoJSON;                                		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDeserializeData >                  mActorsToDeserializeReferences;                   		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKismetDeserializeData >            mKismetObjectsToDeserialize;                      		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7AdventureHero* >                  mHeroes;                                          		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Player* >                         mPlayers;                                         		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mVisitableSites;                                  		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57185 ];

		return pClassPointer;
	};

	class AH7VisitableSite* GetVisitableSite ( int siteId );
	class AH7Player* GetPlayerByNumber ( unsigned char PlayerNumber );
	class AH7AdventureArmy* GetArmyByHeroID ( int heroId );
	void ClearActorArrays ( );
	void InitActorArrays ( );
	void LoadMatineeState ( struct FString ObjectName, class UJsonObject* Data );
	bool IsKismetObjectName ( struct FString ObjectName );
	class AActor* GetActorArchetypeFromName ( struct FString ObjectArchetypeName );
	void LoadGameState ( class AH7AdventureController* adventureController, class AH7ScriptingController* scriptController );
	void SerializeMatineeState ( );
	void SerializeEverything ( );
};



// Class MMH7Game.H7StatIcons ( Property size: 21 iter: 32) 
// Class name index: 44687 
// 0x00A8 (0x0108 - 0x0060)
class UH7StatIcons : public UObject
{
public:
	class UTexture2D*                                  mAttack;                                          		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMagic;                                           		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSpirit;                                          		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDefense;                                         		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMoral;                                           		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLuck;                                            		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDestiny;                                         		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLeadership;                                      		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mArcaneKnowledge;                                 		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMovementPoints;                                  		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mInitiative;                                      		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mRange;                                           		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMana;                                            		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mHealth;                                          		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mExpRate;                                         		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mExp;                                             		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mWalk;                                            		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFly;                                             		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mTeleport;                                        		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mGhostwalk;                                       		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mStatic;                                          		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57226 ];

		return pClassPointer;
	};

	struct FString GetLeadershipIconString ( );
	struct FString GetMoralIconString ( );
	struct FString GetDestinyIconString ( );
	struct FString GetLuckIconString ( );
	struct FString GetMovementIconString ( unsigned char Type );
	struct FString GetStatIconPathHTML ( unsigned char Stat, class AH7Unit* Unit );
	struct FString GetStatIconPath ( unsigned char Stat, class AH7Unit* Unit );
	class UTexture2D* GetStatIconByStr ( struct FString Stat );
	class UTexture2D* GetStatIcon ( unsigned char Stat, class AH7Unit* Unit );
	class UH7StatIcons* GetInstanceForText ( );
	class UH7StatIcons* GetInstance ( );
};



// Class MMH7Game.H7Wave ( Property size: 11 iter: 20) 
// Class name index: 44767 
// 0x007C (0x02BC - 0x0240)
class AH7Wave : public AActor
{
public:
	float                                              mMovementSpeed;                                   		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    mProjectileFX;                                    		// 0x0244 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     mStartPos;                                        		// 0x024C (0x000C) [0x0000000000000000]              
	struct FVector                                     mTargetPos;                                       		// 0x0258 (0x000C) [0x0000000000000000]              
	struct FVector                                     mMovementDir;                                     		// 0x0264 (0x000C) [0x0000000000000000]              
	TArray< class UH7IEffectTargetable* >              mAffectedTargets;                                 		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IEffectTargetable* >              mHitTargets;                                      		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapCell*                            mPosCell;                                         		// 0x0290 (0x0008) [0x0000000000000000]              
	unsigned long                                      mFinished : 1;                                    		// 0x0298 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __OnHitFunc__Delegate;                            		// 0x029C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnNextColum__Delegate;                          		// 0x02AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x02B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57238 ];

		return pClassPointer;
	};

	void FinishParticleFX ( );
	void Finish ( );
	void CheckHit ( class UH7IEffectTargetable* Target );
	void MoveCasualties ( struct FVector Dir );
	void Update ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void InitWave ( struct FVector StartPos, struct FVector targetPos, TArray< class UH7IEffectTargetable* > affectedTargets, struct FScriptDelegate onHitExternal, struct FScriptDelegate onNextCol );
	void OnNextColum ( TArray< class UH7CombatMapCell* > Cells );
	void OnHitFunc ( class UH7IEffectTargetable* Unit );
};



// Class MMH7Game.H7HeroProgress ( Property size: 6 iter: 13) 
// Class name index: 44353 
// 0x0174 (0x01D4 - 0x0060)
class UH7HeroProgress : public UObject
{
public:
	int                                                mXpTable[ 0x1E ];                                 		// 0x0060 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	int                                                mStatIncrease;                                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinDamageInc[ 0x1E ];                            		// 0x00DC (0x0078) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxDamageInc[ 0x1E ];                            		// 0x0154 (0x0078) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMinDamageInclvl30;                               		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mMaxDamageInclvl30;                               		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57254 ];

		return pClassPointer;
	};

	void LevelUpHeroStats ( class AH7EditorHero* Hero, int levelDelta );
	int GetMaximumDamageAdd ( int Level );
	int GetMinimumDamageAdd ( int Level );
	int GetTotalXPByLvl ( int Level );
	int GetXPDelta ( int Level );
	int GetXPRange ( int Level, int* lo, int* hi );
	int GetLevel ( int XP );
};



// Class MMH7Game.H7HeroClassProgress ( Property size: 4 iter: 8) 
// Class name index: 44348 
// 0x0010 (0x0070 - 0x0060)
class UH7HeroClassProgress : public UObject
{
public:
	float                                              mStatProbabilityAttack;                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStatProbabilityDefense;                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStatProbabilityMagic;                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mStatProbabilitySpirit;                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57298 ];

		return pClassPointer;
	};

	float GetStatPropabilitySpirit ( );
	float GetStatPropabilityMagic ( );
	float GetStatProbabilityDefense ( );
	float GetStatProbabilityAttack ( );
};



// Class MMH7Game.H7HeroBioData ( Property size: 4 iter: 7) 
// Class name index: 44347 
// 0x0034 (0x0094 - 0x0060)
class UH7HeroBioData : public UObject
{
public:
	struct FString                                     mText;                                            		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mCondition;                                       		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      mStarted : 1;                                     		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     mTextInst;                                        		// 0x0084 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57994 ];

		return pClassPointer;
	};

	struct FString GetText ( );
	bool GetStartedCondition ( );
	struct FString GetCondition ( );
};



// Class MMH7Game.H7AiPatrolController ( Property size: 9 iter: 21) 
// Class name index: 43821 
// 0x0028 (0x0268 - 0x0240)
class AH7AiPatrolController : public AActor
{
public:
	TArray< struct FAiWaypoint >                       mPath;                                            		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mCtrlBeginType;                                   		// 0x0250 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mCtrlEndType;                                     		// 0x0251 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mSensorRange;                                     		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mStopAttackAlways : 1;                            		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mInTransit : 1;                                   		// 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mCurrentNode;                                     		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                mNextNode;                                        		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                mTurnCounter;                                     		// 0x0264 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57995 ];

		return pClassPointer;
	};

	void AdvanceNode ( );
	bool StopAttackAlways ( );
	int GetSensorRange ( );
	bool DecTurns ( );
	void SetTurns ( int val );
	int GetTurns ( );
	void SetTransit ( unsigned long T );
	bool IsTransit ( );
	unsigned char GetEndType ( );
	unsigned char GetBeginType ( );
	struct FAiWaypoint GetNextWaypoint ( );
	struct FAiWaypoint GetCurrentWaypoint ( );
};



// Class MMH7Game.H7MagicSchoolIcons ( Property size: 46 iter: 53) 
// Class name index: 44462 
// 0x0170 (0x01D0 - 0x0060)
class UH7MagicSchoolIcons : public UObject
{
public:
	class UTexture2D*                                  mMight;                                           		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAirMagic;                                        		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDarkMagic;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mEarthMagic;                                      		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFireMagic;                                       		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLightMagic;                                      		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPrimeMagic;                                      		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mWaterMagic;                                      		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mNoneSchool;                                      		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAdventureFilter;                                 		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCombatFilter;                                    		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDamageFilter;                                    		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mUtilityFilter;                                   		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mNoFilter;                                        		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMightBG;                                         		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAirMagicBG;                                      		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDarkMagicBG;                                     		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mEarthMagicBG;                                    		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFireMagicBG;                                     		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLightMagicBG;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPrimeMagicBG;                                    		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mWaterMagicBG;                                    		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMightIcon;                                       		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAirMagicIcon;                                    		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDarkMagicIcon;                                   		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mEarthMagicIcon;                                  		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFireMagicIcon;                                   		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLightMagicIcon;                                  		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPrimeMagicIcon;                                  		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mWaterMagicIcon;                                  		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMightFrameBase;                                  		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMightFrameUpgrade;                               		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAirFrameBase;                                    		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAirFrameUpgrade;                                 		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDarkFrameBase;                                   		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDarkFrameUpgrade;                                		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mEarthFrameBase;                                  		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mEarthFrameUpgrade;                               		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFireFrameBase;                                   		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFireFrameUpgrade;                                		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLightFrameBase;                                  		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLightFrameUpgrade;                               		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPrimeFrameBase;                                  		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPrimeFrameUpgrade;                               		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mWaterFrameBase;                                  		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mWaterFrameUpgrade;                               		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58260 ];

		return pClassPointer;
	};

	class UTexture2D* GetFilterIcon ( struct FString Filter );
	struct FString GetSchoolIconPath ( unsigned char school );
	class UTexture2D* GetSchoolTitleIcon ( unsigned char school );
	class UTexture2D* GetSchoolBG ( unsigned char school );
	class UTexture2D* GetSchoolIconByStr ( struct FString school );
	class UTexture2D* GetSpellFrame ( unsigned char school, unsigned long upgradedVersion );
	class UTexture2D* GetSchoolIcon ( unsigned char school );
};



// Class MMH7Game.H7CouncilMapping ( Property size: 1 iter: 5) 
// Class name index: 44158 
// 0x0010 (0x0250 - 0x0240)
class AH7CouncilMapping : public AActor
{
public:
	TArray< struct FH7CouncilMappingEntry >            mList;                                            		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58382 ];

		return pClassPointer;
	};

	struct FH7CouncilMappingEntry GetEntry ( unsigned char etype );
	struct FString GetName ( unsigned char etype );
	struct FString GetFlashIconPath ( unsigned char etype );
};



// Class MMH7Game.H7ButtonIcons ( Property size: 56 iter: 56) 
// Class name index: 44100 
// 0x01C0 (0x0220 - 0x0060)
class UH7ButtonIcons : public UObject
{
public:
	class UTexture2D*                                  mQuestHeader;                                     		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestFilterAll;                                  		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestFilterPrimary;                              		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestFilterSecondary;                            		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestPrimary;                                    		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestSecondary;                                  		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestTracked;                                    		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestUntracked;                                  		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuestCompleted;                                  		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSpellbook;                                       		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMove;                                            		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mHero;                                            		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSkillwheel;                                      		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mQuest;                                           		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mOptions;                                         		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mKingdom;                                         		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mHeroAttack;                                      		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAutoCombat;                                      		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFlee;                                            		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mTurnEnd;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDestroy;                                         		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mUpgrade;                                         		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mUpgradeGreen;                                    		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCheckActive;                                     		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCheckDone;                                       		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mCheckFailed;                                     		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mUnskilled;                                       		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mNovice;                                          		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mExpert;                                          		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mMaster;                                          		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mRomanFive;                                       		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mBackward;                                        		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mForward;                                         		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPlay;                                            		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mPause;                                           		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mUp;                                              		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDown;                                            		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mLeft;                                            		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mRight;                                           		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mKick;                                            		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSetting;                                         		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFull;                                            		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFriend;                                          		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mRefresh;                                         		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAllHeroes;                                       		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mHuman;                                           		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAI;                                              		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mAttacker;                                        		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mDefender;                                        		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSaveNew;                                         		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSaveAll;                                         		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSaveCampaign;                                    		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSaveCustom;                                      		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSaveHotseat;                                     		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSaveMultiplayer;                                 		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mSaveQuick;                                       		// 0x0218 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58402 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7APRColorMapping ( Property size: 1 iter: 3) 
// Class name index: 44078 
// 0x0010 (0x0250 - 0x0240)
class AH7APRColorMapping : public AActor
{
public:
	TArray< struct FH7APRColorMappingEntry >           mList;                                            		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58494 ];

		return pClassPointer;
	};

	struct FColor GetColor ( unsigned char threat );
};



// Class MMH7Game.H7GFxLog ( Property size: 2 iter: 12) 
// Class name index: 44279 
// 0x000C (0x00B0 - 0x00A4)
class UH7GFxLog : public UH7GFxUIContainer
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mChatOpenedThisFrame : 1;                         		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58886 ];

		return pClassPointer;
	};

	void Update ( );
	void DeactivateChatInput ( );
	void ActivateChatInput ( );
	void SetVisibleSave ( unsigned long val );
	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void ClearLog ( );
	void SetStatus ( unsigned long val );
	void Init ( class UH7Log* Log );
	void ResetChatOpenedThisFrame ( );
	bool WasChatOpenedThisFrame ( );
};



// Class MMH7Game.H7CheatData ( Property size: 2 iter: 8) 
// Class name index: 44113 
// 0x0020 (0x0080 - 0x0060)
class UH7CheatData : public UObject
{
public:
	TArray< struct FSpellListData >                    Spells;                                           		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSkillListData >                    skills;                                           		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58889 ];

		return pClassPointer;
	};

	struct FString GetSkillRefByName ( struct FString skillname );
	struct FString GetSpellRefByName ( struct FString spellName );
	class UH7Skill* GetSkillByName ( struct FString skillname );
	class UH7HeroAbility* GetSpellByName ( struct FString spellName );
	TArray< struct FString > GetSkillNames ( );
	TArray< struct FString > GetSpellNames ( );
};



// Class MMH7Game.H7TextColors ( Property size: 5 iter: 8) 
// Class name index: 44693 
// 0x0028 (0x0088 - 0x0060)
class UH7TextColors : public UObject
{
public:
	struct FColor                                      mTierColors[ 0x6 ];                               		// 0x0060 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      mQuestItemColor;                                  		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      mSetColor;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      mReplacementColor;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      mLogReplacementColor;                             		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58890 ];

		return pClassPointer;
	};

	struct FString UnrealColorToHex ( struct FColor unrealColor );
	struct FString UnrealColorToHTMLColor ( struct FColor unrealColor );
	class UH7TextColors* GetInstance ( );
};



// Class MMH7Game.H7JoinGameMenuCntl ( Property size: 7 iter: 23) 
// Class name index: 44438 
// 0x0034 (0x027C - 0x0248)
class UH7JoinGameMenuCntl : public UH7FlashMoviePopupCntl
{
public:
	class UH7Texture2DStreamLoad*                      mMapThumbnail;                                    		// 0x0248 (0x0008) [0x0000000000000000]              
	struct FString                                     mMapThumbnailPath;                                		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mThumbnailActive : 1;                             		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mNatUpdaterActive : 1;                            		// 0x0260 (0x0004) [0x0000000000000000] [0x00000002] 
	class UH7GFxJoinGameMenu*                          mJoinGameMenu;                                    		// 0x0264 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mButtonRefresh;                                   		// 0x026C (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mButtonClose;                                     		// 0x0274 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59215 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	void updateThumbnail ( );
	void GameClicked ( struct FString MapFilename );
	struct FString GetMapType ( struct FString MapFilename );
	struct FString GetMapSize ( struct FString MapFilename );
	void SetActive ( unsigned long Visible, unsigned long IsLAN, unsigned long IsDuel );
	void RefreshGameList ( );
	void JoinGame ( struct FString ServerName, int Index );
	void UpdateNatDisplay ( );
	void RegisterNatUpdater ( unsigned long Register );
	void InitializeBrowserList ( TArray< struct FOnlineGameSearchResult > SearchResults );
	bool Initialize ( );
	class UH7JoinGameMenuCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxJoinGameMenu* GetLobbyList ( );
};



// Class MMH7Game.H7GFxFlashController ( Property size: 1 iter: 13) 
// Class name index: 44260 
// 0x0004 (0x00B4 - 0x00B0)
class UH7GFxFlashController : public UGFxClikWidget
{
public:
	unsigned long                                      mIsShowingBlocklayer : 1;                         		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59220 ];

		return pClassPointer;
	};

	void DeleteAllHighlights ( );
	void HighlightElement ( struct FString containerName, struct FString ElementName, struct FString Text, int Asset );
	void CleanMovie ( );
	void DumpTweens ( );
	void LoseFocusOnInput ( );
	int TriggerKeyboardEvent ( unsigned long Down, int keycode, int flashCharCode, unsigned long Shift, unsigned long Control, unsigned long Alt );
	void SetConstraints ( int MinX, int MinY, int MaxX, int MaxY );
	void RightMouseDown ( );
	void FreeEntireFlashMovie ( );
	void BlockEntireFlashMovie ( unsigned long showBlockLayer );
	int IsInputFocus ( );
	bool IsShowingBlockLayer ( );
};



// Class MMH7Game.H7MouseCntl ( Property size: 1 iter: 4) 
// Class name index: 44492 
// 0x0008 (0x0228 - 0x0220)
class UH7MouseCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxMouse*                                 mMouse;                                           		// 0x0220 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59223 ];

		return pClassPointer;
	};

	void SetMouse ( );
	bool Initialize ( );
	class UH7GFxMouse* GetMouse ( );
};



// Class MMH7Game.H7GFxMouse ( Property size: 0 iter: 6) 
// Class name index: 44291 
// 0x0000 (0x00A0 - 0x00A0)
class UH7GFxMouse : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59226 ];

		return pClassPointer;
	};

	int UnLoadObject ( );
	void LoadObject ( struct FString cursorPath, float cursorRotation, int OffsetX, int OffsetY, int SizeX, int SizeY );
	void LoadObjectTexture ( class UTexture2D* Object, struct FRotator Rot, int OffsetX, int OffsetY, int SizeX, int SizeY );
	void UnLoadCursor ( );
	void LoadCursor ( struct FString cursorPath, float cursorRotation, float OffsetX, float OffsetY );
	void LoadCursorTexture ( class UTexture2D* cursor, struct FRotator Rot, float OffsetX, float OffsetY );
};



// Class MMH7Game.H7SeqEvent_PathSet ( Property size: 0 iter: 2) 
// Class name index: 44644 
// 0x0000 (0x019C - 0x019C)
class UH7SeqEvent_PathSet : public UH7SeqEvent_PlayerEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59229 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7SeqEvent_PopupChange ( Property size: 1 iter: 3) 
// Class name index: 44647 
// 0x0010 (0x01AC - 0x019C)
class UH7SeqEvent_PopupChange : public UH7SeqEvent_PlayerEvent
{
public:
	struct FString                                     mPopupName;                                       		// 0x019C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59231 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7BackgroundImageCntl ( Property size: 2 iter: 6) 
// Class name index: 44094 
// 0x0010 (0x0230 - 0x0220)
class UH7BackgroundImageCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxBackgroundImage*                       mBackgroundImage;                                 		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7BackgroundImageProperties*                mBackgroundImageProperties;                       		// 0x0228 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59258 ];

		return pClassPointer;
	};

	void UnloadBackground ( );
	void LoadBackground ( class UTexture2D* background, int FadeInTime, int fadeInDelay, struct FString screenText );
	bool Initialize ( );
	class UH7BackgroundImageCntl* GetInstance ( );
};



// Class MMH7Game.H7CouncilManager ( Property size: 21 iter: 63) 
// Class name index: 44156 
// 0x01A0 (0x03E0 - 0x0240)
class AH7CouncilManager : public AActor
{
public:
	TArray< struct FCouncillorData >                   mCouncilMembers;                                  		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCouncilTable                               mCouncilTable;                                    		// 0x0250 (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UH7MatineeManager*                           mMatineeManager;                                  		// 0x0270 (0x0008) [0x0000000000000000]              
	class AH7CouncilGameInfo*                          mCouncilGameInfo;                                 		// 0x0278 (0x0008) [0x0000000000000000]              
	class AH7CouncilMapManager*                        mMapManager;                                      		// 0x0280 (0x0008) [0x0000000000000000]              
	unsigned char                                      mPreviousCouncilState;                            		// 0x0288 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCurrentCouncilState;                             		// 0x0289 (0x0001) [0x0000000000000000]              
	unsigned char                                      mOverrideCouncilState;                            		// 0x028A (0x0001) [0x0000000000000000]              
	struct FCouncillorData                             mCurrentConcillor;                                		// 0x028C (0x0084) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      mLastActorUnderMouse;                             		// 0x0310 (0x0008) [0x0000000000000000]              
	struct FCouncillorData                             mLastConcillorUnderMouse;                         		// 0x0318 (0x0084) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mWaitingForStateChange : 1;                       		// 0x039C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mShouldReverse : 1;                               		// 0x039C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mStateHasFirstTick : 1;                           		// 0x039C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mStateHasLastTick : 1;                            		// 0x039C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mOverrideTransitionMatinee : 1;                   		// 0x039C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      mShouldPlayerProgressMatinee : 1;                 		// 0x039C (0x0004) [0x0000000000000000] [0x00000020] 
	struct FString                                     mOverrideMatineeName;                             		// 0x03A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mIntroMatinee;                                    		// 0x03B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     mFirstIntroMatinee;                               		// 0x03C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           mProgressMatinees;                                		// 0x03D0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59267 ];

		return pClassPointer;
	};

	void HandleSelectionEffect ( class AActor* affectedActor, unsigned long enableEffect );
	struct FCouncillorData GetCouncilorUnderMouse ( );
	void SwitchLayerForCouncil ( struct FName LayerName, unsigned long showLayer );
	void DisableHUD ( );
	void EnableHUD ( );
	void SetGUIState ( unsigned char State, unsigned long entering );
	void TransitionBack ( );
	bool IsTransitioningDown ( );
	int GetCouncilStateLayer ( unsigned char TestState );
	struct FName DetermineNextState ( );
	struct FVector GetCenterOfBB ( class AActor* TestActor );
	bool HasStateChanged ( );
	void StartFirstMapOfCurrentCampaign ( );
	class UH7CampaignDefinition* GetCurrentCampaign ( );
	void OnEnterCouncil ( );
	bool CheckIfActorIsCouncillor ( class AActor* TestActor, struct FCouncillorData* councillorInfo );
	bool CheckIfActorIsATable ( class AActor* TestActor );
	void eventTick ( float DeltaTime );
	void PostBeginPlay ( );
	class AH7Camera* GetCouncilCamera ( );
	void OverrideCouncilStartState ( unsigned char NewState );
	void OverrideNextTransition ( struct FString newMatineeName );
	void SetCurrentCouncillorInfo ( struct FCouncillorData newInfo );
	struct FCouncillorData GetCurrentCouncillorInfo ( );
	class UH7CampaignDefinition* GetCurrentCouncillorCampaign ( );
	void SetCouncilState ( unsigned char NewState, unsigned long isReversing, unsigned long forceRestartState );
	unsigned char GetCouncilState ( );
	TArray< struct FCouncillorData > GetCouncilMemeber ( );
	int GetProgressMatineesLength ( );
	TArray< struct FString > GetProgressMatinees ( );
	struct FString GetFirstIntroMatinee ( );
	struct FString GetIntroMatinee ( );
	bool WaitingForStateChange ( );
	void SetMapManager ( class AH7CouncilMapManager* newMapManager );
	class AH7CouncilMapManager* GetMapManager ( );
	class UH7MatineeManager* GetMatineeManager ( );
	class AH7CouncilManager* GetInstance ( );
};



// Class MMH7Game.H7BackgroundImageProperties ( Property size: 13 iter: 13) 
// Class name index: 44095 
// 0x0050 (0x00B0 - 0x0060)
class UH7BackgroundImageProperties : public UObject
{
public:
	class UTexture2D*                                  DefeatBG_Wide;                                    		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  VictoryBG_Wide;                                   		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DefeatBG_4x3;                                     		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  VictoryBG_4x3;                                    		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  MainMenuImage;                                    		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  FallbackScreenshot;                               		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  SpecatortHUDImage;                                		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fadeInDelayOnFleeSurrender;                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fadeInTimeOnFleeSurrender;                        		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fadeInDelayOnWin;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fadeInDelayOnLose;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fadeInTimeOnWin;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fadeInTimeOnLose;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59273 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7MainMenuCntl ( Property size: 14 iter: 67) 
// Class name index: 44463 
// 0x0060 (0x0280 - 0x0220)
class UH7MainMenuCntl : public UH7FlashMovieCntl
{
public:
	class UH7GfxMainMenu*                              mMainMenu;                                        		// 0x0220 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mSPMenu;                                          		// 0x0228 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mMPMenu;                                          		// 0x0230 (0x0008) [0x0000000000000000]              
	class UH7GFxCouncilorTooltip*                      mCouncilorTooltip;                                		// 0x0238 (0x0008) [0x0000000000000000]              
	class UH7GFxCouncilorWindow*                       mCouncilorWindow;                                 		// 0x0240 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mBackButton;                                      		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mPopUpCustomDifficulty;                           		// 0x0250 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnOptions;                                      		// 0x0258 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnQuit;                                         		// 0x0260 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              mBtnFeedback;                                     		// 0x0268 (0x0008) [0x0000000000000000]              
	class AH7CouncilManager*                           mCouncilManager;                                  		// 0x0270 (0x0008) [0x0000000000000000]              
	unsigned long                                      mTrailerStarted : 1;                              		// 0x0278 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mCustomDifficultyVisible : 1;                     		// 0x0278 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mPendingVideoNr;                                  		// 0x027C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59277 ];

		return pClassPointer;
	};

	void PlayTutorialVideoConfirm ( );
	void PlayTutorialVideo ( int videoNr );
	void StartTutorialMap ( );
	void StartDuel ( int Map, unsigned long vsAI );
	void DisplayDifficulty ( );
	void SetDifficulty ( int Index, int Value );
	void SetCustomDifficulty ( struct FString enumName, int Value );
	void CouncilorWindowClosed ( );
	void InitCouncilorWindow ( class UH7CampaignDefinition* CAMPAIGN, unsigned long standAloneMode );
	class UH7CampaignDefinition* GetMenuSelectedCampaign ( );
	void ResetConfirm ( );
	void Reset ( );
	void StartCampaign ( );
	void RestartCurrentCampaignMap ( );
	void GoBack ( );
	TArray< struct FH7DropDownEntry > GetEnumList ( struct FString enumName );
	void CloseCustomDifficulty ( );
	bool IsCustomDifficultyVisible ( );
	void SetCustomDifficultyVisible ( unsigned long Visible );
	void PlayTrailer ( );
	void Redeem ( );
	void EndCredits ( );
	void StartCredits ( );
	void Uplay ( );
	void Heropedia ( );
	void MPDuelCreateINET ( );
	void MPDuelCreateLAN ( );
	void MPDuelJoinINET ( );
	void MPDuelJoinLAN ( );
	void MPJoinINET ( );
	void MPJoinLAN ( );
	void MPCreateINET ( );
	void MPCreateLAN ( );
	bool CheckConnection ( );
	void MPLoad ( );
	void StartLostTales2 ( );
	void StartLostTales ( );
	void SPLoad ( );
	void StartSPDuel ( unsigned long HOTSEAT );
	void StartSPCustom ( unsigned long HOTSEAT );
	void Load ( );
	void QuitConfirm ( );
	void QuitGame ( );
	void Options ( struct FEventData Data );
	void StartCampaigns ( );
	void ContinueCampaign ( );
	void UpdateContinueButton ( );
	bool Initialize ( );
	void SetTrailerStarted ( unsigned long val );
	class UH7GFxUIContainer* GetBackButton ( );
	class UH7GFxCouncilorWindow* GetCouncilorWindow ( );
	class UH7GFxCouncilorTooltip* GetCouncilorTooltip ( );
	class UH7GfxMainMenu* GetMainMenu ( );
};



// Class MMH7Game.H7LoadingScreenCntl ( Property size: 1 iter: 6) 
// Class name index: 44450 
// 0x0008 (0x0228 - 0x0220)
class UH7LoadingScreenCntl : public UH7FlashMovieCntl
{
public:
	class UH7GFxLoadingScreen*                         mLoadingScreen;                                   		// 0x0220 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59308 ];

		return pClassPointer;
	};

	struct FString getImageString ( );
	void Hide ( );
	void show ( struct FString imgPath );
	bool Initialize ( );
	class UH7GFxLoadingScreen* GetLoadingScreen ( );
};



// Class MMH7Game.H7CombatMapStatusBarController ( Property size: 1 iter: 10) 
// Class name index: 44129 
// 0x0010 (0x0250 - 0x0240)
class AH7CombatMapStatusBarController : public AActor
{
public:
	TArray< struct FBar >                              mActiveBars;                                      		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59362 ];

		return pClassPointer;
	};

	void DeleteAllBars ( );
	void removeBar ( class AH7Unit* Unit );
	struct FVector2D UnitProject ( class UCanvas* myCanvas, class AH7Unit* Unit );
	void Update ( class UCanvas* Canvas );
	struct FIntPoint ScreenOffest ( class AH7CreatureStack* Stack );
	void CreateHealthBar ( class AH7Unit* Unit, int Percent );
	void CreateManaBar ( class AH7Unit* Unit, int Percent );
	void PostBeginPlay ( );
	class AH7CombatMapStatusBarController* GetInstance ( );
};



// Class MMH7Game.H7CreatureStackPlateController ( Property size: 2 iter: 11) 
// Class name index: 44176 
// 0x0014 (0x0254 - 0x0240)
class AH7CreatureStackPlateController : public AActor
{
public:
	TArray< struct FPlate >                            mActivePlates;                                    		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mOldStatusBarVisible : 1;                         		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59365 ];

		return pClassPointer;
	};

	void Hide ( );
	void DeleteAllStackPlates ( );
	void removePlate ( class AH7Unit* Unit );
	struct FVector2D UnitProject ( class UCanvas* myCanvas, class AH7Unit* Unit );
	unsigned char ScreenOffest ( class AH7CreatureStack* Stack );
	void Update ( class UCanvas* Canvas );
	void CreatePlate ( class AH7CreatureStack* Stack );
	void PostBeginPlay ( );
	class AH7CreatureStackPlateController* GetInstance ( );
};



// Class MMH7Game.H7CombatMapTestCntl ( Property size: 0 iter: 1) 
// Class name index: 44130 
// 0x0000 (0x0220 - 0x0220)
class UH7CombatMapTestCntl : public UH7FlashMovieCntl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59370 ];

		return pClassPointer;
	};

	bool Initialize ( );
};



// Class MMH7Game.H7TreasureHuntCntl ( Property size: 4 iter: 14) 
// Class name index: 44747 
// 0x001C (0x0264 - 0x0248)
class UH7TreasureHuntCntl : public UH7FlashMoviePopupCntl
{
public:
	class UH7GFxTreasureHunt*                          mTreasureHuntWindow;                              		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7HeroEventParam*                           mParams;                                          		// 0x0250 (0x0008) [0x0000000000000000]              
	class AActor*                                      mInstigator;                                      		// 0x0258 (0x0008) [0x0000000000000000]              
	unsigned long                                      mFadeWhenOpening : 1;                             		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59462 ];

		return pClassPointer;
	};

	void TriggerQueuedEvent ( );
	void TriggerWhenClosed ( class UH7HeroEventParam* Params, class AActor* Instigator );
	void SetRealmButton ( unsigned long val );
	void ClosePopup ( );
	bool OpenPopup ( );
	void OpenPopupWithFade ( );
	bool Initialize ( );
	class UH7TreasureHuntCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxTreasureHunt* GetTreasureHuntPopup ( );
};



// Class MMH7Game.H7GFxTreasureHunt ( Property size: 7 iter: 18) 
// Class name index: 44328 
// 0x002C (0x00D0 - 0x00A4)
class UH7GFxTreasureHunt : public UH7GFxUIContainer
{
public:
	class UTextureRenderTarget2D*                      mMap;                                             		// 0x00A4 (0x0008) [0x0000000000000000]              
	class USceneCapture2DComponent*                    mCaptureComponent;                                		// 0x00AC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class AActor* >                            mHiddenActors;                                    		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mPiecesOnPrevVisit;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              mSavedBufferRatio;                                		// 0x00C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      mSavedBufferActive : 1;                           		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsFilming : 1;                                   		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59467 ];

		return pClassPointer;
	};

	void ShowStuff ( );
	void HideStuff ( );
	void UnlockMiniMapFrustum ( );
	void StopVideo ( );
	void StartVideo ( );
	void RemoveBlack ( );
	void CreateMap ( unsigned long fadeWhenOpening );
	void Update ( unsigned long fadeWhenOpening );
	bool IsMapReady ( );
	bool IsFilming ( );
};



// Class MMH7Game.H7HeroWindowCntl ( Property size: 7 iter: 28) 
// Class name index: 44358 
// 0x0030 (0x029C - 0x026C)
class UH7HeroWindowCntl : public UH7ItemSlotMovieCntl
{
public:
	class UH7GFxHeroWindow*                            mHeroWindow;                                      		// 0x026C (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mArmyRow;                                         		// 0x0274 (0x0008) [0x0000000000000000]              
	class UH7GFxWarfareUnitRow*                        mWarfareUnitRow;                                  		// 0x027C (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mHeroInfo;                                        		// 0x0284 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mCurrentArmy;                                     		// 0x028C (0x0008) [0x0000000000000000]              
	int                                                mHeroIDToDismiss;                                 		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                mCreatureIndexToDismiss;                          		// 0x0298 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59470 ];

		return pClassPointer;
	};

	void UnequipItem ( int dropSlotX, int dropSlotY );
	bool EquipItem ( );
	void MergeItemsInInventory ( int itemIDinDropSlot, int dragSlotX, int dragSlotY, int dropSlotX, int dropSlotY );
	void DropItemInInventory ( int X, int Y );
	void AddUnitIconToCursor ( int slotID );
	void GetStatModSourceList ( struct FString statStr, int unrealID );
	void RemoveUnitFromCursor ( );
	void DismissDenied ( );
	void DismissConfirm ( );
	void DismissStack ( int unitIndex, int armyIndex );
	void CompleteTransfer ( unsigned long Success, int ToIndex );
	void RequestTransfer ( int fromArmy, int fromIndex, int toArmy, int ToIndex, int splitAmount );
	void ClosePopup ( );
	void Closed ( );
	void dismissHero ( );
	void btnDismissHeroClicked ( int heroId );
	void HeroClick ( int Id );
	void Update ( int heroId );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxHeroWindow* GetHeroWindow ( );
};



// Class MMH7Game.H7QuestLogCntl ( Property size: 1 iter: 12) 
// Class name index: 44536 
// 0x0008 (0x0250 - 0x0248)
class UH7QuestLogCntl : public UH7FlashMoviePopupCntl
{
public:
	class UH7GFxQuestLog*                              mQuestLog;                                        		// 0x0248 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59475 ];

		return pClassPointer;
	};

	void Closed ( );
	void QuestSelected ( struct FString questID );
	void ClosePopup ( );
	void TrackOnMinimap ( struct FString questID, unsigned long tracked );
	void SetMinimapDummyBounds ( float dummyX, float dummyY, float dummyWidth, float dummyHeight );
	bool OpenPopupWithPreselect ( class UH7SeqAct_Quest_NewNode* quest );
	bool OpenPopup ( );
	bool Initialize ( );
	class UH7QuestLogCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxQuestLog* GetQuestLog ( );
};



// Class MMH7Game.H7SkillwheelCntl ( Property size: 7 iter: 26) 
// Class name index: 44666 
// 0x0034 (0x027C - 0x0248)
class UH7SkillwheelCntl : public UH7FlashMoviePopupCntl
{
public:
	class UH7GFxSkillwheel*                            mSkillwheelWindow;                                		// 0x0248 (0x0008) [0x0000000000000000]              
	class AH7EditorHero*                               mCurrentHero;                                     		// 0x0250 (0x0008) [0x0000000000000000]              
	TArray< class AH7EditorHero* >                     leveldUpHeroes;                                   		// 0x0258 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mHallOfHeroesMode : 1;                            		// 0x0268 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mShowAll : 1;                                     		// 0x0268 (0x0004) [0x0000000000000000] [0x00000002] 
	class AH7ArcaneAcademy*                            mAcademy;                                         		// 0x026C (0x0008) [0x0000000000000000]              
	class AH7SchoolOfWar*                              mSchool;                                          		// 0x0274 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59480 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	class UH7GFxUIContainer* GetPopup ( );
	void SetShowAll ( unsigned long showAll );
	void LearnSkillAbilityComplete ( );
	bool LearnSkillAbility ( unsigned long isSkillLevelUp, struct FString AbilityName, int SkillID, struct FString abilityID );
	struct FString GetSkillDescription ( int SkillID, struct FString Level );
	struct FString GetAbilityDescription ( int SkillID, struct FString abilityID );
	void HeroClick ( int heroId );
	void ResolutionChanged ( );
	void AddLeveldUpHero ( class AH7EditorHero* leveldUpHero );
	void UpdateFromSchoolOfWar ( class AH7AdventureHero* Hero, class AH7SchoolOfWar* school );
	void UpdateFromArcaneAcademy ( class AH7AdventureHero* Hero, class AH7ArcaneAcademy* Academy );
	void UpdateFromHallOfHeroes ( class AH7EditorHero* Hero );
	void Update ( class AH7EditorHero* aHero );
	bool Initialize ( );
	class UH7GFxSkillwheel* GetSkillwheel ( );
	bool GetHallOfHeroesMode ( );
	TArray< class AH7EditorHero* > GetLeveldUpHeros ( );
};



// Class MMH7Game.H7TurnOverCntl ( Property size: 3 iter: 12) 
// Class name index: 44751 
// 0x0014 (0x025C - 0x0248)
class UH7TurnOverCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxTurnOver*                              mTurnOverPopup;                                   		// 0x0248 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsHotSeat : 1;                                   		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxClikWidget*                              mOkButton;                                        		// 0x0254 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59481 ];

		return pClassPointer;
	};

	void Fail ( );
	void OnOk ( );
	void OkClicked ( struct FEventData Data );
	bool Initialize ( );
	bool GetIsHotSeat ( );
	void SetIsHotSeat ( unsigned long IsHotSeat );
	class UH7TurnOverCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxTurnOver* GetTurnOverPopup ( );
};



// Class MMH7Game.H7QuestCompleteCntl ( Property size: 3 iter: 14) 
// Class name index: 44533 
// 0x0020 (0x0268 - 0x0248)
class UH7QuestCompleteCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxQuestComplete*                         mQuestCompletePopup;                              		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7SeqAct_Quest_NewNode*                     mQueuedQuest;                                     		// 0x0250 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __mOnRewardAccepted__Delegate;                    		// 0x0258 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x025C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59482 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	void OpenPopupFromQueue ( struct FH7PopupParameters Params );
	bool CanOpenPopup ( );
	void OpenPopupForQuest ( class UH7SeqAct_Quest_NewNode* quest );
	void InitWindowKeyBinds ( );
	bool Initialize ( );
	class UH7QuestLogCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxQuestComplete* GetQuestCompletePopup ( );
	void mOnRewardAccepted ( );
};



// Class MMH7Game.H7TownBuildingPopupCntl ( Property size: 3 iter: 21) 
// Class name index: 44710 
// 0x000C (0x025C - 0x0250)
class UH7TownBuildingPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxTownBuildingPopup*                     mBuildingPopup;                                   		// 0x0250 (0x0008) [0x0000000000000000]              
	unsigned long                                      mUpdateAfterBuildingPending : 1;                  		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mIsConfirmPopupVisible : 1;                       		// 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59483 ];

		return pClassPointer;
	};

	void OpenCreatureInfo ( struct FString creatureArchetypeName );
	void ClosePopup ( );
	void SaveGUIConfig ( struct FString guiConfig );
	void DestroyLevelComplete ( );
	void OnDestroyConfirm ( );
	void DestroyLevel ( );
	void BuildBuildingPopupAnimationFinished ( );
	void BuildBuilingComplete ( );
	bool BuildBuilding ( struct FString buildingName );
	void BuildConfirm ( );
	void SetConfirmPopupVisible ( unsigned long val );
	void Update ( class AH7Town* currentTown );
	void InitWindowKeyBinds ( );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxTownBuildingPopup* GetBuildingPopup ( );
	class UH7TownBuildingPopupCntl* GetInstance ( );
};



// Class MMH7Game.H7MarketPlacePopupCntl ( Property size: 2 iter: 15) 
// Class name index: 44473 
// 0x0010 (0x0260 - 0x0250)
class UH7MarketPlacePopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxMarketPlacePopup*                      mMarketPlacePopup;                                		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7TradingPost*                              mTradingPost;                                     		// 0x0258 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59484 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void Closed ( );
	void ClosePopup ( );
	void transfer ( struct FString resName, int resAmount, int receivingPlayerNumber );
	void Trade ( struct FString resourceToSell, int amountToSell, struct FString resourceToBuy, int amountToBuy );
	void UpdateFromTradingPost ( class AH7TradingPost* post );
	void Update ( class AH7Town* pTown );
	void UpdateWithCurrentTownOrTradingPost ( );
	void LoadComplete ( );
	bool Initialize ( );
	void TestCall ( );
	class UH7GFxMarketPlacePopup* GetMarketPlacePopup ( );
	class UH7MarketPlacePopupCntl* GetInstance ( );
};



// Class MMH7Game.H7HallOfHerosPopupCntl ( Property size: 9 iter: 22) 
// Class name index: 44345 
// 0x0048 (0x0298 - 0x0250)
class UH7HallOfHerosPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxHallOfHerosPopup*                      mHallOfHerosPopup;                                		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7GFxHeroEquip*                             mHeroEquip;                                       		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7GFxInventory*                             mInventory;                                       		// 0x0260 (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mArmyRow;                                         		// 0x0268 (0x0008) [0x0000000000000000]              
	class UH7GFxWarfareUnitRow*                        mWarfareUnitRow;                                  		// 0x0270 (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mHeroInfo;                                        		// 0x0278 (0x0008) [0x0000000000000000]              
	TArray< struct FRecruitHeroData >                  currentHeroPool;                                  		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mOpenedSkillwheel : 1;                            		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                mCurrentHeroID;                                   		// 0x0294 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59485 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void Closed ( );
	void ClosePopup ( );
	void KillPopUp ( );
	void BtnHireClicked ( struct FEventData Data );
	void GetStatModSourceList ( struct FString statStr, int unrealID );
	void BtnSkillwheelClicked ( );
	void UnitClick ( int unrealID );
	void UpdateBackFromSkillwheel ( );
	void Update ( class AH7Town* Town );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxHallOfHerosPopup* GetHallOfHerosPopup ( );
};



// Class MMH7Game.H7TownWarfarePopupCntl ( Property size: 3 iter: 11) 
// Class name index: 44736 
// 0x000C (0x025C - 0x0250)
class UH7TownWarfarePopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxTownWarfarePopup*                      mWarfarePopup;                                    		// 0x0250 (0x0008) [0x0000000000000000]              
	unsigned long                                      mPendingBuyAttackHybrid : 1;                      		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mPendingBuyVisitingArmy : 1;                      		// 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59486 ];

		return pClassPointer;
	};

	void BuyWarfare ( unsigned long attackHybrid, unsigned long visitingArmy, unsigned long confirm );
	void BuyPendingWarfare ( );
	void Update ( class AH7Town* Town );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxTownWarfarePopup* GetCaravanPopup ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7TownWarfarePopupCntl* GetInstance ( );
};



// Class MMH7Game.H7TownCaravanPopupCntl ( Property size: 3 iter: 18) 
// Class name index: 44713 
// 0x0014 (0x0264 - 0x0250)
class UH7TownCaravanPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class AH7AreaOfControlSiteLord*                    mLord;                                            		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7GFxTownCaravanPopup*                      mCaravanPopup;                                    		// 0x0258 (0x0008) [0x0000000000000000]              
	int                                                mPendingCaravanDeleteIndex;                       		// 0x0260 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59487 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	bool OpenPopup ( );
	void Pickedup ( int caravanIndex, int unitIndex );
	void DeleteCaravanConfirm ( );
	void DeleteCaravan ( int caravanIndex );
	void TriggerMiddleHudUpdate ( );
	void UnloadAll ( );
	void UpdateFromLord ( class AH7AreaOfControlSiteLord* lord );
	void Update ( class AH7Town* Town );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7TownCaravanPopupCntl* GetInstance ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxTownCaravanPopup* GetCaravanPopup ( );
};



// Class MMH7Game.H7HeroTradeWindowCntl ( Property size: 27 iter: 74) 
// Class name index: 44356 
// 0x00F4 (0x0360 - 0x026C)
class UH7HeroTradeWindowCntl : public UH7ItemSlotMovieCntl
{
public:
	class UH7GFxHeroTradeWindow*                       mHeroTradeWindow;                                 		// 0x026C (0x0008) [0x0000000000000000]              
	class UH7GFxHeroInfo*                              mHeroInfo1;                                       		// 0x0274 (0x0008) [0x0000000000000000]              
	class UH7GFxHeroEquip*                             mHeroEquip1;                                      		// 0x027C (0x0008) [0x0000000000000000]              
	class UH7GFxInventory*                             mInventory1;                                      		// 0x0284 (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mArmyRow1;                                        		// 0x028C (0x0008) [0x0000000000000000]              
	class UH7GFxWarfareUnitRow*                        mWarfareUnitRow1;                                 		// 0x0294 (0x0008) [0x0000000000000000]              
	class UH7GFxHeroInfo*                              mHeroInfo2;                                       		// 0x029C (0x0008) [0x0000000000000000]              
	class UH7GFxHeroEquip*                             mHeroEquip2;                                      		// 0x02A4 (0x0008) [0x0000000000000000]              
	class UH7GFxInventory*                             mInventory2;                                      		// 0x02AC (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mArmyRow2;                                        		// 0x02B4 (0x0008) [0x0000000000000000]              
	class UH7GFxWarfareUnitRow*                        mWarfareUnitRow2;                                 		// 0x02BC (0x0008) [0x0000000000000000]              
	TArray< struct FIntPoint >                         mInventory2ItemsPoses;                            		// 0x02C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mArmy2CreaturePosses;                             		// 0x02D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7StackCount >                     mArmy2Original;                                   		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mHeroID1;                                         		// 0x02F4 (0x0004) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmy1;                                           		// 0x02F8 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mHero1;                                           		// 0x0300 (0x0008) [0x0000000000000000]              
	int                                                mHeroID2;                                         		// 0x0308 (0x0004) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmy2;                                           		// 0x030C (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mHero2;                                           		// 0x0314 (0x0008) [0x0000000000000000]              
	class UH7GFxInventory*                             dropInventory;                                    		// 0x031C (0x0008) [0x0000000000000000]              
	int                                                mDismissArmy;                                     		// 0x0324 (0x0004) [0x0000000000000000]              
	int                                                mDismissIndex;                                    		// 0x0328 (0x0004) [0x0000000000000000]              
	unsigned long                                      mAlliedTrade : 1;                                 		// 0x032C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UH7BaseCreatureStack* >              mTradedCreatures;                                 		// 0x0330 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mTradedItems;                                     		// 0x0340 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIntPoint >                         mTradedItemPoses;                                 		// 0x0350 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59488 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	TArray< struct FH7StackCount > GetStackCount ( TArray< class UH7BaseCreatureStack* > OldState );
	TArray< struct FH7StackCount > GetStackCountDiff ( TArray< struct FH7StackCount > OldState, TArray< struct FH7StackCount > NewState );
	void Closed ( );
	void BtnDoneClicked ( );
	void DismissDenied ( );
	void DismissConfirm ( );
	void DismissStack ( int unitIndex, int armyIndex );
	void RequestWarfareUnitTransferComplete ( );
	void RequestWarfareUnitTransfer ( unsigned char dragSlotClass, int dragSlotArmyID, unsigned char dropSlotClass, int dropSlotArmyID );
	void AddWarfareUnitIconToCursor ( unsigned char warUnitClassInt, int armyID );
	void CompleteTransfer ( unsigned long Success );
	void RequestTransfer ( int dragSlotIndex, int dragSlotArmyID, int dropSlotIndex, int dropSlotArmyID, int Amount );
	void BtnMergeArmy2Clicked ( );
	void BtnMergeArmy1Clicked ( );
	void AddUnitIconToCursor ( int slotID, int armyID );
	void SetCurrentHero ( int ItemId );
	void SetEquip ( int ItemId );
	void SetInventory ( int ItemId );
	void TradeUnequipItem ( int PosX, int PosY );
	void UnequipItem ( int PosX, int PosY );
	void TradeSwitchItemsFromEquipToInventory ( int itemIDinDropSlot, int dragSlotX, int dragSlotY );
	void SwitchItemsFromEquipToInventory ( int itemIDinDropSlot );
	void TradeSwitchItemsInEquip ( int itemIDinDropSlot );
	void SwitchItemsInEquip ( int itemIDinDropSlot );
	void TradeEquipItem ( );
	bool EquipItem ( );
	void TradeSwitchItemsFromInventoryToEquip ( int itemIDinDropSlot );
	void SwitchItemFromInventoryToEquip ( int itemIDinDropSlot, int dropSlotX, int dropSlotY );
	void TradeSwitchItemsInInventory ( int itemIDinDropSlot, int dragSlotX, int dragSlotY, int dropSlotX, int dropSlotY );
	void TradeMergeItemsInInventory ( int dropSlotItemID, int dragSlotX, int dragSlotY, int dropSlotX, int dropSlotY );
	bool HasTradedConsumeableOnSlot ( int dropSlotX, int dropSlotY );
	void MergeItemsInInventory ( int itemIDinDropSlot, int dragSlotX, int dragSlotY, int dropSlotX, int dropSlotY );
	void SwitchItemsInInventory ( int itemIDinDropSlot, int dragSlotX, int dragSlotY, int dropSlotX, int dropSlotY );
	void SetDragItemByID ( int ItemId );
	void TradeDropItemInInventory ( int PosX, int PosY );
	void DropItemInInventory ( int PosX, int PosY );
	void AddItemIconToCursor ( int ItemId, unsigned long itemIsStackable );
	void ChangeItemPos ( int ItemId, int X, int Y );
	bool EquipItemByDoubleClick ( int ItemId );
	bool CanEquipItem ( unsigned long checkCurrentHero );
	void GetStatModSourceList ( struct FString statStr, int unrealID );
	void CheckAlliedTradeAndAddFilters ( );
	void Update ( class AH7AdventureHero* Hero, class AH7AdventureHero* targetHero, unsigned long isAlliedTrade );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxHeroTradeWindow* GetHeroTradeWindow ( );
};



// Class MMH7Game.H7MagicGuildPopupCntl ( Property size: 1 iter: 12) 
// Class name index: 44461 
// 0x0008 (0x0258 - 0x0250)
class UH7MagicGuildPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxMagicGuildPopup*                       mMagicGuildPopup;                                 		// 0x0250 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59489 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void ClosePopup ( );
	void Closed ( );
	void SelectSchoolComplete ( );
	void SelectSchool ( int enumInt );
	void Update ( class AH7Town* pTown );
	void LoadComplete ( );
	bool Initialize ( );
	bool IsActive ( );
	class UH7GFxMagicGuildPopup* GetMagicGuildPopup ( );
	class UH7MagicGuildPopupCntl* GetInstance ( );
};



// Class MMH7Game.H7TownGuardPopupCntl ( Property size: 2 iter: 11) 
// Class name index: 44721 
// 0x0010 (0x0260 - 0x0250)
class UH7TownGuardPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxTownGuardPopup*                        mTownGuardPopup;                                  		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSite*                        mCurrentLocation;                                 		// 0x0258 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59490 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void ClosePopup ( );
	void Closed ( );
	void UpdateFromGarrison ( class AH7Garrison* pGarry );
	void Update ( class AH7Town* pTown );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxTownGuardPopup* GetTownGuardPopup ( );
	class UH7TownGuardPopupCntl* GetInstance ( );
};



// Class MMH7Game.H7GateGuardPopupCntl ( Property size: 2 iter: 10) 
// Class name index: 44237 
// 0x0010 (0x0260 - 0x0250)
class UH7GateGuardPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxTownGuardPopup*                        mTownGuardPopup;                                  		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSite*                        mCurrentLocation;                                 		// 0x0258 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59491 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	void UpdateFromGarrison ( class AH7Garrison* pGarry );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxTownGuardPopup* GetGateGuardPopup ( );
	class UH7GateGuardPopupCntl* GetInstance ( );
};



// Class MMH7Game.H7ArtifactRecyclerPopupCntl ( Property size: 5 iter: 15) 
// Class name index: 44086 
// 0x0028 (0x0278 - 0x0250)
class UH7ArtifactRecyclerPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxArtifactRecyclerPopup*                 mRecyclerPopUp;                                   		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7ArtifactRecyclingTable*                   valueTable;                                       		// 0x0258 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mGarrisonHero;                                    		// 0x0260 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mVisitingHero;                                    		// 0x0268 (0x0008) [0x0000000000000000]              
	class UH7HeroItem*                                 mItemToRecycle;                                   		// 0x0270 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59492 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void RecycleItemComplete ( class AH7AdventureHero* Hero );
	void RecycleItem ( int ItemId );
	void GetResGainByItemID ( int ItemId );
	void GetHeroInventory ( unsigned long garrisonHero );
	void Update ( class AH7Town* Town );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxArtifactRecyclerPopup* GetArtifactRecyclerPopup ( );
	class UH7ArtifactRecyclerPopupCntl* GetInstance ( );
};



// Class MMH7Game.H7InscriberPopupCntl ( Property size: 5 iter: 16) 
// Class name index: 44365 
// 0x0024 (0x0274 - 0x0250)
class UH7InscriberPopupCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxInscriberPopup*                        mInscriberPopUp;                                  		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7Inscriber*                                mInscriber;                                       		// 0x0258 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mGarrisonHero;                                    		// 0x0260 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mVisitingHero;                                    		// 0x0268 (0x0008) [0x0000000000000000]              
	unsigned long                                      mToGarrisonHero : 1;                              		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59493 ];

		return pClassPointer;
	};

	class UH7GFxUIContainer* GetPopup ( );
	void ChangeItemPos ( int ItemId, int X, int Y );
	void BuyScrollComplete ( class AH7AdventureHero* Hero, class UH7HeroItem* scrollToBuy );
	void BuyScroll ( int scrollID, unsigned long toGarrisonHero );
	void GetScrollCostByItemID ( int ItemId );
	void GetHeroInventory ( unsigned long garrisonHero );
	void Update ( class AH7Town* Town );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxInscriberPopup* GetInscriberPopup ( );
	class UH7InscriberPopupCntl* GetInstance ( );
};



// Class MMH7Game.H7ContainerCntl ( Property size: 1 iter: 7) 
// Class name index: 44147 
// 0x0008 (0x0250 - 0x0248)
class UH7ContainerCntl : public UH7FlashMoviePopupCntl
{
public:
	class UH7GFxLoaderManager*                         mLoaderManager;                                   		// 0x0248 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59494 ];

		return pClassPointer;
	};

	struct FString FlashLocalize ( struct FString locaKey, struct FString keybindingCommand, unsigned long replaceIcons );
	void LoadComplete ( struct FString Filename );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxLoaderManager* GetLoaderManager ( );
	class UGFxObject* GetRoot ( );
};



// Class MMH7Game.H7AltarOfSacrificeCntl ( Property size: 9 iter: 18) 
// Class name index: 44075 
// 0x0040 (0x0290 - 0x0250)
class UH7AltarOfSacrificeCntl : public UH7FlashMovieTownPopupCntl
{
public:
	class UH7GFxAltarOfSacrifice*                      mAltarOfSacrificePopUp;                           		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7TownUnitConverter*                        mAltarOfSacrifice;                                		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7BaseCreatureStack*                        mDraggedStack;                                    		// 0x0260 (0x0008) [0x0000000000000000]              
	int                                                mFirstDraggedStackOriginalSize;                   		// 0x0268 (0x0004) [0x0000000000000000]              
	TArray< int >                                      mDraggedStackIndicesGarrison;                     		// 0x026C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mDraggedStackIndicesVisiting;                     		// 0x027C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mergedCreatures : 1;                              		// 0x028C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mergedCreaturesConverted : 1;                     		// 0x028C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      firstStackIsGarrison : 1;                         		// 0x028C (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59495 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	class UH7GFxUIContainer* GetPopup ( );
	void BtnSacrificeClicked ( );
	void SlotToSacrificeMouseIsUp ( );
	void Update ( class AH7Town* Town );
	void LoadComplete ( );
	bool Initialize ( );
	class UH7GFxAltarOfSacrifice* GetAltarOfSacrifice ( );
	class UH7AltarOfSacrificeCntl* GetInstance ( );
};



// Class MMH7Game.H7MerchantPopUpCntl ( Property size: 7 iter: 26) 
// Class name index: 44478 
// 0x0030 (0x029C - 0x026C)
class UH7MerchantPopUpCntl : public UH7ItemSlotMovieCntl
{
public:
	class UH7GFxMerchantPopUp*                         mMerchantPopUp;                                   		// 0x026C (0x0008) [0x0000000000000000]              
	class UH7GFxUIContainer*                           mHeroInfo;                                        		// 0x0274 (0x0008) [0x0000000000000000]              
	class AH7Merchant*                                 mMerchant;                                        		// 0x027C (0x0008) [0x0000000000000000]              
	class UH7BlackMarket*                              mMarket;                                          		// 0x0284 (0x0008) [0x0000000000000000]              
	class AH7Town*                                     mTown;                                            		// 0x028C (0x0008) [0x0000000000000000]              
	float                                              mBuyPriceMultiplicator;                           		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              mSellPriceMultiplicator;                          		// 0x0298 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59496 ];

		return pClassPointer;
	};

	void GetStatModSourceList ( struct FString statStr, int unrealID );
	void ClosePopup ( );
	bool EquipItemByDoubleClick ( int ItemId );
	void BtnBuyClicked ( int ItemId );
	bool CanSpend ( int ItemId );
	void BtnSellClicked ( int itemToSellID );
	int GetItemSellPriceByID ( int ItemId );
	void ShowHeroItems ( unsigned long garrisonHeroItems );
	void UpdateFromSellCommand ( );
	void Update ( class AH7Town* Town );
	void UpdateFromMerchant ( class AH7AdventureHero* Hero, class AH7Merchant* merchant );
	bool Initialize ( );
	float GetSellPriceMultiplicator ( );
	float GetBuyPriceMultiplicator ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxMerchantPopUp* GetMerchantPopUp ( );
	class UH7GFxHeroEquip* GetHeroEquip ( );
	class UH7GFxInventory* GetInventory ( );
	class AH7Merchant* GetMerchant ( );
};



// Class MMH7Game.H7RandomSkillingPopUpCntl ( Property size: 2 iter: 13) 
// Class name index: 44542 
// 0x0010 (0x0258 - 0x0248)
class UH7RandomSkillingPopUpCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class AH7EditorHero*                               mCurrentHero;                                     		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GfxRandomSkillingPopUp*                   mRandomSkillingPopUp;                             		// 0x0250 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59497 ];

		return pClassPointer;
	};

	void ClosePopup ( );
	void Closed ( );
	class UH7GFxUIContainer* GetPopup ( );
	void OpenPopupFromQueue ( struct FH7PopupParameters Params );
	void LearnSkillAbilityComplete ( class AH7EditorHero* Hero );
	void LearnSkillAbility ( unsigned long isSkillLevelUp, struct FString AbilityName, int SkillID, struct FString abilityID );
	struct FString GetSkillDescription ( int SkillID, struct FString Level );
	struct FString GetAbilityDescription ( int SkillID, struct FString abilityID );
	void Update ( class AH7EditorHero* Hero );
	bool Initialize ( );
	class UH7RandomSkillingPopUpCntl* GetInstance ( );
};



// Class MMH7Game.H7TrainingGroundsPopUpCntl ( Property size: 5 iter: 19) 
// Class name index: 44742 
// 0x0024 (0x026C - 0x0248)
class UH7TrainingGroundsPopUpCntl : public UH7FlashMovieBlockPopupCntl
{
public:
	class UH7GFxTrainingGroundsPopUp*                  mTrainingGroundsPopup;                            		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7GFxArmyRow*                               mArmyRow;                                         		// 0x0250 (0x0008) [0x0000000000000000]              
	class AH7TrainingGrounds*                          mGrounds;                                         		// 0x0258 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mVisitingArmy;                                    		// 0x0260 (0x0008) [0x0000000000000000]              
	int                                                mCreatureIndexToDismiss;                          		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59498 ];

		return pClassPointer;
	};

	void Closed ( );
	void RemoveUnitFromCursor ( );
	void AddUnitIconToCursor ( int slotID );
	void DismissDenied ( );
	void DismissConfirm ( );
	void DismissStack ( int unitIndex, int armyIndex );
	void CompleteTransfer ( unsigned long Success, int ToIndex );
	void RequestTransfer ( int fromArmy, int fromIndex, int toArmy, int ToIndex, int splitAmount );
	void UpgradeCreature ( int slotID, unsigned long isVisitor, int Count );
	void Update ( class AH7TrainingGrounds* grounds, class AH7AdventureArmy* Army );
	void RemoveItemIconFromCursor ( );
	bool Initialize ( );
	class UH7GFxUIContainer* GetPopup ( );
	class UH7GFxTrainingGroundsPopUp* GetTrainingGroundsPopup ( );
};



// Class MMH7Game.H7GFxCommandPanel ( Property size: 6 iter: 20) 
// Class name index: 44249 
// 0x0010 (0x00B4 - 0x00A4)
class UH7GFxCommandPanel : public UH7GFxUIContainer
{
public:
	unsigned long                                      mTownMode : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mRelevantPopupIsOpen : 1;                         		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mEndSimTurn : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                guiDay;                                           		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                guiMonth;                                         		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                guiYear;                                          		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59873 ];

		return pClassPointer;
	};

	void UpdateDate ( int Day, int week, int Month, int Year, struct FString weekName, struct FString weekDescription );
	void SetRelevantPopupOpen ( unsigned long val );
	void SetMyTurn ( unsigned long val );
	void ShowExitIcon ( unsigned long val );
	void SetCurrentOpenPopup ( int commandPanelPopupIndex );
	void EnableHeroButtons ( unsigned long val );
	void UpdateSelectState ( class UH7FlashMoviePopupCntl* PopUp, unsigned long Opened );
	bool IsCommandPanelRelevantPopupOpen ( );
	void SetCampaignMode ( unsigned long val );
	void SetEndSimTurn ( unsigned long val );
	void SetTownMode ( unsigned long val );
	void UpdateLoca ( );
	bool GetEndSimTurn ( );
	bool GetTownMode ( );
};



// Class MMH7Game.H7GFxMinimap ( Property size: 25 iter: 76) 
// Class name index: 44290 
// 0x00D8 (0x017C - 0x00A4)
class UH7GFxMinimap : public UH7GFxUIContainer
{
public:
	class UH7MinimapNative*                            mNative;                                          		// 0x00A4 (0x0008) [0x0000000000000000]              
	class AH7AdventureGridManager*                     mGridManager;                                     		// 0x00AC (0x0008) [0x0000000000000000]              
	class AH7AdventureController*                      mAdvCntl;                                         		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  mData;                                            		// 0x00BC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  mPath;                                            		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  mGridWrapper;                                     		// 0x00CC (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  mGrids;                                           		// 0x00D4 (0x0008) [0x0000000000000000]              
	TArray< struct FVector2D >                         mCurrentFrustumData;                              		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mLastGridIndex;                                   		// 0x00EC (0x0004) [0x0000000000000000]              
	TArray< class AH7AdventureHero* >                  mHeroList;                                        		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7Caravan* >                        mCaravanList;                                     		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AH7VisitableSite* >                  mVisitableList;                                   		// 0x0110 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AActor* >                            mUnprocessedActors;                               		// 0x0120 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IQuestTarget* >                   mMovableQuestTargets;                             		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        mGFxQuests;                                       		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7Camera*                                   mGameCam;                                         		// 0x0150 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           mPostProcessChain;                                		// 0x0158 (0x0008) [0x0000000000000000]              
	TArray< class AActor* >                            mHiddenActors;                                    		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bInitialized : 1;                                 		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAreaOfControlOnce : 1;                           		// 0x0170 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bQuestLogMode : 1;                                		// 0x0170 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mExtensionsVisible : 1;                           		// 0x0170 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      mPendingVisibilityUpdate : 1;                     		// 0x0170 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                mMaxAOCDepth;                                     		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                mAOCIterationCount;                               		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59890 ];

		return pClassPointer;
	};

	void UpdateCameraMode ( unsigned long activeTownscreen );
	void HoverCaravan ( int Id, unsigned long val );
	void EnableMe ( );
	void DisableMe ( );
	void DeletePath ( );
	void ShowPathC2C ( class UH7AdventureMapCell* startCell, class UH7AdventureMapCell* targetCell );
	void ShowPathAoC2AoC ( class AH7AreaOfControlSite* Start, class AH7AreaOfControlSite* End );
	void OpenExtension ( );
	void CloseExtension ( );
	void SetPopupMode ( unsigned long val );
	void ToggleMiniMapOptions ( );
	void UnHighlightAoC ( );
	void HighlightAoC ( int aocIdx );
	bool IsFrustumDataEqual ( TArray< struct FVector2D > frustumData );
	void ComputeMinimapFrustum ( );
	void RemoveIcon ( int Id );
	void UpdateIconVisibility ( int Id, unsigned long Hidden, int gridLayer, int Red, int Green, int Blue );
	void UpdateVisibilityDo ( );
	void CheckUpdateVisibility ( );
	void UpdateVisibility ( );
	void ResetFog ( );
	void DrawFoWRect ( int PosX, int PosY, int rectWidth, int rectHeight );
	void UpdateFogOfWar ( );
	void SetFog ( struct FString Path );
	void AddCaravan ( class AH7Caravan* newCaravan );
	void AddHero ( class AH7AdventureHero* newHero );
	void AddVisitableSite ( class AH7VisitableSite* visitableSite );
	void CreateIcon ( struct FString Type, int Id, struct FString IconPath, int PosX, int PosY, unsigned long bHidden, int gridLayer, int Red, int Green, int Blue );
	void UpdateAreaOfControl ( unsigned long generateTexture );
	void SetAoC ( struct FString Path );
	void UpdateBackground ( );
	void SetBackground ( struct FString Path );
	void UpdateMoveableQuestTargets ( );
	void EditQuestIcon ( int targetID, int PosX, int PosY, int gridLayer, unsigned long bHidden );
	void EditQuestTrackStatus ( struct FString wantedQuestID, unsigned long tracked );
	void RemoveQuestIcon ( int targetID );
	void AddQuestIcon ( int targetID, struct FString questID, int PosX, int PosY, int gridLayer, int PlayerNum, unsigned long bHidden, unsigned long tracked, struct FString IconPath, struct FString Description );
	void AddQuestTracker ( class UH7SeqAct_Quest_NewNode* quest, class UH7SeqAct_QuestObjective* objective, class UH7IQuestTarget* questTarget );
	void SetQuestLogMode ( unsigned long val, float mapX, float mapY, float mapWidth, float mapHeight );
	void CreateQuestHighlight ( int PosX, int PosY, int gridIdx );
	void UpdateIconGridPos ( int iconID, int newX, int newY, int Layer );
	void ShipMoved ( class AH7Ship* ship );
	void HeroMoved ( class AH7AdventureHero* Hero );
	void AddUnproccessedActors ( );
	void Initialize ( );
	void Update ( );
	void ActivateTreasure ( );
	class AActor* GetActor ( int Id );
	int GetWidth ( );
	void ForceReset ( );
};



// Class MMH7Game.H7GFxSimTurnInfo ( Property size: 2 iter: 14) 
// Class name index: 44307 
// 0x000C (0x00B0 - 0x00A4)
class UH7GFxSimTurnInfo : public UH7GFxUIContainer
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsActive : 1;                                    		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59895 ];

		return pClassPointer;
	};

	void ShowTimer ( unsigned long show );
	void SwitchToHUD ( );
	void SwitchToFullScreen ( );
	void SetCurrentTimeLeft ( int Seconds );
	void SetTimerMax ( int MaxValue );
	void ListenUpdate ( class UH7IGUIListenable* Info );
	class UGFxObject* CreatePlayerObjectFromPlayer ( class AH7Player* Player );
	class UGFxObject* CreatePlayerObject ( class AH7PlayerReplicationInfo* PRI );
	void Update ( class AH7ReplicationInfo* Info );
	void UpdateHotSeat ( );
	void SetInfo ( class AH7ReplicationInfo* Info, unsigned long IsHotSeat );
	bool IsActive ( );
};



// Class MMH7Game.H7GFxTopBar ( Property size: 0 iter: 11) 
// Class name index: 44316 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTopBar : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59898 ];

		return pClassPointer;
	};

	void UpdateTooltip ( int Day, int week, int Month, int Year, struct FString weekName, struct FString weekDescription );
	void UpdateDisplay ( struct FString Date );
	void UpdateResourceIncome ( struct FString resourceName, int newIncome );
	void ShowOtherPlayerPlaying ( struct FString PlayerName, struct FString playerColor );
	void updateResourceAmoutns ( TArray< int > allResourceAmounts );
	void TweenResourceAmountAndIcon ( int Index, struct FString IconName, struct FString resourceName, int resourceAmount, int PlayerNumber );
	void UpdateResourceAmountAndIcon ( int Index, struct FString IconName, struct FString resourceName, int resourceAmount, int Income, unsigned char PlayerNumber, unsigned long lastResource );
	void UpdateResourceAmounts ( );
	void LastResourceIndex ( int Index );
	void UpdateAllResourceAmountsAndIconsNewTurn ( TArray< struct FResourceStockpile > Set );
	void UpdateAllResourceAmountsAndIcons ( TArray< struct FResourceStockpile > Set );
};



// Class MMH7Game.H7GFxActorTooltip ( Property size: 9 iter: 40) 
// Class name index: 44240 
// 0x0048 (0x00EC - 0x00A4)
class UH7GFxActorTooltip : public UH7GFxUIContainer
{
public:
	class AActor*                                      mActor;                                           		// 0x00A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mActivatedBy3DWorld : 1;                          		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mReadActorBox : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FBoundingPoint >                    mBoundingPoints;                                  		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mLeft;                                            		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              mRight;                                           		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              mTop;                                             		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              mBottom;                                          		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FBox                                        mActorBox;                                        		// 0x00D0 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59899 ];

		return pClassPointer;
	};

	struct FH7TooltipData BuildTooltipBattleSite ( class AH7BattleSite* battleSite, unsigned long Advanced );
	struct FH7TooltipData BuildTooltipBuildingBuffable ( class AH7VisitableSite* Site );
	struct FH7TooltipData BuildTooltipItemPile ( class AH7ItemPile* itemPile );
	void BuildTooltipDwelling ( class AH7Dwelling* Dwelling, struct FH7TooltipData* Data );
	void BuildTooltipBuilding ( struct FH7TooltipData* Data );
	void AddPlayerInfo ( class UGFxObject* Data, class AH7Player* aPlayer );
	void AddThreatInfo ( class UGFxObject* Data, class AH7AdventureArmy* Army, TArray< class UH7BaseCreatureStack* > additionalStacks );
	struct FH7TooltipData BuildTooltipArmyExtended ( class AH7AdventureArmy* Army, unsigned long scouting );
	struct FH7TooltipData BuildTooltipArmyBasic ( class AH7AdventureArmy* Army, unsigned long scouting );
	struct FH7TooltipData BuildTooltipHeroExtended ( class AH7AdventureHero* Hero, unsigned long scouting );
	struct FH7TooltipData BuildTooltipTown ( class AH7AreaOfControlSite* Site, unsigned long extendedVersion, unsigned long scouting );
	struct FH7TooltipData BuildTooltipHeroBasic ( class AH7AdventureHero* Hero );
	struct FVector2D GetPixel ( struct FVector WorldLocation );
	void DebugDrawBoundingBox ( class UCanvas* Canvas );
	void AnalyseBoundingBox ( class AActor* Actor );
	TArray< struct FVector2D > Get8BoundingPixels ( class AActor* Actor );
	void ConvertPixels ( );
	void UpdateFlashTooltip ( struct FString Type, struct FString ToolTip, unsigned long isExtendedVersion, unsigned long rightClickTooltipAvailable );
	void UpdateFlashAnchor ( int X1, int Y1, int X2, int Y2 );
	void ShutDown ( );
	void Update ( );
	void ActivateTooltipableAtCustomPosition ( class UH7ITooltipable* ttObject, int X1, int Y1, int X2, int Y2, unsigned long rightClickVersion );
	void ActivateActorTooltipAtCustomPosition ( class AActor* forActor, int X1, int Y1, int X2, int Y2, unsigned long rightClickVersion );
	void BuildTooltipForTooltipable ( class UH7ITooltipable* forActor, unsigned long rightClickVersion );
	void BuildTooltip ( class AActor* forActor, unsigned long rightClickVersion );
	void StopRightClickTooltip ( );
	void StartAutoShowTooltipTimer ( );
	void StartRightClickTooltip ( );
	void ActorChanged ( );
	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void SetActor ( class AActor* hoveredActor );
};



// Class MMH7Game.H7GFxTownList ( Property size: 1 iter: 9) 
// Class name index: 44322 
// 0x0008 (0x00AC - 0x00A4)
class UH7GFxTownList : public UH7GFxUIContainer
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59900 ];

		return pClassPointer;
	};

	void SetVisibleSave ( unsigned long val );
	void EnableMe ( );
	void DisableMe ( );
	void Update ( );
	void SetTownMode ( unsigned long val );
	void SelectTown ( int Id );
	void Select ( class AH7Town* Town );
	void SetData ( TArray< class AH7Town* > Towns );
};



// Class MMH7Game.H7GFxPlayerBuffs ( Property size: 1 iter: 5) 
// Class name index: 44299 
// 0x0008 (0x00AC - 0x00A4)
class UH7GFxPlayerBuffs : public UH7GFxUIContainer
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59901 ];

		return pClassPointer;
	};

	void ListenUpdate ( class UH7IGUIListenable* ob );
	class UGFxObject* CreateBuffObject ( class UH7BaseBuff* buff );
	void Update ( class AH7Player* Player );
	void SetPlayer ( class AH7Player* Player );
};



// Class MMH7Game.H7GFxSideBar ( Property size: 1 iter: 10) 
// Class name index: 44306 
// 0x0008 (0x00AC - 0x00A4)
class UH7GFxSideBar : public UH7GFxUIContainer
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59902 ];

		return pClassPointer;
	};

	void SetVisibleSave ( unsigned long val );
	void Update ( );
	void SetState ( unsigned long val );
	void DeleteMessage ( int Id );
	void SelectMessage ( int Id );
	void BlinkMessage ( int Id );
	int CanAddMessage ( );
	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void Init ( class UH7SideBar* sidebar );
};



// Class MMH7Game.H7PathDot ( Property size: 3 iter: 14) 
// Class name index: 44516 
// 0x0014 (0x0264 - 0x0250)
class AH7PathDot : public ADecalActorSpawnable
{
public:
	class UMaterialInterface*                          mMaterial;                                        		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7LandscapeFilteredDecalComponent*          mFilteredDecal;                                   		// 0x0258 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      mLookAtView : 1;                                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60562 ];

		return pClassPointer;
	};

	class UH7LandscapeFilteredDecalComponent* GetDecal ( );
	class UMaterialInterface* GetMaterial ( );
	void SetIsWater ( unsigned long isWater );
	void SetProjectOnAll ( );
	void SetDimensions ( int newWidth, int NewHeight, int FarPlane );
	void SetMaterial ( class UMaterialInterface* NewMaterial );
	void eventTick ( float DeltaTime );
};



// Class MMH7Game.H7AiCombatSensors ( Property size: 6 iter: 16) 
// Class name index: 43815 
// 0x003C (0x009C - 0x0060)
class UH7AiCombatSensors : public UH7AiSensorBase
{
public:
	TArray< class UH7AiSensorBase* >                   mSensors;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7AiSensorInputConst*                       mConsts;                                          		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned char                                      mConstSelect[ 0x2 ];                              		// 0x0078 (0x0002) [0x0000000000000000]              
	int                                                mConstIter[ 0x2 ];                                		// 0x007C (0x0008) [0x0000000000000000]              
	int                                                mConstLength[ 0x2 ];                              		// 0x0084 (0x0008) [0x0000000000000000]              
	class UH7AiSensorParam*                            mParam[ 0x2 ];                                    		// 0x008C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60722 ];

		return pClassPointer;
	};

	void Setup ( );
	bool CallNext ( );
	void CallBegin ( unsigned char sic0, unsigned char sic1 );
	float CallSensor ( unsigned char sensor );
	void ResetConsts ( );
	void UpdateConsts ( );
	class UH7AiSensorInputConst* GetSensorIConsts ( );
	class UH7AiSensorParam* GetParam1 ( );
	class UH7AiSensorParam* GetParam0 ( );
	class UH7AiSensorBase* GetSensor ( unsigned char sensor );
};



// Class MMH7Game.H7AiActionAttackCreatureStack ( Property size: 4 iter: 9) 
// Class name index: 43763 
// 0x0023 (0x0084 - 0x0061)
class UH7AiActionAttackCreatureStack : public UH7AiActionBase
{
public:
	class UH7AiUtilityHasAnyAdjacentEnemy*             mInUHasAnyAdjacentEnemy;                          		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHasAdjacentEnemy*                mInUHasAdjacentEnemy;                             		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRangeCasualityCount*             mInUCasualityCount;                               		// 0x0074 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRangeCreatureDamage*             mInUCreatureDamage;                               		// 0x007C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60724 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	unsigned char GetBestDirectionToAttack ( class AH7Unit* Unit, class AH7CreatureStack* Target, class UH7CombatMapCell** hitCell );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityBase ( Property size: 10 iter: 23) 
// Class name index: 43894 
// 0x004C (0x00AC - 0x0060)
class UH7AiUtilityBase : public UObject
{
public:
	float                                              mInNorm;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mInMin;                                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mInMax;                                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mOutWeight;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mFunction;                                        		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector2D >                         mFData;                                           		// 0x0074 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mFBias;                                           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mFMult;                                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    mInValues;                                        		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mOutValues;                                       		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60786 ];

		return pClassPointer;
	};

	float FuncBias ( float iv );
	float FuncSample ( float iv );
	float FuncCubic ( float iv );
	float FuncSquare ( float iv );
	float FuncSinus ( float iv );
	float FuncLinear ( float iv );
	float FuncBoolean ( float iv );
	void ApplyOutputWeigth ( );
	void InputNormalize ( );
	void ApplyFunction ( );
	void UpdateOutput ( );
	void UpdateInput ( );
	TArray< float > GetOutValues ( );
};



// Class MMH7Game.H7AiUtilitySensor ( Property size: 4 iter: 6) 
// Class name index: 44042 
// 0x0004 (0x00B0 - 0x00AC)
class UH7AiUtilitySensor : public UH7AiUtilityBase
{
public:
	unsigned char                                      mInSensor;                                        		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mInSensorAdv;                                     		// 0x00AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mInSensorConst0;                                  		// 0x00AE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mInSensorConst1;                                  		// 0x00AF (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60798 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHasAnyAdjacentEnemy ( Property size: 0 iter: 2) 
// Class name index: 43958 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityHasAnyAdjacentEnemy : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60797 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHasAdjacentEnemy ( Property size: 0 iter: 2) 
// Class name index: 43957 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityHasAdjacentEnemy : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60799 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityRangeCasualityCount ( Property size: 0 iter: 2) 
// Class name index: 44032 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityRangeCasualityCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60800 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityRangeCreatureDamage ( Property size: 0 iter: 2) 
// Class name index: 44033 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityRangeCreatureDamage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60801 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionAttackHero ( Property size: 1 iter: 5) 
// Class name index: 43764 
// 0x000B (0x006C - 0x0061)
class UH7AiActionAttackHero : public UH7AiActionBase
{
public:
	class UH7AiUtilityKillScale*                       mUtility1;                                        		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60803 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityKillScale ( Property size: 0 iter: 2) 
// Class name index: 44017 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityKillScale : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60828 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionAttackTargetAoC ( Property size: 2 iter: 7) 
// Class name index: 43765 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionAttackTargetAoC : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60830 ];

		return pClassPointer;
	};

	bool CheckIfSiteIsLocked ( class AH7VisitableSite* Site, class AH7AdventureHero* evaluationHero );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityCombiner ( Property size: 0 iter: 2) 
// Class name index: 43900 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityCombiner : public UH7AiUtilityBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60880 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityAttackTargetScore ( Property size: 6 iter: 8) 
// Class name index: 43893 
// 0x002C (0x00D8 - 0x00AC)
class UH7AiUtilityAttackTargetScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityGeneralEffort*                   mInUGeneralEffort;                                		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTargetInterest*                  mInUTargetInterest;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortBias;                              		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortModifier;                          		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60879 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySiteAvailable ( Property size: 0 iter: 2) 
// Class name index: 44043 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySiteAvailable : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60898 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionAttackTargetArmy ( Property size: 1 iter: 5) 
// Class name index: 43766 
// 0x000B (0x006C - 0x0061)
class UH7AiActionAttackTargetArmy : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60900 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionAttackTargetBorderArmy ( Property size: 1 iter: 5) 
// Class name index: 43767 
// 0x000B (0x006C - 0x0061)
class UH7AiActionAttackTargetBorderArmy : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60937 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionAttackTargetCity ( Property size: 3 iter: 7) 
// Class name index: 43768 
// 0x001B (0x007C - 0x0061)
class UH7AiActionAttackTargetCity : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySuicideAttackTargetScore*        mUSuicideAttackTarget;                            		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x0074 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60974 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilitySuicideAttackTargetScore ( Property size: 5 iter: 7) 
// Class name index: 44053 
// 0x0028 (0x00D4 - 0x00AC)
class UH7AiUtilitySuicideAttackTargetScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySuicideGeneralEffort*            mInUGeneralEffort;                                		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTargetInterest*                  mInUTargetInterest;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortBias;                              		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61023 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionAttackTargetEnemy ( Property size: 1 iter: 5) 
// Class name index: 43769 
// 0x000B (0x006C - 0x0061)
class UH7AiActionAttackTargetEnemy : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61034 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionCastSpellHero ( Property size: 58 iter: 65) 
// Class name index: 43771 
// 0x01CF (0x0230 - 0x0061)
class UH7AiActionCastSpellHero : public UH7AiActionBase
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySpellSingleDamage*               mUSpellSingleDamage;                              		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySpellMultiDamage*                mUSpellMultiDamage;                               		// 0x0074 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFireBolt*               mUFireBolt;                                       		// 0x007C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityBurningDetermination*   mUBurningDetermination;                           		// 0x0084 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityInnerFire*              mUInnerFire;                                      		// 0x008C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFireWall*               mUFireWall;                                       		// 0x0094 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFrenzy*                 mUFrenzy;                                         		// 0x009C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFireBall*               mUFireBall;                                       		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityArmageddon*             mUArmageddon;                                     		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityStoneSkin*              mUStoneSkin;                                      		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityRegeneration*           mURegeneration;                                   		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityEntangle*               mUEntangle;                                       		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityPoisonSpray*            mUPoisonSpray;                                    		// 0x00CC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityStoneSpikes*            mUStoneSpikes;                                    		// 0x00D4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityEarthquake*             mUEarthquake;                                     		// 0x00DC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityPoisonCloud*            mUPoisonCloud;                                    		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFogShroud*              mUFogShroud;                                      		// 0x00EC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityBlizzard*               mUBlizzard;                                       		// 0x00F4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFrostBolt*              mUFrostBolt;                                      		// 0x00FC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityIceStrike*              mUIceStrike;                                      		// 0x0104 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityCircleOfWinter*         mUCircleOfWinter;                                 		// 0x010C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityLiquidMembrane*         mULiquidMembrane;                                 		// 0x0114 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityTsunami*                mUTsunami;                                        		// 0x011C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityLightningBurst*         mULightningBurst;                                 		// 0x0124 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityStormArrows*            mUStormArrows;                                    		// 0x012C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityLightningBolt*          mULightningBolt;                                  		// 0x0134 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityGustOfWind*             mUGustOfWind;                                     		// 0x013C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityLightningReflexes*      mULightningReflexes;                              		// 0x0144 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityCyclone*                mUCyclone;                                        		// 0x014C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityChainLightning*         mUChainLightning;                                 		// 0x0154 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityDespair*                mUDespair;                                        		// 0x015C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityWeakness*               mUWeakness;                                       		// 0x0164 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityPurge*                  mUPurge;                                          		// 0x016C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFaceOfFear*             mUFaceOfFear;                                     		// 0x0174 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityShadowImage*            mUShadowImage;                                    		// 0x017C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityAgony*                  mUAgony;                                          		// 0x0184 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityShadowCloak*            mUShadowCloak;                                    		// 0x018C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityHeal*                   mUHeal;                                           		// 0x0194 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilitySunBeam*                mUSunBeam;                                        		// 0x019C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityCelestialArmour*        mUCelestialArmour;                                		// 0x01A4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityCleansingLight*         mUCleansingLight;                                 		// 0x01AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityRetribution*            mURetribution;                                    		// 0x01B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilitySunBurst*               mUSunBurst;                                       		// 0x01BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityResurrection*           mUResurrection;                                   		// 0x01C4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityTimeControl*            mUTimeControl;                                    		// 0x01CC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityFortune*                mUFortune;                                        		// 0x01D4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityTeleport*               mUTeleport;                                       		// 0x01DC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityDispelMagic*            mUDispelMagic;                                    		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityImplosion*              mUImplosion;                                      		// 0x01EC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilitySummonElemental*        mUSummonElemental;                                		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityTimeStasis*             mUTimeStasis;                                     		// 0x01FC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityAdvance*                mUAdvance;                                        		// 0x0204 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityHoldPositions*          mUHoldPositions;                                  		// 0x020C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityOpenFire*               mUOpenFire;                                       		// 0x0214 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityEngage*                 mUEngage;                                         		// 0x021C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHeAbilityAttention*              mUAttention;                                      		// 0x0224 (0x0008) [0x0000000000000000]              
	int                                                Dubstep;                                          		// 0x022C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61080 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	bool RunScoresForDamageSpell ( class UH7AiCombatSensors* sensors, class AH7CombatHero* Hero, class UH7HeroAbility* Ability, float manaCost, TArray< struct FAiActionScore >* scores );
	bool RunScoresForAbility ( class UH7AiCombatSensors* sensors, class AH7CombatHero* Hero, class UH7HeroAbility* Ability, float manaCost, TArray< struct FAiActionScore >* scores );
	void ReplaceAddScore ( struct FAiActionScore Score, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityTsunami ( Property size: 1 iter: 4) 
// Class name index: 44012 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityTsunami : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61218 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalTsunamiTargetCell ( class AH7CombatHero* Hero, int trows );
};



// Class MMH7Game.H7AiUtilityHeAbilityCircleOfWinter ( Property size: 1 iter: 4) 
// Class name index: 43968 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityCircleOfWinter : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61223 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalCircleOfWinterTargetCell ( class AH7CombatHero* Hero, struct FIntPoint Dimension, unsigned long isFilled );
};



// Class MMH7Game.H7AiUtilityHeAbilityFireBall ( Property size: 1 iter: 4) 
// Class name index: 43977 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityFireBall : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61230 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalFireBallTargetCell ( class AH7CombatHero* Hero, struct FIntPoint Dimension );
};



// Class MMH7Game.H7AiUtilityHeAbilityCyclone ( Property size: 1 iter: 4) 
// Class name index: 43970 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityCyclone : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61233 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalCycloneTargetCell ( class AH7CombatHero* Hero, struct FIntPoint Dimension );
};



// Class MMH7Game.H7AiUtilityHeAbilityBlizzard ( Property size: 0 iter: 3) 
// Class name index: 43964 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityHeAbilityBlizzard : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61236 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalBlizzardTargetCell ( class AH7CombatHero* Hero, struct FIntPoint Dimension );
};



// Class MMH7Game.H7AiUtilityHeAbilityStoneSpikes ( Property size: 1 iter: 4) 
// Class name index: 44004 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityStoneSpikes : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61239 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalStoneSpikeTargetCell ( class AH7CombatHero* Hero );
};



// Class MMH7Game.H7AiUtilityHeAbilityArmageddon ( Property size: 1 iter: 4) 
// Class name index: 43962 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityArmageddon : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61242 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalArmageddonTargetCell ( class AH7CombatHero* Hero );
};



// Class MMH7Game.H7AiUtilityHeAbilityPoisonCloud ( Property size: 1 iter: 4) 
// Class name index: 43995 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityPoisonCloud : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61245 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalPoisonCloudTargetCell ( class AH7CombatHero* Hero, struct FIntPoint Dimension );
};



// Class MMH7Game.H7AiUtilityHeAbilityEarthquake ( Property size: 1 iter: 4) 
// Class name index: 43973 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityEarthquake : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61248 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalEarthquakeTargetCell ( class AH7CombatHero* Hero );
};



// Class MMH7Game.H7AiUtilityHeAbilitySunBurst ( Property size: 1 iter: 4) 
// Class name index: 44008 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilitySunBurst : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61251 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalSunBurstTargetCell ( class AH7CombatHero* Hero );
};



// Class MMH7Game.H7AiUtilityHeAbilityFireWall ( Property size: 1 iter: 4) 
// Class name index: 43979 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityFireWall : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellAreaDamage*                 mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61254 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalFireWallTargetCell ( class AH7CombatHero* Hero, struct FIntPoint Dimension );
};



// Class MMH7Game.H7AiUtilityHeAbilitySummonElemental ( Property size: 1 iter: 4) 
// Class name index: 44006 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilitySummonElemental : public UH7AiUtilityCombiner
{
public:
	TArray< class UH7CombatMapCell* >                  mPossibleCells;                                   		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61257 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalSummonElementalTargetCell ( class AH7CombatHero* Hero );
};



// Class MMH7Game.H7AiUtilitySpellTargetCheck ( Property size: 0 iter: 2) 
// Class name index: 44050 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySpellTargetCheck : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61266 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySpellSingleDamage ( Property size: 0 iter: 2) 
// Class name index: 44048 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySpellSingleDamage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61267 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySpellMultiDamage ( Property size: 0 iter: 2) 
// Class name index: 44046 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySpellMultiDamage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61268 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityLightningBurst ( Property size: 2 iter: 4) 
// Class name index: 43991 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityLightningBurst : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61269 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityHeal ( Property size: 1 iter: 3) 
// Class name index: 43985 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityHeal : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellSingleHeal*                 mUSpellHeal;                                      		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61270 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityLightningBolt ( Property size: 1 iter: 3) 
// Class name index: 43990 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityLightningBolt : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellSingleDamage*               mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61271 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityChainLightning ( Property size: 1 iter: 3) 
// Class name index: 43967 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityChainLightning : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellMultiDamage*                mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61272 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityFireBolt ( Property size: 1 iter: 3) 
// Class name index: 43978 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityFireBolt : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellSingleDamage*               mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61273 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityFrostBolt ( Property size: 1 iter: 3) 
// Class name index: 43983 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityFrostBolt : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellSingleDamage*               mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61274 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilitySunBeam ( Property size: 1 iter: 3) 
// Class name index: 44007 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilitySunBeam : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellSingleDamage*               mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61275 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityIceStrike ( Property size: 3 iter: 5) 
// Class name index: 43987 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityIceStrike : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanAttack*               mUCreatureCanAttack;                              		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61276 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityLiquidMembrane ( Property size: 3 iter: 5) 
// Class name index: 43993 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityLiquidMembrane : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanAttack*               mUCreatureCanAttack;                              		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61277 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityCelestialArmour ( Property size: 3 iter: 5) 
// Class name index: 43966 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityCelestialArmour : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanBeAttacked*           mUCreatureCanBeAttacked;                          		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61278 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityRetribution ( Property size: 3 iter: 5) 
// Class name index: 44000 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityRetribution : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanBeAttacked*           mUCreatureCanBeAttacked;                          		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61279 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityResurrection ( Property size: 1 iter: 3) 
// Class name index: 43999 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityResurrection : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellSingleHeal*                 mUSpellHeal;                                      		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61280 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityFogShroud ( Property size: 4 iter: 6) 
// Class name index: 43980 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityHeAbilityFogShroud : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureIsRanged*                mUCreatureIsRanged;                               		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureAdjacentToAlly*          mUCreatureAdjAlly;                                		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61281 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityFrenzy ( Property size: 4 iter: 6) 
// Class name index: 43982 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityHeAbilityFrenzy : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureIsRanged*                mUCreatureIsRanged;                               		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureAdjacentToAlly*          mUCreatureAdjAlly;                                		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61282 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityInnerFire ( Property size: 3 iter: 5) 
// Class name index: 43989 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityInnerFire : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanAttack*               mUCreatureCanAttack;                              		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61283 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityBurningDetermination ( Property size: 3 iter: 5) 
// Class name index: 43965 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityBurningDetermination : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStat*                    mUCreatureStat;                                   		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61284 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityPoisonSpray ( Property size: 2 iter: 4) 
// Class name index: 43996 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityPoisonSpray : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61285 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityEntangle ( Property size: 4 iter: 6) 
// Class name index: 43975 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityHeAbilityEntangle : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureIsRanged*                mUCreatureIsRanged;                               		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureAdjacentToAlly*          mUCreatureAdjAlly;                                		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61286 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityRegeneration ( Property size: 3 iter: 5) 
// Class name index: 43998 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityRegeneration : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureTier*                    mUCreatureTier;                                   		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61287 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityStoneSkin ( Property size: 5 iter: 7) 
// Class name index: 44003 
// 0x0028 (0x00D4 - 0x00AC)
class UH7AiUtilityHeAbilityStoneSkin : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureIsRanged*                mUCreatureIsRanged;                               		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureAdjacentToEnemy*         mUCreatureAdjEnemy;                               		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanBeAttacked*           mUCreatureCanBeAttacked;                          		// 0x00CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61288 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityTimeStasis ( Property size: 2 iter: 4) 
// Class name index: 44011 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityTimeStasis : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61289 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityImplosion ( Property size: 1 iter: 3) 
// Class name index: 43988 
// 0x0008 (0x00B4 - 0x00AC)
class UH7AiUtilityHeAbilityImplosion : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellSingleDamage*               mUSpellDamage;                                    		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61290 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityFortune ( Property size: 3 iter: 5) 
// Class name index: 43981 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityFortune : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStat*                    mUCreatureStat;                                   		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61291 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityShadowCloak ( Property size: 3 iter: 5) 
// Class name index: 44001 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityShadowCloak : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanBeAttacked*           mUCreatureCanBeAttacked;                          		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61292 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityWeakness ( Property size: 3 iter: 5) 
// Class name index: 44013 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityWeakness : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureIsRanged*                mUCreatureIsRanged;                               		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61293 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityDespair ( Property size: 2 iter: 4) 
// Class name index: 43971 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityDespair : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61294 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityLightningReflexes ( Property size: 4 iter: 6) 
// Class name index: 43992 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityHeAbilityLightningReflexes : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureIsRanged*                mUCreatureIsRanged;                               		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCanAttack*               mUCreatureCanAttack;                              		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61295 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityStormArrows ( Property size: 2 iter: 4) 
// Class name index: 44005 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityStormArrows : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanRangeAttack*                  mUCanRangeAttack;                                 		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61296 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityCleansingLight ( Property size: 0 iter: 2) 
// Class name index: 43969 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityHeAbilityCleansingLight : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61297 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityTimeControl ( Property size: 2 iter: 4) 
// Class name index: 44010 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityTimeControl : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61298 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityTeleport ( Property size: 0 iter: 2) 
// Class name index: 44009 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityHeAbilityTeleport : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61299 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityDispelMagic ( Property size: 0 iter: 2) 
// Class name index: 43972 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityHeAbilityDispelMagic : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61300 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityGustOfWind ( Property size: 0 iter: 2) 
// Class name index: 43984 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityHeAbilityGustOfWind : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61301 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityAdvance ( Property size: 2 iter: 4) 
// Class name index: 43960 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityAdvance : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCount*                   mUCreatureCount;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61302 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityHoldPositions ( Property size: 3 iter: 5) 
// Class name index: 43986 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityHoldPositions : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCount*                   mUCreatureCount;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRangedCreatureCount*             mURangedCreatureCount;                            		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61303 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityEngage ( Property size: 2 iter: 4) 
// Class name index: 43974 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityEngage : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCount*                   mUCreatureCount;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61304 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityOpenFire ( Property size: 2 iter: 4) 
// Class name index: 43994 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityOpenFire : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCount*                   mUCreatureCount;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61305 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityAttention ( Property size: 2 iter: 4) 
// Class name index: 43963 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityAttention : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureCount*                   mUCreatureCount;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61306 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityPurge ( Property size: 0 iter: 2) 
// Class name index: 43997 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityHeAbilityPurge : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61307 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityFaceOfFear ( Property size: 3 iter: 5) 
// Class name index: 43976 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityHeAbilityFaceOfFear : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureAdjacentToEnemy*         mUCreatureAdjEnemy;                               		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61308 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityShadowImage ( Property size: 0 iter: 2) 
// Class name index: 44002 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityHeAbilityShadowImage : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61309 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeAbilityAgony ( Property size: 2 iter: 4) 
// Class name index: 43961 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityHeAbilityAgony : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilitySpellTargetCheck*                mUSpellTargetCheck;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCreatureStrength*                mUCreatureStrength;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61310 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionChillAroundTown ( Property size: 1 iter: 6) 
// Class name index: 43772 
// 0x000B (0x006C - 0x0061)
class UH7AiActionChillAroundTown : public UH7AiActionBase
{
public:
	class UH7AiUtilityChillScore*                      mUChillScore;                                     		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61312 ];

		return pClassPointer;
	};

	class UH7AdventureMapCell* GetRandomCellAroundSite ( class AH7VisitableSite* Site );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7InstantCommandTeleportToTown ( Property size: 3 iter: 10) 
// Class name index: 44419 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandTeleportToTown : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7Town*                                     mTown;                                            		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                mManaCost;                                        		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61366 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, class AH7AdventureHero* Hero, int manaCost );
};



// Class MMH7Game.H7AiUtilityChillScore ( Property size: 3 iter: 5) 
// Class name index: 43899 
// 0x0014 (0x00C0 - 0x00AC)
class UH7AiUtilityChillScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffortCell*              mInUMovementEffortTown;                           		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRecall*                          mInURecall;                                       		// 0x00B4 (0x0008) [0x0000000000000000]              
	unsigned long                                      usedRecall : 1;                                   		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61369 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCongregate ( Property size: 5 iter: 7) 
// Class name index: 43901 
// 0x0028 (0x00D4 - 0x00AC)
class UH7AiUtilityCongregate : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffort*                  mUMovementEffort;                                 		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityReinforcementGain*               mUReinforcementGain;                              		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              mReinforcementBias;                               		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61439 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionDefend ( Property size: 0 iter: 4) 
// Class name index: 43775 
// 0x0003 (0x0064 - 0x0061)
class UH7AiActionDefend : public UH7AiActionBase
{
public:
//	 LastOffset: 61
//	 Class Propsize: 64

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61448 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionDestroyTarget ( Property size: 1 iter: 5) 
// Class name index: 43776 
// 0x000B (0x006C - 0x0061)
class UH7AiActionDestroyTarget : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61463 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionDevelopTownBuilding ( Property size: 0 iter: 4) 
// Class name index: 43777 
// 0x0003 (0x0064 - 0x0061)
class UH7AiActionDevelopTownBuilding : public UH7AiActionBase
{
public:
//	 LastOffset: 61
//	 Class Propsize: 64

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61503 ];

		return pClassPointer;
	};

	bool PerformActionTown ( class AH7AreaOfControlSiteLord* Site, struct FAiActionScore Score );
	void RunScoresTown ( class UH7AiAdventureSensors* sensors, class AH7AreaOfControlSiteLord* currentControlSite, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionExplore ( Property size: 2 iter: 6) 
// Class name index: 43778 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionExplore : public UH7AiActionBase
{
public:
	class UH7AiUtilityExplore*                         mUExplore;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTeleportInterest*                mUTeleportInterest;                               		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61562 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityExplore ( Property size: 3 iter: 5) 
// Class name index: 43949 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityExplore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x00AC (0x0008) [0x0000000000000000]              
	float                                              mMovementEffortBias;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortBias;                              		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61599 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTeleportInterest ( Property size: 0 iter: 2) 
// Class name index: 44059 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTeleportInterest : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61616 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionFlee ( Property size: 1 iter: 5) 
// Class name index: 43779 
// 0x000B (0x006C - 0x0061)
class UH7AiActionFlee : public UH7AiActionBase
{
public:
	class UH7AiUtilityFleeScore*                       mUFleeScore;                                      		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61618 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityFleeScore ( Property size: 13 iter: 15) 
// Class name index: 43951 
// 0x005C (0x0108 - 0x00AC)
class UH7AiUtilityFleeScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementReach*                   mUMovementReachEnemy;                             		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityFightingEffort*                  mUFightingEffort;                                 		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMovementEffortRe*                mUMovementEffortTown;                             		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMovementEffortAllied*            mUMovementEffortAllied;                           		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRecall*                          mURecall;                                         		// 0x00CC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTownThreat*                      mUTownThreat;                                     		// 0x00D4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTargetCutoffRange*               mUTargetCutoffRange;                              		// 0x00DC (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x00E4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      usedRecall : 1;                                   		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      checkForSite : 1;                                 		// 0x00FC (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              mMovementEffortBias;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortBias;                              		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61661 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionGarrisonTown ( Property size: 1 iter: 5) 
// Class name index: 43780 
// 0x000B (0x006C - 0x0061)
class UH7AiActionGarrisonTown : public UH7AiActionBase
{
public:
	class UH7AiUtilityGarrisonScore*                   mUGarrison;                                       		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61672 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityGarrisonScore ( Property size: 5 iter: 7) 
// Class name index: 43954 
// 0x002C (0x00D8 - 0x00AC)
class UH7AiUtilityGarrisonScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffortRe*                mUMovementEffortSite;                             		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTownThreat*                      mUTownThreat;                                     		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTownDefense*                     mUTownDefense;                                    		// 0x00BC (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61701 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionGather ( Property size: 1 iter: 6) 
// Class name index: 43781 
// 0x000B (0x006C - 0x0061)
class UH7AiActionGather : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61705 ];

		return pClassPointer;
	};

	bool CheckIfSiteIsLocked ( class AH7VisitableSite* Site, class AH7AdventureHero* evaluationHero );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionHireHero ( Property size: 1 iter: 5) 
// Class name index: 43782 
// 0x000B (0x006C - 0x0061)
class UH7AiActionHireHero : public UH7AiActionBase
{
public:
	class UH7AiUtilityTownArmyCount*                   mInUTownArmyCount;                                		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61749 ];

		return pClassPointer;
	};

	bool PerformActionTown ( class AH7AreaOfControlSiteLord* Site, struct FAiActionScore Score );
	void RunScoresTown ( class UH7AiAdventureSensors* sensors, class AH7AreaOfControlSiteLord* currentControlSite, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityTownArmyCount ( Property size: 0 iter: 2) 
// Class name index: 44061 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTownArmyCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61796 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionMoveAttackCreatureStack ( Property size: 4 iter: 9) 
// Class name index: 43783 
// 0x0023 (0x0084 - 0x0061)
class UH7AiActionMoveAttackCreatureStack : public UH7AiActionBase
{
public:
	class UH7AiUtilityHasAdjacentEnemy*                mInUHasAdjacentEnemy;                             		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanMoveAttack*                   mInUCanMoveAttack;                                		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRangeCasualityCount*             mInUCasualityCount;                               		// 0x0074 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRangeCreatureDamage*             mInUCreatureDamage;                               		// 0x007C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61798 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	unsigned char GetBestDirectionToAttack ( class AH7Unit* Unit, class AH7CreatureStack* Target, class UH7CombatMapCell** hitCell );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityCanMoveAttack ( Property size: 0 iter: 2) 
// Class name index: 43896 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCanMoveAttack : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61862 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionMoveCreatureStack ( Property size: 6 iter: 11) 
// Class name index: 43784 
// 0x0033 (0x0094 - 0x0061)
class UH7AiActionMoveCreatureStack : public UH7AiActionBase
{
public:
	class UH7AiUtilityStackReachesTileIn1Turn*         mInUTurnValue;                                    		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityStackMoveDistance*               mInUMoveDistance;                                 		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityThreatLevel*                     mInUThreatLevel;                                  		// 0x0074 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityOpportunity*                     mInUOpportunity;                                  		// 0x007C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHasAnyAdjacentEnemy*             mInUAdjacentEnemy;                                		// 0x0084 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityEnemyDistance*                   mInUEnemyDistance;                                		// 0x008C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61864 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	bool StackCanMoveTo ( class AH7CreatureStack* cstack, class UH7CombatMapCell* cell );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityStackReachesTileIn1Turn ( Property size: 0 iter: 2) 
// Class name index: 44052 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityStackReachesTileIn1Turn : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61937 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityThreatLevel ( Property size: 0 iter: 2) 
// Class name index: 44060 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityThreatLevel : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61938 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityOpportunity ( Property size: 0 iter: 2) 
// Class name index: 44029 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityOpportunity : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61939 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityEnemyDistance ( Property size: 0 iter: 2) 
// Class name index: 43948 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityEnemyDistance : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61940 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityStackMoveDistance ( Property size: 0 iter: 2) 
// Class name index: 44051 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityStackMoveDistance : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61941 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionPickup ( Property size: 1 iter: 6) 
// Class name index: 43787 
// 0x000B (0x006C - 0x0061)
class UH7AiActionPickup : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62039 ];

		return pClassPointer;
	};

	bool CheckIfSiteIsLocked ( class AH7VisitableSite* Site, class AH7AdventureHero* evaluationHero );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionPlunder ( Property size: 2 iter: 7) 
// Class name index: 43788 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionPlunder : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62079 ];

		return pClassPointer;
	};

	bool CheckIfSiteIsLocked ( class AH7VisitableSite* Site, class AH7AdventureHero* evaluationHero );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionRangeAttackCreatureStack ( Property size: 2 iter: 6) 
// Class name index: 43789 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionRangeAttackCreatureStack : public UH7AiActionBase
{
public:
	class UH7AiUtilityRangeCasualityCount*             mInUCasualityCount;                               		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityRangeCreatureDamage*             mInUCreatureDamage;                               		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62127 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionRecruitment ( Property size: 1 iter: 5) 
// Class name index: 43790 
// 0x000B (0x006C - 0x0061)
class UH7AiActionRecruitment : public UH7AiActionBase
{
public:
	class UH7AiUtilityRecruitmentScore*                mURecruitmentScore;                               		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62168 ];

		return pClassPointer;
	};

	bool PerformActionTown ( class AH7AreaOfControlSiteLord* Site, struct FAiActionScore Score );
	void RunScoresTown ( class UH7AiAdventureSensors* sensors, class AH7AreaOfControlSiteLord* currentControlSite, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityRecruitmentScore ( Property size: 3 iter: 5) 
// Class name index: 44036 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityRecruitmentScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityPoolGarrison*                    mInUPoolGarrison;                                 		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTownDistanceCombined*            mInUTownDistance;                                 		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityGameDayOfWeek*                   mInUGameDayOfWeek;                                		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62199 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionReinforce ( Property size: 1 iter: 5) 
// Class name index: 43791 
// 0x000B (0x006C - 0x0061)
class UH7AiActionReinforce : public UH7AiActionBase
{
public:
	class UH7AiUtilityReinforceScore*                  mUReinforce;                                      		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62201 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityReinforceScore ( Property size: 5 iter: 7) 
// Class name index: 44039 
// 0x0028 (0x00D4 - 0x00AC)
class UH7AiUtilityReinforceScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffortRe*                mInUMovementEffort;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityReinforcementGainReverse*        mInUReinforcementGain;                            		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              mReinforcementBias;                               		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62234 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionRepairTarget ( Property size: 1 iter: 5) 
// Class name index: 43792 
// 0x000B (0x006C - 0x0061)
class UH7AiActionRepairTarget : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62243 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionReplenish ( Property size: 1 iter: 6) 
// Class name index: 43793 
// 0x000B (0x006C - 0x0061)
class UH7AiActionReplenish : public UH7AiActionBase
{
public:
	class UH7AiUtilityReplenishScore*                  mUReplenish;                                      		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62285 ];

		return pClassPointer;
	};

	void HandlePreUpgradeVisit ( class AH7VisitableSite* Site, class AH7AdventureArmy* Army );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityReplenishScore ( Property size: 4 iter: 6) 
// Class name index: 44040 
// 0x0024 (0x00D0 - 0x00AC)
class UH7AiUtilityReplenishScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffortRe*                mInUMovementEffort;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityUpgradeGain*                     mInUUpgradeGain;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62342 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionTrade ( Property size: 1 iter: 5) 
// Class name index: 43794 
// 0x000B (0x006C - 0x0061)
class UH7AiActionTrade : public UH7AiActionBase
{
public:
	class UH7AiUtilityTrade*                           mUTrade;                                          		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62350 ];

		return pClassPointer;
	};

	bool PerformActionTown ( class AH7AreaOfControlSiteLord* Site, struct FAiActionScore Score );
	void RunScoresTown ( class UH7AiAdventureSensors* sensors, class AH7AreaOfControlSiteLord* currentControlSite, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7TownMarketplace ( Property size: 1 iter: 2) 
// Class name index: 44725 
// 0x0008 (0x0138 - 0x0130)
class UH7TownMarketplace : public UH7TownBuilding
{
public:
	class UH7TradingTable*                             mTradingTable;                                    		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62379 ];

		return pClassPointer;
	};

	class UH7TradingTable* GetTradingTable ( );
};



// Class MMH7Game.H7AiUtilityTrade ( Property size: 3 iter: 5) 
// Class name index: 44068 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityTrade : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityTradeResource*                   mInUTradeResource;                                		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityResourceStockpile*               mInUResourceStockpile;                            		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62388 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionUpgradeCreatures ( Property size: 1 iter: 5) 
// Class name index: 43795 
// 0x000B (0x006C - 0x0061)
class UH7AiActionUpgradeCreatures : public UH7AiActionBase
{
public:
	class UH7AiUtilityUpgradeCreatureScore*            mUUpgradeCreatureScore;                           		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62391 ];

		return pClassPointer;
	};

	bool PerformActionTown ( class AH7AreaOfControlSiteLord* Site, struct FAiActionScore Score );
	void RunScoresTown ( class UH7AiAdventureSensors* sensors, class AH7AreaOfControlSiteLord* currentControlSite, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityUpgradeCreatureScore ( Property size: 2 iter: 4) 
// Class name index: 44070 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityUpgradeCreatureScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCanUpgrade*                      mUCanUpgrade;                                     		// 0x00AC (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62423 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionUseAbilityCreature ( Property size: 33 iter: 38) 
// Class name index: 43796 
// 0x010B (0x016C - 0x0061)
class UH7AiActionUseAbilityCreature : public UH7AiActionBase
{
public:
	class UH7AiUtilityCrAbilityAcidBreath*             mUAcidBreath;                                     		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilitySolderingHands*         mUSolderingHands;                                 		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityMagicAbsorption*        mUMagicAbsorption;                                		// 0x0074 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityResurrection*           mUResurrection;                                   		// 0x007C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityPiercingShot*           mUPiercingShot;                                   		// 0x0084 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityFeralCharge*            mUFeralCharge;                                    		// 0x008C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityBackstab*               mUBackstab;                                       		// 0x0094 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCharge*                 mUCharge;                                         		// 0x009C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityEntanglingRoots*        mUEntanglingRoots;                                		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityFatalStrike*            mUFatalStrike;                                    		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityFieryEye*               mUFieryEye;                                       		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityInspiringPresence*      mUInspiringPresence;                              		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityLifeDrain*              mULifeDrain;                                      		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityLeafDaggers*            mULeafDaggers;                                    		// 0x00CC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityLivingShelter*          mULivingShelter;                                  		// 0x00D4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityMightyPounce*           mUMightyPounce;                                   		// 0x00DC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityNova*                   mUNova;                                           		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityPoisonedBlades*         mUPoisonedBlades;                                 		// 0x00EC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilitySixHeaded*              mUSixHeaded;                                      		// 0x00F4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilitySplash*                 mUSplash;                                         		// 0x00FC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilitySoulFlayingBreath*      mUSoulFlayingBreath;                              		// 0x0104 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilitySoulReaver*             mUSoulReaver;                                     		// 0x010C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityStrikeAndReturn*        mUStrikeAndReturn;                                		// 0x0114 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityStrikeAndReturnMelee*   mUStrikeAndReturnMelee;                           		// 0x011C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilitySweepingBash*           mUSweepingBash;                                   		// 0x0124 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityThorns*                 mUThorns;                                         		// 0x012C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityWitheringBreath*        mUWitheringBreath;                                		// 0x0134 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityWitheringVenom*         mUWitheringVenom;                                 		// 0x013C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityDivingAttack*           mUDivingAttack;                                   		// 0x0144 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityFireNova*               mUFireNova;                                       		// 0x014C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityWhirlingDeath*          mUWhirlingDeath;                                  		// 0x0154 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityArmourPiercing*         mUArmourPiercing;                                 		// 0x015C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityBreathOfLight*          mUBreathOfLight;                                  		// 0x0164 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62425 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void RunScoresForAbility ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, class UH7BaseAbility* Ability, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityDivingAttack ( Property size: 5 iter: 8) 
// Class name index: 43909 
// 0x0030 (0x00DC - 0x00AC)
class UH7AiUtilityCrAbilityDivingAttack : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHasAnyAdjacentEnemy*             mInUHasAdjEnemy;                                  		// 0x00BC (0x0008) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mPossibleCells;                                   		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapCell*                            mTargetCell;                                      		// 0x00D4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62498 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
	class UH7CombatMapCell* GetOptimalDivingAttackTargetCell ( class AH7CombatHero* Hero );
};



// Class MMH7Game.H7AiUtilityCrAbilityAcidBreath ( Property size: 2 iter: 4) 
// Class name index: 43902 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityAcidBreath : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62504 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilitySolderingHands ( Property size: 3 iter: 5) 
// Class name index: 43926 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityCrAbilitySolderingHands : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityTargetCheck*            mInUTargetCheck;                                  		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHealingPercentage*               mInUHealingPercentage;                            		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityStackReachesTileIn1Turn*         mInUTurnValue;                                    		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62505 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityMagicAbsorption ( Property size: 0 iter: 2) 
// Class name index: 43919 
// 0x0000 (0x00AC - 0x00AC)
class UH7AiUtilityCrAbilityMagicAbsorption : public UH7AiUtilityCombiner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62506 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityResurrection ( Property size: 2 iter: 4) 
// Class name index: 43924 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityResurrection : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityTargetCheck*            mInUTargetCheck;                                  		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHealingPercentage*               mInUHealingPercentage;                            		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62507 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityPiercingShot ( Property size: 2 iter: 4) 
// Class name index: 43922 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityPiercingShot : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62508 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityFeralCharge ( Property size: 3 iter: 5) 
// Class name index: 43912 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityCrAbilityFeralCharge : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanMoveAttack*                   mUMoveAttack;                                     		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62509 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityBackstab ( Property size: 2 iter: 4) 
// Class name index: 43904 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityBackstab : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62510 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityCharge ( Property size: 2 iter: 4) 
// Class name index: 43907 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityCharge : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62511 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityEntanglingRoots ( Property size: 2 iter: 4) 
// Class name index: 43910 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityEntanglingRoots : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62512 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityFatalStrike ( Property size: 2 iter: 4) 
// Class name index: 43911 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityFatalStrike : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62513 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityFieryEye ( Property size: 2 iter: 4) 
// Class name index: 43913 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityFieryEye : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62514 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityInspiringPresence ( Property size: 2 iter: 4) 
// Class name index: 43915 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityInspiringPresence : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62515 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityLeafDaggers ( Property size: 2 iter: 4) 
// Class name index: 43916 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityLeafDaggers : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62516 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityLifeDrain ( Property size: 2 iter: 4) 
// Class name index: 43917 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityLifeDrain : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62517 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityLivingShelter ( Property size: 2 iter: 4) 
// Class name index: 43918 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityLivingShelter : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62518 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityMightyPounce ( Property size: 2 iter: 4) 
// Class name index: 43920 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityMightyPounce : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62519 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityNova ( Property size: 2 iter: 4) 
// Class name index: 43921 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityNova : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62520 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityPoisonedBlades ( Property size: 2 iter: 4) 
// Class name index: 43923 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityPoisonedBlades : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62521 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilitySixHeaded ( Property size: 2 iter: 4) 
// Class name index: 43925 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilitySixHeaded : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62522 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilitySplash ( Property size: 2 iter: 4) 
// Class name index: 43929 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilitySplash : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62523 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilitySoulFlayingBreath ( Property size: 2 iter: 4) 
// Class name index: 43927 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilitySoulFlayingBreath : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62524 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilitySoulReaver ( Property size: 3 iter: 5) 
// Class name index: 43928 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityCrAbilitySoulReaver : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanMoveAttack*                   mUMoveAttack;                                     		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62525 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityStrikeAndReturn ( Property size: 4 iter: 6) 
// Class name index: 43930 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityCrAbilityStrikeAndReturn : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityHasAnyAdjacentEnemy*             mInUHasAdjEnemy;                                  		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanMoveAttack*                   mUMoveAttack;                                     		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62526 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityStrikeAndReturnMelee ( Property size: 3 iter: 5) 
// Class name index: 43931 
// 0x0018 (0x00C4 - 0x00AC)
class UH7AiUtilityCrAbilityStrikeAndReturnMelee : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanMoveAttack*                   mUMoveAttack;                                     		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62527 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilitySweepingBash ( Property size: 2 iter: 4) 
// Class name index: 43932 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilitySweepingBash : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62528 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityThorns ( Property size: 2 iter: 4) 
// Class name index: 43934 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityThorns : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62529 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityWitheringBreath ( Property size: 2 iter: 4) 
// Class name index: 43936 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityWitheringBreath : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62530 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityWitheringVenom ( Property size: 2 iter: 4) 
// Class name index: 43937 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityWitheringVenom : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62531 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityFireNova ( Property size: 2 iter: 4) 
// Class name index: 43914 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityFireNova : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62532 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityWhirlingDeath ( Property size: 2 iter: 4) 
// Class name index: 43935 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityWhirlingDeath : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62533 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityArmourPiercing ( Property size: 2 iter: 4) 
// Class name index: 43903 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityArmourPiercing : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62534 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityBreathOfLight ( Property size: 2 iter: 4) 
// Class name index: 43905 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityCrAbilityBreathOfLight : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityCrAbilityCasualityCount*         mInUCasualityCount;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCrAbilityCreatureDamage*         mInUCreatureDamage;                               		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62535 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionUseAbilityHero ( Property size: 3 iter: 6) 
// Class name index: 43797 
// 0x001B (0x007C - 0x0061)
class UH7AiActionUseAbilityHero : public UH7AiActionBase
{
public:
	class UH7AiUtilityCanMoveAttack*                   mUtility1;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanCastSpellHero*                mUtility2;                                        		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AiUtilityCanRangeAttack*                  mUtility3;                                        		// 0x0074 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62537 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
};



// Class MMH7Game.H7AiUtilityCanCastSpellHero ( Property size: 0 iter: 2) 
// Class name index: 43895 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCanCastSpellHero : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62565 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCanRangeAttack ( Property size: 0 iter: 2) 
// Class name index: 43897 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCanRangeAttack : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62566 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionUseSite ( Property size: 2 iter: 6) 
// Class name index: 43798 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62568 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Boost ( Property size: 2 iter: 6) 
// Class name index: 43799 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Boost : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62607 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Commission ( Property size: 2 iter: 7) 
// Class name index: 43800 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Commission : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62642 ];

		return pClassPointer;
	};

	bool CheckIfSiteIsLocked ( class AH7VisitableSite* Site, class AH7AdventureHero* evaluationHero );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Exercise ( Property size: 2 iter: 6) 
// Class name index: 43801 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Exercise : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62688 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Keymaster ( Property size: 2 iter: 6) 
// Class name index: 43802 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Keymaster : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62727 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Obelisk ( Property size: 2 iter: 6) 
// Class name index: 43803 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Obelisk : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62766 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Observe ( Property size: 2 iter: 6) 
// Class name index: 43804 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Observe : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62805 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Shop ( Property size: 2 iter: 7) 
// Class name index: 43805 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Shop : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62844 ];

		return pClassPointer;
	};

	bool CheckIfSiteIsLocked ( class AH7VisitableSite* Site, class AH7AdventureHero* evaluationHero );
	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionUseSite_Study ( Property size: 2 iter: 6) 
// Class name index: 43806 
// 0x0013 (0x0074 - 0x0061)
class UH7AiActionUseSite_Study : public UH7AiActionBase
{
public:
	class UH7AiUtilityAttackTargetScore*               mUAttackTarget;                                   		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySiteAvailable*                   mUSiteAvailable;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62890 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScoresAdv ( class UH7AiAdventureSensors* sensors, class AH7Unit* currentUnit, class AH7AdventureConfiguration* cfg, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiActionWaitCreature ( Property size: 1 iter: 5) 
// Class name index: 43807 
// 0x000B (0x006C - 0x0061)
class UH7AiActionWaitCreature : public UH7AiActionBase
{
public:
	class UH7AiUtilityGoodTimeToWait*                  mUtility1;                                        		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62929 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityGoodTimeToWait ( Property size: 0 iter: 2) 
// Class name index: 43956 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityGoodTimeToWait : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62947 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiActionWaitHero ( Property size: 1 iter: 5) 
// Class name index: 43808 
// 0x000B (0x006C - 0x0061)
class UH7AiActionWaitHero : public UH7AiActionBase
{
public:
	class UH7AiUtilityHasGreaterDamage*                mUtility1;                                        		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62949 ];

		return pClassPointer;
	};

	bool PerformAction ( class AH7Unit* Unit, struct FAiActionScore Score );
	void RunScores ( class UH7AiCombatSensors* sensors, class AH7Unit* currentUnit, TArray< struct FAiActionScore >* scores );
	void Setup ( );
	struct FString DebugName ( );
};



// Class MMH7Game.H7AiUtilityHasGreaterDamage ( Property size: 0 iter: 2) 
// Class name index: 43959 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityHasGreaterDamage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62971 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7InstantCommandIncreaseSkill ( Property size: 4 iter: 9) 
// Class name index: 44390 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandIncreaseSkill : public UH7InstantCommandBase
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mSkillId;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	unsigned long                                      mOverwriteCheck : 1;                              		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mForfree : 1;                                     		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63191 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7EditorHero* Hero, int SkillID, unsigned long overwriteCheck, unsigned long forfree );
};



// Class MMH7Game.H7InstantCommandLearnAbility ( Property size: 3 iter: 8) 
// Class name index: 44393 
// 0x001C (0x007C - 0x0060)
class UH7InstantCommandLearnAbility : public UH7InstantCommandBase
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mSkillId;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FString                                     mAbilityID;                                       		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63194 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7EditorHero* Hero, int SkillID, struct FString abilityID );
};



// Class MMH7Game.H7AiSensorParam ( Property size: 17 iter: 52) 
// Class name index: 43862 
// 0x007C (0x00DC - 0x0060)
class UH7AiSensorParam : public UObject
{
public:
	unsigned char                                      mParamType;                                       		// 0x0060 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCreatureStat;                                    		// 0x0061 (0x0001) [0x0000000000000000]              
	unsigned char                                      mCreatureTier;                                    		// 0x0062 (0x0001) [0x0000000000000000]              
	class AH7Unit*                                     mUnit;                                            		// 0x0064 (0x0008) [0x0000000000000000]              
	class UH7CombatMapCell*                            mCMapCell;                                        		// 0x006C (0x0008) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mAMapCell;                                        		// 0x0074 (0x0008) [0x0000000000000000]              
	class AH7CombatArmy*                               mCombatArmy;                                      		// 0x007C (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mAdventureArmy;                                   		// 0x0084 (0x0008) [0x0000000000000000]              
	class AH7VisitableSite*                            mVisSite;                                         		// 0x008C (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mPlayer;                                          		// 0x0094 (0x0008) [0x0000000000000000]              
	class UH7TownBuilding*                             mBuilding;                                        		// 0x009C (0x0008) [0x0000000000000000]              
	class AH7Town*                                     mTown;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UH7HeroAbility*                              mHeroAbility;                                     		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7CreatureAbility*                          mCreatureAbility;                                 		// 0x00B4 (0x0008) [0x0000000000000000]              
	class AH7Teleporter*                               mTeleporter;                                      		// 0x00BC (0x0008) [0x0000000000000000]              
	struct FResourceStockpile                          mResourceStockpile;                               		// 0x00C4 (0x0010) [0x0000000000000000]              
	class UH7BaseCreatureStack*                        mBaseCreatureStack;                               		// 0x00D4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63221 ];

		return pClassPointer;
	};

	void Clear ( );
	void SetCreatureTier ( unsigned char Tier );
	unsigned char GetCreatureTier ( );
	void SetCreatureStat ( unsigned char Stat );
	unsigned char GetCreatureStat ( );
	void SetBaseCreatureStack ( class UH7BaseCreatureStack* C );
	class UH7BaseCreatureStack* GetBaseCreatureStack ( );
	void SetResource ( struct FResourceStockpile rs );
	struct FResourceStockpile GetResource ( );
	void SetTeleporter ( class AH7Teleporter* tele );
	class AH7Teleporter* GetTeleporter ( );
	void SetCreatureAbility ( class UH7CreatureAbility* Ability );
	class UH7CreatureAbility* GetCreatureAbility ( );
	void SetHeroAbility ( class UH7HeroAbility* Ability );
	class UH7HeroAbility* GetHeroAbility ( );
	void SetTown ( class AH7Town* Town );
	class AH7Town* GetTown ( );
	void SetBuilding ( class UH7TownBuilding* Building );
	class UH7TownBuilding* GetBuilding ( );
	void SetPlayer ( class AH7Player* Player );
	class AH7Player* GetPlayer ( );
	void SetVisSite ( class AH7VisitableSite* Site );
	class AH7VisitableSite* GetVisSite ( );
	void SetAdventureArmy ( class AH7AdventureArmy* Army );
	class AH7AdventureArmy* GetAdventureArmy ( );
	void SetCombatArmy ( class AH7CombatArmy* Army );
	class AH7CombatArmy* GetCombatArmy ( );
	void SetAMapCell ( class UH7AdventureMapCell* cell );
	class UH7AdventureMapCell* GetAMapCell ( );
	void SetCMapCell ( class UH7CombatMapCell* cell );
	class UH7CombatMapCell* GetCMapCell ( );
	void SetUnit ( class AH7Unit* Unit );
	class AH7Unit* GetUnit ( );
	void SetPType ( unsigned char ptype );
	unsigned char GetPType ( );
};



// Class MMH7Game.H7AiSensorArmyStrength ( Property size: 0 iter: 1) 
// Class name index: 43825 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorArmyStrength : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63251 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorArmyStrengthCombined ( Property size: 0 iter: 2) 
// Class name index: 43826 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorArmyStrengthCombined : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63252 ];

		return pClassPointer;
	};

	bool ShouldCombine ( class AH7AdventureArmy* Army, class AH7AdventureArmy* receivingArmy );
	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorDistanceToTarget ( Property size: 3 iter: 6) 
// Class name index: 43845 
// 0x0028 (0x0088 - 0x0060)
class UH7AiSensorDistanceToTarget : public UH7AiSensorBase
{
public:
	class UH7AdventureMapCell*                         mStartCell;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mEndCells;                                        		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mDistanceRatios;                                  		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63253 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	void InsertCache ( class UH7AdventureMapCell* ec, float Ratio );
	bool CheckCache ( class UH7AdventureMapCell* sc, class UH7AdventureMapCell* ec, float* Ratio );
};



// Class MMH7Game.H7AiSensorTargetInterest ( Property size: 0 iter: 2) 
// Class name index: 43879 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTargetInterest : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63254 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	float GetSiteValue ( class AH7VisitableSite* Site );
};



// Class MMH7Game.H7AiSensorArmyStrengthCombinedNoHero ( Property size: 0 iter: 1) 
// Class name index: 43829 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorArmyStrengthCombinedNoHero : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63255 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorHeroCount ( Property size: 0 iter: 1) 
// Class name index: 43854 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorHeroCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63256 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorGameProgress ( Property size: 0 iter: 1) 
// Class name index: 43847 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorGameProgress : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63257 ];

		return pClassPointer;
	};

	float GetValue0 ( );
};



// Class MMH7Game.H7AiSensorTownDistance ( Property size: 0 iter: 1) 
// Class name index: 43885 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTownDistance : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63258 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorPlayerArmiesCompare ( Property size: 0 iter: 1) 
// Class name index: 43863 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorPlayerArmiesCompare : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63259 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorPoolGarrison ( Property size: 0 iter: 1) 
// Class name index: 43864 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorPoolGarrison : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63260 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorTownBuilding ( Property size: 0 iter: 1) 
// Class name index: 43883 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTownBuilding : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63261 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorGameDayOfWeek ( Property size: 0 iter: 1) 
// Class name index: 43846 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorGameDayOfWeek : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63262 ];

		return pClassPointer;
	};

	float GetValue0 ( );
};



// Class MMH7Game.H7AiSensorTradeResource ( Property size: 0 iter: 1) 
// Class name index: 43887 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTradeResource : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63263 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorResourceStockpile ( Property size: 0 iter: 1) 
// Class name index: 43869 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorResourceStockpile : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63264 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorTownDefense ( Property size: 0 iter: 1) 
// Class name index: 43884 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTownDefense : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63265 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorTownArmyCount ( Property size: 0 iter: 1) 
// Class name index: 43882 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTownArmyCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63266 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorHireHeroCount ( Property size: 0 iter: 1) 
// Class name index: 43855 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorHireHeroCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63267 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorSiteAvailable ( Property size: 0 iter: 1) 
// Class name index: 43870 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorSiteAvailable : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63268 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorRecall ( Property size: 2 iter: 9) 
// Class name index: 43868 
// 0x0010 (0x0070 - 0x0060)
class UH7AiSensorRecall : public UH7AiSensorBase
{
public:
	class AH7AdventureController*                      mAdventureController;                             		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mActiveHero;                                      		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63269 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	bool OwnTown ( class AH7Town* Town );
	int GetDistance ( class AH7Town* Town, class AH7AdventureHero* Hero );
	bool IsEntranceFree ( class AH7Town* Town );
	bool HasTownPortal ( class AH7Town* Town );
	bool IsOnSameGrid ( class AH7Town* Town );
	class AH7Town* GetClosestTown ( );
};



// Class MMH7Game.H7AiSensorTeleportInterest ( Property size: 0 iter: 1) 
// Class name index: 43880 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTeleportInterest : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63270 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorCanUpgrade ( Property size: 0 iter: 1) 
// Class name index: 43835 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCanUpgrade : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63271 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorArmyStrengthCombinedReverse ( Property size: 0 iter: 2) 
// Class name index: 43830 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorArmyStrengthCombinedReverse : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63272 ];

		return pClassPointer;
	};

	bool ShouldCombine ( class AH7AdventureArmy* Army, class AH7AdventureArmy* receivingArmy );
	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorUpgradeStrength ( Property size: 0 iter: 2) 
// Class name index: 43888 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorUpgradeStrength : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63273 ];

		return pClassPointer;
	};

	void GetUpgradeData ( class AH7AreaOfControlSite* Site );
	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorTownThreat ( Property size: 0 iter: 1) 
// Class name index: 43886 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorTownThreat : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63274 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorTargetCutoffRange ( Property size: 3 iter: 6) 
// Class name index: 43878 
// 0x0028 (0x0088 - 0x0060)
class UH7AiSensorTargetCutoffRange : public UH7AiSensorBase
{
public:
	class UH7AdventureMapCell*                         mStartCell;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mEndCells;                                        		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    mDistances;                                       		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63275 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	void InsertCache ( class UH7AdventureMapCell* ec, float Dist );
	bool CheckCache ( class UH7AdventureMapCell* sc, class UH7AdventureMapCell* ec, float* Dist );
};



// Class MMH7Game.H7AiSensorArmyStrengthCombinedGlobal ( Property size: 0 iter: 2) 
// Class name index: 43827 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorArmyStrengthCombinedGlobal : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63276 ];

		return pClassPointer;
	};

	bool ShouldCombine ( class AH7AdventureArmy* Army, class AH7AdventureArmy* receivingArmy );
	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorArmyStrengthCombinedGlobalReverse ( Property size: 0 iter: 2) 
// Class name index: 43828 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorArmyStrengthCombinedGlobalReverse : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63277 ];

		return pClassPointer;
	};

	bool ShouldCombine ( class AH7AdventureArmy* Army, class AH7AdventureArmy* receivingArmy );
	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiCombatMap ( Property size: 15 iter: 22) 
// Class name index: 43813 
// 0x0080 (0x02C0 - 0x0240)
class AH7AiCombatMap : public AActor
{
public:
	class UH7AiCombatSensors*                          mSensors;                                         		// 0x0240 (0x0008) [0x0000000000000000]              
	class UH7AiActionMoveCreatureStack*                mActionMoveCreatureStack;                         		// 0x0248 (0x0008) [0x0000000000000000]              
	class UH7AiActionAttackCreatureStack*              mActionAttackCreatureStack;                       		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7AiActionAttackHero*                       mActionAttackHero;                                		// 0x0258 (0x0008) [0x0000000000000000]              
	class UH7AiActionWaitHero*                         mActionWaitHero;                                  		// 0x0260 (0x0008) [0x0000000000000000]              
	class UH7AiActionWaitCreature*                     mActionWaitCreature;                              		// 0x0268 (0x0008) [0x0000000000000000]              
	class UH7AiActionRangeAttackCreatureStack*         mActionRangeAttackCreatureStack;                  		// 0x0270 (0x0008) [0x0000000000000000]              
	class UH7AiActionMoveAttackCreatureStack*          mActionMoveAttackCreatureStack;                   		// 0x0278 (0x0008) [0x0000000000000000]              
	class UH7AiActionCastSpellHero*                    mActionCastSpellHero;                             		// 0x0280 (0x0008) [0x0000000000000000]              
	class UH7AiActionDefend*                           mActionDefend;                                    		// 0x0288 (0x0008) [0x0000000000000000]              
	class UH7AiActionUseAbilityCreature*               mActionUseAbilityCreature;                        		// 0x0290 (0x0008) [0x0000000000000000]              
	float                                              mDeferTimer;                                      		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                mThinkStep;                                       		// 0x029C (0x0004) [0x0000000000000000]              
	TArray< struct FAiActionScore >                    mScores;                                          		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ScoreSort__Delegate;                            		// 0x02B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63307 ];

		return pClassPointer;
	};

	class AH7CreatureStack* GetRandomCreatureStack ( TArray< class AH7CreatureStack* > creatureStacks );
	void Think ( class AH7Unit* Unit, float DeltaTime );
	void ResetThink ( );
	void DeferExecution ( float Seconds );
	int ScoreSort ( struct FAiActionScore A, struct FAiActionScore B );
	void PostBeginPlay ( );
	class UH7AiCombatSensors* GetSensors ( );
};



// Class MMH7Game.H7AiCombatMapConfig ( Property size: 1 iter: 1) 
// Class name index: 43814 
// 0x0080 (0x00E0 - 0x0060)
class UH7AiCombatMapConfig : public UObject
{
public:
	struct FAiReceptivityTable                         mReceptivityTable;                                		// 0x0060 (0x0080) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63389 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7AiSensorArmyHasRangeAttack ( Property size: 0 iter: 1) 
// Class name index: 43824 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorArmyHasRangeAttack : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63419 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorGridCellReachable ( Property size: 0 iter: 3) 
// Class name index: 43850 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorGridCellReachable : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63420 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	float GetReachableUnit ( class AH7Unit* unitSource, class AH7Unit* unitToReach );
	float GetReachableCell ( class AH7Unit* unitSource, class UH7CombatMapCell* cellToReach );
};



// Class MMH7Game.H7AiSensorGeomDistance ( Property size: 0 iter: 4) 
// Class name index: 43848 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorGeomDistance : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63421 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	float GetDistanceU2C ( class AH7Unit* unitStart, class UH7CombatMapCell* cellEnd );
	float GetDistanceU2U ( class AH7Unit* unitStart, class AH7Unit* unitEnd );
	float GetDistanceC2C ( class UH7CombatMapCell* cellStart, class UH7CombatMapCell* cellEnd );
};



// Class MMH7Game.H7AiSensorCanRangeAttack ( Property size: 0 iter: 1) 
// Class name index: 43833 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCanRangeAttack : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63422 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorCanRetaliate ( Property size: 0 iter: 1) 
// Class name index: 43834 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCanRetaliate : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63423 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorThreatLevel ( Property size: 0 iter: 1) 
// Class name index: 43881 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorThreatLevel : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63424 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorHasAdjacentEnemy ( Property size: 0 iter: 1) 
// Class name index: 43851 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorHasAdjacentEnemy : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63425 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorHPPercentLossAttack ( Property size: 0 iter: 1) 
// Class name index: 43856 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorHPPercentLossAttack : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63426 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorHPPercentLossRetaliation ( Property size: 0 iter: 1) 
// Class name index: 43857 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorHPPercentLossRetaliation : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63427 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorCanMoveAttack ( Property size: 0 iter: 1) 
// Class name index: 43832 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCanMoveAttack : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63428 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorHasGreaterDamage ( Property size: 0 iter: 1) 
// Class name index: 43852 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorHasGreaterDamage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63429 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorCanCastBuff ( Property size: 0 iter: 1) 
// Class name index: 43831 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCanCastBuff : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63430 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorMeleeCasualityCount ( Property size: 0 iter: 1) 
// Class name index: 43859 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorMeleeCasualityCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63431 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorMeleeCreatureDamage ( Property size: 0 iter: 1) 
// Class name index: 43860 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorMeleeCreatureDamage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63432 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorRangeCasualityCount ( Property size: 0 iter: 1) 
// Class name index: 43865 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorRangeCasualityCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63433 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorRangeCreatureDamage ( Property size: 0 iter: 1) 
// Class name index: 43866 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorRangeCreatureDamage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63434 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorManaCost ( Property size: 0 iter: 1) 
// Class name index: 43858 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorManaCost : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63435 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorSpellTargetCheck ( Property size: 1 iter: 3) 
// Class name index: 43875 
// 0x0008 (0x0068 - 0x0060)
class UH7AiSensorSpellTargetCheck : public UH7AiSensorBase
{
public:
	class UH7AiCombatMapConfig*                        mCombatMapCfg;                                    		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63436 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	float QueryValue ( unsigned char Stat, int categoryIdx );
};



// Class MMH7Game.H7AiSensorHealingPercentage ( Property size: 0 iter: 1) 
// Class name index: 43853 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorHealingPercentage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63437 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorAbilityCasualityCount ( Property size: 0 iter: 1) 
// Class name index: 43822 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorAbilityCasualityCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63438 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorAbilityCreatureDamage ( Property size: 0 iter: 1) 
// Class name index: 43823 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorAbilityCreatureDamage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63439 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorOpportunity ( Property size: 0 iter: 1) 
// Class name index: 43861 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorOpportunity : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63440 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* param0 );
};



// Class MMH7Game.H7AiSensorSpellSingleDamage ( Property size: 0 iter: 1) 
// Class name index: 43873 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorSpellSingleDamage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63441 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorSpellMultiDamage ( Property size: 0 iter: 1) 
// Class name index: 43871 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorSpellMultiDamage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63442 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorSpellSingleHeal ( Property size: 0 iter: 1) 
// Class name index: 43874 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorSpellSingleHeal : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63443 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorSpellMultiHeal ( Property size: 0 iter: 1) 
// Class name index: 43872 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorSpellMultiHeal : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63444 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorCreatureCount ( Property size: 0 iter: 1) 
// Class name index: 43840 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCreatureCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63445 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorCreatureStrength ( Property size: 0 iter: 1) 
// Class name index: 43843 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCreatureStrength : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63446 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorStackMoveDistance ( Property size: 0 iter: 3) 
// Class name index: 43877 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorStackMoveDistance : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63447 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	float GetMoveDistanceUnit ( class AH7Unit* unitSource, class AH7Unit* unitToReach );
	float GetMoveDistanceCell ( class AH7Unit* unitSource, class UH7CombatMapCell* cellToReach );
};



// Class MMH7Game.H7AiSensorCreatureStat ( Property size: 0 iter: 1) 
// Class name index: 43842 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCreatureStat : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63448 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorCreatureIsRanged ( Property size: 0 iter: 1) 
// Class name index: 43841 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCreatureIsRanged : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63449 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorCreatureAdjacentToEnemy ( Property size: 0 iter: 1) 
// Class name index: 43837 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCreatureAdjacentToEnemy : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63450 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorCreatureAdjacentToAlly ( Property size: 0 iter: 1) 
// Class name index: 43836 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCreatureAdjacentToAlly : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63451 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorCreatureTier ( Property size: 0 iter: 1) 
// Class name index: 43844 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorCreatureTier : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63452 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
};



// Class MMH7Game.H7AiSensorCreatureCanAttack ( Property size: 3 iter: 5) 
// Class name index: 43838 
// 0x0010 (0x0070 - 0x0060)
class UH7AiSensorCreatureCanAttack : public UH7AiSensorBase
{
public:
	int                                                mTurn;                                            		// 0x0060 (0x0004) [0x0000000000000000]              
	class AH7CreatureStack*                            mCreature;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	float                                              mValue;                                           		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63453 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	bool CheckCache ( int currentTurn, class AH7CreatureStack* Creature );
};



// Class MMH7Game.H7AiSensorCreatureCanBeAttacked ( Property size: 3 iter: 5) 
// Class name index: 43839 
// 0x0010 (0x0070 - 0x0060)
class UH7AiSensorCreatureCanBeAttacked : public UH7AiSensorBase
{
public:
	int                                                mTurn;                                            		// 0x0060 (0x0004) [0x0000000000000000]              
	class AH7CreatureStack*                            mCreature;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	float                                              mValue;                                           		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63454 ];

		return pClassPointer;
	};

	float GetValue2 ( class UH7AiSensorParam* param0, class UH7AiSensorParam* param1 );
	bool CheckCache ( int currentTurn, class AH7CreatureStack* Creature );
};



// Class MMH7Game.H7AiSensorRangedCreatureCount ( Property size: 0 iter: 1) 
// Class name index: 43867 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorRangedCreatureCount : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63455 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorGoodTimeToWait ( Property size: 0 iter: 1) 
// Class name index: 43849 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorGoodTimeToWait : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63456 ];

		return pClassPointer;
	};

	float GetValue1 ( class UH7AiSensorParam* Param );
};



// Class MMH7Game.H7AiSensorStackDamage ( Property size: 0 iter: 0) 
// Class name index: 43876 
// 0x0000 (0x0060 - 0x0060)
class UH7AiSensorStackDamage : public UH7AiSensorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64885 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7AiUtilityAdvTargetThreat ( Property size: 0 iter: 2) 
// Class name index: 43892 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityAdvTargetThreat : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65140 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityGeneralEffort ( Property size: 9 iter: 11) 
// Class name index: 43955 
// 0x0044 (0x00F0 - 0x00AC)
class UH7AiUtilityGeneralEffort : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffort*                  mInUMovementEffortArmy;                           		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMovementEffortRe*                mInUMovementEffortSite;                           		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMovementEffortCell*              mInUMovementEffortCell;                           		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityFightingEffort*                  mInUFightingEffort;                               		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityAdvTargetThreat*                 mInUTargetThreat;                                 		// 0x00CC (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortBias;                              		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortModifier;                          		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65157 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTargetInterest ( Property size: 0 iter: 2) 
// Class name index: 44057 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTargetInterest : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65158 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCanUpgrade ( Property size: 0 iter: 2) 
// Class name index: 43898 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCanUpgrade : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65178 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMovementEffortCell ( Property size: 0 iter: 2) 
// Class name index: 44026 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMovementEffortCell : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65192 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityRecall ( Property size: 0 iter: 2) 
// Class name index: 44035 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityRecall : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65193 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMovementEffort ( Property size: 0 iter: 2) 
// Class name index: 44024 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMovementEffort : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65204 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityReinforcementGain ( Property size: 0 iter: 2) 
// Class name index: 44037 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityReinforcementGain : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65205 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityCasualityCount ( Property size: 0 iter: 2) 
// Class name index: 43906 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCrAbilityCasualityCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65216 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityCreatureDamage ( Property size: 0 iter: 2) 
// Class name index: 43908 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCrAbilityCreatureDamage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65217 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCrAbilityTargetCheck ( Property size: 0 iter: 2) 
// Class name index: 43933 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCrAbilityTargetCheck : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65457 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHealingPercentage ( Property size: 0 iter: 2) 
// Class name index: 44014 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityHealingPercentage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65458 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureAdjacentToAlly ( Property size: 0 iter: 2) 
// Class name index: 43938 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCreatureAdjacentToAlly : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65599 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureAdjacentToEnemy ( Property size: 0 iter: 2) 
// Class name index: 43939 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCreatureAdjacentToEnemy : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65604 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureCanAttack ( Property size: 0 iter: 2) 
// Class name index: 43940 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCreatureCanAttack : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65609 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureCanBeAttacked ( Property size: 0 iter: 2) 
// Class name index: 43941 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCreatureCanBeAttacked : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65614 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureCount ( Property size: 0 iter: 2) 
// Class name index: 43942 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCreatureCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65619 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureIsRanged ( Property size: 0 iter: 2) 
// Class name index: 43943 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCreatureIsRanged : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65624 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureStat ( Property size: 1 iter: 3) 
// Class name index: 43944 
// 0x0001 (0x00B1 - 0x00B0)
class UH7AiUtilityCreatureStat : public UH7AiUtilitySensor
{
public:
	unsigned char                                      mStat;                                            		// 0x00B0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65629 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureStrength ( Property size: 0 iter: 2) 
// Class name index: 43945 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityCreatureStrength : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65635 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityCreatureTier ( Property size: 1 iter: 3) 
// Class name index: 43946 
// 0x0001 (0x00B1 - 0x00B0)
class UH7AiUtilityCreatureTier : public UH7AiUtilitySensor
{
public:
	unsigned char                                      mTier;                                            		// 0x00B0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65641 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityDamagePotentialReduction ( Property size: 4 iter: 6) 
// Class name index: 43947 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityDamagePotentialReduction : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMeleeCreatureDamage*             mInUCreatureDamage;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMeleeCasualityCount*             mInUCasualityCount;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMeleeCreatureDamageRet*          mInUCreatureDamageRet;                            		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMeleeCasualityCountRet*          mInUCasualityCountRet;                            		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65647 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMeleeCreatureDamage ( Property size: 0 iter: 2) 
// Class name index: 44022 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMeleeCreatureDamage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65666 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMeleeCasualityCount ( Property size: 0 iter: 2) 
// Class name index: 44020 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMeleeCasualityCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65667 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMeleeCreatureDamageRet ( Property size: 0 iter: 2) 
// Class name index: 44023 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMeleeCreatureDamageRet : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65668 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMeleeCasualityCountRet ( Property size: 0 iter: 2) 
// Class name index: 44021 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMeleeCasualityCountRet : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65669 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityFightingEffort ( Property size: 0 iter: 2) 
// Class name index: 43950 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityFightingEffort : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65688 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMovementReach ( Property size: 0 iter: 2) 
// Class name index: 44028 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMovementReach : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65719 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMovementEffortRe ( Property size: 0 iter: 2) 
// Class name index: 44027 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMovementEffortRe : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65720 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityMovementEffortAllied ( Property size: 0 iter: 2) 
// Class name index: 44025 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityMovementEffortAllied : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65721 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTownThreat ( Property size: 0 iter: 2) 
// Class name index: 44067 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTownThreat : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65722 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTargetCutoffRange ( Property size: 0 iter: 2) 
// Class name index: 44056 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTargetCutoffRange : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65723 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityGameDayOfWeek ( Property size: 0 iter: 2) 
// Class name index: 43952 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityGameDayOfWeek : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65725 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityGameProgress ( Property size: 0 iter: 2) 
// Class name index: 43953 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityGameProgress : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65730 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTownDefense ( Property size: 0 iter: 2) 
// Class name index: 44063 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTownDefense : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65747 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySpellAreaDamage ( Property size: 0 iter: 2) 
// Class name index: 44044 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySpellAreaDamage : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65806 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySpellSingleHeal ( Property size: 0 iter: 2) 
// Class name index: 44049 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySpellSingleHeal : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66110 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityRangedCreatureCount ( Property size: 0 iter: 2) 
// Class name index: 44034 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityRangedCreatureCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66123 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHeroCount ( Property size: 0 iter: 2) 
// Class name index: 44015 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityHeroCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66461 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityHireHeroCount ( Property size: 0 iter: 2) 
// Class name index: 44016 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityHireHeroCount : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66466 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityKillScaleRetaliation ( Property size: 0 iter: 2) 
// Class name index: 44018 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityKillScaleRetaliation : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66475 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityManaCost ( Property size: 0 iter: 2) 
// Class name index: 44019 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityManaCost : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66480 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityPlayerArmiesCompare ( Property size: 0 iter: 2) 
// Class name index: 44030 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityPlayerArmiesCompare : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66530 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityPoolGarrison ( Property size: 0 iter: 2) 
// Class name index: 44031 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityPoolGarrison : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66535 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTownDistanceCombined ( Property size: 2 iter: 4) 
// Class name index: 44065 
// 0x0010 (0x00BC - 0x00AC)
class UH7AiUtilityTownDistanceCombined : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityTownDistance*                    mInUTownDist;                                     		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTownDistanceMax*                 mInUTownDistMax;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66568 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityReinforcementGainReverse ( Property size: 0 iter: 2) 
// Class name index: 44038 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityReinforcementGainReverse : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66575 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityUpgradeGain ( Property size: 0 iter: 2) 
// Class name index: 44071 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityUpgradeGain : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66600 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityResourceStockpile ( Property size: 0 iter: 2) 
// Class name index: 44041 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityResourceStockpile : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66602 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySpellAreaHeal ( Property size: 0 iter: 2) 
// Class name index: 44045 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySpellAreaHeal : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66616 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySpellMultiHeal ( Property size: 0 iter: 2) 
// Class name index: 44047 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySpellMultiHeal : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66626 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySuicideGeneralEffort ( Property size: 8 iter: 10) 
// Class name index: 44055 
// 0x0040 (0x00EC - 0x00AC)
class UH7AiUtilitySuicideGeneralEffort : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffort*                  mInUMovementEffortArmy;                           		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMovementEffortRe*                mInUMovementEffortSite;                           		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityMovementEffortCell*              mInUMovementEffortCell;                           		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7AiUtilitySuicideFightingEffort*           mInUFightingEffort;                               		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UH7AiUtilityAdvTargetThreat*                 mInUTargetThreat;                                 		// 0x00CC (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              mMovementEffortBias;                              		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              mFightingEffortBias;                              		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66660 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilitySuicideFightingEffort ( Property size: 0 iter: 2) 
// Class name index: 44054 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilitySuicideFightingEffort : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66665 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTargetScore ( Property size: 3 iter: 5) 
// Class name index: 44058 
// 0x0020 (0x00CC - 0x00AC)
class UH7AiUtilityTargetScore : public UH7AiUtilityCombiner
{
public:
	class UH7AiUtilityMovementEffortRe*                mInUMovementEffort;                               		// 0x00AC (0x0008) [0x0000000000000000]              
	class UH7AiUtilityTargetInterest*                  mInUTargetInterest;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FString                                     dbgString;                                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66696 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTownBuilding ( Property size: 1 iter: 4) 
// Class name index: 44062 
// 0x0010 (0x00C0 - 0x00B0)
class UH7AiUtilityTownBuilding : public UH7AiUtilitySensor
{
public:
	TArray< class UH7TownBuilding* >                   mInBuildings;                                     		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66720 ];

		return pClassPointer;
	};

	TArray< class UH7TownBuilding* > GetOutBuildings ( );
	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTownDistance ( Property size: 0 iter: 2) 
// Class name index: 44064 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTownDistance : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66735 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTownDistanceMax ( Property size: 0 iter: 2) 
// Class name index: 44066 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTownDistanceMax : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66744 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AiUtilityTradeResource ( Property size: 0 iter: 2) 
// Class name index: 44069 
// 0x0000 (0x00B0 - 0x00B0)
class UH7AiUtilityTradeResource : public UH7AiUtilitySensor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66763 ];

		return pClassPointer;
	};

	void UpdateOutput ( );
	void UpdateInput ( );
};



// Class MMH7Game.H7AKAmbientNode ( Property size: 3 iter: 8) 
// Class name index: 44072 
// 0x0014 (0x0254 - 0x0240)
class AH7AKAmbientNode : public AActor
{
public:
	unsigned long                                      mActive : 1;                                      		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UAkEvent*                                    mPlayAkEvent;                                     		// 0x0244 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    mStopAkEvent;                                     		// 0x024C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66781 ];

		return pClassPointer;
	};

	void DisableAkEvent ( );
	void EnableAkEvent ( );
	void Initialize ( );
	void PostBeginPlay ( );
	bool GetAmbientState ( );
};



// Class MMH7Game.H7AkEventActorDummy ( Property size: 0 iter: 0) 
// Class name index: 44073 
// 0x0000 (0x0240 - 0x0240)
class AH7AkEventActorDummy : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66792 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7PopupKeybindings ( Property size: 1 iter: 3) 
// Class name index: 44526 
// 0x0010 (0x0070 - 0x0060)
class UH7PopupKeybindings : public UObject
{
public:
	TArray< struct FKeyCommand >                       mPopupKeybindings;                                		// 0x0060 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66874 ];

		return pClassPointer;
	};

	void ChangeKeybind ( struct FString changeCommand, struct FName Key );
};



// Class MMH7Game.H7IQueueable ( Property size: 0 iter: 2) 
// Class name index: 44432 
// 0x0000 (0x0060 - 0x0060)
class UH7IQueueable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67020 ];

		return pClassPointer;
	};

	void OpenPopupFromQueue ( struct FH7PopupParameters Params );
	void PutPopupIntoQueue ( struct FH7PopupParameters Params, unsigned char Recipient, unsigned char creationContext );
};



// Class MMH7Game.H7InstantCommandSacrifice ( Property size: 4 iter: 11) 
// Class name index: 44410 
// 0x002C (0x008C - 0x0060)
class UH7InstantCommandSacrifice : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      mFirstStackIsGarrison : 1;                        		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      mDraggedStackIndicesGarrison;                     		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mDraggedStackIndicesVisiting;                     		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67062 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, TArray< int > draggedStacksGarrison, TArray< int > draggedStacksVisiting, unsigned long firstStackIsGarrison );
};



// Class MMH7Game.H7TownUnitConverter ( Property size: 7 iter: 14) 
// Class name index: 44733 
// 0x0040 (0x0170 - 0x0130)
class UH7TownUnitConverter : public UH7TownBuilding
{
public:
	class AH7Creature*                                 mCreature;                                        		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mUpgradedCreature;                                		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              mConversionRate;                                  		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mCostMultiplier;                                  		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7TownBuilding*                             mBuildingNeededForUpgradedConversion;             		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UH7BaseAbility* >                    mAbilityRestrictions;                             		// 0x0150 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AH7Creature* >                       mOmittedCreatures;                                		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67063 ];

		return pClassPointer;
	};

	bool CanConvert ( class AH7Creature* Creature );
	void ConvertCreature ( class UH7BaseCreatureStack* Stack );
	int GetConvertingCost ( class UH7BaseCreatureStack* Stack );
	int GetConvertedCreatureAmount ( class UH7BaseCreatureStack* Stack );
	class UH7TownBuilding* GetUpgradedDwelling ( );
	class AH7Creature* GetUpgradedCreature ( );
	class AH7Creature* GetBaseCreature ( );
};



// Class MMH7Game.H7GFxTownPopup ( Property size: 0 iter: 1) 
// Class name index: 44323 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTownPopup : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67083 ];

		return pClassPointer;
	};

	void ClosePopup ( );
};



// Class MMH7Game.H7GFxAltarOfSacrifice ( Property size: 0 iter: 3) 
// Class name index: 44241 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxAltarOfSacrifice : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67082 ];

		return pClassPointer;
	};

	void SetCreatureAmountToGain ( int StackSize );
	void UpdateWithUnitToSacrifice ( class UH7BaseCreatureStack* draggedStack, int gainAmount, int Cost );
	void Update ( class AH7Creature* Unit );
};



// Class MMH7Game.H7INeutralable ( Property size: 0 iter: 1) 
// Class name index: 44363 
// 0x0000 (0x0060 - 0x0060)
class UH7INeutralable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67312 ];

		return pClassPointer;
	};

	bool IsNeutral ( );
};



// Class MMH7Game.H7TownGuardBuilding ( Property size: 7 iter: 12) 
// Class name index: 44718 
// 0x004C (0x017C - 0x0130)
class UH7TownGuardBuilding : public UH7TownBuilding
{
public:
	int                                                mFortificationLevel;                              		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FH7LocalGuardData                           mLocalGuardData;                                  		// 0x0134 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mCoreFootmen;                                     		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mCoreShooters;                                    		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mEliteNonShooters;                                		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mEliteShooters;                                   		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AH7Creature*                                 mChampions;                                       		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68310 ];

		return pClassPointer;
	};

	TArray< struct FH7DwellingCreatureData > GetDefaultTownGuard ( );
	class AH7Creature* GetCreatureClass ( unsigned char Tier, unsigned long ranged, unsigned long Support );
	TArray< struct FH7DwellingCreatureData > GetCorrectedTownGuard ( TArray< struct FH7DwellingCreatureData > oldTownGuard, class UH7Faction* Faction );
	TArray< struct FH7DwellingCreatureData > downgradeTownGuard ( TArray< struct FH7DwellingCreatureData > oldTownGuard, class UH7TownGuardGrowthEnhancer* guardEnhancer );
	int GetLevel ( );
};



// Class MMH7Game.H7InstantCommandUpgradeUnit ( Property size: 4 iter: 9) 
// Class name index: 44427 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandUpgradeUnit : public UH7InstantCommandBase
{
public:
	class AH7VisitableSite*                            mSite;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mCount;                                           		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                mSlotID;                                          		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsVisitingArmy : 1;                              		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68319 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7VisitableSite* Site, int slotID, unsigned long isVisitingArmy, int Count );
};



// Class MMH7Game.H7InstantCommandRecruit ( Property size: 9 iter: 16) 
// Class name index: 44403 
// 0x0030 (0x0090 - 0x0060)
class UH7InstantCommandRecruit : public UH7InstantCommandBase
{
public:
	class AH7AreaOfControlSiteLord*                    mSite;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7Dwelling*                                 mOriginDwelling;                                  		// 0x0068 (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSite*                        mCaravanTarget;                                   		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FString                                     mCreatureName;                                    		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mCount;                                           		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned long                                      mIsHiringFromAoC : 1;                             		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mRecruitToCaravan : 1;                            		// 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mRecruitToDwellingVisitor : 1;                    		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mUpdateGUI : 1;                                   		// 0x008C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68334 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AreaOfControlSiteLord* Site, struct FString creatureName, int Count, unsigned long isHiringFromAoC, class AH7Dwelling* OriginDwelling, unsigned long recruitToCaravan, unsigned long recruitToDwellingVisitor, class AH7AreaOfControlSite* caravanTarget, unsigned long updateGui );
};



// Class MMH7Game.H7InstantCommandMergeArmiesLord ( Property size: 3 iter: 10) 
// Class name index: 44398 
// 0x000A (0x006A - 0x0060)
class UH7InstantCommandMergeArmiesLord : public UH7InstantCommandBase
{
public:
	class AH7AreaOfControlSite*                        mSite;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      mFromArmy;                                        		// 0x0068 (0x0001) [0x0000000000000000]              
	unsigned char                                      mToArmy;                                          		// 0x0069 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68335 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AreaOfControlSite* Site, unsigned char fromArmy, unsigned char toArmy );
};



// Class MMH7Game.H7InstantCommandTransferHero ( Property size: 3 iter: 10) 
// Class name index: 44422 
// 0x000A (0x006A - 0x0060)
class UH7InstantCommandTransferHero : public UH7InstantCommandBase
{
public:
	class AH7AreaOfControlSite*                        mSite;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      mFromArmy;                                        		// 0x0068 (0x0001) [0x0000000000000000]              
	unsigned char                                      mToArmy;                                          		// 0x0069 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68336 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AreaOfControlSite* Site, unsigned char fromArmy, unsigned char toArmy );
};



// Class MMH7Game.H7ArtifactRecycler ( Property size: 1 iter: 2) 
// Class name index: 44085 
// 0x0008 (0x0138 - 0x0130)
class UH7ArtifactRecycler : public UH7TownBuilding
{
public:
	class UH7ArtifactRecyclingTable*                   mRecyclingTable;                                  		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68521 ];

		return pClassPointer;
	};

	class UH7ArtifactRecyclingTable* GetRecyclingTable ( );
};



// Class MMH7Game.H7ArtifactRecyclingTable ( Property size: 10 iter: 14) 
// Class name index: 44087 
// 0x0088 (0x00E8 - 0x0060)
class UH7ArtifactRecyclingTable : public UObject
{
public:
	TArray< struct FH7ResourceQuantity >               mRecycleValueHelmet;                              		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mRecycleValueCape;                                		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mRecycleValueChest;                               		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mRecycleValueWeapon;                              		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mRecycleValueNecklace;                            		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mRecycleValueGloves;                              		// 0x00B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mRecycleValueRing;                                		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7ResourceQuantity >               mRecycleValueShoes;                               		// 0x00D0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              mMulitplierMajor;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mMulitplierRelic;                                 		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68525 ];

		return pClassPointer;
	};

	float GetMulitplierRelic ( );
	float GetMulitplierMajor ( );
	float GetMultiplierByTier ( unsigned char Tier );
	TArray< struct FH7ResourceQuantity > GetRecycleValueByType ( unsigned char Type );
};



// Class MMH7Game.H7InstantCommandRecycleArtifact ( Property size: 2 iter: 9) 
// Class name index: 44407 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandRecycleArtifact : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mItemId;                                          		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68555 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, int ItemId );
};



// Class MMH7Game.H7GFxArtifactRecyclerPopup ( Property size: 0 iter: 3) 
// Class name index: 44244 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxArtifactRecyclerPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68564 ];

		return pClassPointer;
	};

	void SetRecycleValues ( TArray< struct FH7ResourceQuantity > recycleValues, float Multiplier );
	void SetHeroInventory ( class AH7AdventureHero* Hero );
	void Update ( class AH7AdventureHero* garissonHero, class AH7AdventureHero* visitingHero, struct FString recyclerName );
};



// Class MMH7Game.H7GFxBackgroundImage ( Property size: 0 iter: 2) 
// Class name index: 44245 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxBackgroundImage : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68732 ];

		return pClassPointer;
	};

	void LoadBackgroundTexture ( class UTexture2D* Texture, int FadeInTime, int fadeInDelay, struct FString screenText );
	void LoadBackground ( struct FString backgroundPath, int FadeInTime, int fadeInDelay, struct FString screenText );
};



// Class MMH7Game.H7EffectDuration ( Property size: 1 iter: 7) 
// Class name index: 44200 
// 0x0358 (0x0760 - 0x0408)
class UH7EffectDuration : public UH7Effect
{
public:
	struct FH7DurationEffect                           mData;                                            		// 0x0408 (0x0358) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69186 ];

		return pClassPointer;
	};

	int GetFinalDuration ( struct FString* formular );
	void eventExecute ( unsigned long isSimulated );
	void SetModifier ( );
	void eventInitSpecific ( struct FH7DurationEffect Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool eventShowInTooltip ( );
	struct FH7DurationEffect GetData ( );
};



// Class MMH7Game.H7EffectInitAura ( Property size: 1 iter: 4) 
// Class name index: 44201 
// 0x0318 (0x0720 - 0x0408)
class UH7EffectInitAura : public UH7Effect
{
public:
	struct FH7EffectProperties                         mData;                                            		// 0x0408 (0x0318) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69575 ];

		return pClassPointer;
	};

	void eventExecute ( unsigned long isSimulated );
	void eventInitSpecific ( struct FH7EffectProperties Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool eventShowInTooltip ( );
};



// Class MMH7Game.H7EffectDestroyAura ( Property size: 1 iter: 4) 
// Class name index: 44199 
// 0x0318 (0x0720 - 0x0408)
class UH7EffectDestroyAura : public UH7Effect
{
public:
	struct FH7EffectProperties                         mData;                                            		// 0x0408 (0x0318) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69576 ];

		return pClassPointer;
	};

	void eventExecute ( unsigned long isSimulated );
	void eventInitSpecific ( struct FH7EffectProperties Data, class UH7EffectContainer* Source, unsigned long registerEffect );
	bool eventShowInTooltip ( );
};



// Class MMH7Game.H7USSProjectile ( Property size: 24 iter: 40) 
// Class name index: 44762 
// 0x00B8 (0x02F8 - 0x0240)
class AH7USSProjectile : public AActor
{
public:
	TArray< class UH7IEffectTargetable* >              mAffectedTargets;                                 		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IEffectTargetable* >              mHitTargets;                                      		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7BaseAbility*                              mAbility;                                         		// 0x0260 (0x0008) [0x0000000000000000]              
	float                                              mMovementSpeed;                                   		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    mProjectileFX;                                    		// 0x026C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      mProjectileType;                                  		// 0x0274 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                mAirdropHeight;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mBombardHeight;                                   		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mBombardAcceleration;                             		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mBombardDeceleration;                             		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              mMaxLifeTime;                                     		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      mIsPersistent : 1;                                		// 0x028C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsHitTriggered : 1;                              		// 0x028C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              mParticleFXLifeTime;                              		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     mStartPos;                                        		// 0x0294 (0x000C) [0x0000000000000000]              
	struct FVector                                     mTargetPos;                                       		// 0x02A0 (0x000C) [0x0000000000000000]              
	struct FVector                                     mMovementDir;                                     		// 0x02AC (0x000C) [0x0000000000000000]              
	struct FVector                                     mCurrentBeamEndPos;                               		// 0x02B8 (0x000C) [0x0000000000000000]              
	float                                              mTargetDistance;                                  		// 0x02C4 (0x0004) [0x0000000000000000]              
	float                                              mPassedTimeSinceSpawn;                            		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              mCurrentMovementSpeed;                            		// 0x02CC (0x0004) [0x0000000000000000]              
	struct FName                                       mBeamEndName;                                     		// 0x02D0 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnHitFunc__Delegate;                            		// 0x02D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02DC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnFinishFunc__Delegate;                         		// 0x02E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x02EC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69577 ];

		return pClassPointer;
	};

	void DoImpact ( );
	void FinishParticleFX ( );
	void Finish ( );
	void UpdateBombardProjectile ( float DeltaTime );
	void UpdateAirdropProjectile ( float DeltaTime );
	void UpdateNormalProjectile ( float DeltaTime );
	void UpdateBeam ( float DeltaTime );
	void UpdatePassedTime ( float DeltaTime );
	void UpdateParticleFXLifetime ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void InitForLocation ( struct FVector Target, TArray< class UH7IEffectTargetable* > affectedTargets, class UH7BaseAbility* Ability, struct FScriptDelegate onFinishExternal, struct FScriptDelegate onHitExternal );
	void OnFinishFunc ( );
	void OnHitFunc ( class UH7IEffectTargetable* Unit );
	unsigned char GetProjectileType ( );
	bool isBeam ( );
	float GetAirdropHeight ( );
};



// Class MMH7Game.H7SeqEvent_HeroAbilityCasted ( Property size: 1 iter: 3) 
// Class name index: 44643 
// 0x0008 (0x01B8 - 0x01B0)
class UH7SeqEvent_HeroAbilityCasted : public UH7SeqEvent_HeroEvent
{
public:
	class UH7HeroAbility*                              mAbility;                                         		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69603 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7CampaignTransitionManager ( Property size: 2 iter: 18) 
// Class name index: 44105 
// 0x0014 (0x0074 - 0x0060)
class UH7CampaignTransitionManager : public UObject
{
public:
	TArray< struct FH7TransistionMap >                 mCampaignTransData;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mFinalHeroChoice;                                 		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70854 ];

		return pClassPointer;
	};

	void LoadTransitionHero ( class AH7AdventureHero* Hero, struct FH7TransitionHero heroData );
	void LoadStoredHero ( class AH7AdventureHero* Hero );
	void LoadTransitionMap ( struct FString MapFilename );
	struct FH7TransitionHero SaveTransitionHero ( class AH7AdventureHero* Hero );
	void StoreHero ( class AH7AdventureHero* Hero );
	void SaveTransitionMap ( struct FString MapFilename );
	struct FH7TransitionHero FindLatestStoredHero ( class AH7AdventureHero* Hero, unsigned long CurrentMap );
	void GatherRelevantHeros ( TArray< class AH7AdventureHero* >* foundHeros );
	bool HasTransitionMap ( struct FString MapFilename );
	int GetHeroArchRefIndex ( struct FH7TransistionMap mapProxy, struct FString HeroArchRef );
	int GetTransitionMapIndex ( struct FString MapFilename );
	void SetFinalHeroChoice ( int NewValue );
	int GetFinalHeroChoice ( );
};



// Class MMH7Game.H7SeqEvent_PlayerStartsCaravan ( Property size: 0 iter: 1) 
// Class name index: 44646 
// 0x0000 (0x019C - 0x019C)
class UH7SeqEvent_PlayerStartsCaravan : public UH7SeqEvent_PlayerEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71099 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7InstantCommandStartCaravan ( Property size: 2 iter: 9) 
// Class name index: 44417 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandStartCaravan : public UH7InstantCommandBase
{
public:
	class AH7CaravanArmy*                              mCaravan;                                         		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AreaOfControlSiteLord*                    mInitialSite;                                     		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71100 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7CaravanArmy* caravan, class AH7AreaOfControlSiteLord* initialSite );
};



// Class MMH7Game.H7InstantCommandCheatTeleport ( Property size: 2 iter: 7) 
// Class name index: 44376 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandCheatTeleport : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class UH7AdventureMapCell*                         mCell;                                            		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71338 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, class UH7AdventureMapCell* cell );
};



// Class MMH7Game.H7InstantCommandCheatStatChange ( Property size: 3 iter: 8) 
// Class name index: 44375 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandCheatStatChange : public UH7InstantCommandBase
{
public:
	class AH7Unit*                                     mUnit;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      mStat;                                            		// 0x0068 (0x0001) [0x0000000000000000]              
	int                                                mNewValue;                                        		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71339 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Unit* UnitId, unsigned char Stat, int NewValue );
};



// Class MMH7Game.H7InstantCommandCheatWinLose ( Property size: 2 iter: 7) 
// Class name index: 44377 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandCheatWinLose : public UH7InstantCommandBase
{
public:
	class AH7Player*                                   mPlayer;                                          		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      mWin : 1;                                         		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71340 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Player* Player, unsigned long win );
};



// Class MMH7Game.H7GFxCheatWindow ( Property size: 0 iter: 4) 
// Class name index: 44246 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxCheatWindow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71341 ];

		return pClassPointer;
	};

	class UGFxObject* CreateAbilities ( class UH7Skill* Skill, class AH7EditorHero* Hero );
	void CreateSkills ( class AH7EditorHero* Hero, class UGFxObject** Data );
	struct FString GetSkillClassString ( int Index );
	void Update ( struct FString Map );
};



// Class MMH7Game.H7CinematicGameInfo ( Property size: 0 iter: 2) 
// Class name index: 44117 
// 0x0000 (0x048C - 0x048C)
class AH7CinematicGameInfo : public AGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71345 ];

		return pClassPointer;
	};

	void RestartPlayer ( class AController* NewPlayer );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
};



// Class MMH7Game.H7MultiplayerCommandManager ( Property size: 9 iter: 27) 
// Class name index: 44494 
// 0x0100 (0x0160 - 0x0060)
class UH7MultiplayerCommandManager : public UObject
{
public:
	TArray< struct FMPCommand >                        mCommandQueue;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMPInstantCommand >                 mInstantCommandQueue;                             		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMPOutOfSynchData >                 mOutOfSynchQueue;                                 		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSynchUpData >                      mSynchUpData;                                     		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMPCommand                                  mLastCommand;                                     		// 0x00A0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMPInstantCommand                           mLastInstantCommand;                              		// 0x0108 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      loggedFirstOOS : 1;                               		// 0x0148 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              mNextCommandTimer;                                		// 0x014C (0x0004) [0x0000000000000000]              
	TArray< struct FMPDamageApply >                    mDamageApplyQueue;                                		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72480 ];

		return pClassPointer;
	};

	void OOSMessageConfirmed ( );
	void GameWentOOS ( struct FString msg, unsigned char oosType, unsigned long syncMultiplayer );
	void UpdateSynchUpQueue ( );
	bool UpdateOutOfSynchQueue ( );
	bool UpdateInstantCommandQueue ( );
	bool UpdateCommandQueue ( );
	void Update ( );
	void CleanDamageApplyQueue ( );
	bool IsReadyApplyDamageEndTurn ( );
	bool IsExpiredApplyDamageEndTurn ( );
	bool UpdateApplyDamageEndTurn ( );
	struct FMPDamageApply GetNextDamageForStack ( int CreatureStackId );
	bool TryingDamageApply ( int CreatureStackId, int StackSize, int TopCreatureHealth );
	void AddDamageApply ( int CreatureStackId, int StackSize, int TopCreatureHealth );
	void AddSynchUpData ( int unitActionCounter, int SynchRNG, int IDCounter );
	void AddOutOfSynchData ( int unitActionCounter, int SynchRNG, int IDCounter, int UnitsCount, int ResCount, unsigned long IsCombat );
	void AddInstantCommand ( struct FMPInstantCommand instantCommand );
	void AddCommand ( int unitActionCounter, int UnitTurnCounter, unsigned char Command, unsigned char CommandTag, class UH7ICaster* CommandSource, class UH7IEffectTargetable* Target, int TeleportTarget, TArray< class UH7BaseCell* > Path, int CurrentPlayer, class UH7BaseAbility* Ability, unsigned char Direction, unsigned long ReplaceFakeAttacker, unsigned long InsertHead, class UH7CombatMapCell* TrueHitCell, unsigned long doOOSCheck, int movementPoints );
};



// Class MMH7Game.H7SeqEvent_CombatTurn ( Property size: 1 iter: 3) 
// Class name index: 44641 
// 0x0004 (0x01D4 - 0x01D0)
class UH7SeqEvent_CombatTurn : public UH7SeqEvent_CombatTrigger
{
public:
	int                                                mTurn;                                            		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72488 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7CreatureAnimControl ( Property size: 21 iter: 80) 
// Class name index: 44164 
// 0x032C (0x056C - 0x0240)
class AH7CreatureAnimControl : public AActor
{
public:
	struct FAnimationData                              mAnimations[ 0x1A ];                              		// 0x0240 (0x0270) [0x0000000000000000]              
	class AH7Creature*                                 mOwner;                                           		// 0x04B0 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      mSkelMesh;                                        		// 0x04B8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AH7USSProjectile*                            mProjectile;                                      		// 0x04C0 (0x0008) [0x0000000000000000]              
	TArray< struct FH7CreatureEvent >                  mCreatureEvents;                                  		// 0x04C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      mCurrentAnim;                                     		// 0x04D8 (0x0001) [0x0000000000000000]              
	class UAnimNodeSlot*                               mAnimNode;                                        		// 0x04DC (0x0008) [0x0000000000000000]              
	TArray< class UAnimNodePlayCustomAnim* >           mWeaponAnimNodes;                                 		// 0x04E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAnimNodeBlendList*                          mDeadBlend;                                       		// 0x04F4 (0x0008) [0x0000000000000000]              
	class UAnimNodeBlendList*                          mStateBlend;                                      		// 0x04FC (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           mDeadNode;                                        		// 0x0504 (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           mMoveNode;                                        		// 0x050C (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           mTurnLeftNode;                                    		// 0x0514 (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           mTurnRightNode;                                   		// 0x051C (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           mFlyNode;                                         		// 0x0524 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsDead : 1;                                      		// 0x052C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              mTurnAnimCutTime;                                 		// 0x0530 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    mStopAllAnimSFXAkEvent;                           		// 0x0534 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFinishedAnimFunc__Delegate;                   		// 0x053C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0540 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnHitFunc__Delegate;                            		// 0x054C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0550 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnShootFunc__Delegate;                          		// 0x055C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0560 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72489 ];

		return pClassPointer;
	};

	float GetCurrentAnimNodeRate ( );
	float GetCurrentAnimNodeTimeDuration ( );
	float GetCurrentAnimNodeTimeLeft ( );
	class UCameraShake* GetShakeForEvent ( unsigned char EventType );
	float GetEventTime ( unsigned char EventType );
	void OnAttackHit ( );
	class USkeletalMeshComponent* GetProjectileSkelMesh ( );
	void OnRangeAttackShoot ( );
	void StartJumpOff ( );
	void StartFlyElevating ( );
	bool isDying ( );
	void FinishDying ( );
	void TriggerIdleSpecialAnimation ( );
	unsigned char GetCreatureEventByAnim ( unsigned char Anim );
	void FakeDyingAnimation ( float secondsDelay );
	void PlayAnim ( unsigned char creatureAnimation, struct FScriptDelegate onFinishedAnim, struct FScriptDelegate onHit, struct FScriptDelegate onShoot );
	void OnShootFunc ( );
	void OnHitFunc ( );
	void OnFinishedAnimFunc ( );
	void BeginTurn ( );
	void StopCustomAnimOnAll ( unsigned char animId, float BlendOutTime );
	void PauseCustomAnimOnAll ( );
	void ModifyRateCurrentAnimation ( float NewRate );
	void PlayCustomAnimByDurationOnAll ( unsigned char animId, float Duration, float BlendInTime, float BlendOutTime, unsigned long doLooping, unsigned long doOverride );
	void PlayCustomAnimOnAll ( unsigned char animId, float Rate, float BlendInTime, float BlendOutTime, unsigned long doLooping, unsigned long doOverride, float EndTime );
	void SetIdleBridgeFrequency ( );
	void Init ( class AH7Creature* creatureOwner, class USkeletalMeshComponent* SkelComp, TArray< struct FH7CreatureEvent > creatureEvents );
	float GetAnimationDuration ( unsigned char Anim );
	bool IsIdlingOrDefending ( );
	float GetCurrentAnimTime ( );
	bool IsDead ( );
	bool IsFlying ( );
	bool IsIdling ( );
};



// Class MMH7Game.H7SeqEvent_CombatDeploymentPhaseStart ( Property size: 0 iter: 1) 
// Class name index: 44640 
// 0x0000 (0x0188 - 0x0188)
class UH7SeqEvent_CombatDeploymentPhaseStart : public UH7SeqEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72508 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class MMH7Game.H7InstantCommandFleeOrSurrender ( Property size: 1 iter: 6) 
// Class name index: 44386 
// 0x0004 (0x0064 - 0x0060)
class UH7InstantCommandFleeOrSurrender : public UH7InstantCommandBase
{
public:
	unsigned long                                      mIsFlee : 1;                                      		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72516 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( unsigned long isFlee );
};



// Class MMH7Game.H7CombatMapCursor ( Property size: 12 iter: 44) 
// Class name index: 44124 
// 0x005C (0x00BC - 0x0060)
class UH7CombatMapCursor : public UObject
{
public:
	class AH7CombatController*                         mCombatController;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mGridController;                                  		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FH7CombatResultSignature                    mLastResultSignature;                             		// 0x0070 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatResult*                             mLastResult;                                      		// 0x0094 (0x0008) [0x0000000000000000]              
	unsigned char                                      mLastCursor;                                      		// 0x009C (0x0001) [0x0000000000000000]              
	unsigned char                                      mCurrentDirection;                                		// 0x009D (0x0001) [0x0000000000000000]              
	struct FRotator                                    mLastCursorRotation;                              		// 0x00A0 (0x000C) [0x0000000000000000]              
	unsigned long                                      mTooltipWasHandledThisFrame : 1;                  		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mHideTooltipForAuraSpell : 1;                     		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mHasActiveAuraTooltip : 1;                        		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                mCurrentAttackAngle;                              		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UH7CombatMapCell*                            mLastTargetedCell;                                		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72534 ];

		return pClassPointer;
	};

	int GameplayAngleToGUIAngle ( int gameplayAngle );
	unsigned char GetMirroredDirection ( unsigned char Direction );
	unsigned char GetSnappedDirection ( int cursorRotation, int sectorAngle );
	unsigned char GetDOA ( struct FRotator cursorRotation, class AH7Unit* attacker, class UH7IEffectTargetable* Target );
	bool WasAlreadyCalculated ( class UH7EffectContainer* container, TArray< class UH7IEffectTargetable* > Targets, int Angle, unsigned char Direction, unsigned long updateOnlyCursor );
	void CheckIfTooltipNecessary ( class UH7EffectContainer* container );
	bool HandlePreviewTooltip ( TArray< class UH7IEffectTargetable* > Targets, class UH7IEffectTargetable* Target, int Angle, class UH7CombatMapCell* hitCell );
	void ShowNormalHUDCursor ( );
	void ShowUnitOverCursor ( class AH7Unit* targetUnit );
	void UpdateCombatCursorWithSpell ( class UH7BaseAbility* spell );
	void UpdateSiegeEngineAttackCursor ( class UH7IEffectTargetable* Target );
	void UpdateMovementCursor ( class AH7Unit* Unit );
	class UH7CombatResult* GetResultForEnterAura ( class UH7EffectContainer* Ability, class AH7Unit* Target );
	void UpdateAuraHovering ( class AH7Unit* activeUnit, class UH7CombatMapCell* auraCell );
	void UpdateAbilityCursor ( class UH7IEffectTargetable* Target, TArray< class UH7IEffectTargetable* > Targets, struct FVector HitLocation, unsigned long IsAbility, unsigned long IsDirectional, unsigned long isPositiveAbility, class UH7CombatMapCell* hitCell );
	void UpdateHeroAttackCursor ( class AH7Unit* targetStack );
	void UpdateTacticsCursor ( class UH7CombatMapCell* hitCell );
	void CalculateCurrentAttackAngle ( class UH7IEffectTargetable* Target, class AH7Unit* selectedUnit, struct FVector HitLocation );
	void UpdateCombatCursor ( class UH7CombatMapCell* hitCell, struct FVector HitLocation );
	void SetCursor ( unsigned char cursorType, struct FRotator cursorRotation );
	void UpdateCursor ( class UH7CombatMapCell* hitCell, struct FVector HitLocation );
	void Setup ( class AH7CombatController* combatController, class AH7CombatMapGridController* gridController );
	unsigned char GetCurrentDirection ( );
	class UH7CombatResult* GetLastResult ( );
};



// Class MMH7Game.H7CoverManager ( Property size: 11 iter: 18) 
// Class name index: 44163 
// 0x006C (0x02AC - 0x0240)
class AH7CoverManager : public AActor
{
public:
	TArray< class UH7CombatMapCell* >                  mCoverCells;                                      		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7CombatMapCell*                            mTargetCell;                                      		// 0x0250 (0x0008) [0x0000000000000000]              
	class UH7UnitCoverManager*                         mSelectedUnitCoverManager;                        		// 0x0258 (0x0008) [0x0000000000000000]              
	class UTexture*                                    mCoveredTexture;                                  		// 0x0260 (0x0008) [0x0000000000000000]              
	class UTexture*                                    mNotCoveredTexture;                               		// 0x0268 (0x0008) [0x0000000000000000]              
	struct FVector                                     savedCoverTarget;                                 		// 0x0270 (0x000C) [0x0000000000000000]              
	TArray< class UParticleSystemComponent* >          coverLOSParticle;                                 		// 0x027C (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class AH7CreatureStack*                            savedCoverCreature;                               		// 0x028C (0x0008) [0x0000000000000000]              
	class AH7PlayerController*                         mPlayerController;                                		// 0x0294 (0x0008) [0x0000000000000000]              
	class AH7CombatController*                         mCombatContoller;                                 		// 0x029C (0x0008) [0x0000000000000000]              
	class AH7CombatMapGridController*                  mGridController;                                  		// 0x02A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72535 ];

		return pClassPointer;
	};

	void ShowCreatureCover ( class AH7CreatureStack* Creature, class UH7CombatMapCell* targetCell );
	void ClearCoverCells ( );
	void ClearCoverParticles ( );
	void RenderFX ( class UCanvas* myCanvas );
	void RenderDebugLines ( class UCanvas* myCanvas );
	void eventTick ( float DeltaTime );
	void PostBeginPlay ( );
};



// Class MMH7Game.H7GFxUnitInfo ( Property size: 1 iter: 15) 
// Class name index: 44331 
// 0x0008 (0x00AC - 0x00A4)
class UH7GFxUnitInfo : public UH7GFxUIContainer
{
public:
	class AH7Unit*                                     mOldDisplayedUnit;                                		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72771 ];

		return pClassPointer;
	};

	void UpdateHeroMana ( int CurrentMana, int maxMana );
	void CreateAbilities ( class AH7Unit* Unit, class UGFxObject** Object );
	void CreateBuffs ( class AH7Unit* Unit, class UGFxObject** Object );
	void CreateCreatureObject ( class AH7CreatureStack* creatureStack, class UGFxObject** Object );
	void CreateWarUnitObject ( class AH7WarUnit* warUnit, class UGFxObject** Object );
	void CreateTowerUnitObject ( class AH7TowerUnit* tower, class UGFxObject** Object );
	void CreateHeroInfoObject ( class AH7CombatHero* Hero, class UGFxObject** Object );
	class UGFxObject* CreateUnitObject ( class AH7Unit* Unit );
	void CreateUnitObjectForInfoWindow ( class AH7Unit* Unit, class UGFxObject** Object );
	void SetUnitInfo ( class AH7Unit* Unit );
	void ListenUpdate ( class UH7IGUIListenable* Unit );
	void Hide ( );
	void Update ( );
	class AH7Unit* GetCurrentlyDisplayedUnit ( );
};



// Class MMH7Game.H7InstantCommandSetAutoCombat ( Property size: 2 iter: 7) 
// Class name index: 44414 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandSetAutoCombat : public UH7InstantCommandBase
{
public:
	unsigned long                                      mUseAutoCombat : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	class AH7Player*                                   mPlayer;                                          		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72776 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( unsigned long useAutoCombat, class AH7Player* Player );
};



// Class MMH7Game.H7GFxInitiativeList ( Property size: 3 iter: 39) 
// Class name index: 44271 
// 0x0028 (0x00CC - 0x00A4)
class UH7GFxInitiativeList : public UH7GFxUIContainer
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           mMapping;                                         		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      mUnitsSendToFlash;                                		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72781 ];

		return pClassPointer;
	};

	void Reset ( );
	void SelectAttackButton ( unsigned long val );
	void SelectSpellbookButton ( unsigned long val );
	void UpdateUnitBuffs ( );
	void UpdateBuffs ( class AH7Unit* Unit, unsigned long withBuffTooltips );
	void UpdateHeroMana ( );
	void UpdateHeroManaOf ( class AH7CombatHero* Hero );
	void UpdateUnitAction ( );
	void UpdateAction ( class AH7Unit* Unit, class UH7HeroAbility* Action );
	void UpdateUnitSkip ( );
	void UpdateSkip ( class AH7Unit* Unit );
	void UpdateUnitStackSize ( );
	void UpdateStackSize ( class AH7Unit* Unit );
	class UGFxObject* BuildOrderSlot ( class AH7Unit* Unit, struct FString slotID, unsigned long future );
	class UGFxObject* CreateOrderList ( );
	class UGFxObject* GetOrderSlot ( struct FString slotID );
	int GetOrderSlotIndex ( struct FString slotID );
	int AttachBuffList ( class AH7Unit* Unit, int I, unsigned long withBuffTooltip, class UGFxObject** Object );
	class UGFxObject* BuildFullDataSlot ( class AH7Unit* Unit, struct FString slotID, unsigned long future );
	bool IsNewUnit ( class AH7Unit* Unit );
	int CopyList ( TArray< class AH7Unit* > sourceList, int sourceStartIndex, int targetStartIndex, int turn, unsigned long future, int sourceEndIndex, unsigned long fullData, class UGFxObject** targetList );
	class UGFxObject* CreateFullList ( );
	TArray< class AH7Unit* > DoubleUnits ( TArray< class AH7Unit* > singleList, unsigned long future );
	TArray< class AH7Unit* > GetNextTurnUnits ( );
	TArray< class AH7Unit* > GetCurrentTurnUnits ( );
	void SetInitiativeInfo ( );
	void ResetInitiativeInfo ( );
	void DisplayTurnAnimation ( struct FString turnName );
	void EnableTurn ( unsigned long val );
	void SetDeselect ( int Id );
	void SetSelect ( int Id );
	void SetDehightLight ( int Id );
	void SetHightLight ( int Id );
	void AnimateList ( );
	void Update ( );
	void InitList ( );
};



// Class MMH7Game.H7GFxCombatMenu ( Property size: 0 iter: 7) 
// Class name index: 44247 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxCombatMenu : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72782 ];

		return pClassPointer;
	};

	void ActivateFxOnAutoCombatButton ( unsigned long Enable, unsigned long Circles );
	void EnableTurn ( unsigned long val );
	void SetStartable ( unsigned long val );
	void SetTurnCounter ( int val );
	void TacticsBegin ( );
	void SetBtnFleeSurrenderEnabled ( unsigned long btnFleeSurrenderEnabled );
	void CombatBegin ( );
};



// Class MMH7Game.H7GFxCreatureAbilityButtonPanel ( Property size: 0 iter: 5) 
// Class name index: 44253 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxCreatureAbilityButtonPanel : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72783 ];

		return pClassPointer;
	};

	void Hide ( );
	void EnableTurn ( unsigned long val );
	void SelectAbilityButton ( int Id );
	void Update ( unsigned long sameUnit );
	void SetData ( TArray< class UH7BaseAbility* > Abilities, unsigned long sameUnit );
};



// Class MMH7Game.H7GFxTacticsBanner ( Property size: 0 iter: 0) 
// Class name index: 44314 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTacticsBanner : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72784 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7GFxArmyRow ( Property size: 0 iter: 6) 
// Class name index: 44243 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxArmyRow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72786 ];

		return pClassPointer;
	};

	void HighlightUnitSlotsByCreatureName ( struct FString creatureName );
	void AddLockIconToUnitSlots ( TArray< int > lockedPosses );
	void StackDismissed ( );
	void TransferResult ( unsigned long Success, unsigned long isVisitorArmy, int I );
	void UpdateFromStacks ( TArray< class UH7BaseCreatureStack* > stacks );
	void Update ( class AH7AdventureArmy* Army, unsigned long costMode, struct FH7TeleportCosts mergeCost );
};



// Class MMH7Game.H7GFxDeploymentBar ( Property size: 2 iter: 14) 
// Class name index: 44256 
// 0x0010 (0x00B4 - 0x00A4)
class UH7GFxDeploymentBar : public UH7GFxArmyRow
{
public:
	class UGFxObject*                                  mData;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  mUnitOnMouse;                                     		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72785 ];

		return pClassPointer;
	};

	void SetMaxDeployed ( unsigned long val );
	void ClearSelection ( );
	void SetDehighlight ( int Id );
	void SetHighlight ( int Id );
	void MarkAsUnDeployed ( int Id );
	void MarkAsDeployed ( int Id );
	void NewUnitIsOnMouse ( );
	void UnitWasPickedUp ( class AH7Unit* Unit );
	void Update2 ( );
	int CreateList ( TArray< struct FH7StackDeployment > List, int StartIndex, int ProviderIndex, int turn, class UGFxObject** Object );
	class UGFxObject* CreateDeployObject ( );
	void InitBar ( );
};



// Class MMH7Game.H7FracturedDynMeshActor ( Property size: 5 iter: 8) 
// Class name index: 44224 
// 0x004C (0x035C - 0x0310)
class AH7FracturedDynMeshActor : public AH7FracturedMeshActor
{
public:
	struct FVector                                     FracHitLocation;                                  		// 0x0310 (0x000C) [0x0000000000000000]              
	struct FVector                                     FracMomentum;                                     		// 0x031C (0x000C) [0x0000000000000000]              
	class UClass*                                      FracDmgType;                                      		// 0x0328 (0x0008) [0x0000000000000000]              
	struct FTraceHitInfo                               FracHitInfo;                                      		// 0x0330 (0x0028) [0x0000000000080000]              ( CPF_Component )
	int                                                FracCurrChunk;                                    		// 0x0358 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73110 ];

		return pClassPointer;
	};

	void eventFractureGroup ( );
	void eventFractureInterpolated ( float InterpTime, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool IsFracturedByDamageType ( class UClass* dmgType );
};



// Class MMH7Game.H7CombatMapFCT ( Property size: 5 iter: 11) 
// Class name index: 44125 
// 0x0028 (0x0088 - 0x0060)
class UH7CombatMapFCT : public UObject
{
public:
	struct FVector                                     mWorldPosition;                                   		// 0x0060 (0x000C) [0x0000000000000000]              
	float                                              mAge;                                             		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     mText;                                            		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      mColor;                                           		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                mFlashID;                                         		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73314 ];

		return pClassPointer;
	};

	float GetAge ( );
	int GetFlashID ( );
	bool IsDead ( );
	void Age ( float DeltaTime );
	void show ( class UCanvas* myCanvas );
	void Init ( struct FVector StartPosition, struct FString Text, struct FColor TextColor, int flashID );
};



// Class MMH7Game.H7CombatMapGridDebug ( Property size: 6 iter: 9) 
// Class name index: 44126 
// 0x0040 (0x00A0 - 0x0060)
class UH7CombatMapGridDebug : public UObject
{
public:
	class UH7CombatMapCell*                            mDefendCell;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FVector                                     mDefendPosition;                                  		// 0x0068 (0x000C) [0x0000000000000000]              
	struct FRotator                                    mCursorRotation;                                  		// 0x0074 (0x000C) [0x0000000000000000]              
	TArray< class UH7CombatMapCell* >                  mCurrentAttackPositions;                          		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AH7CombatMapGridController*                  mGridController;                                  		// 0x0090 (0x0008) [0x0000000000000000]              
	class AH7CreatureStack*                            mAttacker;                                        		// 0x0098 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73854 ];

		return pClassPointer;
	};

	void RenderDebugAttackPositions ( class UCanvas* myCanvas );
	void Update ( TArray< class UH7CombatMapCell* > Positions, class AH7CreatureStack* attacker, class AH7CreatureStack* defender );
	void Setup ( class AH7CombatMapGridController* gridController );
};



// Class MMH7Game.H7CombatMapPathPreviewer ( Property size: 3 iter: 5) 
// Class name index: 44128 
// 0x000C (0x026C - 0x0260)
class AH7CombatMapPathPreviewer : public AH7BasePathPreviewer
{
public:
	int                                                PREVIEW_DOTS_PER_CELL;                            		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                mCurveMaxSteps;                                   		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                mCurveDivision;                                   		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74630 ];

		return pClassPointer;
	};

	TArray< struct FVector > GetSmoothPath ( TArray< class UH7CombatMapCell* > Path, unsigned char Size );
	void ShowPreview ( TArray< class UH7CombatMapCell* > Path, unsigned char Size );
};



// Class MMH7Game.H7TownMoat ( Property size: 0 iter: 0) 
// Class name index: 44726 
// 0x0000 (0x0130 - 0x0130)
class UH7TownMoat : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74633 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TownTower ( Property size: 0 iter: 0) 
// Class name index: 44732 
// 0x0000 (0x0130 - 0x0130)
class UH7TownTower : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74634 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CombatMapInfo ( Property size: 2 iter: 12) 
// Class name index: 44127 
// 0x0008 (0x04A0 - 0x0498)
class AH7CombatMapInfo : public AH7GameInfo
{
public:
	unsigned long                                      bIsReturningToMainMenu : 1;                       		// 0x0498 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              mCurrentStartMatchWaitTime;                       		// 0x049C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74673 ];

		return pClassPointer;
	};

	void StateEndCombat ( );
	bool AtCapacity ( unsigned long bSpectator, struct FString PlayerName );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void ForceHostReady ( );
	bool ArePlayersNeeded ( );
	void GenericPlayerInitialization ( class AController* Controller );
};



// Class MMH7Game.H7CombatMapTrap ( Property size: 2 iter: 6) 
// Class name index: 44132 
// 0x0004 (0x03A4 - 0x03A0)
class AH7CombatMapTrap : public AH7CombatObstacleObject
{
public:
	unsigned long                                      mIsHidden : 1;                                    		// 0x03A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mDestroyAfterTriggered : 1;                       		// 0x03A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74984 ];

		return pClassPointer;
	};

	void Init ( );
	class AH7CombatObstacleObject* PlaceObstacle ( struct FH7SiegeTownData siegeTownData, struct FVector SpawnLocation );
	void TriggerTrap ( );
	bool IsHidden ( );
};



// Class MMH7Game.H7CombatPlayerReplicationInfo ( Property size: 3 iter: 10) 
// Class name index: 44133 
// 0x0004 (0x0314 - 0x0310)
class AH7CombatPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	unsigned long                                      mIsAttacker : 1;                                  		// 0x0310 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      mIsHostReady : 1;                                 		// 0x0310 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      mIsPlayerReady : 1;                               		// 0x0310 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75028 ];

		return pClassPointer;
	};

	void SetPlayerReady ( );
	void SetHostReady ( );
	void SetIsAttacker ( unsigned long IsAttacker );
	bool IsPlayerReady ( );
	bool IsHostReady ( );
	bool IsAttacker ( );
	void PostBeginPlay ( );
};



// Class MMH7Game.H7InstantCommandResetReinforcement ( Property size: 2 iter: 7) 
// Class name index: 44408 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandResetReinforcement : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mGarrisonedArmy;                                  		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75309 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* Army, class AH7AdventureArmy* garrisonedArmy );
};



// Class MMH7Game.H7InstantCommandConfirmReinforcement ( Property size: 2 iter: 7) 
// Class name index: 44378 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandConfirmReinforcement : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mManaCost;                                        		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75310 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, int manaCost );
};



// Class MMH7Game.H7InstantCommandAcceptMerge ( Property size: 1 iter: 6) 
// Class name index: 44366 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandAcceptMerge : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75311 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7InstantCommandTranferStackFromMergePool ( Property size: 3 iter: 11) 
// Class name index: 44421 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandTranferStackFromMergePool : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mArmy;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mSourceIndex;                                     		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                mTargetIndex;                                     		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75312 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void SplitCreatureStackComplete ( unsigned long Success, TArray< class UH7BaseCreatureStack* > PoolStacks );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* Army, int SourceIndex, int TargetIndex );
};



// Class MMH7Game.H7GFxCombatPopUp ( Property size: 0 iter: 7) 
// Class name index: 44248 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxCombatPopUp : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75319 ];

		return pClassPointer;
	};

	void AddMergeArmy ( class UGFxObject* Object );
	void ClickBtnQuickCombatFromUnreal ( unsigned long isSiege );
	class UGFxObject* GetCombatRewardsObject ( class AH7EditorHero* losingHero, class AH7EditorHero* winningHero );
	void UpdateFromCombatMap ( int XPWinner, int XPLoser, class AH7CombatArmy* myArmy, unsigned long activePlayerIsAttacker, unsigned long fled, unsigned long surrendered, int paidGold );
	void OnEndQuickCombatUpdate ( TArray< class UH7BaseCreatureStack* > attackerLoses, TArray< class UH7BaseCreatureStack* > defenderLoses, unsigned long leftArmyVictory, class AH7CombatHero* attackerHero, class AH7CombatHero* defenderHero, unsigned long activePlayerIsAttacker, unsigned long isSiege );
	void UpdateNegotiationPopUp ( class AH7AdventureArmy* heroArmy, class AH7AdventureArmy* creatureArmy, unsigned long join, TArray< struct FH7ResourceQuantity > Costs, unsigned long Force );
	void Update ( class AH7AdventureArmy* attackingArmy, class AH7AdventureArmy* defendingArmy, unsigned long activePlayerIsAttacker, TArray< class UH7BaseCreatureStack* > localGuardStacks );
};



// Class MMH7Game.H7GFxArmyMergePopup ( Property size: 0 iter: 5) 
// Class name index: 44242 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxArmyMergePopup : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75320 ];

		return pClassPointer;
	};

	void Update ( );
	void UpdateCosts ( int Current );
	void SetArmyArmy ( class AH7AdventureArmy* uppperArmy, class AH7AdventureArmy* lowerArmy, struct FString Title, unsigned long costMode, int maxCosts, struct FH7TeleportCosts Costs );
	void SetArmyCaravanArmy ( class AH7AdventureArmy* heroArmy, class AH7AdventureArmy* caravanArmy, struct FString Title );
	void SetArmyStacks ( class AH7AdventureArmy* Army, TArray< class UH7BaseCreatureStack* > joiners, struct FString Title );
};



// Class MMH7Game.H7GFxObstacleInfo ( Property size: 1 iter: 6) 
// Class name index: 44295 
// 0x0008 (0x00AC - 0x00A4)
class UH7GFxObstacleInfo : public UH7GFxUIContainer
{
public:
	class AH7CombatObstacleObject*                     mOldDisplayedObstacle;                            		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75504 ];

		return pClassPointer;
	};

	void Hide ( );
	void ListenUpdate ( class UH7IGUIListenable* OBSTACLE );
	void SetObstacleInfo ( class AH7CombatObstacleObject* Target );
	class AH7CombatObstacleObject* GetCurrentlyDisplayedObstacle ( );
	void Update ( );
};



// Class MMH7Game.H7WarUnitAnimControl ( Property size: 11 iter: 26) 
// Class name index: 44765 
// 0x013C (0x037C - 0x0240)
class AH7WarUnitAnimControl : public AActor
{
public:
	struct FAnimationData                              mAnimations[ 0x9 ];                               		// 0x0240 (0x00D8) [0x0000000000000000]              
	class AH7WarUnit*                                  mOwner;                                           		// 0x0318 (0x0008) [0x0000000000000000]              
	class AH7USSProjectile*                            mProjectile;                                      		// 0x0320 (0x0008) [0x0000000000000000]              
	class UAnimNodePlayCustomAnim*                     mAnimNode;                                        		// 0x0328 (0x0008) [0x0000000000000000]              
	class UAnimNodePlayCustomAnim*                     mAnimNode2;                                       		// 0x0330 (0x0008) [0x0000000000000000]              
	unsigned char                                      mCurrentAnim;                                     		// 0x0338 (0x0001) [0x0000000000000000]              
	TArray< struct FH7WarfareEvent >                   mAnimEvents;                                      		// 0x033C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAnimNodeBlendList*                          mDeadBlend;                                       		// 0x034C (0x0008) [0x0000000000000000]              
	class UAnimNodeBlendList*                          mDeadBlend2;                                      		// 0x0354 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnFinishedAnimFunc__Delegate;                   		// 0x035C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0360 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnShootFunc__Delegate;                          		// 0x036C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0370 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75784 ];

		return pClassPointer;
	};

	float GetEventTime ( unsigned char EventType );
	void FinishDying ( );
	void OnRangeAttackShoot ( );
	float GetCurrentAnimNodeTimeLeft ( );
	void StopCustomAnimOnAll ( unsigned char animId, float BlendOutTime );
	void PlayCustomAnimOnAll ( unsigned char animId, float Rate, float BlendInTime, float BlendOutTime, unsigned long doLooping, unsigned long doOverride );
	void PlayAnim ( unsigned char wuAnimation, struct FScriptDelegate onFinishedAnim, struct FScriptDelegate onShoot );
	void OnShootFunc ( );
	void OnFinishedAnimFunc ( );
	void Init ( class AH7WarUnit* warunitOwner, class USkeletalMeshComponent* SkelComp, class USkeletalMeshComponent* skelComp2, TArray< struct FH7WarfareEvent > warunitEvents );
};



// Class MMH7Game.H7GFxLoaderManager ( Property size: 4 iter: 11) 
// Class name index: 44276 
// 0x0038 (0x00DC - 0x00A4)
class UH7GFxLoaderManager : public UH7GFxUIContainer
{
public:
	TArray< struct FLoaderEntry >                      mLoaderEntries;                                   		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLoaderEntry >                      mLoaderQueue;                                     		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7FlashMovieCntl*                           mCurrentlyLoading;                                		// 0x00C4 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnLoadComplete__Delegate;                       		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75807 ];

		return pClassPointer;
	};

	void LoadComplete ( struct FString Filename );
	void LoadSWF ( struct FString Path );
	void StartLoading ( struct FLoaderEntry Entry );
	void LoadMovie ( class UH7FlashMovieCntl* Controller, struct FScriptDelegate callbackFunction );
	class UH7FlashMovieCntl* GetCurrentlyLoadingCntl ( );
	void OnLoadComplete ( );
};



// Class MMH7Game.H7MainMenuController ( Property size: 1 iter: 5) 
// Class name index: 44465 
// 0x0008 (0x0250 - 0x0248)
class AH7MainMenuController : public AH7BaseGameController
{
public:
	class AH7MainMenuConfiguration*                    mMainMenuConfiguration;                           		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76166 ];

		return pClassPointer;
	};

	void startMusic ( );
	void PostBeginPlay ( );
	class AH7MainMenuConfiguration* GetConfig ( );
	class AH7MainMenuController* GetInstance ( );
};



// Class MMH7Game.H7CouncilCamera ( Property size: 4 iter: 9) 
// Class name index: 44148 
// 0x0054 (0x05DC - 0x0588)
class AH7CouncilCamera : public ACamera
{
public:
	class UH7CameraProperties*                         mCameraProperties[ 0x7 ];                         		// 0x0588 (0x0038) [0x0000000000000000]              
	struct FRotator                                    mOriginalRotation;                                		// 0x05C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     mOriginalPosition;                                		// 0x05CC (0x000C) [0x0000000000000000]              
	unsigned long                                      mMatineeActive : 1;                               		// 0x05D8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76171 ];

		return pClassPointer;
	};

	void ResetToOriginal ( );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void PostBeginPlay ( );
	void ActivateMatineeTransform ( );
	bool IsMatineeControlled ( );
};



// Class MMH7Game.H7MainMenuInfo ( Property size: 0 iter: 5) 
// Class name index: 44467 
// 0x0000 (0x0498 - 0x0498)
class AH7MainMenuInfo : public AH7GameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76213 ];

		return pClassPointer;
	};

	void StartSkirmish ( struct FString MapName );
	void RestartPlayer ( class AController* NewPlayer );
	class ULocalPlayer* eventGetLP ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class AH7MainMenuInfo* GetInstance ( );
};



// Class MMH7Game.H7CouncilGameInfo ( Property size: 2 iter: 11) 
// Class name index: 44151 
// 0x0010 (0x04A8 - 0x0498)
class AH7CouncilGameInfo : public AH7MainMenuInfo
{
public:
	class AH7CouncilManager*                           mCouncilManager;                                  		// 0x0498 (0x0008) [0x0000000000000000]              
	class UH7PlayerProfile*                            mPlayerProfile;                                   		// 0x04A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76229 ];

		return pClassPointer;
	};

	void RestartPlayer ( class AController* NewPlayer );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class UH7PlayerProfile* GetPlayerProfile ( );
	void SetCouncilManager ( class AH7CouncilManager* newManager );
	class AH7CouncilManager* GetCouncilManager ( );
};



// Class MMH7Game.H7CouncilPlayerController ( Property size: 8 iter: 29) 
// Class name index: 44160 
// 0x003C (0x08A0 - 0x0864)
class AH7CouncilPlayerController : public AH7PlayerController
{
public:
	float                                              mLastLeftClickTime;                               		// 0x0864 (0x0004) [0x0000000000000000]              
	class AActor*                                      mLastClickedActor;                                		// 0x0868 (0x0008) [0x0000000000000000]              
	float                                              FLOAT_MAX;                                        		// 0x0870 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AH7CouncilManager*                           mCouncilManager;                                  		// 0x0874 (0x0008) [0x0000000000000000]              
	class AActor*                                      mPreviousActorUnderMouse;                         		// 0x087C (0x0008) [0x0000000000000000]              
	class AActor*                                      mActorUnderMouse;                                 		// 0x0884 (0x0008) [0x0000000000000000]              
	unsigned long                                      mCampaignCheatEnabled : 1;                        		// 0x088C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class AInterpActor* >                      mDynamicCouncilActors;                            		// 0x0890 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76274 ];

		return pClassPointer;
	};

	void UnlockThatAction ( );
	void UnlockAction ( int actionID );
	void ToggleCampaignCheat ( );
	void ResetProfile ( );
	void RightMouseDown ( );
	bool GetActorUnderMouse ( struct FImpactInfo* finalHitInfo );
	struct FVector PannigCameraMovement ( );
	void FlagSelected ( class AH7CouncilFlagActor* HitActor, class AH7CouncilMapManager* managerRef );
	class UAkEvent* GetRestartConfirmAkEvent ( struct FCouncillorData Data );
	class UAkEvent* ProgressDependantSelectionConfirmAkEvent ( struct FCouncillorData Data );
	class UAkEvent* GetProgressDependantCouncillorAkEvent ( struct FCouncillorData Data );
	class UAkEvent* GetGameProgressDependantIvanVoiceOver ( struct FCouncillorData Data );
	void LeftMouseDown ( );
	void ToggleMenu ( );
	void eventPlayerTick ( float DeltaTime );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
	class AActor* GetCurrentActorUnderMouse ( );
	void SetCouncilManager ( class AH7CouncilManager* newManager );
	class AH7CouncilManager* GetCouncilManager ( );
	TArray< class AInterpActor* > GetCouncilInterpActors ( );
};



// Class MMH7Game.H7CouncilHeropediaActor ( Property size: 0 iter: 3) 
// Class name index: 44152 
// 0x0000 (0x0254 - 0x0254)
class AH7CouncilHeropediaActor : public AH7CouncilInteractive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76275 ];

		return pClassPointer;
	};

	void MouseOverStop ( );
	void MouseOverStart ( );
	void ClickedOn ( );
};



// Class MMH7Game.H7CouncilLampActor ( Property size: 0 iter: 3) 
// Class name index: 44155 
// 0x0000 (0x0254 - 0x0254)
class AH7CouncilLampActor : public AH7CouncilInteractive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76281 ];

		return pClassPointer;
	};

	void MouseOverStop ( );
	void MouseOverStart ( );
	void ClickedOn ( );
};



// Class MMH7Game.H7CouncilScrollActor ( Property size: 0 iter: 3) 
// Class name index: 44161 
// 0x0000 (0x0254 - 0x0254)
class AH7CouncilScrollActor : public AH7CouncilInteractive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76557 ];

		return pClassPointer;
	};

	void MouseOverStop ( );
	void MouseOverStart ( );
	void ClickedOn ( );
};



// Class MMH7Game.H7GFxCouncilorWindow ( Property size: 2 iter: 7) 
// Class name index: 44252 
// 0x000C (0x00B0 - 0x00A4)
class UH7GFxCouncilorWindow : public UH7GFxUIContainer
{
public:
	class UH7CampaignDefinition*                       mDisplayedCampaign;                               		// 0x00A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mStandAloneMode : 1;                              		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76627 ];

		return pClassPointer;
	};

	void DisplayDifficultySettings ( int Global, int res, int Strength, int Growth, int AI );
	void AddMapData ( class UGFxObject* Data, class UH7CampaignDefinition* theCampaign );
	void Update ( class UH7CampaignDefinition* theCampaign, unsigned long standAloneMode );
	class UH7CampaignDefinition* GetLastDisplayedCampaign ( );
	bool GetStandAloneMode ( );
};



// Class MMH7Game.H7GfxMainMenu ( Property size: 0 iter: 8) 
// Class name index: 44283 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GfxMainMenu : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76634 ];

		return pClassPointer;
	};

	void OpenDuelMenu ( unsigned long vsAI );
	void SetContinueTooltip ( struct FString ToolTip );
	void BlockContinue ( );
	int GoBack ( );
	void FadeOut ( );
	void FadeIn ( );
	void SetVersion ( struct FString Version );
	void SetVisibleSave ( unsigned long val );
};



// Class MMH7Game.H7CouncilStatueActor ( Property size: 0 iter: 3) 
// Class name index: 44162 
// 0x0000 (0x0254 - 0x0254)
class AH7CouncilStatueActor : public AH7CouncilInteractive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76644 ];

		return pClassPointer;
	};

	void MouseOverStop ( );
	void MouseOverStart ( );
	void ClickedOn ( );
};



// Class MMH7Game.H7CreatureFX ( Property size: 4 iter: 7) 
// Class name index: 44169 
// 0x0030 (0x0090 - 0x0060)
class UH7CreatureFX : public UObject
{
public:
	class USkeletalMeshComponent*                      mMesh;                                            		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   mMatInst;                                         		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FLinearColor                                mAttackerColor;                                   		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                mDefenderColor;                                   		// 0x0080 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76995 ];

		return pClassPointer;
	};

	void SetIsHovering ( unsigned long isHovering );
	void SetTeamColor ( int TeamID );
	void InitFX ( class USkeletalMeshComponent* creatureMesh );
};



// Class MMH7Game.H7CreatureStackFX ( Property size: 0 iter: 1) 
// Class name index: 44172 
// 0x0000 (0x0264 - 0x0264)
class AH7CreatureStackFX : public AH7UnitFX
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77881 ];

		return pClassPointer;
	};

	void CreateFX ( );
};



// Class MMH7Game.H7FCTElement ( Property size: 9 iter: 22) 
// Class name index: 44216 
// 0x0048 (0x00A8 - 0x0060)
class UH7FCTElement : public UObject
{
public:
	struct FVector                                     mWorldPosition;                                   		// 0x0060 (0x000C) [0x0000000000000000]              
	float                                              mAge;                                             		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     mText;                                            		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mIconPath;                                        		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      mColor;                                           		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                mFlashID;                                         		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   mOffset;                                          		// 0x0098 (0x0008) [0x0000000000000000]              
	unsigned char                                      mType;                                            		// 0x00A0 (0x0001) [0x0000000000000000]              
	unsigned long                                      doUpperScreenBorderCheck : 1;                     		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77886 ];

		return pClassPointer;
	};

	void Age ( float DeltaTime );
	void Render ( class UCanvas* myCanvas );
	void Init ( struct FVector StartPosition, struct FString Text, struct FColor TextColor, int flashID, struct FString IconPath, struct FVector2D Offset, unsigned char Type );
	unsigned char GetType ( );
	bool IsDead ( );
	int GetFlashID ( );
	float GetAge ( );
	struct FString GetIconPath ( );
	struct FVector2D GetPixelOffset ( );
	struct FString GetText ( );
	void SetWorldPosition ( struct FVector pos );
	struct FVector GetWorldPosition ( );
	void SetDoUpperScreenBorderCheck ( unsigned long val );
};



// Class MMH7Game.H7UnitSlotFXProperties ( Property size: 11 iter: 11) 
// Class name index: 44757 
// 0x004C (0x00AC - 0x0060)
class UH7UnitSlotFXProperties : public UObject
{
public:
	class UParticleSystem*                             SelectionFXTemplate1x1;                           		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SelectionFXTemplate2x2;                           		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SelectionFXTemplate3x3;                           		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SelectionFXTemplate4x4;                           		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SelectionFXTemplateHero;                          		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SelectionFXTemplateWarUnit;                       		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UDecalMaterial*                              SelectionFXTemplateHeroDecal;                     		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UDecalMaterial*                              SelectionFXTemplateWarUnitDecal;                  		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ActiveTargetColor;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EnemyTargetColor;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      AllyTargetColor;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77889 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7CreatureStackFlyer ( Property size: 11 iter: 30) 
// Class name index: 44171 
// 0x0050 (0x0338 - 0x02E8)
class AH7CreatureStackFlyer : public AH7CreatureStackBaseMover
{
public:
	struct FVector                                     mFlyInitialLoc;                                   		// 0x02E8 (0x000C) [0x0000000000000000]              
	struct FVector                                     mFlyTargetLoc;                                    		// 0x02F4 (0x000C) [0x0000000000000000]              
	float                                              mCurrentMoveTime;                                 		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              mTotalMoveTime;                                   		// 0x0304 (0x0004) [0x0000000000000000]              
	unsigned long                                      mOldTurnFlight : 1;                               		// 0x0308 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mLandingAnimStarted : 1;                          		// 0x0308 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              mStartFlyDuration;                                		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              mEndFlyDuration;                                  		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              mFlightSpeed;                                     		// 0x0314 (0x0004) [0x0000000000000000]              
	TArray< struct FFH7FlyTimePoint >                  mFlyCurve;                                        		// 0x0318 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __H7FlyTimePointSort__Delegate;                   		// 0x0328 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x032C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78051 ];

		return pClassPointer;
	};

	int H7FlyTimePointSort ( struct FFH7FlyTimePoint A, struct FFH7FlyTimePoint B );
	bool IsMoving ( );
	void UpdateSecPerField ( );
	void Initialize ( class AH7Unit* Stack );
	void StartElevating ( );
	void SetEndFlyDuration ( float val );
	void SetStartFlyDuration ( float val );
	float GetEndFlyDuration ( );
	float GetStartFlyDuration ( );
};



// Class MMH7Game.H7CreatureStackMover ( Property size: 13 iter: 22) 
// Class name index: 44175 
// 0x0060 (0x0348 - 0x02E8)
class AH7CreatureStackMover : public AH7CreatureStackBaseMover
{
public:
	float                                              mHeroTurnTime;                                    		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              mHeroPreTurnTime;                                 		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              mCreaturePreTurnTime;                             		// 0x02F0 (0x0004) [0x0000000000000000]              
	float                                              mHeroPostTurnTime;                                		// 0x02F4 (0x0004) [0x0000000000000000]              
	float                                              mCreaturePostTurnTime;                            		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              mCreatureTurnTimeCut;                             		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              mHeroTurnBlendAlpha;                              		// 0x0300 (0x0004) [0x0000000000000000]              
	TArray< class UH7AdventureMapCell* >               mVisitedAdventureCells;                           		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7IEffectTargetable* >              mPassedThroughTargetables;                        		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystem*                             mWaterSplashParticles;                            		// 0x0324 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             mDustParticles;                                   		// 0x032C (0x0008) [0x0000000000000000]              
	TArray< class UH7BaseCell* >                       mLastPath;                                        		// 0x0334 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      mInRotateMode : 1;                                		// 0x0344 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78208 ];

		return pClassPointer;
	};

	void InterruptAndRotate ( );
	void CreateFootprint ( class UH7AdventureMapCell* cell );
	struct FRotator GetCurrentTargetRotation ( );
	void CheckForGateAhead ( );
	bool IsMoving ( );
};



// Class MMH7Game.H7CreatureStackGhostWalker ( Property size: 1 iter: 7) 
// Class name index: 44173 
// 0x0004 (0x034C - 0x0348)
class AH7CreatureStackGhostWalker : public AH7CreatureStackMover
{
public:
	unsigned long                                      mWalkFXDone : 1;                                  		// 0x0348 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78313 ];

		return pClassPointer;
	};

	void CreateMaterialFX ( );
	void ResetWalkFX ( );
	void UpdateGhostMovement ( );
	void MoveStack ( TArray< class UH7BaseCell* > Path, class UH7IEffectTargetable* Target );
	void Initialize ( class AH7Unit* Stack );
};



// Class MMH7Game.H7CreatureStackJumper ( Property size: 9 iter: 27) 
// Class name index: 44174 
// 0x004C (0x0334 - 0x02E8)
class AH7CreatureStackJumper : public AH7CreatureStackBaseMover
{
public:
	struct FVector                                     mJumpInitialLoc;                                  		// 0x02E8 (0x000C) [0x0000000000000000]              
	struct FVector                                     mJumpTargetLoc;                                   		// 0x02F4 (0x000C) [0x0000000000000000]              
	float                                              mTotalMoveTime;                                   		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                mPathCurrStep;                                    		// 0x0304 (0x0004) [0x0000000000000000]              
	unsigned long                                      mOldTurnJump : 1;                                 		// 0x0308 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              mStartJumpFlyDuration;                            		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              mJumpEndPitchDuration;                            		// 0x0310 (0x0004) [0x0000000000000000]              
	TArray< struct FFH7FlyTimePoint >                  mJumpCurve;                                       		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __H7FlyTimePointSort__Delegate;                   		// 0x0324 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0328 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78348 ];

		return pClassPointer;
	};

	int H7FlyTimePointSort ( struct FFH7FlyTimePoint A, struct FFH7FlyTimePoint B );
	float GetSecondsPerField ( );
	bool IsMoving ( );
	void Initialize ( class AH7Unit* Stack );
	void EndJumpSequence ( );
	void StartElevating ( );
	float GetJumpEndPitchDuration ( );
	float GetStartJumpDuration ( );
};



// Class MMH7Game.H7CreatureStackTeleporter ( Property size: 2 iter: 11) 
// Class name index: 44177 
// 0x0008 (0x02F0 - 0x02E8)
class AH7CreatureStackTeleporter : public AH7CreatureStackBaseMover
{
public:
	float                                              mSecToVanish;                                     		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              mSecToAppear;                                     		// 0x02EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78483 ];

		return pClassPointer;
	};

	struct FRotator GetTargetRotation ( int pathIndex );
	struct FRotator GetCurrentTargetRotation ( );
	bool IsMoving ( );
	void Initialize ( class AH7Unit* Stack );
};



// Class MMH7Game.H7GFxStackPlateSystem ( Property size: 1 iter: 8) 
// Class name index: 44312 
// 0x0008 (0x00A8 - 0x00A0)
class UH7GFxStackPlateSystem : public UGFxObject
{
public:
	class UGFxObject*                                  mMultiUpdateList;                                 		// 0x00A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78524 ];

		return pClassPointer;
	};

	void Clear ( );
	void DeletePlate ( int Id );
	void MultiUpdate ( );
	void AddUpdate ( int Id, int X, int Y, int StackSize, unsigned long Visible, unsigned char plateOrientation, unsigned long unitIsActive );
	void StartMultiUpdate ( );
	void Update ( int Id, int X, int Y, int StackSize, unsigned long Visible );
	int CreatePlate ( int X, int Y, int StackSize, int R, int G, int B );
};



// Class MMH7Game.H7CrusaderCommandery ( Property size: 7 iter: 14) 
// Class name index: 44178 
// 0x0034 (0x054C - 0x0518)
class AH7CrusaderCommandery : public AH7BattleSite
{
public:
	unsigned long                                      mPedefinedArmy : 1;                               		// 0x0518 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                mPedefinedArmyNumber;                             		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AH7AdventureArmy* >                  mHeroReward;                                      		// 0x0520 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mMultiHeroReward;                                 		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                mNumberOfFactions;                                		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7MultiArmySetupData >             mMultiArmySetup;                                  		// 0x0538 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mChoosenHeroIndex;                                		// 0x0548 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78616 ];

		return pClassPointer;
	};

	void GetHeroReward ( class AH7AdventureHero* Hero );
	void GetReward ( class AH7AdventureHero* Hero );
	void ElectFactionArmy ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	class AH7EditorHero* GetHeroRewardGUI ( );
	void RollNewHeroReward ( );
	void eventInitAdventureObject ( );
};



// Class MMH7Game.H7InstantCommandRecruitDirect ( Property size: 5 iter: 12) 
// Class name index: 44404 
// 0x002C (0x008C - 0x0060)
class UH7InstantCommandRecruitDirect : public UH7InstantCommandBase
{
public:
	class AH7Dwelling*                                 mDwelling;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7CustomNeutralDwelling*                    mCustomDwelling;                                  		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FString                                     mCreatureName;                                    		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mCount;                                           		// 0x0080 (0x0004) [0x0000000000000000]              
	class AH7Player*                                   mPlayerRequester;                                 		// 0x0084 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78887 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( struct FString creatureName, int Count, class AH7Dwelling* Dwelling );
};



// Class MMH7Game.H7InstantCommandUpgradeDwelling ( Property size: 1 iter: 8) 
// Class name index: 44426 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandUpgradeDwelling : public UH7InstantCommandBase
{
public:
	class AH7Dwelling*                                 mDwelling;                                        		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78888 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Dwelling* Dwelling );
};



// Class MMH7Game.H7InstantCommandStartDestructionOrReparation ( Property size: 1 iter: 8) 
// Class name index: 44418 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandStartDestructionOrReparation : public UH7InstantCommandBase
{
public:
	class AH7DestructibleObjectManipulator*            mDestructibleObjects;                             		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79255 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7DestructibleObjectManipulator* destructibleObjects );
};



// Class MMH7Game.H7GFxDialog ( Property size: 0 iter: 4) 
// Class name index: 44257 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxDialog : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79408 ];

		return pClassPointer;
	};

	void UpdateAutoPlayState ( );
	void SetFactionDeco ( class UGFxObject* speakerData, class AH7EditorHero* speaker, unsigned long isLeft );
	void ShowGUI ( );
	void Update ( class AH7EditorHero* leftSpeaker, class AH7EditorHero* rightSpeaker, struct FString Text, unsigned long leftIsSpeaking, unsigned long hasPrev, unsigned long hasNext, TArray< class AH7EditorHero* > allspeakers, unsigned long isMonolog, struct FString headline, struct FString buttonCaption );
};



// Class MMH7Game.H7GFxCouncilDialog ( Property size: 4 iter: 14) 
// Class name index: 44250 
// 0x0004 (0x00A8 - 0x00A4)
class UH7GFxCouncilDialog : public UH7GFxDialog
{
public:
	unsigned long                                      mBlockLayer : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mBlockInput : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mPrevOnMode : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mDialogIsShowing : 1;                             		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79407 ];

		return pClassPointer;
	};

	void ShowGUI ( );
	void DisplayDifficultySettings ( int Global, int res, int Strength, int Growth, int AI );
	void SetFactionDeco ( class UGFxObject* speakerData, class AH7EditorHero* speaker, unsigned long isLeft );
	void SetPrevOnMode ( unsigned long val );
	void SetVisibleSave ( unsigned long val );
	void ShowPrevOn ( class AH7EditorHero* speaker, struct FString headline, struct FString Text, unsigned long hasPrev, unsigned long hasNext, struct FString buttonCaption );
	void Update ( class AH7EditorHero* leftSpeaker, class AH7EditorHero* rightSpeaker, struct FString Text, unsigned long leftIsSpeaking, unsigned long hasPrev, unsigned long hasNext, TArray< class AH7EditorHero* > allspeakers, unsigned long isMonolog, struct FString headline, struct FString buttonCaption );
	void Init ( );
	bool IsDialogShowing ( );
	bool IsPrevOnMode ( );
};



// Class MMH7Game.H7GFxNarrationDialog ( Property size: 0 iter: 1) 
// Class name index: 44293 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxNarrationDialog : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79423 ];

		return pClassPointer;
	};

	void Update ( struct FString Text, class AH7EditorHero* speaker, unsigned long hasPrev, unsigned long hasNext, unsigned long subTitleHack );
};



// Class MMH7Game.H7GFxMapControls ( Property size: 0 iter: 4) 
// Class name index: 44284 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxMapControls : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79424 ];

		return pClassPointer;
	};

	void DisplayCampaign ( struct FString campaignAID );
	void UpdateMarkerStates ( struct FString camp, struct FString Map );
	void SetAvailableMaps ( TArray< struct FString > maps );
	void SetAvailableCampaigns ( TArray< class UH7CampaignDefinition* > campaigns );
};



// Class MMH7Game.H7DragonUtopia ( Property size: 8 iter: 12) 
// Class name index: 44190 
// 0x004C (0x0564 - 0x0518)
class AH7DragonUtopia : public AH7BattleSite
{
public:
	unsigned long                                      mPedefinedArmy : 1;                               		// 0x0518 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mArmyEncounterSet : 1;                            		// 0x0518 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                mPedefinedArmyNumber;                             		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FH7MultiRewardData >                mRewardData;                                      		// 0x0520 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7MultiArmySetupData >             mMultiArmySetup;                                  		// 0x0530 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      mArmyRandomChances;                               		// 0x0540 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                mArmyEncounterNumber;                             		// 0x0550 (0x0004) [0x0000000000000000]              
	TArray< int >                                      mRewardItemIDdata;                                		// 0x0554 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79543 ];

		return pClassPointer;
	};

	void ElectArmy ( );
	void OnVisit ( class AH7AdventureHero** Hero );
	TArray< class UH7HeroItem* > DefineItemTier ( unsigned char ItemTier );
	void eventInitAdventureObject ( );
};



// Class MMH7Game.H7GFxDuelSetupWindow ( Property size: 0 iter: 16) 
// Class name index: 44258 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxDuelSetupWindow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79799 ];

		return pClassPointer;
	};

	void SetNewList ( struct FString dropDownName, TArray< struct FH7DropDownEntry > List, int PlayerIndex, unsigned long blockSendingToUnreal );
	void UpdateArmy ( );
	bool IsRandomArmy ( class AH7EditorArmy* Army );
	class UGFxObject* CreateDuelArmyObject ( int PlayerIndex, int armyIndex, class AH7EditorArmy* Army, struct FColor fallbackColor );
	void DisplayArmy ( int PlayerIndex, int armyIndex, class AH7EditorArmy* Army );
	void DisplayStartCondition ( unsigned long canStart, struct FString blockReason );
	void DisplayPlayerSettingsGUI ( int Index, struct FPlayerLobbySelectedSettingsGUI PlayerData );
	void DisplayPlayerSettings ( int PlayerIndex, struct FPlayerLobbySelectedSettings PlayerData );
	void DisplayGameSettings ( struct FH7LobbyDataGameSettings GameSettings );
	void DisplayMapSettings ( struct FString MapFilename, struct FString mapLocaName );
	void ListingMapDone ( );
	void AddMap ( struct FH7ContentScannerCombatMapData polledMap );
	void AddMaps ( TArray< struct FH7ListingCombatMapData > polledMaps );
	void Update ( );
	void SetupThumbnailPath ( struct FString Path );
	void SetupThumbnailPathTexture ( class UH7Texture2DStreamLoad* streamingTexture );
};



// Class MMH7Game.H7GFxHeroSelection ( Property size: 0 iter: 4) 
// Class name index: 44268 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxHeroSelection : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79800 ];

		return pClassPointer;
	};

	void UpdateHeroInfoDuel ( class AH7EditorHero* Hero );
	void UpdateHeroInfo ( class AH7EditorHero* Hero );
	void Update ( TArray< struct FString > heroIDs, int PlayerIndex, struct FString currentlySelectedHeroID, unsigned char playerColor );
	void SetAllHeroes ( unsigned long forDuel, unsigned long IsSkirmish );
};



// Class MMH7Game.H7Log ( Property size: 2 iter: 6) 
// Class name index: 44457 
// 0x0020 (0x0080 - 0x0060)
class UH7Log : public UObject
{
public:
	TArray< class UH7Message* >                        mLog;                                             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Message* >                        mLogFlashBuffer;                                  		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79801 ];

		return pClassPointer;
	};

	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	void AddMessage ( class UH7Message* Message );
};



// Class MMH7Game.H7WarfareVisuals ( Property size: 5 iter: 10) 
// Class name index: 44764 
// 0x0038 (0x0098 - 0x0060)
class UH7WarfareVisuals : public UObject
{
public:
	class USkeletalMeshComponent*                      mSkeletalMesh;                                    		// 0x0060 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mAimingSkeletalMesh;                              		// 0x0068 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FH7WarfareEvent >                   mWUEvents;                                        		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FH7DeathMaterialEffect >            mDeathMaterialEffects;                            		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UDynamicLightEnvironmentComponent*           mDynamicLightEnv;                                 		// 0x0090 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79942 ];

		return pClassPointer;
	};

	TArray< struct FH7WarfareEvent > GetWUEvents ( );
	class UDynamicLightEnvironmentComponent* GetDynamicLightEnv ( );
	class USkeletalMeshComponent* GetAimingSkeletalMesh ( );
	class USkeletalMeshComponent* GetSkeletalMesh ( );
	TArray< struct FH7DeathMaterialEffect > GetDeathMaterialEffects ( );
};



// Class MMH7Game.H7TownIdolOfFertility ( Property size: 1 iter: 5) 
// Class name index: 44724 
// 0x0004 (0x0134 - 0x0130)
class UH7TownIdolOfFertility : public UH7TownBuilding
{
public:
	unsigned long                                      mActive : 1;                                      		// 0x0130 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82597 ];

		return pClassPointer;
	};

	void AddGrowthToPool ( class UH7TownDwelling* Dwelling );
	void InitTownBuilding ( class AH7Town* Town );
	void ResetTimer ( );
	bool CanBeActivated ( );
};



// Class MMH7Game.H7EffectSpecialSpawnUnit ( Property size: 1 iter: 2) 
// Class name index: 44204 
// 0x0008 (0x0410 - 0x0408)
class UH7EffectSpecialSpawnUnit : public UH7Effect
{
public:
	class AH7Unit*                                     mUnitToSpawn;                                     		// 0x0408 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82735 ];

		return pClassPointer;
	};

	void ExecuteOn ( class UH7CombatMapCell* cell );
};



// Class MMH7Game.H7Entry ( Property size: 0 iter: 1) 
// Class name index: 44206 
// 0x0000 (0x0424 - 0x0424)
class AH7Entry : public AH7NeutralSite
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83134 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
};



// Class MMH7Game.H7EvokeFX ( Property size: 2 iter: 3) 
// Class name index: 44208 
// 0x0010 (0x0250 - 0x0240)
class AH7EvokeFX : public AActor
{
public:
	class UAkEvent*                                    mParticleSound;                                   		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             mParticleFX;                                      		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84551 ];

		return pClassPointer;
	};

	void SpawnEffect ( struct FVector Target );
};



// Class MMH7Game.H7FCTMappingProperties ( Property size: 1 iter: 3) 
// Class name index: 44217 
// 0x0010 (0x0250 - 0x0240)
class AH7FCTMappingProperties : public AActor
{
public:
	TArray< struct FFCTMappingEntry >                  mTypes;                                           		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84740 ];

		return pClassPointer;
	};

	struct FFCTMappingEntry GetType ( unsigned char etype );
	struct FString GetFlashIconPath ( unsigned char etype );
};



// Class MMH7Game.H7GFxFloatingSystem ( Property size: 0 iter: 5) 
// Class name index: 44261 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxFloatingSystem : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84805 ];

		return pClassPointer;
	};

	void SetVisibleSave ( unsigned long val );
	class UH7GFxFCTField* GetFloatText ( int Id );
	void KillFloat ( int Id );
	void UpdateFloat ( int Id, int X, int Y, int Alpha );
	int CreateFloatingCombatText ( unsigned char Type, struct FString IconPath, struct FString Message, int X, int Y, int R, int G, int B );
};



// Class MMH7Game.H7ForceCookingAssets ( Property size: 0 iter: 1) 
// Class name index: 44223 
// 0x0000 (0x0060 - 0x0060)
class UH7ForceCookingAssets : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84916 ];

		return pClassPointer;
	};

	void Dummy ( );
};



// Class MMH7Game.H7InstantCommandRebuildFort ( Property size: 2 iter: 9) 
// Class name index: 44402 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandRebuildFort : public UH7InstantCommandBase
{
public:
	class AH7Fort*                                     mFort;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mVisitingHero;                                    		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85070 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Fort* fort, class AH7AdventureHero* visitingHero );
};



// Class MMH7Game.SaveGameStateInterface ( Property size: 0 iter: 5) 
// Class name index: 54633 
// 0x0000 (0x0060 - 0x0060)
class USaveGameStateInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85225 ];

		return pClassPointer;
	};

	void DeserializeReferences ( class UJsonObject* Data, class USaveGameState* Savegame );
	void Deserialize ( class UJsonObject* Data );
	struct FString Serialize ( );
	void MarkForDeletion ( unsigned long val );
	bool IsMarkedForDeletion ( );
};



// Class MMH7Game.H7FracturedWalkableObjectSpawnable ( Property size: 0 iter: 0) 
// Class name index: 44225 
// 0x0000 (0x03B0 - 0x03B0)
class AH7FracturedWalkableObjectSpawnable : public AH7FracturedWalkableObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85430 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7GenericTownNames ( Property size: 2 iter: 5) 
// Class name index: 44239 
// 0x0018 (0x0078 - 0x0060)
class UH7GenericTownNames : public UObject
{
public:
	class UH7Faction*                                  mFaction;                                         		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           mTownNames;                                       		// 0x0068 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85622 ];

		return pClassPointer;
	};

	struct FString GetLocalizedTownName ( int Index );
	TArray< struct FString > GetTownNames ( );
	class UH7Faction* GetFaction ( );
};



// Class MMH7Game.H7GeneralLoreEntry ( Property size: 5 iter: 8) 
// Class name index: 44238 
// 0x0048 (0x00A8 - 0x0060)
class UH7GeneralLoreEntry : public UObject
{
public:
	struct FString                                     mName;                                            		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     mText;                                            		// 0x0070 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UTexture2D*                                  mIcon;                                            		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     mTextInst;                                        		// 0x0088 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     mNameInst;                                        		// 0x0098 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85629 ];

		return pClassPointer;
	};

	struct FString GetName ( );
	struct FString GetText ( );
	struct FString GetFlashIconPath ( );
};



// Class MMH7Game.H7LoadingHints ( Property size: 2 iter: 4) 
// Class name index: 44448 
// 0x0020 (0x0080 - 0x0060)
class UH7LoadingHints : public UObject
{
public:
	TArray< struct FString >                           mHints;                                           		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           mUsedHints;                                       		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85989 ];

		return pClassPointer;
	};

	void InitHints ( );
	TArray< struct FString > GetHints ( );
};



// Class MMH7Game.H7GFxTownGuardPopup ( Property size: 1 iter: 5) 
// Class name index: 44320 
// 0x0010 (0x00B4 - 0x00A4)
class UH7GFxTownGuardPopup : public UH7GFxTownPopup
{
public:
	TArray< struct FH7TownBuildingData >               buildings;                                        		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86208 ];

		return pClassPointer;
	};

	struct FH7TownBuildingData getFort3 ( );
	struct FH7TownBuildingData getFort2 ( );
	struct FH7TownBuildingData getFort1 ( );
	void Update ( class AH7AreaOfControlSite* Site );
};



// Class MMH7Game.H7GFxCouncilorTooltip ( Property size: 0 iter: 1) 
// Class name index: 44251 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxCouncilorTooltip : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87056 ];

		return pClassPointer;
	};

	void Update ( class UH7CampaignDefinition* theCampaign );
};



// Class MMH7Game.H7GFxDataObject ( Property size: 1 iter: 4) 
// Class name index: 44255 
// 0x0008 (0x00A8 - 0x00A0)
class UH7GFxDataObject : public UH7GFxListener
{
public:
	class UGFxObject*                                  mFlashObject;                                     		// 0x00A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87185 ];

		return pClassPointer;
	};

	class UGFxObject* GetFlashDataObject ( );
	void SetFlashDataObject ( class UGFxObject* flashObject );
	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
};



// Class MMH7Game.H7GFxSkirmishSetupWindow ( Property size: 0 iter: 12) 
// Class name index: 44309 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxSkirmishSetupWindow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87266 ];

		return pClassPointer;
	};

	void SetNewList ( struct FString dropDownName, TArray< struct FH7DropDownEntry > List, int PlayerIndex, unsigned long blockSendingToUnreal );
	void DisplayPlayerSettingsGUI ( int Index, struct FPlayerLobbySelectedSettingsGUI PlayerData );
	void DisplayPlayerSettings ( int Index, struct FPlayerLobbySelectedSettings PlayerData );
	void DisplayGameSettings ( struct FH7LobbyDataGameSettings GameSettings );
	void DisplayMapSettings ( unsigned char V, unsigned long bonus, unsigned char T, unsigned long Position, struct FString vicDescription );
	void DisplayStartCondition ( unsigned long canStart, struct FString blockReason );
	void UpdateNatDisplay ( int StatusCode, unsigned long upnp );
	void HideThumbnail ( );
	void ShowThumbnail ( );
	void SetThumbnail ( class UH7Texture2DStreamLoad* mapThumbnail );
	void Update ( struct FString MapName, unsigned long isMaster, unsigned long IsLoadedGame );
};



// Class MMH7Game.H7GFxFCTField ( Property size: 0 iter: 2) 
// Class name index: 44259 
// 0x0000 (0x00A0 - 0x00A0)
class UH7GFxFCTField : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87317 ];

		return pClassPointer;
	};

	void SetPos ( int X, int Y );
	void setColor ( int R, int G, int B );
};



// Class MMH7Game.H7GFxFrontEnd_MapSelect ( Property size: 6 iter: 8) 
// Class name index: 44262 
// 0x0034 (0x00D8 - 0x00A4)
class UH7GFxFrontEnd_MapSelect : public UH7GFxUIContainer
{
public:
	class UGFxClikWidget*                              ListMC;                                           		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ListDataProvider;                                 		// 0x00AC (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ImgScrollerMC;                                    		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  MenuMC;                                           		// 0x00BC (0x0008) [0x0000000000000000]              
	TArray< class UH7UIDataProvider_Mapinfo* >         mapList;                                          		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastSelectedItem;                                 		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87377 ];

		return pClassPointer;
	};

	void EnableWindow ( );
	void DisableWindow ( );
};



// Class MMH7Game.H7UIDataProvider_Mapinfo ( Property size: 5 iter: 5) 
// Class name index: 44754 
// 0x0044 (0x00D8 - 0x0094)
class UH7UIDataProvider_Mapinfo : public UUIResourceDataProvider
{
public:
	int                                                MapId;                                            		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     MapName;                                          		// 0x0098 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NumPlayers;                                       		// 0x00A8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00B8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PreviewImageMarkup;                               		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87387 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7GFxHallOfHerosPopup ( Property size: 0 iter: 4) 
// Class name index: 44263 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxHallOfHerosPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87389 ];

		return pClassPointer;
	};

	void Closed ( );
	void ResetWithoutHeroCircle ( );
	void UpdateHeroInfo ( class AH7EditorHero* Hero, struct FRecruitHeroData recruitment, class AH7Town* Town );
	void Update ( TArray< struct FRecruitHeroData > Datas );
};



// Class MMH7Game.H7GFxHeroEquip ( Property size: 2 iter: 8) 
// Class name index: 44264 
// 0x000C (0x00B0 - 0x00A4)
class UH7GFxHeroEquip : public UH7GFxUIContainer
{
public:
	class AH7EditorHero*                               mCurrentHero;                                     		// 0x00A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mLocked : 1;                                      		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87411 ];

		return pClassPointer;
	};

	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void SetLocked ( unsigned long locked );
	void RemoveItemFromSlot ( );
	void AddItemToDropSlot ( class UH7HeroItem* Item );
	void AddItemToDragSlot ( class UH7HeroItem* Item );
	void Update ( TArray< class UH7HeroItem* > EquippedItems, class UH7HeroItem* ring1, class AH7EditorHero* Hero );
};



// Class MMH7Game.H7GFxHeroInfo ( Property size: 0 iter: 2) 
// Class name index: 44266 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxHeroInfo : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87473 ];

		return pClassPointer;
	};

	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void Update ( class AH7AdventureHero* Hero );
};



// Class MMH7Game.H7GFxHeropedia ( Property size: 0 iter: 10) 
// Class name index: 44267 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxHeropedia : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87480 ];

		return pClassPointer;
	};

	void OpenWarUnitPage ( class AH7EditorWarUnit* warUnit );
	void OpenCreaturePage ( class AH7Creature* Creature );
	void OpenHeroPage ( class AH7EditorHero* Hero );
	void UpdateHeroTest ( );
	void SetListItemsWarUnits ( TArray< class AH7EditorWarUnit* > warUnits );
	void SetListItemsLore ( TArray< class UH7GeneralLoreEntry* > generalLore );
	void AddMapSpecificCreatures ( TArray< class AH7Creature* > mapSpecificCreatures );
	void SetListItemsCreatures ( TArray< class AH7Creature* > actualCreatureArray );
	void AddMapSpecificHeroes ( TArray< class AH7EditorHero* > mapSpecificHeroes );
	void SetListItemsHeroes ( TArray< class AH7EditorHero* > Heroes );
};



// Class MMH7Game.H7GFxHeroTradeWindow ( Property size: 0 iter: 4) 
// Class name index: 44269 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxHeroTradeWindow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87646 ];

		return pClassPointer;
	};

	void ActualUpdateMergeButtons ( unsigned long canMerge, unsigned long alliedTrade );
	void UpdateMergeButtons ( class AH7AdventureArmy* army1, class AH7AdventureArmy* army2, unsigned long alliedTrade );
	void RemoveItemFromDragSlot ( );
	void Update ( class AH7AdventureHero* hero1, class AH7AdventureHero* hero2, unsigned long isAlliedTrade );
};



// Class MMH7Game.H7GFxHeroWindow ( Property size: 0 iter: 5) 
// Class name index: 44270 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxHeroWindow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87663 ];

		return pClassPointer;
	};

	void RemoveItemFromDragSlot ( );
	void UpdateArmyInfo ( class AH7AdventureArmy* Army );
	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void UpdateHeroInfo ( class AH7AdventureArmy* Army, class AH7AdventureHero* Hero );
	void Update ( class AH7AdventureArmy* Army, class AH7AdventureHero* Hero );
};



// Class MMH7Game.H7GFxInscriberPopup ( Property size: 0 iter: 4) 
// Class name index: 44272 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxInscriberPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87833 ];

		return pClassPointer;
	};

	void HighlightSlot ( struct FIntPoint scrollLocation );
	void SetHeroInventory ( class AH7AdventureHero* Hero );
	void SetScrollCost ( int Cost );
	void Update ( class AH7AdventureHero* garrisonHero, class AH7AdventureHero* visitingHero, class UH7TownBuilding* inscriber, unsigned long garrisonHeroSelected );
};



// Class MMH7Game.H7Inscriber ( Property size: 5 iter: 14) 
// Class name index: 44364 
// 0x0044 (0x0174 - 0x0130)
class UH7Inscriber : public UH7TownBuilding
{
public:
	TArray< class UH7HeroItem* >                       mScrolls;                                         		// 0x0130 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      mRefreshOffers;                                   		// 0x0140 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      mScrollRandValues;                                		// 0x0144 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIntPoint >                         mScrollPosses;                                    		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7HeroItem* >                       mCurrentScrolls;                                  		// 0x0164 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87868 ];

		return pClassPointer;
	};

	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	class UH7HeroItem* BuyScrollByID ( int Id );
	class UH7HeroItem* GetScrollByID ( int Id );
	struct FIntPoint GetScrollPosByIndex ( int Index );
	void SetCurrentScrolls ( );
	void InitTownBuilding ( class AH7Town* Town );
	void TriggerEvents ( unsigned char triggerEvent, unsigned long forecast, struct FH7EventContainerStruct container );
	TArray< class UH7HeroItem* > GetCurrentlyAvailableScrolls ( );
};



// Class MMH7Game.H7GFxInventory ( Property size: 3 iter: 11) 
// Class name index: 44273 
// 0x001C (0x00C0 - 0x00A4)
class UH7GFxInventory : public UH7GFxUIContainer
{
public:
	class AH7EditorHero*                               mCurrentHero;                                     		// 0x00A4 (0x0008) [0x0000000000000000]              
	unsigned long                                      mLocked : 1;                                      		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FIntPoint >                         mItemPoses;                                       		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87874 ];

		return pClassPointer;
	};

	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void RemoveItemFromSlot ( );
	void AddItemToDropSlot ( class UH7HeroItem* Item );
	void AddItemToDragSlot ( class UH7HeroItem* Item );
	void SetCursorItemTrue ( );
	void AddLockToItemSlots ( );
	void SetLocked ( unsigned long locked, TArray< struct FIntPoint > itemPoses );
	void Update ( TArray< class UH7HeroItem* > inventoryItems, class AH7EditorHero* Hero );
};



// Class MMH7Game.H7GFxJoinGameMenu ( Property size: 0 iter: 8) 
// Class name index: 44274 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxJoinGameMenu : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87909 ];

		return pClassPointer;
	};

	void UpdateNatDisplay ( int StatusCode, unsigned long upnp );
	void DisableRefreshButton ( );
	void NoThumbnailAvailable ( );
	void ShowThumbnail ( );
	void ReloadThumbnail ( struct FString Path );
	void Update ( );
	void SetLANDuelMode ( unsigned long IsLAN, unsigned long IsDuel );
	void SetGames ( TArray< struct FOnlineGameSearchResult > SearchResults );
};



// Class MMH7Game.H7GFxLoadingScreen ( Property size: 0 iter: 2) 
// Class name index: 44277 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxLoadingScreen : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88007 ];

		return pClassPointer;
	};

	void Hide ( );
	void show ( float currentUnrealResX, float currentUnrealResY, struct FString imgPath );
};



// Class MMH7Game.H7GFxLoadSaveWindow ( Property size: 0 iter: 12) 
// Class name index: 44278 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxLoadSaveWindow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88014 ];

		return pClassPointer;
	};

	void TriggerDeleteClick ( );
	void ZoomIn ( );
	void PreSelectIndex ( int I, unsigned long screenshotAlreadySet );
	void SetScreenShot ( struct FString screenshot );
	void SetCloseButton ( unsigned long val );
	void SetSaveMode ( unsigned long val );
	void Update ( );
	class UGFxObject* CreateGameDataObject ( class UH7SaveGameHeaderManager* savegameInfo );
	bool IsDevAccount ( );
	void AddSaveGames ( TArray< struct FH7ListingSavegameDataScene > polledGames );
	void SetData ( unsigned long withCurrentData );
	void SetAnimateOnClosing ( unsigned long val );
};



// Class MMH7Game.H7GFxLogChat ( Property size: 0 iter: 4) 
// Class name index: 44280 
// 0x0000 (0x00B0 - 0x00B0)
class UH7GFxLogChat : public UH7GFxLog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88108 ];

		return pClassPointer;
	};

	void AddPlayerToChat ( struct FString PlayerName, int playerChatIndex );
	void SwitchToChat ( );
	void UpdateChat ( );
	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
};



// Class MMH7Game.H7GFxLogQA ( Property size: 0 iter: 1) 
// Class name index: 44281 
// 0x0000 (0x00B0 - 0x00B0)
class UH7GFxLogQA : public UH7GFxLog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88117 ];

		return pClassPointer;
	};

	void SetVisibleSave ( unsigned long val );
};



// Class MMH7Game.H7GFxMagicGuildPopup ( Property size: 0 iter: 7) 
// Class name index: 44282 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxMagicGuildPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88121 ];

		return pClassPointer;
	};

	void NewSpellByArcaneLibary ( );
	void NewSpellsByUpgrade ( );
	class UGFxObject* CreateGuildSpellObject ( class UH7HeroAbility* spell );
	void CreateSpellList ( TArray< class UH7HeroAbility* > Spells, class UH7HeroAbility* townPortalSpell, class UGFxObject** Object );
	void AddSchoolSelect ( class UH7TownMagicGuild* bestMagicGuild, class AH7Town* Town, class UGFxObject** Data );
	void AddSchoolsAndPortal ( class AH7Town* Town, class UGFxObject** Data );
	void Update ( class AH7Town* Town );
};



// Class MMH7Game.H7TownArcaneLibrary ( Property size: 0 iter: 0) 
// Class name index: 44704 
// 0x0000 (0x0130 - 0x0130)
class UH7TownArcaneLibrary : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88188 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7GfxMapList ( Property size: 0 iter: 13) 
// Class name index: 44285 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GfxMapList : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88229 ];

		return pClassPointer;
	};

	void Reset ( );
	void SetFilter ( struct FString mapTypeCaption );
	void DisplayDifficultySettings ( int Global, int res, int Strength, int Growth, int AI );
	void NoThumbnailAvailable ( );
	void ShowThumbnail ( );
	void ReloadThumbnail ( );
	void ListingMapDone ( );
	void setLoseConditions ( struct FH7MapData Data, class UGFxObject** conditionsObj );
	void setVicotryConditions ( struct FH7MapData Data, class UGFxObject** conditionsObj );
	void AddMap ( struct FH7ContentScannerAdventureMapData AdvData, int continueIndex );
	void AddMapData ( class UGFxObject* Data, class UH7CampaignDefinition* theCampaign );
	void AddCustomCampaigns ( TArray< class UH7CampaignDefinition* > campaigns, int continueIndex );
	void Update ( class UH7Texture2DStreamLoad* mapThumbnail );
};



// Class MMH7Game.H7GFxMapResultPopUp ( Property size: 0 iter: 3) 
// Class name index: 44286 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxMapResultPopUp : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88286 ];

		return pClassPointer;
	};

	void CloseCustomDifficultyPopUp ( );
	bool IsReplay ( );
	void Update ( unsigned long win, unsigned long isEndOfGame );
};



// Class MMH7Game.H7GFxMarketPlacePopup ( Property size: 0 iter: 8) 
// Class name index: 44287 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxMarketPlacePopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88304 ];

		return pClassPointer;
	};

	int getAmountMarketPlaces ( );
	float calculateTradeRateFactor ( unsigned long tradingPostBuff );
	void addCurrencyTradeEntry ( class UH7Resource* Resource, class UH7Resource* currencyResource, class UH7TradingTable* tradingTable, float trf, class UGFxObject** table );
	void addCurrencyTradeTable ( TArray< struct FResourceStockpile > resses, class UH7Resource* Currency, class UH7TradingTable* tradingTable, float trf, class UGFxObject** tradeTables );
	void ListenUpdate ( class UH7IGUIListenable* gameEntity );
	void SetCaravanData ( class AH7Town* Town );
	void SetTransferData ( class UGFxObject* playerResources, class AH7Town* Town );
	void Update ( class AH7Town* Town, class AH7TradingPost* post );
};



// Class MMH7Game.H7TradingTable ( Property size: 1 iter: 5) 
// Class name index: 44740 
// 0x0010 (0x0070 - 0x0060)
class UH7TradingTable : public UObject
{
public:
	TArray< struct FTradingTableEntry >                tradingTable;                                     		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88384 ];

		return pClassPointer;
	};

	int GetSellValue ( class UH7Resource* resourceToSell, float trf );
	int GetBuyValue ( class UH7Resource* resourceToBuy, float trf );
	int GetRate ( class UH7Resource* resourceToSell, class UH7Resource* resourceToBuy, float trf );
	TArray< struct FTradingTableEntry > GetTradingTable ( );
};



// Class MMH7Game.H7TradingPost ( Property size: 2 iter: 7) 
// Class name index: 44739 
// 0x0010 (0x0434 - 0x0424)
class AH7TradingPost : public AH7NeutralSite
{
public:
	class UH7TradingTable*                             mTradingTable;                                    		// 0x0424 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  mFactionSymbol;                                   		// 0x042C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88393 ];

		return pClassPointer;
	};

	struct FH7TooltipData GetTooltipData ( unsigned long extendedVersion );
	void OnVisit ( class AH7AdventureHero** Hero );
	void eventInitAdventureObject ( );
	struct FString GetFactionSepiaIconPath ( );
	class UH7TradingTable* GetTradingTable ( );
};



// Class MMH7Game.H7GFxMerchantPopUp ( Property size: 0 iter: 4) 
// Class name index: 44288 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxMerchantPopUp : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88401 ];

		return pClassPointer;
	};

	void HighlightSlot ( struct FIntPoint scrollLocation );
	void DisableHeroInventory ( );
	void UpdateFromBlackMarket ( class UH7BlackMarket* merchant, class AH7AdventureHero* garrisonHero, class AH7AdventureHero* visitingHero );
	void UpdateFromMerchant ( class AH7AdventureHero* Hero, class AH7Merchant* merchant );
};



// Class MMH7Game.H7GFxMiddleHUD ( Property size: 5 iter: 30) 
// Class name index: 44289 
// 0x0030 (0x00D4 - 0x00A4)
class UH7GFxMiddleHUD : public UH7GFxUIContainer
{
public:
	struct FString                                     mTownPopupBlockReason;                            		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Faction*                                  mFactionAcademy;                                  		// 0x00B4 (0x0008) [0x0000000000000000]              
	class UH7Faction*                                  mFactionAcademy2;                                 		// 0x00BC (0x0008) [0x0000000000000000]              
	class UH7Faction*                                  mFactionDungeon;                                  		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UH7Faction*                                  mFactionNecro;                                    		// 0x00CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88436 ];

		return pClassPointer;
	};

	void EnableCaravan ( unsigned long val );
	void SetCaravanMode ( unsigned long val, unsigned long playTween );
	void UpdateGovernorTooltip ( );
	void InitTownMiddleHUD ( );
	void createUpgradeObject ( class AH7AreaOfControlSite* Site, class AH7AdventureArmy* Army, unsigned char Number, class UGFxObject** upgradeData );
	void BuildGovernorTooltip ( class AH7AdventureHero* governor );
	void DragFromOutside ( class UH7BaseCreatureStack* Stack, int caravanIndex, int unitIndex );
	void HighlightButton ( int popupID, unsigned long val );
	void HighlightTargetBar ( unsigned long val );
	void StackDismissed ( );
	void TransferResult ( unsigned long Success, int Army, int I );
	void UpdateUpgradeButtons ( class AH7AreaOfControlSite* Site );
	void StopQuickSlotGlow ( );
	void StartQuickSlotGlow ( int PopUp, struct FString Message );
	void RecruitAllSlotGlow ( TArray< int > recruitmentSlotIndixes, TArray< unsigned char > reenforcedArmies );
	void RecruitSlotGlow ( int SlotIndex, int armyNumber );
	void UpdateQuickBar ( );
	void SetupQuickBar ( class AH7AreaOfControlSite* Site );
	bool CanPopup ( unsigned char PopUp, class AH7AreaOfControlSite* Site );
	void SetDraggedSlotInUse ( int SlotIndex, int armyNr );
	void UpdateCaravanButton ( );
	void SetDataFromGarrison ( class AH7Garrison* garrison );
	void SetDataFromFort ( class AH7Fort* fort );
	void SetDataFromDwelling ( class AH7Dwelling* Dwelling );
	void SetDataFromTown ( class AH7Town* Town, unsigned long isUpdate );
};



// Class MMH7Game.H7ThievesGuildManager ( Property size: 6 iter: 25) 
// Class name index: 44696 
// 0x0024 (0x0084 - 0x0060)
class UH7ThievesGuildManager : public UObject
{
public:
	TArray< struct FH7PlayerSpyInfo >                  mPlayerSpyInfos;                                  		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mBusySpies;                                       		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mOwnerID;                                         		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                mInstantSpyMissions;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                mRunningPlundersCount;                            		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                mRunningSabotageCount;                            		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88563 ];

		return pClassPointer;
	};

	void Deserialize ( class UJsonObject* Data );
	class UJsonObject* Serialize ( );
	void AddPlayer ( class AH7Player* Player );
	void RevealInstantLastInfoRequested ( int PlayerID, struct FString infoType );
	void SetStateOfNewInfoToUnlocked ( );
	bool ThievesGuildHasNewInfo ( );
	void UpdateSpyInfo ( );
	void IncreaseRunningSabotageCount ( int PlayerID );
	void IncreaseRunningPlundersCount ( int PlayerID );
	void SendSpy ( int PlayerID, struct FString infoType );
	void Initialize ( TArray< class AH7Player* > Players, int OwnerId );
	int GetTotalSpiesCount ( );
	int GetRunningSabotageCount ( );
	int GetRunningPlundersCount ( );
	int GetBusySpiesCount ( );
	void SetInstantSpyMissions ( int val );
	int GetInstantSpyMissions ( );
	void SetPlayerSpyInfos ( TArray< struct FH7PlayerSpyInfo > infos );
	TArray< struct FH7PlayerSpyInfo > GetPlayerSpyInfos ( );
};



// Class MMH7Game.H7GFxMultiplayerLobby ( Property size: 0 iter: 3) 
// Class name index: 44292 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxMultiplayerLobby : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88836 ];

		return pClassPointer;
	};

	void EnableWindow ( );
	void DisableWindow ( );
	void Update ( );
};



// Class MMH7Game.H7GFxObject ( Property size: 0 iter: 1) 
// Class name index: 44294 
// 0x0000 (0x00A0 - 0x00A0)
class UH7GFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88849 ];

		return pClassPointer;
	};

	void ListenTo ( class UObject* ob );
};



// Class MMH7Game.H7GfxOnlineLobby ( Property size: 0 iter: 3) 
// Class name index: 44296 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GfxOnlineLobby : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88862 ];

		return pClassPointer;
	};

	void Update ( );
	void EnableWindow ( );
	void DisableWindow ( );
};



// Class MMH7Game.H7GFxPauseMenu ( Property size: 0 iter: 4) 
// Class name index: 44298 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxPauseMenu : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89057 ];

		return pClassPointer;
	};

	void SetVisibleSave ( unsigned long val );
	void UpdateButtonCaptions ( struct FString restartCaption );
	void UpdateButtonStatesNew ( unsigned long CanResume, unsigned long CanLoad, unsigned long CanSave, unsigned long CanOption, unsigned long CanRestart, unsigned long CanQuit );
	void UpdateLoca ( );
};



// Class MMH7Game.H7GFxQuestComplete ( Property size: 0 iter: 1) 
// Class name index: 44300 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxQuestComplete : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89090 ];

		return pClassPointer;
	};

	void Update ( class UH7SeqAct_Quest_NewNode* quest );
};



// Class MMH7Game.H7GFxQuestLog ( Property size: 0 iter: 2) 
// Class name index: 44301 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxQuestLog : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89095 ];

		return pClassPointer;
	};

	void GetMinimapDummyBounds ( );
	void Update ( class UH7SeqAct_Quest_NewNode* preSelectQuest );
};



// Class MMH7Game.H7GFxQuickBar ( Property size: 0 iter: 8) 
// Class name index: 44302 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxQuickBar : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89109 ];

		return pClassPointer;
	};

	void CreateSpellList ( TArray< class UH7HeroAbility* > Spells, int I, class AH7EditorHero* caster, class UGFxObject** Object );
	void CreateScreenObject ( class AH7EditorHero* Hero, unsigned long onCombatMap, class UGFxObject** Object );
	void SetData ( class AH7EditorHero* Hero, unsigned long onCombatMap );
	void PushDown ( int SlotIndex, unsigned long val );
	void UnSelectSpell ( );
	void SelectSpell ( int spellID );
	void Update ( );
	void SetSpellbookOpen ( unsigned long val );
};



// Class MMH7Game.H7GfxRandomSkillingPopUp ( Property size: 0 iter: 6) 
// Class name index: 44303 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GfxRandomSkillingPopUp : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89144 ];

		return pClassPointer;
	};

	void ResetBecuaseOpenPopUpFailed ( );
	void SetLearnedSkills ( TArray< struct FH7SkillAbilityData > learnedSkills );
	void SetAvailableSkillsAndAbilities ( TArray< struct FH7SkillAbilityData > availableSkills, TArray< struct FH7SkillAbilityData > availableAbilities );
	void Update ( class AH7EditorHero* Hero );
};



// Class MMH7Game.H7GFxRequestPopup ( Property size: 11 iter: 38) 
// Class name index: 44304 
// 0x005C (0x0100 - 0x00A4)
class UH7GFxRequestPopup : public UH7GFxUIContainer
{
public:
	class UGFxClikWidget*                              yesButton;                                        		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              noButton;                                         		// 0x00AC (0x0008) [0x0000000000000000]              
	unsigned long                                      mYesButtonEnabled : 1;                            		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      mNoButtonEnabled : 1;                             		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      mCloseButtonEnabled : 1;                          		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      mOpenedThisFrame : 1;                             		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000008] 
	class UGFxObject*                                  mData;                                            		// 0x00B8 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __OnYes__Delegate;                                		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnNo__Delegate;                                 		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnTimerRunOut__Delegate;                        		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00E4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnClose__Delegate;                              		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89196 ];

		return pClassPointer;
	};

	void EscapePressed ( );
	void NoButtonClicked ( struct FEventData Data );
	void YesButtonClicked ( struct FEventData Data );
	void ExecuteFinishCallback ( );
	void Finish ( );
	void ClearTimer ( );
	void TimerRunOut ( );
	void SetTutorialBG ( );
	void SetTimer ( int Seconds, struct FScriptDelegate timerDelegate );
	void SetNoButtonState ( unsigned long val, struct FString Reason );
	void SetYesButtonState ( unsigned long val, struct FString Reason );
	void SetQuestionText ( struct FString newText );
	struct FString GetInput ( );
	void EndCloseProtection ( );
	bool WasOpenedThisFrame ( );
	void Update ( );
	void InputPopup ( struct FString Question, struct FString defaultInput, struct FString yesCaption, struct FString noCaption, struct FScriptDelegate yesDelegate, struct FScriptDelegate noDelegate );
	void MessagePopup ( struct FString Title, struct FString Message );
	void YesNoCostPopup ( struct FString Question, struct FString yesCaption, struct FString noCaption, struct FScriptDelegate yesDelegate, struct FScriptDelegate noDelegate, TArray< struct FH7ResourceQuantity > Cost, unsigned long closeButton, struct FScriptDelegate closeDelegate );
	void YesNoPopup ( struct FString Question, struct FString yesCaption, struct FString noCaption, struct FScriptDelegate yesDelegate, struct FScriptDelegate noDelegate, unsigned long closeButton, struct FScriptDelegate closeDelegate );
	void OKPopup ( struct FString infoMessage, struct FString okCaption, struct FScriptDelegate okDelegate );
	void NoChoicePopup ( struct FString blockMessage );
	void Initialize ( );
	void OnClose ( );
	void OnTimerRunOut ( );
	void OnNo ( );
	void OnYes ( );
};



// Class MMH7Game.H7GFxResultWindow ( Property size: 0 iter: 5) 
// Class name index: 44305 
// 0x0000 (0x00B0 - 0x00B0)
class UH7GFxResultWindow : public UGFxClikWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89277 ];

		return pClassPointer;
	};

	void LostStack ( TArray< class AH7CreatureStack* > stacks, int I, class UGFxObject** Creatures );
	void KilledStack ( TArray< class AH7CreatureStack* > stacks, class UGFxObject** Creatures, int* I );
	void CreateScreenObject ( struct FString msg, struct FString msgXp, class AH7CombatArmy* ActiveArmyCntl, class UGFxObject** Object );
	void SetData ( struct FString msg, struct FString msgXp, class AH7CombatArmy* winnerCntl );
	void Update ( );
};



// Class MMH7Game.H7SideBar ( Property size: 2 iter: 8) 
// Class name index: 44655 
// 0x0020 (0x0080 - 0x0060)
class UH7SideBar : public UObject
{
public:
	TArray< class UH7Message* >                        mList;                                            		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UH7Message* >                        mListFlashBuffer;                                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89328 ];

		return pClassPointer;
	};

	void DataChanged ( struct FString cause );
	void GUIAddListener ( class UGFxObject* Data, unsigned char Focus );
	void GUIWriteInto ( class UGFxObject* Data, unsigned char Focus, class UH7GFxUIContainer* flashFactory );
	int GetBufferCount ( );
	void DeleteMessage ( class UH7Message* Message );
	void AddMessage ( class UH7Message* Message );
};



// Class MMH7Game.H7GFxSkillwheel ( Property size: 2 iter: 11) 
// Class name index: 44308 
// 0x0018 (0x00BC - 0x00A4)
class UH7GFxSkillwheel : public UH7GFxUIContainer
{
public:
	TArray< class UH7Skill* >                          learnedSkills;                                    		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7Skill*                                    heroSkill;                                        		// 0x00B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89369 ];

		return pClassPointer;
	};

	void CreateNewSkillwheel ( );
	void SetSchoolOfWarMode ( );
	void SetArcaneAcademyMode ( );
	void SetHallOfHeroesMode ( );
	void SetNewRandomSkillsAndAbilities ( class AH7EditorHero* Hero );
	void DisableAll ( );
	void SetAvailableSkillsAndAbilities ( TArray< struct FH7SkillAbilityData > availableSkills, TArray< struct FH7SkillAbilityData > availableAbilities );
	void addRandomSkillsAndAbilities ( class AH7EditorHero* Hero );
	void Update ( class AH7EditorHero* Hero, unsigned long showAll );
};



// Class MMH7Game.H7GFxSpecatorHUD ( Property size: 0 iter: 2) 
// Class name index: 44310 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxSpecatorHUD : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89466 ];

		return pClassPointer;
	};

	void UpdateProgress ( int Progress );
	void Update ( struct FString bgPath );
};



// Class MMH7Game.H7GFxSpellbook ( Property size: 1 iter: 9) 
// Class name index: 44311 
// 0x0008 (0x00AC - 0x00A4)
class UH7GFxSpellbook : public UH7GFxUIContainer
{
public:
	class UH7MagicSchoolIcons*                         mIcons;                                           		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89472 ];

		return pClassPointer;
	};

	void CreateSpellList ( TArray< class UH7HeroAbility* > Spells, class AH7EditorHero* Hero, int I, class UGFxObject** Object );
	void CreateScreenObject ( class AH7EditorHero* Hero, unsigned long onCombatMap, class UGFxObject** Object );
	void SetData ( class AH7EditorHero* Hero, unsigned long onCombatMap );
	void Update ( );
	void SetSpellFrames ( class UH7MagicSchoolIcons* icons );
	void SetTitleIcons ( class UH7MagicSchoolIcons* icons );
	void SetBGs ( class UH7MagicSchoolIcons* icons );
	void SetFilterIcons ( class UH7MagicSchoolIcons* icons );
};



// Class MMH7Game.H7GFxThievesGuildPopup ( Property size: 0 iter: 7) 
// Class name index: 44315 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxThievesGuildPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89583 ];

		return pClassPointer;
	};

	void UpdatePlayerMoney ( int money );
	void UpdateDungeonInfo ( );
	class UGFxObject* GetSpecialDungeonInfo ( class AH7Player* Player );
	void CloseHeroInfo ( );
	void UpdateBestHeroWindow ( class AH7AdventureArmy* Army );
	class UGFxObject* CreatePlayerData ( class AH7Player* Player, class UGFxObject* Obj, struct FH7PlayerSpyInfo Info );
	void Update ( class AH7DenOfThieves* denOfThieves, unsigned long fromDenOfThievesAfterUse );
};



// Class MMH7Game.H7TownSpiesGuild ( Property size: 0 iter: 0) 
// Class name index: 44731 
// 0x0000 (0x0130 - 0x0130)
class UH7TownSpiesGuild : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89653 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TownHallOfIntrigue ( Property size: 0 iter: 0) 
// Class name index: 44722 
// 0x0000 (0x0130 - 0x0130)
class UH7TownHallOfIntrigue : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89654 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7GFxTownBuildingPopup ( Property size: 0 iter: 7) 
// Class name index: 44317 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTownBuildingPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89731 ];

		return pClassPointer;
	};

	void Update ( );
	void CloseConfirmPopup ( );
	void SetTownLevel ( int Level );
	void SetGUIconfig ( struct FString Str, unsigned long canEdit );
	class UGFxObject* CreateDestroyInfo ( class AH7Town* Town );
	void UpdateAfterBuilding ( class AH7Town* Town );
	void SetData ( class AH7Town* Town );
};



// Class MMH7Game.H7GFxTownCaravanPopup ( Property size: 0 iter: 1) 
// Class name index: 44318 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTownCaravanPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89780 ];

		return pClassPointer;
	};

	void Update ( class AH7AreaOfControlSiteLord* lord );
};



// Class MMH7Game.H7GFxTownContainer ( Property size: 0 iter: 2) 
// Class name index: 44319 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTownContainer : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89791 ];

		return pClassPointer;
	};

	void SetUnit ( struct FString loaderPath );
	void SetUILoader ( struct FString loaderName, struct FString loaderPath );
};



// Class MMH7Game.H7GFxTownInfo ( Property size: 0 iter: 3) 
// Class name index: 44321 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTownInfo : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89839 ];

		return pClassPointer;
	};

	void Update ( );
	void SetDataFromDwelling ( class AH7Dwelling* Dwelling );
	void SetData ( class AH7Town* Town, TArray< class AH7Town* > Towns );
};



// Class MMH7Game.H7GFxTownRecruitmentPopup ( Property size: 0 iter: 16) 
// Class name index: 44324 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTownRecruitmentPopup : public UH7GFxTownPopup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89877 ];

		return pClassPointer;
	};

	void RecruitAll ( );
	void CreateOutsideDwellingGrowthBonusObject ( class AH7Dwelling* Dwelling, struct FH7DwellingCreatureData creatureData, class UGFxObject* dwellingObject );
	void CreateGrowthBonusObject ( class AH7Town* Town, class AH7Creature* Creature, class UGFxObject* dwellingObject, class UH7TownDwelling* Dwelling );
	void CreateArmyUnitsTypesObject ( class AH7Town* Town, class AH7Dwelling* Dwelling, class AH7Fort* fort, class UGFxObject** Obj );
	void CreateRecruitAllObjectForCaravan ( class AH7AreaOfControlSiteLord* lord, class UGFxObject** buyAllItem );
	void CreateRecruitAllObject ( class AH7AreaOfControlSite* Site, unsigned long checkArmy, class UGFxObject** buyAllItem );
	int CreatureCostResourceCompareGUI ( struct FH7ResourceQuantity A, struct FH7ResourceQuantity B );
	void AddCreatureObject ( class AH7Creature* Creature, int I, class AH7AreaOfControlSite* Location, class UGFxObject** Creatures );
	void RightMouseDown ( );
	class UGFxObject* CreateUpgradeCostArray ( TArray< struct FH7ResourceQuantity > upgradeCosts );
	void checkIdolOfFertility ( class AH7Town* Town, int* canBuildIdolOfFertility, int* builtIdolOfFertility, int* canUseIdolOfFertility );
	void writeNeutralDwellingData ( class AH7Dwelling* Dwelling, class UGFxObject** aocArray, class UGFxObject** CreatureList );
	void writeAOCData ( class AH7AreaOfControlSite* Location, class AH7Town* Town, class AH7Fort* fort, class AH7Dwelling* dwellingsite, int Index, class UGFxObject** aocArray, TArray< struct FString >* savedCreatures, class UGFxObject** CreatureList );
	void UpdateFromNeutralDwelling ( class AH7Dwelling* Dwelling );
	void UpdateCaravanArmy ( class AH7CaravanArmy* caravan );
	void Update ( class AH7AreaOfControlSite* CurrentLocation, class AH7AreaOfControlSite* intitialLocation );
};



// Class MMH7Game.H7GFxTownWarfarePopup ( Property size: 1 iter: 8) 
// Class name index: 44325 
// 0x0008 (0x00AC - 0x00A4)
class UH7GFxTownWarfarePopup : public UH7GFxTownPopup
{
public:
	class AH7Town*                                     mTown;                                            		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90071 ];

		return pClassPointer;
	};

	void TestCall ( );
	class UGFxObject* CreateUnitObjectAdvancedWarfare ( class AH7EditorWarUnit* Creature );
	class UGFxObject* CreateWarfarData ( class AH7EditorWarUnit* existingUnit, class AH7EditorWarUnit* availableUnit );
	class UGFxObject* CreateArmyObjectOnlyWarfare ( class AH7AdventureArmy* Army );
	class UGFxObject* CreateWarfareData ( struct FH7TownBuildingData Building, class AH7EditorWarUnit* Unit, class AH7Town* Town );
	class UGFxObject* CreateWarfareBuildingData ( struct FH7TownBuildingData Building, class AH7EditorWarUnit* Unit, class AH7Town* Town );
	void Update ( class AH7Town* Town );
};



// Class MMH7Game.H7GFxTradeResult ( Property size: 0 iter: 1) 
// Class name index: 44326 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTradeResult : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90114 ];

		return pClassPointer;
	};

	void Update ( struct FH7AlliedTradeData Data );
};



// Class MMH7Game.H7GFxTrainingGroundsPopUp ( Property size: 0 iter: 2) 
// Class name index: 44327 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxTrainingGroundsPopUp : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90118 ];

		return pClassPointer;
	};

	void createUpgradeObject ( class AH7TrainingGrounds* grounds, class AH7AdventureArmy* Army, class UGFxObject** upgradeData );
	void Update ( class AH7TrainingGrounds* grounds, class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7GFxTurnOver ( Property size: 1 iter: 1) 
// Class name index: 44329 
// 0x0004 (0x00A8 - 0x00A4)
class UH7GFxTurnOver : public UH7GFxUIContainer
{
public:
	float                                              mDissolveTime;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90204 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7GFxUplayNote ( Property size: 0 iter: 1) 
// Class name index: 44332 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxUplayNote : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90292 ];

		return pClassPointer;
	};

	void SetData ( struct FString headline, struct FString subline, int Currency );
};



// Class MMH7Game.H7GFxWarfareUnitRow ( Property size: 0 iter: 2) 
// Class name index: 44333 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxWarfareUnitRow : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90298 ];

		return pClassPointer;
	};

	void AddLockIconToUnitSlots ( );
	void Update ( class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7GFxWindowWeeklyEffect ( Property size: 0 iter: 2) 
// Class name index: 44334 
// 0x0000 (0x00A4 - 0x00A4)
class UH7GFxWindowWeeklyEffect : public UH7GFxUIContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90303 ];

		return pClassPointer;
	};

	bool GetShowInFuture ( );
	void Update ( struct FString weeklyEffectTitle, struct FString weeklyEffectDescription );
};



// Class MMH7Game.H7GUIConnector ( Property size: 1 iter: 1) 
// Class name index: 44338 
// 0x0008 (0x0068 - 0x0060)
class UH7GUIConnector : public UObject
{
public:
	class UGFxObject*                                  Data;                                             		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90313 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SeqEvent_PlayerRecruitHero ( Property size: 1 iter: 3) 
// Class name index: 44645 
// 0x0008 (0x01A4 - 0x019C)
class UH7SeqEvent_PlayerRecruitHero : public UH7SeqEvent_PlayerEvent
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90412 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7InstantCommandInventoryAction ( Property size: 7 iter: 12) 
// Class name index: 44391 
// 0x0028 (0x0088 - 0x0060)
class UH7InstantCommandInventoryAction : public UH7InstantCommandBase
{
public:
	class UH7HeroItem*                                 mItem;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      mAction;                                          		// 0x0068 (0x0001) [0x0000000000000000]              
	class AH7AdventureHero*                            mHero;                                            		// 0x006C (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mOwner;                                           		// 0x0074 (0x0008) [0x0000000000000000]              
	int                                                mPosX;                                            		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                mPosY;                                            		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned long                                      mUpdateGUI : 1;                                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90764 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( unsigned char Action, class AH7AdventureHero* Hero, class UH7HeroItem* Item, int PosX, int PosY, unsigned long updateGui );
};



// Class MMH7Game.H7InstantCommandTransferWarUnit ( Property size: 5 iter: 12) 
// Class name index: 44424 
// 0x0018 (0x0078 - 0x0060)
class UH7InstantCommandTransferWarUnit : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mArmy1;                                           		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mArmy2;                                           		// 0x0068 (0x0008) [0x0000000000000000]              
	unsigned char                                      mDragSlotClass;                                   		// 0x0070 (0x0001) [0x0000000000000000]              
	unsigned char                                      mDropSlotClass;                                   		// 0x0071 (0x0001) [0x0000000000000000]              
	int                                                mDragSlotArmyID;                                  		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91263 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* army1, class AH7AdventureArmy* army2, unsigned char dragSlotClass, int dragSlotArmyID, unsigned char dropSlotClass );
};



// Class MMH7Game.H7InstantCommandMergeArmiesAdventure ( Property size: 2 iter: 9) 
// Class name index: 44396 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandMergeArmiesAdventure : public UH7InstantCommandBase
{
public:
	class AH7AdventureArmy*                            mFromArmy;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureArmy*                            mToArmy;                                          		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91264 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureArmy* fromArmy, class AH7AdventureArmy* toArmy );
};



// Class MMH7Game.H7InstantCommandDismissHero ( Property size: 1 iter: 6) 
// Class name index: 44381 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandDismissHero : public UH7InstantCommandBase
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91355 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7EditorHero* Hero );
};



// Class MMH7Game.H7IInteractable ( Property size: 0 iter: 1) 
// Class name index: 44362 
// 0x0000 (0x0060 - 0x0060)
class UH7IInteractable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91428 ];

		return pClassPointer;
	};

	struct FH7TooltipData OnLeftClick ( );
};



// Class MMH7Game.H7InstantCommandBuyScroll ( Property size: 3 iter: 8) 
// Class name index: 44374 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandBuyScroll : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mHero;                                            		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                mScrollId;                                        		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91602 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, class AH7Town* Town, int scrollID );
};



// Class MMH7Game.H7InstantCommandBeginTurn ( Property size: 0 iter: 3) 
// Class name index: 44368 
// 0x0000 (0x0060 - 0x0060)
class UH7InstantCommandBeginTurn : public UH7InstantCommandBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91630 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
};



// Class MMH7Game.H7InstantCommandBuildBuilding ( Property size: 2 iter: 9) 
// Class name index: 44370 
// 0x0018 (0x0078 - 0x0060)
class UH7InstantCommandBuildBuilding : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FString                                     mBuildingId;                                      		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91650 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, struct FString buildingID );
};



// Class MMH7Game.H7InstantCommandBuildShip ( Property size: 2 iter: 7) 
// Class name index: 44371 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandBuildShip : public UH7InstantCommandBase
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7Shipyard*                                 mShipyard;                                        		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91673 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7EditorHero* Hero, class AH7Shipyard* shipyard );
};



// Class MMH7Game.H7InstantCommandBuyArtifactBlackMarket ( Property size: 4 iter: 9) 
// Class name index: 44372 
// 0x0018 (0x0078 - 0x0060)
class UH7InstantCommandBuyArtifactBlackMarket : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mHero;                                            		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                mItemId;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mBuyPriceMultiplicator;                           		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91689 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, class AH7Town* Town, int ItemId, int buyPriceMultiplicator );
};



// Class MMH7Game.H7InstantCommandBuyArtifactMerchant ( Property size: 4 iter: 9) 
// Class name index: 44373 
// 0x0018 (0x0078 - 0x0060)
class UH7InstantCommandBuyArtifactMerchant : public UH7InstantCommandBase
{
public:
	class AH7Merchant*                                 mMerchant;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mHero;                                            		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                mItemId;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                mBuyPriceMultiplicator;                           		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91717 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, class AH7Merchant* merchant, int ItemId, int buyPriceMultiplicator );
};



// Class MMH7Game.H7InstantCommandDestroyTownBuildings ( Property size: 2 iter: 9) 
// Class name index: 44379 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandDestroyTownBuildings : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mLevel;                                           		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91826 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, int Level );
};



// Class MMH7Game.H7InstantCommandEnterLeaveShelter ( Property size: 3 iter: 10) 
// Class name index: 44385 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandEnterLeaveShelter : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7Shelter*                                  mShelter;                                         		// 0x0068 (0x0008) [0x0000000000000000]              
	unsigned long                                      mEnter : 1;                                       		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91945 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Shelter* shelter, class AH7AdventureHero* Hero, unsigned long Enter );
};



// Class MMH7Game.H7InstantCommandIncreaseHeroStat ( Property size: 3 iter: 8) 
// Class name index: 44388 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandIncreaseHeroStat : public UH7InstantCommandBase
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      mStat;                                            		// 0x0068 (0x0001) [0x0000000000000000]              
	int                                                mAmountToIncrease;                                		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92000 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7EditorHero* Hero, unsigned char Stat, int amountToIncrease );
};



// Class MMH7Game.H7InstantCommandTransferResource ( Property size: 6 iter: 11) 
// Class name index: 44423 
// 0x0038 (0x0098 - 0x0060)
class UH7InstantCommandTransferResource : public UH7InstantCommandBase
{
public:
	class AH7Player*                                   mTargetPlayer;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mSourcePlayer;                                    		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FString                                     mResourceNameGet;                                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     mResourceNameGive;                                		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                mResourceQuantityGet;                             		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                mResourceQuantityGive;                            		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92163 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Player* sourcePlayer, class AH7Player* targetPlayer, struct FString resourceNameGive, struct FString resourceNameGet, int resourceQuantityGive, int resourceQuantityGet );
};



// Class MMH7Game.H7InstantCommandRecruitHero ( Property size: 2 iter: 9) 
// Class name index: 44405 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandRecruitHero : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mHeroId;                                          		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92164 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, int heroId );
};



// Class MMH7Game.H7InstantCommandSetGovernor ( Property size: 2 iter: 9) 
// Class name index: 44415 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandSetGovernor : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mGovernor;                                        		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92165 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, class AH7AdventureHero* governor );
};



// Class MMH7Game.H7InstantCommandOverwriteSkill ( Property size: 3 iter: 8) 
// Class name index: 44399 
// 0x001C (0x007C - 0x0060)
class UH7InstantCommandOverwriteSkill : public UH7InstantCommandBase
{
public:
	class AH7EditorHero*                               mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mOldSkillId;                                      		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FString                                     mNewSkillAId;                                     		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92166 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7EditorHero* Hero, int oldSkillID, struct FString newSkillAID );
};



// Class MMH7Game.H7InstantCommandRecruitWarfare ( Property size: 3 iter: 10) 
// Class name index: 44406 
// 0x0014 (0x0074 - 0x0060)
class UH7InstantCommandRecruitWarfare : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      mIsAttackHybrid : 1;                              		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	class AH7AdventureArmy*                            mArmy;                                            		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92167 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, unsigned long isAttackHybrid, class AH7AdventureArmy* Army );
};



// Class MMH7Game.H7InstantCommandPlunder ( Property size: 3 iter: 10) 
// Class name index: 44400 
// 0x0018 (0x0078 - 0x0060)
class UH7InstantCommandPlunder : public UH7InstantCommandBase
{
public:
	class AH7Mine*                                     mMine;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7AdventureHero*                            mHero;                                            		// 0x0068 (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mPlayer;                                          		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92168 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Mine* Mine, class AH7AdventureHero* Hero, class AH7Player* dasPlayer );
};



// Class MMH7Game.H7InstantCommandSelectSpecialisation ( Property size: 2 iter: 9) 
// Class name index: 44412 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandSelectSpecialisation : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mSchool;                                          		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92169 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	struct FVector GetInterceptLocation ( );
	bool WaitForInterceptingCommands ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, int school );
};



// Class MMH7Game.H7InstantCommandSabotage ( Property size: 2 iter: 7) 
// Class name index: 44409 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandSabotage : public UH7InstantCommandBase
{
public:
	class AH7Player*                                   mSabotagingPlayer;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mSabotagedPlayer;                                 		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92170 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Player* sabotagingPlayer, class AH7Player* sabotagedPlayer );
};



// Class MMH7Game.H7InstantCommandThievesGuildPlunder ( Property size: 2 iter: 7) 
// Class name index: 44420 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandThievesGuildPlunder : public UH7InstantCommandBase
{
public:
	class AH7Player*                                   mPlunderingPlayer;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7Player*                                   mPlunderedPlayer;                                 		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92171 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Player* plunderingPlayer, class AH7Player* plunderedPlayer );
};



// Class MMH7Game.H7InstantCommandSellArtifact ( Property size: 3 iter: 8) 
// Class name index: 44413 
// 0x0010 (0x0070 - 0x0060)
class UH7InstantCommandSellArtifact : public UH7InstantCommandBase
{
public:
	class AH7AdventureHero*                            mHero;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mItemId;                                          		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                mSellPriceMultiplicator;                          		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92172 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7AdventureHero* Hero, int ItemId, int sellPriceMultiplicator );
};



// Class MMH7Game.H7InstantCommandUseFertilityIdol ( Property size: 2 iter: 7) 
// Class name index: 44428 
// 0x000C (0x006C - 0x0060)
class UH7InstantCommandUseFertilityIdol : public UH7InstantCommandBase
{
public:
	class AH7Town*                                     mTown;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                mDwellingId;                                      		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92173 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7Town* Town, int dwellingId );
};



// Class MMH7Game.H7InstantCommandRandomItemSIte ( Property size: 1 iter: 6) 
// Class name index: 44401 
// 0x0008 (0x0068 - 0x0060)
class UH7InstantCommandRandomItemSIte : public UH7InstantCommandBase
{
public:
	class AH7RandomItemSite*                           mRandomSite;                                      		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92174 ];

		return pClassPointer;
	};

	class AH7Player* GetPlayer ( );
	void Execute ( );
	struct FMPInstantCommand CreateMPCommand ( );
	void InitFromMPData ( struct FMPInstantCommand Command );
	void Init ( class AH7RandomItemSite* randomSite );
};



// Class MMH7Game.H7IProgressable ( Property size: 0 iter: 2) 
// Class name index: 44431 
// 0x0000 (0x0060 - 0x0060)
class UH7IProgressable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93095 ];

		return pClassPointer;
	};

	TArray< struct FH7ConditionProgress > GetCurrentProgresses ( );
	bool HasProgress ( );
};



// Class MMH7Game.H7ItemController ( Property size: 3 iter: 7) 
// Class name index: 44433 
// 0x0020 (0x0080 - 0x0060)
class UH7ItemController : public UObject
{
public:
	class UH7HeroItem*                                 testStaff;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	class UH7HeroItem*                                 testSword;                                        		// 0x0068 (0x0008) [0x0000000000000000]              
	TArray< class UH7HeroItem* >                       Items;                                            		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93127 ];

		return pClassPointer;
	};

	class UH7HeroItem* GetItemByID ( int Id );
	TArray< class UH7HeroItem* > GetTestItems ( );
	class UH7HeroItem* GetTestItem ( );
	void Initialize ( );
};



// Class MMH7Game.H7LANSearch ( Property size: 0 iter: 0) 
// Class name index: 44441 
// 0x0000 (0x014C - 0x014C)
class UH7LANSearch : public UOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93409 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7MainMenuConfiguration ( Property size: 1 iter: 1) 
// Class name index: 44464 
// 0x0010 (0x0250 - 0x0240)
class AH7MainMenuConfiguration : public AActor
{
public:
	struct FString                                     mTheme;                                           		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93839 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7MeshBeaconClient ( Property size: 2 iter: 8) 
// Class name index: 44480 
// 0x0008 (0x0178 - 0x0170)
class UH7MeshBeaconClient : public UMeshBeaconClient
{
public:
	int                                                mPing;                                            		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              mTimeRequestConnectionStarted;                    		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94512 ];

		return pClassPointer;
	};

	void H7OnReceivedBandwidthTestRequest ( unsigned char TestType );
	void H7OnReceivedBandwidthTestResults ( unsigned char TestType, unsigned char TestResult, struct FConnectionBandwidthStats* BandwidthStats );
	void H7OnConnectionRequestResult ( unsigned char ConnectionResult );
	void InitMeshBeaconClient ( struct FOnlineGameSearchResult DesiredHost );
	bool IsServerReachable ( );
	int GetPing ( );
};



// Class MMH7Game.H7MeshBeaconHost ( Property size: 0 iter: 4) 
// Class name index: 44481 
// 0x0000 (0x0124 - 0x0124)
class UH7MeshBeaconHost : public UMeshBeaconHost
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94531 ];

		return pClassPointer;
	};

	void H7OnFinishedBandwidthTest ( struct FUniqueNetId PlayerNetId, unsigned char TestType, unsigned char TestResult, struct FConnectionBandwidthStats* BandwidthStats );
	void H7OnStartedBandwidthTest ( struct FUniqueNetId PlayerNetId, unsigned char TestType );
	void H7OnReceivedClientConnectionRequest ( struct FClientMeshBeaconConnection* NewClientConnection );
	void InitMeshBeaconHost ( );
};



// Class MMH7Game.H7ObjectListenable ( Property size: 1 iter: 2) 
// Class name index: 44500 
// 0x0010 (0x0070 - 0x0060)
class UH7ObjectListenable : public UObject
{
public:
	TArray< class UH7GFxListener* >                    mListener;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95116 ];

		return pClassPointer;
	};

	void DataChanged ( );
};



// Class MMH7Game.H7PickableGold ( Property size: 0 iter: 0) 
// Class name index: 44522 
// 0x0000 (0x0478 - 0x0478)
class AH7PickableGold : public AH7RandomResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95898 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7PickableResource ( Property size: 0 iter: 0) 
// Class name index: 44523 
// 0x0000 (0x0478 - 0x0478)
class AH7PickableResource : public AH7RandomResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95921 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7PopupManager ( Property size: 1 iter: 5) 
// Class name index: 44527 
// 0x0010 (0x0070 - 0x0060)
class UH7PopupManager : public UObject
{
public:
	TArray< class UH7GFxUIContainer* >                 mPopupList;                                       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96864 ];

		return pClassPointer;
	};

	class AH7Hud* GetHUD ( );
	bool IsPopupOpen ( );
	bool CloseUpperMostPopup ( );
	void OpenPopup ( class UH7GFxUIContainer* PopUp );
};



// Class MMH7Game.H7SeqEvent_GameEndPopupClosed ( Property size: 1 iter: 3) 
// Class name index: 44642 
// 0x0001 (0x0189 - 0x0188)
class UH7SeqEvent_GameEndPopupClosed : public UH7SeqEvent
{
public:
	unsigned char                                      mFinishCondition;                                 		// 0x0188 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97051 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventCheckH7SeqEventActivate ( class UH7EventParam* evtParam );
};



// Class MMH7Game.H7TownGrowthEnhancer ( Property size: 2 iter: 6) 
// Class name index: 44717 
// 0x000C (0x013C - 0x0130)
class UH7TownGrowthEnhancer : public UH7TownBuilding
{
public:
	class AH7Creature*                                 mCreatureType;                                    		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                mBonus;                                           		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 98018 ];

		return pClassPointer;
	};

	void SetBonus ( int bonus );
	int GetBonus ( );
	void SetCreatureType ( class AH7Creature* T );
	class AH7Creature* GetCreatureType ( );
};



// Class MMH7Game.H7ResourcePileSpawnable ( Property size: 0 iter: 0) 
// Class name index: 44554 
// 0x0000 (0x0440 - 0x0440)
class AH7ResourcePileSpawnable : public AH7ResourcePile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 98416 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7SceneCapture2DActor ( Property size: 0 iter: 1) 
// Class name index: 44611 
// 0x0000 (0x0248 - 0x0248)
class AH7SceneCapture2DActor : public ASceneCaptureActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99327 ];

		return pClassPointer;
	};

	class USceneCapture2DComponent* GetSceneCapture2DComponent ( );
};



// Class MMH7Game.H7SeqAct_AddHeroToHallOfHeroes ( Property size: 1 iter: 3) 
// Class name index: 44617 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_AddHeroToHallOfHeroes : public USequenceAction
{
public:
	class AH7EditorHero*                               mHeroToAdd;                                       		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99569 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_CameraProperty ( Property size: 1 iter: 3) 
// Class name index: 44618 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_CameraProperty : public USequenceAction
{
public:
	class UH7CameraProperties*                         mNewProperty;                                     		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99799 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_CastHeroAbility ( Property size: 3 iter: 5) 
// Class name index: 44619 
// 0x0020 (0x0174 - 0x0154)
class UH7SeqAct_CastHeroAbility : public USequenceAction
{
public:
	class AH7AdventureArmy*                            mInteractingHero;                                 		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7HeroAbility*                              mAbility;                                         		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UH7IEffectTargetable*                        mTarget;                                          		// 0x0164 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x016C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99806 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_CloseAllPopups ( Property size: 0 iter: 1) 
// Class name index: 44620 
// 0x0000 (0x0154 - 0x0154)
class UH7SeqAct_CloseAllPopups : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99952 ];

		return pClassPointer;
	};

	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_DisableTacticsPhase ( Property size: 1 iter: 3) 
// Class name index: 44621 
// 0x0004 (0x0158 - 0x0154)
class UH7SeqAct_DisableTacticsPhase : public USequenceAction
{
public:
	unsigned long                                      mFlag : 1;                                        		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99969 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_DoEndGameAction ( Property size: 0 iter: 2) 
// Class name index: 44622 
// 0x0000 (0x0154 - 0x0154)
class UH7SeqAct_DoEndGameAction : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99975 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_FadeToBlack ( Property size: 2 iter: 3) 
// Class name index: 44623 
// 0x0014 (0x0168 - 0x0154)
class UH7SeqAct_FadeToBlack : public USequenceAction
{
public:
	float                                              mDuration;                                        		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                mColor;                                           		// 0x0158 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99993 ];

		return pClassPointer;
	};

	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_GetCamera ( Property size: 1 iter: 3) 
// Class name index: 44624 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_GetCamera : public USequenceAction
{
public:
	class AH7Camera*                                   CurrentH7Camera;                                  		// 0x0154 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100058 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_GetSelectedArmy ( Property size: 1 iter: 3) 
// Class name index: 44625 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_GetSelectedArmy : public USequenceAction
{
public:
	class AH7AdventureArmy*                            currentArmy;                                      		// 0x0154 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100065 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_IntroHeroCameraAction ( Property size: 1 iter: 3) 
// Class name index: 44626 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_IntroHeroCameraAction : public USequenceAction
{
public:
	class AH7IntroduceHeroCameraAction*                mActionTemplate;                                  		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100126 ];

		return pClassPointer;
	};

	void OnActionCompleted ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_LoadBackground ( Property size: 6 iter: 7) 
// Class name index: 44627 
// 0x0024 (0x0178 - 0x0154)
class UH7SeqAct_LoadBackground : public USequenceAction
{
public:
	class UTexture2D*                                  background;                                       		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fadeInDelay;                                      		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ShowHUD : 1;                                      		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      HideHUD : 1;                                      		// 0x0164 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FString                                     screenText;                                       		// 0x0168 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100131 ];

		return pClassPointer;
	};

	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_LockCamera ( Property size: 0 iter: 2) 
// Class name index: 44628 
// 0x0000 (0x0154 - 0x0154)
class UH7SeqAct_LockCamera : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100140 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_PresentArmyCameraAction ( Property size: 1 iter: 2) 
// Class name index: 44629 
// 0x0008 (0x015C - 0x0154)
class UH7SeqAct_PresentArmyCameraAction : public USequenceAction
{
public:
	class AH7PresentArmyCameraAction*                  mActionTemplate;                                  		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100343 ];

		return pClassPointer;
	};

	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetAIPlayerStatus ( Property size: 2 iter: 4) 
// Class name index: 44630 
// 0x0002 (0x0156 - 0x0154)
class UH7SeqAct_SetAIPlayerStatus : public USequenceAction
{
public:
	unsigned char                                      mConditionPlayer;                                 		// 0x0154 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mNewStatus;                                       		// 0x0155 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100682 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetArmyFXVisibility ( Property size: 2 iter: 4) 
// Class name index: 44631 
// 0x000C (0x0160 - 0x0154)
class UH7SeqAct_SetArmyFXVisibility : public USequenceAction
{
public:
	unsigned long                                      mIsVisible : 1;                                   		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AH7AdventureArmy*                            mTargetArmy;                                      		// 0x0158 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100698 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetPlayerInputEnabled ( Property size: 2 iter: 4) 
// Class name index: 44632 
// 0x0004 (0x0158 - 0x0154)
class UH7SeqAct_SetPlayerInputEnabled : public USequenceAction
{
public:
	unsigned long                                      mIsPlayerInputEnabled : 1;                        		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      mIsGUIInputEnabled : 1;                           		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100752 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SetPlayerTeamNumber ( Property size: 2 iter: 4) 
// Class name index: 44633 
// 0x0002 (0x0156 - 0x0154)
class UH7SeqAct_SetPlayerTeamNumber : public USequenceAction
{
public:
	unsigned char                                      mPlayerTeamNumber;                                		// 0x0154 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      mOwner;                                           		// 0x0155 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100759 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SkipEndGameAction ( Property size: 0 iter: 2) 
// Class name index: 44634 
// 0x0000 (0x0154 - 0x0154)
class UH7SeqAct_SkipEndGameAction : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100903 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_SupressAutoSave ( Property size: 1 iter: 3) 
// Class name index: 44635 
// 0x0004 (0x0158 - 0x0154)
class UH7SeqAct_SupressAutoSave : public USequenceAction
{
public:
	unsigned long                                      mFlag : 1;                                        		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101015 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Activated ( );
};



// Class MMH7Game.H7SeqAct_ToggleFlythroughMode ( Property size: 3 iter: 5) 
// Class name index: 44636 
// 0x0004 (0x0158 - 0x0154)
class UH7SeqAct_ToggleFlythroughMode : public USequenceAction
{
public:
	unsigned long                                      bToggleHud : 1;                                   		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggleFog : 1;                                   		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bToggleCinematicView : 1;                         		// 0x0154 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101026 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqAct_UnlockCamera ( Property size: 0 iter: 2) 
// Class name index: 44637 
// 0x0000 (0x0154 - 0x0154)
class UH7SeqAct_UnlockCamera : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101060 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SeqCon_FinishedCampaigns ( Property size: 1 iter: 3) 
// Class name index: 44638 
// 0x0010 (0x0164 - 0x0154)
class UH7SeqCon_FinishedCampaigns : public UH7SeqCon_Condition
{
public:
	TArray< class UH7CampaignDefinition* >             mCampaigns;                                       		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101463 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool IsConditionFulfilled ( );
};



// Class MMH7Game.H7SeqCon_Objective ( Property size: 1 iter: 3) 
// Class name index: 44639 
// 0x0010 (0x0148 - 0x0138)
class UH7SeqCon_Objective : public USequenceCondition
{
public:
	struct FString                                     mDescription;                                     		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 102036 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class MMH7Game.H7SimTurnBaseCommand ( Property size: 2 iter: 16) 
// Class name index: 44658 
// 0x0010 (0x0070 - 0x0060)
class UH7SimTurnBaseCommand : public UObject
{
public:
	class UH7SimTurnCommandManager*                    mSimTurnCommandManager;                           		// 0x0060 (0x0008) [0x0000000000000000]              
	class AH7CombatPlayerController*                   mSender;                                          		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 102800 ];

		return pClassPointer;
	};

	bool HasThePathATeleporter ( TArray< class UH7BaseCell* > Path );
	bool IsAnyoneMovingAround ( struct FVector initialPos, struct FVector targetPos, unsigned long ignoreDistanceDetection );
	bool IsDoNormalCombat ( );
	struct FString GetDebugInfo ( );
	void UpdateTradeFinished ( class AH7AdventureHero* Target );
	bool IsRetreat ( int targetID );
	int GetTargetId ( );
	int GetSourceId ( );
	bool CancelCommandIfIlegal ( );
	void ExecuteCommand ( );
	bool CanBeExecuted ( );
	class AH7CombatPlayerController* GetSender ( );
	void SetSender ( class AH7CombatPlayerController* newSender );
	void SetSimTurnCommandManager ( class UH7SimTurnCommandManager* newManager );
};



// Class MMH7Game.H7SimTurnInstantCommand ( Property size: 2 iter: 12) 
// Class name index: 44660 
// 0x0048 (0x00B8 - 0x0070)
class UH7SimTurnInstantCommand : public UH7SimTurnBaseCommand
{
public:
	struct FMPInstantCommand                           mData;                                            		// 0x0070 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UH7InstantCommandBase*                       mCommand;                                         		// 0x00B0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 102978 ];

		return pClassPointer;
	};

	bool IsDoNormalCombat ( );
	struct FString GetDebugInfo ( );
	void UpdateTradeFinished ( class AH7AdventureHero* Target );
	bool IsRetreat ( int targetID );
	int GetTargetId ( );
	int GetSourceId ( );
	bool CancelCommandIfIlegal ( );
	bool CanBeExecuted ( );
	void ExecuteCommand ( );
	void SetCommand ( struct FMPInstantCommand NewCommand );
};



// Class MMH7Game.H7SimTurnNormalCommand ( Property size: 2 iter: 17) 
// Class name index: 44661 
// 0x0069 (0x00D9 - 0x0070)
class UH7SimTurnNormalCommand : public UH7SimTurnBaseCommand
{
public:
	struct FMPCommand                                  mCommand;                                         		// 0x0070 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      mState;                                           		// 0x00D8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 102979 ];

		return pClassPointer;
	};

	bool IsAttackArmyCommand ( );
	bool IsRetreat ( int targetID );
	void UpdateTradeFinished ( class AH7AdventureHero* Target );
	bool CancelMeetCommandIfIlegal ( );
	bool CancelVisitCommandIfIlegal ( );
	bool CancelMoveCommandIfIlegal ( );
	bool CancelCommandIfIlegal ( );
	bool CanBeExecuted ( );
	void ExecuteCommand ( );
	void SetCommand ( struct FMPCommand NewCommand );
	struct FString GetDebugInfo ( );
	void SetState ( unsigned char State );
	unsigned char GetState ( );
	int GetTargetId ( );
	int GetSourceId ( );
};



// Class MMH7Game.H7StartScreenController ( Property size: 6 iter: 10) 
// Class name index: 44683 
// 0x0030 (0x0250 - 0x0220)
class UH7StartScreenController : public UH7FlashMovieCntl
{
public:
	class UGFxObject*                                  MessageLabel;                                     		// 0x0220 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  PlayerText;                                       		// 0x0228 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  TitleText;                                        		// 0x0230 (0x0008) [0x0000000000000000]              
	class UGFxObject*                                  ClanText;                                         		// 0x0238 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              SaveButton;                                       		// 0x0240 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ExitButton;                                       		// 0x0248 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103808 ];

		return pClassPointer;
	};

	void CloseMovie ( struct FEventData Data );
	void SavePlayerData ( struct FEventData Data );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	bool Start ( unsigned long StartPaused );
};



// Class MMH7Game.H7TownCommerceBuilding ( Property size: 0 iter: 0) 
// Class name index: 44714 
// 0x0000 (0x0130 - 0x0130)
class UH7TownCommerceBuilding : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104387 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TownEmbassy ( Property size: 0 iter: 0) 
// Class name index: 44716 
// 0x0000 (0x0130 - 0x0130)
class UH7TownEmbassy : public UH7TownBuilding
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104442 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TownScreenLight ( Property size: 0 iter: 0) 
// Class name index: 44729 
// 0x0000 (0x024C - 0x024C)
class AH7TownScreenLight : public ASpotLightMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104793 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7TownSiloBuilding ( Property size: 2 iter: 7) 
// Class name index: 44730 
// 0x0028 (0x0158 - 0x0130)
class UH7TownSiloBuilding : public UH7TownBuilding
{
public:
	TArray< struct FH7ResourceProbability >            mResources;                                       		// 0x0130 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FH7ResourceQuantity                         currentResource;                                  		// 0x0140 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104960 ];

		return pClassPointer;
	};

	bool ShouldDisplayIncome ( );
	TArray< struct FH7ResourceQuantity > GetIncome ( );
	void DetermineResource ( );
	void OnBeginDay ( );
	void InitTownBuilding ( class AH7Town* Town );
};



// Class MMH7Game.H7TransitionActor ( Property size: 0 iter: 1) 
// Class name index: 44744 
// 0x0000 (0x0240 - 0x0240)
class AH7TransitionActor : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 105229 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};



// Class MMH7Game.H7UIDataStore_MenuItems ( Property size: 0 iter: 0) 
// Class name index: 44755 
// 0x0000 (0x00F0 - 0x00F0)
class UH7UIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 105419 ];

		return pClassPointer;
	};

};



// Class MMH7Game.H7WarUnitFX ( Property size: 2 iter: 5) 
// Class name index: 44766 
// 0x0010 (0x0274 - 0x0264)
class AH7WarUnitFX : public AH7UnitFX
{
public:
	class USkeletalMeshComponent*                      mMesh;                                            		// 0x0264 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      mAimingMesh;                                      		// 0x026C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 105958 ];

		return pClassPointer;
	};

	void CreateFX ( );
	void SetIsHovering ( unsigned long isHovering );
	void InitFX ( class AH7Unit* Unit );
};



// Class MMH7Game.SaveGameState_SeqEvent_SavedGameStateLoaded ( Property size: 0 iter: 0) 
// Class name index: 54632 
// 0x0000 (0x0178 - 0x0178)
class USaveGameState_SeqEvent_SavedGameStateLoaded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 106257 ];

		return pClassPointer;
	};

};



// Class MMH7Game.SaveGameTransition ( Property size: 2 iter: 3) 
// Class name index: 54634 
// 0x0020 (0x0080 - 0x0060)
class USaveGameTransition : public UObject
{
public:
	struct FString                                     PersistentMapFileName;                            		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UJsonObject* >                       SerializedHeroes;                                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 106267 ];

		return pClassPointer;
	};

	void Save ( );
};




#ifdef _MSC_VER
	#pragma pack ( pop )
#endif