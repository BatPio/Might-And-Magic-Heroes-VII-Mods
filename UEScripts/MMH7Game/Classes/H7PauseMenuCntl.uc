//=============================================================================
// H7GameMenuCntl
// Copyright 2002-2015 Limbic Entertainment All Rights Reserved.
//=============================================================================
class H7PauseMenuCntl extends H7FlashMovieBlockPopupCntl implements (H7IQueueable)
	dependson(H7KeybindManager);

var protected H7GFxPauseMenu mPauseMenu;
var protected H7GFxMapResultPopUp mMapResultPopUp;

var protected GFxCLIKWidget mResume;
var protected GFxCLIKWidget mLoad;
var protected GFxCLIKWidget mSave;
var protected GFxCLIKWidget mQuit;
var protected GFxCLIKWidget mUplay;
var protected GFxCLIKWidget mRestart;
var protected GFxCLIKWidget mOptions;

var protected array<KeyBind>    mTempKeyBinds; // when a window is open
var protected array<KeyBind>    mRestoreKeyBinds; // when window is closed (autogenerated)

var protected H7GFxUIContainer mCurrentPopup;

var protected H7DifficultyParameters mSelectedDifficulty;
var protected bool mCustomDifficultyPopUpVisible;

static function H7PauseMenuCntl GetInstance() { return class'H7PlayerController'.static.GetPlayerController().GetHUD().GetPauseMenuCntl(); }

function    H7GFxUIContainer        GetPopup()          { if(mCurrentPopup!=none) return mCurrentPopup; else return mPauseMenu; }
function    H7GFxPauseMenu          GetPauseMenu()      { return mPauseMenu; }
function    H7GFxMapResultPopUp     GetMapResultPopUp() { return mMapResultPopUp; }
function    bool                    IsOpen()            { return mPauseMenu.IsVisible() || mMapResultPopUp.IsVisible(); }
function    bool                    CustomDifficultyPopUpOpen(){return mCustomDifficultyPopUpVisible;}

function bool Initialize() 
{
	;
	// Start playing the movie
    Super.Start();
	// Initialize all objects in the movie
    AdvanceDebug(0);

	mPauseMenu = H7GFxPauseMenu(mRootMC.GetObject("aGameMenu", class'H7GFxPauseMenu'));
	mPauseMenu.SetVisibleSave(false);
	
	mMapResultPopUp = H7GFxMapResultPopUp(mRootMC.GetObject("aMapResultPopUp", class'H7GFxMapResultPopUp'));
	mMapResultPopUp.SetVisibleSave(false);

	mResume = GFxCLIKWidget(mPauseMenu.GetObject("mResume", class'GFxCLIKWidget'));
	mResume.AddEventListener('CLIK_click', ResumeButtonClick);
	
	mLoad = GFxCLIKWidget(mPauseMenu.GetObject("mLoad", class'GFxCLIKWidget'));
	mLoad.AddEventListener('CLIK_click', LoadButtonClick);
	
	mSave = GFxCLIKWidget(mPauseMenu.GetObject("mSave", class'GFxCLIKWidget'));
	mSave.AddEventListener('CLIK_click', SaveButtonClick);
	
	mOptions = GFxCLIKWidget(mPauseMenu.GetObject("mOptions", class'GFxCLIKWidget'));
	mOptions.AddEventListener('CLIK_click', OptionButtonClick);

	mRestart = GFxCLIKWidget(mPauseMenu.GetObject("mRestart", class'GFxCLIKWidget'));
	mRestart.AddEventListener('CLIK_click', RestartButtonClick);

	mQuit = GFxCLIKWidget(mPauseMenu.GetObject("mQuit", class'GFxCLIKWidget'));
	mQuit.AddEventListener('CLIK_click', QuitButtonClick);

	mKeybindCategory = KC_WINDOW_GAME_MENU;

	Super.Initialize();

	return true; 
}

function InitWindowKeyBinds()
{
	CreatePopupKeybind('Escape',"ShowGameMenu",ResumeKeyPressed);
	CreatePopupKeybind('L',"LoadGame",LoadGameKeyPressed);
	CreatePopupKeybind('S',"SaveGame",SaveGameKeyPressed);
	CreatePopupKeybind('O',"Options",OptionsKeyPressed);
	CreatePopupKeybind('R',"Restart",RestartMapKeyPressed);
	CreatePopupKeybind('Q',"QuitGame",QuitGameKeyPressed);
	
	super.InitWindowKeyBinds();
}


function bool OpenPopup()
{
	local bool success;
	//local bool isGameEnd;

	if( class'H7CameraActionController'.static.GetInstance().GetCurrentAction() != none )
		return false;

	if(class'H7PlayerController'.static.GetPlayerController() != none && class'H7PlayerController'.static.GetPlayerController().IsInLoadingScreen()) 
		return false;

	;
	mCurrentPopup = mPauseMenu;
	success = super.OpenPopup();
		
	class'H7GUISoundPlayer'.static.GetInstance().PlaySoundStr("POP_UP_OPEN_SOUND");
	//ActivateWindowKeyBinds();
	GetPauseMenu().UpdateLoca();
	GetPauseMenu().UpdateButtonStatesNew( CanResume(), CanLoad(), CanSave(), CanOption(), CanRestart(), CanQuit() );
	GetPauseMenu().UpdateButtonCaptions( class'H7ReplicationInfo'.static.GetInstance().IsCombatMap()?"GM_RESTART_COMBAT":"GM_RESTART" );
	class'H7PlayerController'.static.GetPlayerController().SetPause(true);

	return success;
}

function bool IsHost()
{
	if(class'H7AdventureController'.static.GetInstance() != none)
	{
		return class'H7PlayerController'.static.GetPlayerController().IsServer() && class'H7AdventureController'.static.GetInstance().GetCurrentPlayer().IsControlledByLocalPlayer();
	}
	else
	{
		return class'H7PlayerController'.static.GetPlayerController().IsServer() && class'H7CombatController'.static.GetInstance().GetActiveUnit().GetPlayer().IsControlledByLocalPlayer();
	}
}

function ClosePopup()
{
	;
	if(mMapResultPopUp.IsVisible())
	{
		class'H7GUISoundPlayer'.static.GetInstance().PlaySoundStr("STOP_MAP_RESULT_JINGLE");
	}

	super.ClosePopup();

	mCustomDifficultyPopUpVisible = false;

	class'H7GUISoundPlayer'.static.GetInstance().PlaySoundStr("POP_UP_CLOSE_SOUND");
	//DeactivateWindowKeyBinds();
	class'H7PlayerController'.static.GetPlayerController().SetPause(false);
}

function bool CanBeStopped()
{
	local bool val;
	val = super.CanBeStopped();
	return val;
}

//////////////////RESULT_SCREEN/////////////////////////

function UpdateResultPopUpWin()
{
	local H7PopupParameters params;

	mCurrentPopup = mMapResultPopUp;
	if(!super.OpenPopup())
	{
		params.paramBool1 = true;
		PutPopupIntoQueue(params, class'H7AdventureController'.static.GetInstance().GetLocalPlayer().GetPlayerNumber());
		return;
	}

	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(true);
	}

	mCurrentPopup = mMapResultPopUp;
	
	mMapResultPopUp.Update(true);

	if(class'H7AdventureController'.static.GetInstance().GetCampaign() != none)
	{
		mSelectedDifficulty = class'H7PlayerProfile'.static.GetInstance().GetSelectedDifficulty();
	}
	else
	{
		mSelectedDifficulty = class'H7TransitionData'.static.GetInstance().GetGameSettings().mDifficultyParameters;
	}

	super.OpenPopup();
}

function UpdateResultPopUpLose(bool isEndOfGame)
{
	local H7PopupParameters params;

	mCurrentPopup = mMapResultPopUp;
	if(!super.OpenPopup())
	{
		params.paramBool1 = false;
		params.paramBool2 = isEndOfGame;
		PutPopupIntoQueue(params, class'H7AdventureController'.static.GetInstance().GetLocalPlayer().GetPlayerNumber());
		return;
	}

	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(true);
	}

	mMapResultPopUp.Update(false, isEndOfGame);

	if(class'H7AdventureController'.static.GetInstance().GetCampaign() != none)
	{
		mSelectedDifficulty = class'H7PlayerProfile'.static.GetInstance().GetSelectedDifficulty();
	}
	else
	{
		mSelectedDifficulty = class'H7TransitionData'.static.GetInstance().GetGameSettings().mDifficultyParameters;
	}
	
	super.OpenPopup();
}

function OpenPopupFromQueue(H7PopupParameters params)
{
	if(params.paramBool1)
		UpdateResultPopUpWin();
	else
		UpdateResultPopUpLose(params.paramBool2);
}

function ReOpenLastPopup()
{
	super.OpenPopup();
}

// unreal has to generate list of possible entries for 1 specific drop down field
function array<H7DropDownEntry> GetEnumList(string enumName,optional int playerIndex)
{
	;

	switch(enumName)
	{
		case "EDifficulty":
			return GetEnumListByObject(DIFFICULTY_MAX,Enum'EDifficulty');
		break;
		// custom difficulty
		case "EDifficultyStartResources":
			return GetEnumListByObject(DSR_MAX,Enum'EDifficultyStartResources');
		case "EDifficultyCritterStartSize":
			return GetEnumListByObject(DCSS_MAX,Enum'EDifficultyCritterStartSize'); 
		case "EDifficultyCritterGrowthRate":
			return GetEnumListByObject(DCGR_MAX,Enum'EDifficultyCritterGrowthRate'); 
		case "EDifficultyAIEcoStrength":
			return GetEnumListByObject(DAIES_MAX,Enum'EDifficultyAIEcoStrength');
	}
}

function array<H7DropDownEntry> GetEnumListByObject(int enumMax,Object enumObject) 
{
	local H7DropDownEntry entry;
	local array<H7DropDownEntry> list;
	local int i;
	local Name enumName;

	for(i=0;i<enumMax;i++)
	{
		enumName = GetEnum(enumObject, i);
		entry.Caption = String(enumName);
		entry.Data = i;
		list.AddItem(entry);
	}
	return list;
}

//called from AS
function SetCustomDifficultyVisible(bool visible)
{
	mCustomDifficultyPopUpVisible = visible;
}

function CloseCustomDifficultyPopUp()
{
	mMapResultPopUp.CloseCustomDifficultyPopUp();
}

function SetCustomDifficulty(string enumName,int value)
{
	switch(enumName)
	{
		case "EDifficultyStartResources":
			mSelectedDifficulty.mStartResources = EDifficultyStartResources(value);
			break;
		case "EDifficultyCritterStartSize":
			mSelectedDifficulty.mCritterStartSize = EDifficultyCritterStartSize(value);
			break;
		case "EDifficultyCritterGrowthRate":
			mSelectedDifficulty.mCritterGrowthRate = EDifficultyCritterGrowthRate(value);
			break;
		case "EDifficultyAIEcoStrength":
			mSelectedDifficulty.mAiEcoStrength = EDifficultyAIEcoStrength(value);
			break;
	}
}

function ApplySettings()
{
	//apply the new setting to the transitionData or whatever here
	local H7LobbyDataGameSettings gameSettings;

	if(class'H7AdventureController'.static.GetInstance().GetCampaign() != none)
	{
		class'H7PlayerProfile'.static.GetInstance().SetSelectedDifficulty(mSelectedDifficulty);
	}
	else
	{
		gameSettings = class'H7TransitionData'.static.GetInstance().GetGameSettings();
		gameSettings.mDifficulty = class'H7PlayerProfile'.static.GetInstance().GetDifficulty(mSelectedDifficulty);
		gameSettings.mDifficultyParameters = mSelectedDifficulty;

		class'H7TransitionData'.static.GetInstance().SetGameSettings(gameSettings);
	}
}

function PlayAgain()
{
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(false);
	}
	;
	class'H7AdventureController'.static.GetInstance().GetLocalPlayer().GetQuestController().DoEndGameAction(EGA_RESTART_MAP);
	ClosePopup();
}

function GotoMainMenuConfirm()
{
	GotoMainMenu(true);
}

function GotoMainMenu(optional bool confirm=false)
{
	if(!confirm && class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() && class'H7PlayerController'.static.GetPlayerController().IsServer())
	{
		class'H7RequestPopupCntl'.static.GetInstance().GetRequestPopup().YesNoPopup("PU_QUIT_HOST","PU_QUIT_MAP_MAINMENU","CANCEL",GotoMainMenuConfirm,none,true);
		return;
	}
	
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(false);
	}
	;
	class'H7AdventureController'.static.GetInstance().GetLocalPlayer().GetQuestController().DoEndGameAction(EGA_MAINMENU);
	class'H7TransitionData'.static.GetInstance().SetIsReplayCombat(false);
	ClosePopup();
}
		
function GotoCouncilHub()
{
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(false);
	}
	;
	class'H7AdventureController'.static.GetInstance().GetLocalPlayer().GetQuestController().DoEndGameAction(EGA_COUNCIL);
	class'H7TransitionData'.static.GetInstance().SetIsReplayCombat(false);
	class'H7TransitionData'.static.GetInstance().SetPendingCouncilState(CS_CouncilView);
	ClosePopup();
}
		
function NextMap()
{
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(false);
	}
	;
	class'H7AdventureController'.static.GetInstance().GetLocalPlayer().GetQuestController().DoEndGameAction(EGA_NEXT_MAP);
	ClosePopup();
}
		
function LoadSavegame()
{
	;
	ClosePopup(); // this has to be first, so that loadwindow can open after it
	class'H7AdventureController'.static.GetInstance().GetLocalPlayer().GetQuestController().DoEndGameAction(EGA_LOAD_GAME);
	class'H7TransitionData'.static.GetInstance().SetIsReplayCombat(false);
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(true);
	}
}
		
function Specator()
{
	class'H7AdventureController'.static.GetInstance().GetLocalPlayer().BecomeObserver();
	ClosePopup();
	if(class'H7AdventureController'.static.GetInstance().IsHotSeat())
		class'H7AdventureController'.static.GetInstance().EndMyTurn();
}

//////////////////RESULT_SCREEN/////////////////////////

// functionality

function OpenSaveMenu()
{
	if(!CanSave()) return;

	ClosePopup();
	GetHUD().GetLoadSaveWindowCntl().OpenSave();
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(true);
	}
}

function OpenLoadMenu()
{
	if(!CanLoad()) return;

	ClosePopup();
	GetHUD().GetLoadSaveWindowCntl().OpenLoad();
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(true);
	}
}

function OpenOptionMenu()
{
	if(!CanOption()) return;

	ClosePopup();
	GetHUD().GetOptionsMenuCntl().OpenPopup();
	if( !class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() )
	{
		class'H7PlayerController'.static.GetPlayerController().SetPause(true);
	}
}

function QuitGame()
{
	local string question;

	if(!CanQuit()) return;

	question = class'H7Loca'.static.LocalizeSave("PU_QUIT_MAP","H7PopUp");
	
	if(class'H7ReplicationInfo'.static.GetInstance().IsMultiplayerGame() && class'H7PlayerController'.static.GetPlayerController().IsServer())
	{
		question = question $ "\n\n" $ class'H7Loca'.static.LocalizeSave("PU_QUIT_HOST","H7PopUp");
	}

	class'H7RequestPopupCntl'.static.GetInstance().GetRequestPopup().YesNoPopup(question,"PU_QUIT_MAP_DESKTOP","PU_QUIT_MAP_MAINMENU",QuitToDesktop,QuitToMainMenu,true);

	if(class'Engine'.static.GetCurrentWorldInfo().IsPlayInPreview()) 
	{
		class'H7RequestPopupCntl'.static.GetInstance().GetRequestPopup().SetNoButtonState(false,"You are playing in preview mode");
	}

}

function RestartMap()
{
	if(!CanRestart()) return;

	class'H7RequestPopupCntl'.static.GetInstance().GetRequestPopup().YesNoPopup(
		class'H7ReplicationInfo'.static.GetInstance().IsCombatMap()?"PU_RESTART_COMBAT":"PU_RESTART_MAP","YES","NO",RestartConfirm,none,true
	);
}

function RestartConfirm()
{
	local H7AdventureController advCntl;
	local H7ReplicationInfo repInfo;
	local string prevMap;

	advCntl = class'H7AdventureController'.static.GetInstance();
	repInfo = class'H7ReplicationInfo'.static.GetInstance();

	if( repInfo.IsMultiplayerGame() )
	{
		return;
	}
	
	if( advCntl != none && repInfo.IsCombatMap() ) // ADV COMBAT
	{
		class'H7CombatController'.static.GetInstance().EndBattle(true);
		class'H7CombatPopUpCntl'.static.GetInstance().BtnStartCombatClicked();
	}
	else if( repInfo.IsCombatMap() ) // DUEL
	{
		class'H7CombatController'.static.GetInstance().TrackingMapEnd("RESTART");
		prevMap = class'H7TransitionData'.static.GetInstance().GetPreviousMapName();
		if( Caps(prevMap) == Caps(class'H7GameData'.static.GetInstance().GetHubMapName()) )
		{
			class'H7TransitionData'.static.GetInstance().SetUseMe( true );
		}
		repInfo.StartMap( repInfo.GetCurrentMapName() );
		if( prevMap == class'H7GameData'.static.GetInstance().GetHubMapName() )
		{
			class'H7TransitionData'.static.GetInstance().SetPreviousMapName( prevMap );
		}
	}
	else if( advCntl != none && repInfo.IsAdventureMap() ) // ADV MAP
	{
		advCntl.TrackingMapEnd("RESTART");
		if(advCntl.GetCampaign() != none)
		{
			class'H7PlayerProfile'.static.GetInstance().HandleCampaignMapRestart(advCntl.GetMapFileName(), advCntl.GetCampaign());
		}
		else
		{
			repInfo.WriteGameDataToTransitionData();
			repInfo.StartMap( repInfo.GetCurrentMapName() );
		}
		

		//Reset Music Variables to ensure no resume event is triggered
		class'H7SoundController'.static.GetInstance().ResetMusicVariables();
	}
}

function QuitToDesktop()
{
	/** TRACKING  */
	if( class'H7AdventureController'.static.GetInstance() != none )
	{
		class'H7AdventureController'.static.GetInstance().TrackingMapEnd("QUIT");
		class'H7AdventureController'.static.GetInstance().TrackingGameModeEnd();
	}
	else 
	{
		class'H7CombatController'.static.GetInstance().TrackingMapEnd("QUIT");
		class'H7CombatController'.static.GetInstance().TrackingGameModeEnd();
	}

	
	class'H7SoundController'.static.GetInstance().UpdateMusicGameStateSwitch("STOP_ALL_MUSIC");
	ConsoleCommand("quit");
}

function QuitToMainMenu()
{
	class'H7TransitionData'.static.GetInstance().SetIsReplayCombat(false);

	/** TRACKING  */
	if( class'H7AdventureController'.static.GetInstance() != none )
	{
		class'H7AdventureController'.static.GetInstance().TrackingMapEnd("QUIT_MAINMENU");
		class'H7AdventureController'.static.GetInstance().TrackingGameModeEnd();
	}
	else 
	{
		class'H7CombatController'.static.GetInstance().TrackingMapEnd("QUIT_MAINMENU");
		class'H7CombatController'.static.GetInstance().TrackingGameModeEnd();
	}

	class'H7ReplicationInfo'.static.GetInstance().GoToMainMenu();

	// OPTIONAL if campaign -> councilroom
}

function ResumeGame()
{
	if(!CanResume()) return;

	ClosePopup();
}

// checks
function bool CanResume()
{
	return true;
}
function bool CanLoad()
{
	return !class'WorldInfo'.static.GetWorldInfo().GRI.IsMultiplayerGame();
}
function bool CanSave()
{
	return IsHost() && class'H7ReplicationInfo'.static.GetInstance().IsAdventureMap() && !class'H7ReplicationInfo'.static.GetInstance().mIsTutorial;
}
function bool CanOption()
{
	return true;
}
function bool CanRestart()
{
	local bool canRestart;

	canRestart = !class'H7ReplicationInfo'.static.GetInstance().GetCommandQueue().IsCommandRunningForAnyPlayer();
	canRestart = canRestart && !class'WorldInfo'.static.GetWorldInfo().GRI.IsMultiplayerGame();

	if(class'H7ReplicationInfo'.static.GetInstance().IsCombatMap() && class'H7CombatHudCntl'.static.GetInstance().IsWaitingForOtherPlayer())
	{
		canRestart = false; // because restart during AI turn crashes (and we had no time to fix the crash?)
	}
	return canRestart;
}
function bool CanQuit()
{
	if(class'Engine'.static.GetCurrentWorldInfo().IsPlayInEditor()) return false;
	
	return true;
}


// clicks
function ResumeButtonClick(EventData data)  {	ClosePopup();       }
function LoadButtonClick(EventData data)    {	OpenLoadMenu();     }
function SaveButtonClick(EventData data)    {	OpenSaveMenu();     }
function OptionButtonClick(EventData data)  {	OpenOptionMenu();   }
function QuitButtonClick(EventData data)    {	QuitGame();         }
function RestartButtonClick(EventData data) {   RestartMap();       }
function UplayButtonClick(EventData data)   {   OnlineSubsystemUPlay(class'GameEngine'.static.GetOnlineSubsystem()).ShowUPlayOverlay();       }

// keys
function ResumeKeyPressed()     { if(mCurrentPopup == mPauseMenu) ClosePopup();       }
function LoadGameKeyPressed()   { if(mCurrentPopup == mPauseMenu) OpenLoadMenu();     }
function OptionsKeyPressed()    { if(mCurrentPopup == mPauseMenu) OpenOptionMenu();   }
function QuitGameKeyPressed()   { if(mCurrentPopup == mPauseMenu) QuitGame();         }
function SaveGameKeyPressed()   { if(mCurrentPopup == mPauseMenu) OpenSaveMenu();     }
function RestartMapKeyPressed() { if(mCurrentPopup == mPauseMenu) RestartMap();       }

